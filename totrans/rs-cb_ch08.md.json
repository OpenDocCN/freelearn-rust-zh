["```rs\n cargo new --bin rust-to-c\n\n```", "```rs\n cd rust-to-c\n\n```", "```rs\n sudo apt-get install gcc\n\n```", "```rs\n        //-- #########################\n        //-- Task: Build script\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 14 April 17\n        //-- #########################\n\n```", "```rs\n        extern crate gcc;\n\n        fn main() {\n          gcc::Config::new().file(\"src/double.c\")\n          .compile(\"libdouble.a\");\n        }\n\n```", "```rs\n cd src\n\n```", "```rs\n touch double.c\n\n```", "```rs\n        int double_input(int input) {\n          return input * 2;\n        }\n\n```", "```rs\n        extern crate libc;\n\n        extern {\n          fn double_input(input: libc::c_int) -> libc::c_int;\n        }\n\n        fn main() {\n          let input = 4;\n          let output = unsafe { double_input(input) };\n          println!(\"{} * 2 = {}\", input, output);\n        }\n\n```", "```rs\n cargo new c-to-rust\n\n```", "```rs\n cd c_to_rust\n\n```", "```rs\n sudo apt-get update && apt-get install build-essential\n\n```", "```rs\n        //-- #########################\n        //-- Task: Rust Function for \n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 14 April 17\n        //-- #########################\n\n```", "```rs\n        #![crate_type = \"staticlib\"]\n\n        #[no_mangle]\n        pub extern fn double_input(input: i32) -> i32 {\n        input * 2\n        }\n\n```", "```rs\n        #include <stdint.h>\n        #include <stdio.h>\n\n        extern int32_t double_input(int32_t input);\n\n        int main() {\n        int input = 4;\n        int output = double_input(input);\n        printf(\"%d * 2 = %d\\n\", input, output);\n        return 0;\n        }\n\n```", "```rs\n        ifeq ($(shell uname),Darwin)\n        LDFLAGS := -Wl,-dead_strip\n        else\n        LDFLAGS := -Wl,--gc-sections -lpthread\n        endif\n\n        all: target/double\n        target/double\n\n        target:\n        mkdir -p $@\n\n        target/double: target/main.o\n        target/debug/libdouble_input.a\n        $(CC) -o $@ $^ $(LDFLAGS)\n\n        target/debug/libdouble_input.a: src/lib.rs Cargo.toml\n        cargo build\n\n        target/main.o: src/main.c | target\n        $(CC) -o $@ -c $<\n\n        clean:\n        rm -rf target\n\n```", "```rs\n cargo new node-to-rust\n\n```", "```rs\n cd node_to_rust\n\n```", "```rs\n sudo apt-get update\n curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n sudo apt-get install npm\n sudo apt-get install nodejs\n\n```", "```rs\n        //-- #########################\n        //-- Task: Rust Function for Js\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 14 April 17\n        //-- #########################\n\n```", "```rs\n        #[no_mangle]\n        pub extern fn double_input(input: i32) -> i32 {\n          input * 2\n        }\n\n```", "```rs\n        var ffi = require('ffi');\n\n        var lib = ffi.Library('target/debug/libdouble_input', {\n        'double_input': [ 'int', [ 'int' ] ]\n        });\n\n        var input = 4;\n        var output = lib.double_input(input);\n        console.log(input + \" * 2 = \" + output);\n\n```", "```rs\n        ifeq ($(shell uname),Darwin)\n        EXT := dylib\n        else\n        EXT := so\n        endif\n\n        all: target/debug/libdouble_input.$(EXT)\n        node_modules/ffi\n        node src/main.js\n\n        target/debug/libdouble_input.$(EXT): src/lib.rs\n        Cargo.toml\n        cargo build\n\n        node_modules/ffi:\n        npm install ffi\n\n        clean:\n        rm -rf target\n        rm -rf node_modules\n\n```", "```rs\n cargo new python-to-rust\n\n```", "```rs\n cd python-to-rust\n\n```", "```rs\n sudo apt-get update \n sudo apt-get -y upgrade\n\n```", "```rs\n        //-- #########################\n        //-- Task: Rust Function for python\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 14 April 17\n        //-- #########################\n\n```", "```rs\n        #[no_mangle]\n        pub extern fn double_input(input: i32) -> i32 {\n          input * 2\n        }\n\n```", "```rs\n        from ctypes import cdll\n        from sys import platform\n        if platform == 'darwin':\n            prefix = 'lib'\n            ext = 'dylib'\n        elif platform == 'win32':\n            prefix = ''\n            ext = 'dll'\n        else:\n            prefix = 'lib'\n            ext = 'so'\n        lib = cdll.LoadLibrary('target/debug/{}double_input\n        .{}'.format(prefix, ext))\n        double_input = lib.double_input\n        input = 4\n        output = double_input(input)\n        print('{} * 2 = {}'.format(input, output))\n\n```", "```rs\n        ifeq ($(shell uname),Darwin)\n        EXT := dylib\n        else\n        EXT := so\n        endif\n\n        all: target/debug/libdouble_input.$(EXT)\n        python src/main.py\n\n        target/debug/libdouble_input.$(EXT): src/lib.rs\n        Cargo.toml\n        cargo build\n\n        clean:\n        rm -rf target\n\n```", "```rs\n cargo new python-rust-library\n\n```", "```rs\n cd python-rust-library\n\n```", "```rs\n sudo apt-get update \n sudo apt-get -y upgrade\n      sudo apt-get install python-pip python-dev build-essential\n\n```", "```rs\n        //-- #########################\n        //-- Task: Rust-python module\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 14 April 17\n        //-- #########################\n\n```", "```rs\n        #[macro_use] extern crate cpython;\n\n        use cpython::{Python, PyResult};\n\n```", "```rs\n        fn fibo(py: Python, n : u64) -> PyResult<u64> {\n          if n < 2 {\n            return Ok(1)\n          }\n          let mut prev1 = 1;\n          let mut prev2 = 1;\n          for _ in 1..n {\n            let new = prev1 + prev2;\n            prev2 = prev1;\n            prev1 = new;\n          }\n          Ok(prev1) \n        }\n\n```", "```rs\n        // To build a Python compatible module we need an\n        intialiser which expose the public interface\n        py_module_initializer!(example, initexample,\n        PyInit_example, |py, m| {\n        // Expose the function fibo as `extern \"C\"`\n        try!(m.add(py, \"fibo\", py_fn!(py, fibo(rand_int:\n        u64))));\n\n        // Initialiser's macro needs a Result<> as return value\n        Ok(())\n        });\n\n```", "```rs\n        import example\n\n        # Running the Rust module\n        print(example.fibo(4))\n\n```", "```rs\n        all: run\n\n        build:\n        cargo build --release\n        cp ./target/release/libexample.so ./example.so\n\n        run: build\n        python test.py\n\n        clean:\n        cargo clean\n        rm ./example.so\n\n```"]