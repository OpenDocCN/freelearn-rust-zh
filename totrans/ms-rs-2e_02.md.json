["```rs\n// mod_within.rs\n\nmod food {\n    struct Cake;\n    struct Smoothie;\n    struct Pizza;\n}\n\nfn main() {\n    let eatable = Cake;\n}\n```", "```rs\n// mod_within.rs\n\nmod food {\n    struct Cake;\n    struct Smoothie;\n    struct Pizza;\n}\n\nuse food::Cake;\n\nfn main() {\n    let eatable = Cake;\n}\n```", "```rs\n// mod_within.rs\n\nmod food {\n    pub struct Cake;\n    struct Smoothie;\n    struct Pizza;\n}\n\nuse food::Cake;\n\nfn main() {\n    let eatable = Cake;\n}\n```", "```rs\n+ modules_demo\n└── foo.rs\n└── main.rs\n```", "```rs\n// modules_demo/foo.rs\n\npub struct Bar;\n\nimpl Bar {\n    pub fn init() {\n        println!(\"Bar type initialized\");\n    }\n}\n```", "```rs\n// modules_demo/main.rs\n\nmod foo;\n\nuse crate::foo::Bar;\n\nfn main() {\n    let _bar = Bar::init();\n}\n```", "```rs\n+ my_program\n└── foo/\n    └── bar.rs\n└── foo.rs\n└── main.rs\n```", "```rs\n// my_program/foo/bar.rs\n\npub struct Bar;\n\nimpl Bar {\n    pub fn hello() {\n        println!(\"Hello from Bar !\");\n    }\n}\n```", "```rs\n// my_program/foo.rs\n\nmod bar;\npub use self::bar::Bar;\n\npub fn do_foo() {\n    println!(\"Hi from foo!\");\n}\n```", "```rs\n// my_program/main.rs\n\nmod foo;\n\nuse foo::Bar;\n\nfn main() {\n    foo::do_foo();\n    Bar::hello();\n}\n```", "```rs\n[package]\nname = \"imgtool\"\nversion = \"0.1.0\"\nauthors = [\"creativcoders@gmail.com\"]\nedition = \"2018\"\n\n[dependencies]  \n```", "```rs\n// myexponent/src/lib.rs\n\nfn pow(base: i64, exponent: usize) > i64 { \n    unimplemented!();\n} \n\n#[cfg(test)] \nmod tests { \n    use super::pow; \n    #[test] \n    fn minus_two_raised_three_is_minus_eight() { \n        assert_eq!(pow(-2, 3), -8); \n    }\n}\n```", "```rs\n// myexponent/src/lib.rs\n\npub fn pow(base: i64, exponent: usize) -> i64 {\n    let mut res = 1;\n    if exponent == 0 {\n        return 1;\n    }\n    for _ in 0..exponent {\n        res *= base as i64;\n    }\n    res\n}\n```", "```rs\n// myexponent/examples/basic.rs\n\nuse myexponent::pow;\n\nfn main() {\n    println!(\"8 raised to 2 is {}\", pow(8, 2));\n}\n```", "```rs\nmkdir workspace_demo\ncd workspace_demo && touch Cargo.toml\n```", "```rs\n# worspace_demo/Cargo.toml\n\n[workspace]\nmembers = [\"my_crate\", \"app\"]\n```", "```rs\n// workspace_demo/my_crate/lib.rs\n\npub fn greet() {\n    println!(\"Hi from my_crate\");\n}\n```", "```rs\n// workspace_demo/app/main.rs\n\nfn main() {\n    my_crate::greet();\n}\n```", "```rs\n# workspace_demo/app/Cargo.toml\n\n[package]\nname = \"app\"\nversion = \"0.1.0\"\nauthors = [\"creativcoder\"]\nedition = \"2018\"\n\n[dependencies]\nmy_crate = { path = \"../my_crate\" }\n```", "```rs\n// myexponent/src/lib.rs\n\nfn pow(base: i64, exponent: usize) -> i64 {\n    /////////////////// Dummy code for clippy demo\n    let x = true;\n    if x == true {\n\n    }\n    ///////////////////\n    let mut res = 1;\n    ...\n}\n```", "```rs\n# cargo_manifest_example/Cargo.toml\n# We can write comments with `#` within a manifest file\n\n[package]\nname = \"cargo-metadata-example\"\nversion = \"1.2.3\"\ndescription = \"An example of Cargo metadata\"\ndocumentation = \"https://docs.rs/dummy_crate\"\nlicense = \"MIT\"\nreadme = \"README.md\"\nkeywords = [\"example\", \"cargo\", \"mastering\"]\nauthors = [\"Jack Daniels <jack@danie.ls>\", \"Iddie Ezzard <iddie@ezzy>\"]\nbuild = \"build.rs\"\nedition = \"2018\"\n\n[package.metadata.settings]\ndefault-data-path = \"/var/lib/example\"\n\n[features]\ndefault=[\"mysql\"]\n\n[build-dependencies]\nsyntex = \"^0.58\"\n\n[dependencies]\nserde = \"1.0\"\nserde_json = \"1.0\"\ntime = { git = \"https://github.com/rust-lang/time\", branch = \"master\" }\nmysql = { version = \"1.2\", optional = true }\nsqlite = { version = \"2.5\", optional = true }\n```", "```rs\nserde = \"1.0\" \n```", "```rs\nsyntex = \"^0.58\" \n```", "```rs\ntime = { git = \"https://github.com/rust-lang/time\", branch = \"master\" } \n```", "```rs\nmysql = { version = \"1.2\", optional = true } \nsqlite = { version = \"2.5\", optional = true } \n```", "```rs\n default = [\"mysql\"] \n```", "```rs\ncd imgtool\ncode .            # opens the current directory in vscode\n```", "```rs\n[package]\nname = \"imgtool\"\nversion = \"0.1.0\"\nauthors = [\"creativcoder\"]\nedition = \"2018\"\n\n[dependencies]\nimage = \"0.19.0\"\n```", "```rs\n// imgtool/src/main.rs\n\nuse std::env;\nuse std::path::Path;\n\nfn main() {\n    let image_path = env::args().skip(1).next().unwrap();\n    let path = Path::new(&image_path);\n}\n```", "```rs\n// imgtool/src/main.rs\n\nuse std::env;\nuse std::path::Path;\n\nfn main() {\n    let image_path = env::args().skip(1).next().unwrap();\n    let path = Path::new(&image_path);\n    let img = image::open(path).unwrap();\n    let rotated = img.rotate90();\n    rotated.save(path).unwrap();\n}\n```"]