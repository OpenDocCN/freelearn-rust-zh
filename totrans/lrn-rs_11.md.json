["```rs\nlet mut a = 10; \nlet b = &mut a; \n```", "```rs\nlet vc: Vec<i32> = Vec::new(); \nlet dup = vc.clone(); \n```", "```rs\nuse std::cell::RefCell; \nfn main() \n{ \n    let x = RefCell::new(42); \n    let y = x.borrow_mut(); \n} \n```", "```rs\nuse std::thread;  \nfn main()  \n{ \n    thread::spawn(||  \n    { \n        println!(\"Hello from a thread in your Rust program\"); \n    }); \n} \n```", "```rs\nuse std::thread;  \nfn main()  \n{ \n    let threadhandle = thread::spawn(||  \n    { \n        \"Hello from a thread in your Rust program\" \n    }); \n\n    println!(\"{}\", threadhandle.join().unwrap()); \n} \n```", "```rs\nlet add = |x : i32 | x + t; \n```", "```rs\nfn add(x : i32) -> i32 \n{ \n     x + x \n} \n```", "```rs\nlet m = &mut t; \n```", "```rs\nlet mut t = 10i32; \n{ \n    let add = |x : i32 | x + t; \n} \nlet m = &mut t; \n```", "```rs\nlet calc = |x|  \n{ \n    let mut result: i32 = x; \n    result *= 4; \n    result += 2; \n    result -= 1; \n    result \n}; \n```", "```rs\nfn do_something() -> T { ... } \n```", "```rs\nfn call_with_three<F>(some_closure: F) -> i32 where F : Fn(i32) -> i32\n{\nsome_closure(3)\n}\nfn main()\n{\nlet answer = call_with_three(|x| x + 10 );\nprintln!(\"{}\", answer);\n}\n```", "```rs\nfn call_with_three<F>(some_closure: F) -> i32 where F : Fn(i32) -> i32\n{\nsome_closure(3)\n}\n```", "```rs\nfn call_with_three<'a, F>(some_closure: F) -> i32 where F : Fn(&'a 32) -> i32\n```", "```rs\nfn call_with_three<'a, F>(some_closure: F) -> i32 where F :<for 'a> Fn(&'a 32) -> i32\n```", "```rs\nfn add_five(x : i32) -> i32  \n{ \n    return x + 5; \n} \nfn main() \n{ \n    let test = add_five(5); \n    println!(\"{}\", test); \n} \n```", "```rs\nfn add_five_closure() ->(Fn(i32)->i32) \n{ \n    let num = 5; \n    |x| x + num \n} \nfn main() \n{ \n    let test = add_five_closure(); \n    let f = test(5); \n    println!(\"{}\", f); \n} \n```", "```rs\nfn add_five_closure() -> &(Fn(i32)->i32) \n```", "```rs\nfn add_five_closure() -> &'static (Fn(i32) → i32) \n```", "```rs\nfn add_five_closure() -> Box<(Fn(i32) ->→ i32)> \n{ \n    let num = 5; \n    Box::new(move |x| x + num) \n} \nfn main() \n{ \n    let test = add_five_closure(); \n    let f = test(5); \n    println!(\"{}\", f); \n} \n```", "```rs\nlet myNum = 10; \nlet myMove = move |x: i32| x + myNum; \n```", "```rs\nlet mut myMutNum = 10; \n{ \n    let mut subNum = |x: i32| num -= x; \n    subNum(3);  \n} \n```", "```rs\nfn main()  \n{ \n    let mut my_mut_num = 10; \n    { \n        let mut sub_num = move |x: i32| my_mut_num -= x; \n        sub_num(3);  \n    } \n    println!(\"{}\", my_mut_num); \n} \n```", "```rs\nuse std::thread;  \nfn main()  \n{ \n    let x = 10; \n    thread::spawn(|| (println!(\"x is {}\", x); )); \n} \n```", "```rs\nuse std::thread;  \nfn main()  \n{ \n    let x = 10; \n    thread::spawn(move || (println!(\"x is {}\", x); )); \n} \n```", "```rs\nuse std::thread; \nuse std::time::Duration;  \nfn main()  \n{ \n    let mut my_data = vec![5, 8, 13];  \n    for i in 0..10  \n   { \n        thread::spawn(move || { my_data[0] += i; }); // fails here \n   } \n\n    thread::sleep(Duration::from_millis(50)); \n} \n```", "```rs\nuse std::sync::{Arc, Mutex}; \nuse std::thread; \nuse std::time::Duration; \nfn main()  \n{ \n    let primes = Arc::new(Mutex::new(vec![1,2,3,5,7,9,13,17,19,23])); \n\n    for i in 0..10  \n    { \n        let primes = primes.clone(); \n        thread::spawn(move ||  \n        {  \n            let mut data = primes.lock().unwrap(); \n            data[0] += i;  \n        }); \n    } \n    thread::sleep(Duration::from_millis(50)); \n} \n```", "```rs\nuse std::thread; \nuse std::sync::mpsc; \n\nfn main() { \n    // tx = transmission = sender \n    // rx = receiver \n    let (tx, rx) = mpsc::channel(); \n\n    for i in 0..10  \n    { \n        let tx = tx.clone(); \n\n        thread::spawn(move ||  \n        { \n            let answer = (i * 2) * i; \n\n            tx.send(answer).unwrap(); \n        }); \n    } \n\n    for _ in 0..10  \n    { \n        println!(\"{}\", rx.recv().unwrap()); \n    } \n} \n```", "```rs\nlet handle = thread::spawn(move || { panic! (\"panic occurred\"); }); \nlet res = handle.join(); \n```"]