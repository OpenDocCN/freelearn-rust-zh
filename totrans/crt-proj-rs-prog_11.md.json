["```rs\nasync-std = \"1.5\"\nfutures = \"0.3\"\n```", "```rs\necho -n \"Hello\" >file.txt\n```", "```rs\nuse async_std::fs::File;\nuse async_std::prelude::*;\nuse futures::executor::block_on;\nuse futures::try_join;\n\nfn main() {\n    block_on(parallel_read_file()).unwrap();\n}\n\nasync fn parallel_read_file() -> std::io::Result<()> {\n    print_file(1).await?;\n    println!();\n    print_file(2).await?;\n    println!();\n    print_file(3).await?;\n    println!();\n    try_join!(print_file(1), print_file(2), print_file(3))?;\n    println!();\n    Ok(())\n}\n\nasync fn print_file(instance: u32) -> std::io::Result<()> {\n    let mut file = File::open(\"file.txt\").await?;\n    let mut byte = [0u8];\n    while file.read(&mut byte).await? > 0 {\n        print!(\"{}:{} \", instance, byte[0] as char);\n    }\n    Ok(())\n}\n```", "```rs\n1:H 1:e 1:l 1:l 1:o \n2:H 2:e 2:l 2:l 2:o \n3:H 3:e 3:l 3:l 3:o \n1:H 2:H 3:H 1:e 2:e 3:e 1:l 1:l 3:l 1:o 2:l 3:l 2:l 3:o 2:o \n```", "```rs\nuse async_std::fs::File;\nuse async_std::prelude::*;\n```", "```rs\nuse futures::executor::block_on;\nuse futures::try_join;\n```", "```rs\n    block_on(parallel_read_file()).unwrap();\n```", "```rs\nasync fn parallel_read_file() -> std::io::Result<()>\n```", "```rs\n    print_file(1).await?;\n```", "```rs\n    println!();\n```", "```rs\n    try_join!(print_file(1), print_file(2), print_file(3))?;\n```", "```rs\nasync fn print_file(instance: u32) -> std::io::Result<()> {\n```", "```rs\n    let mut file = File::open(\"file.txt\").await?;\n```", "```rs\n    let mut byte = [0u8];\n    while file.read(&mut byte).await? > 0 {\n        print!(\"{}:{} \", instance, byte[0] as char);\n    }\n```", "```rs\n#![feature(const_generics)]\n#![allow(incomplete_features)]\n\nuse num::Float;\n\nstruct Array2<T: Float, const WIDTH: usize, const HEIGHT: usize> {\n    data: [[T; WIDTH]; HEIGHT],\n}\n\nimpl<T: Float, const WIDTH: usize, const HEIGHT: usize>\nArray2<T, WIDTH, HEIGHT> {\n    fn new() -> Self {\n        Self { data: [[T::zero(); WIDTH]; HEIGHT] }\n    }\n    fn width(&self) -> usize { WIDTH }\n    fn height(&self) -> usize { HEIGHT }\n}\n\nfn main() {\n    let matrix = Array2::<f64, 4, 3>::new();\n    print!(\"{} {}\", matrix.width(), matrix.height());\n}\n```"]