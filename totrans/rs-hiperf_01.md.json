["```rs\n    [profile.release]\n    opt-level = 2\n```", "```rs\n    [profile.test]\n    debug = true\n```", "```rs\n    [profile.test]\n    debug = true\n    opt-level = 1\n```", "```rs\n    [profile.release]\n    lto = true\n```", "```rs\n    [profile.dev]\n    codegen-units = 32\n```", "```rs\n    [profile.doc]\n    debug-assertions = false\n```", "```rs\n    [profile.doc]\n    panic = 'abort'\n```", "```rs\n    let arr = ['a', 'b', 'c', 'd', 'e', 'f'];\n\n    for i in 0..arr.len() {\n      println!(\"{}\", arr[i]);\n    }\n```", "```rs\n    let arr = ['a', 'b', 'c', 'd', 'e', 'f'];\n\n    for i in 0..arr.len() + 1 {\n      println!(\"{}\", arr[i]);\n    }\n```", "```rs\n    fn print_request(req: Request) {\n      for i in 0..req.content_length {\n        println!(\"{}\", req.data[i]);\n      }\n    }\n```", "```rs\n    let arr = ['a', 'b', 'c', 'd', 'e', 'f'];\n\n    for c in &arr {\n      println!(\"{}\", c);\n    }\n```", "```rs\n    for arr in array_of_arrays {\n      let last_index = arr.len() - 1;\n      println!(\"{}\", arr[last_index]);\n    }\n```", "```rs\n    for arr in array_of_arrays {\n      if let Some(elt) = arr.iter().rev().next() {\n        println!(\"{}\", elt);\n      }\n    }\n```", "```rs\n    for arr in array_of_arrays {\n      if let Some(elt) = arr.get(125) {\n        println!(\"{}\", elt);\n      }\n    }\n```", "```rs\n    for arr in array_of_arrays {\n      println!(\"{}\", unsafe { arr.get_unchecked(125) });\n    }\n```", "```rs\nlet arr = [10u8, 14, 5, 76, 84];\nlet mut iter = arr.iter();\n\nwhile let Some(elm) = iter.next() {\n    println!(\"{}\", elm);\n}\n```", "```rs\nlet arr = [10u8, 14, 5, 76, 84];\n\nfor elm in &arr {\n    println!(\"{}\", elm);\n}\n```", "```rs\nlet arr = [10u8, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nlet collection: Vec<_> = arr.iter().cloned().skip(2).take(8).collect();\n\nfor elm in collection {\n    println!(\"{}\", elm);\n}\n```", "```rs\nlet arr = [10u8, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nlet collection: Vec<_> = arr.iter()\n    .cloned()\n    .skip_while(|&elm| elm < 25)\n    .take_while(|&elm| elm <= 100)\n    .collect();\n\nfor elm in collection {\n    println!(\"{}\", elm);\n}\n```", "```rs\nlet arr = [10u8, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nlet collection: Vec<_> = arr.iter()\n    .enumerate()\n    .filter(|&(i, _)| i % 2 != 0)\n    .map(|(_, elm)| elm)\n    .collect();\n\nfor elm in collection {\n    println!(\"{}\", elm);\n}\n```", "```rs\nlet arr = [10u8, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nlet collection: Vec<_> = arr.iter()\n    .enumerate()\n    .filter_map(|(i, elm)| if i % 2 != 0 { Some(elm) } else { None })\n    .collect();\n\nfor elm in collection {\n    println!(\"{}\", elm);\n}\n```", "```rs\nlet arr = [10u32, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nlet sum = arr.iter().fold(0u32, |acc, elm| acc + elm);\nprintln!(\"{}\", sum);\n```", "```rs\nfn calculate_var(t: f64, var: &[(f64, f64, f64)]) -> f64 {\n    var.iter()\n       .fold(0_f64, |term, &(a, b, c)| term + a * (b + c * t).cos())\n}\n```", "```rs\nfn calculate_var(t: f64, var: &[(f64, f64, f64)]) -> f64 {\n    let mut term = 0_f64;\n    for &(a, b, c) in var {\n        term += a * (b + c * t).cos();\n    }\n    term\n}\n```", "```rs\nlet arr = [10u32, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nlet sum: u32 = arr.iter().sum();\nprintln!(\"{}\", sum);\n```", "```rs\nlet arr = [10u32, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nlet prod = arr.iter().fold(0u32, |acc, elm| acc * elm);\nprintln!(\"{}\", prod);\n```", "```rs\nlet arr1 = [10u32, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\nlet arr2 = [25u32, 12, 73, 2, 98, 122, 213, 22, 39, 300, 144, 163, 127, 3, 56];\n\nlet collection: Vec<_> = arr1.iter()\n    .zip(arr2.iter())\n    .map(|(elm1, elm2)| elm1 + elm2)\n    .collect();\nprintln!(\"{:?}\", collection);\n```", "```rs\n// Remember\nextern crate itertools;\nuse itertools::Itertools;\n\nlet arr = [10u32, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nfor tuple in arr.iter().batching(|it| match it.next() {\n    None => None,\n    Some(x) => {\n        match it.next() {\n            None => None,\n            Some(z) => {\n                match it.next() {\n                    None => None,\n                    Some(y) => Some((x, y, z)),\n                }\n            }\n        }\n    }\n})\n{\n    println!(\"{:?}\", tuple);\n}\n```", "```rs\n(10, 5, 14)\n(76, 35, 84)\n(23, 100, 94)\n(143, 200, 23)\n(12, 72, 94)\n```", "```rs\n// Remember\nextern crate itertools;\nuse itertools::Itertools;\n\nlet arr = [10u32, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nfor tuple in arr.iter().tuples::<(_, _, _)>() {\n    println!(\"{:?}\", tuple);\n}\n```", "```rs\n// Remember\nextern crate itertools;\nuse itertools::Itertools;\n\nlet arr = [10u32, 14, 5, 76, 84, 35, 23, 94, 100, 143, 23, 200, 12, 94, 72];\n\nfor (a, b, c) in arr.iter().tuples() {\n    println!(\"({}, {}, {})\", a, b, c);\n}\n```", "```rs\n// Remember\nextern crate itertools;\nuse itertools::Itertools;\n\nlet arr1 = [10u32, 14, 5];\nlet arr2 = [192u32, 73, 44];\n\nfor row in arr1.iter().cartesian_product(arr2.iter()) {\n    print!(\"{:?}, \", row);\n}\n```", "```rs\n(10, 192), (10, 73), (10, 44), (14, 192), (14, 73), (14, 44), (5, 192), (5, 73), (5,44),\n```", "```rs\nlet my_int = 76_u32;\nprintln!(\"{}\", {my_int});\n```"]