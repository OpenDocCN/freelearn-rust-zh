["```rs\n// code from Chapter 9/code/arguments.rs:\nuse std::env;\n\nfn main() {\n let args: Vec<String> = env::args().collect();\n println!(\"The program's name is: {}\", args[0]);\n for arg in args.iter() {\n println!(\"Next argument is: {}\", arg)\n }\n println!(\"I got {:?} arguments: {:?}.\", args.len() - 1);\n for n in 1..args.len() {\n println!(\"The {}th argument is {}\", n, args[n]);\n }\n}\n```", "```rs\nlet osvars = env::vars();\nfor (key, value) in osvars {\n       println!(\"{}: {}\", key, value);\n}\n```", "```rs\nHOMEDRIVE: C:\nUSERNAME: CVO\nLOGONSERVER: \\\\MicrosoftAccount\nâ€¦\n\n```", "```rs\n  unsafe {\n    // possibly dangerous code\n  }\n```", "```rs\n    // code from Chapter 9/code/unsafe.rs:\n    use std::mem;\n\n    fn main() {\n      let v: &[u8] = unsafe { \n        mem::transmute(\"Gandalf\") \n      };\n      println!(\"{:?}\", v);\n    }\n    ```", "```rs\n[71, 97, 110, 100, 97, 108, 102]\n\n```", "```rs\n// code from Chapter 9/code/raw_pointers.rs:\nlet p_raw: *const u32 = &10;\n// let n = *p_raw; // compiler error!\nunsafe {\n let n = *p_raw;\n     println!(\"{}\", n); // prints 10\n}\n```", "```rs\nerror: dereference of unsafe pointer requires unsafe function or block [E0133]\n\n```", "```rs\n  let gr: f32 = 1.618;\n let p_imm: *const f32 = &gr as *const f32; // explicit cast\n  let mut m: f32 = 3.14;\n  let p_mut: *mut f32 = &mut m; // implicit cast\n```", "```rs\nunsafe {\n let ref_imm: &f32 = &*p_imm;\n let ref_mut: &mut f32 = &mut *p_mut;\n}\n```", "```rs\n#![feature(libc)]\nextern crate libc;\n```", "```rs\nuse libc::{c_void, size_t, malloc, free};\n```", "```rs\n// code from Chapter 9/code/calling_libc.rs:\n#![feature(libc)]\nextern crate libc;\nuse libc::puts;\nuse std::ffi::CString;\n\nfn main() {\n  let sentence = \"Merlin is the greatest magician!\";\n let to_print = CString::new(sentence).unwrap();\n unsafe {\n puts(to_print.as_ptr());\n }\n}\n```", "```rs\nMerlin is the greatest magician!\n\n```", "```rs\n// code from Chapter 9/code/calling_clibrary.rs:\n#[repr(C)]\n#[derive(Copy, Clone)]\n#[derive(Debug)]\nstruct Complex {\n    re: f32,\n    im: f32,\n}\n\n#[link(name = \"m\")]\nextern {\n fn ctanf(z: Complex) -> Complex;\n}\n\nfn tan(z: Complex) -> Complex {\n unsafe { ctanf(z) }\n}\n\nfn main() {\n    let z = Complex { re: -1., im: 1\\. }; // z is -1 + i\n    let z_tan = tan(z);\n    println!(\"the tangens of {:?} is {:?}\", z, z_tan);\n}\n```", "```rs\nthe tangens of Complex { re: -1, im: 1 } is Complex { re: -0.271753, im: 1.083923 }\n\n```", "```rs\n// code from Chapter 9/code/asm.rs:\n#![feature(asm)]\n\nfn subtract(a: i32, b: i32) -> i32 {\n    let sub: i32;\n    unsafe {\n asm!(\"sub $2, $1; mov $1, $0\" \n : \"=r\"(sub) \n : \"r\"(a), \"r\"(b)\n );\n    }\n    sub\n}\n\nfn main() {\n    println!(\"{}\", subtract(42, 7)) }\n}\n```", "```rs\n  #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n```", "```rs\n#[no_mangle]\npub extern \"C\" fn rustfn1() { }\n```"]