["```rs\n├── deployment\n```", "```rs\n│   ├── docker-compose.yml\n```", "```rs\n│   └── nginx\n```", "```rs\n│       ├── Dockerfile\n```", "```rs\n│       └── nginx.conf\n```", "```rs\n├── src\n```", "```rs\n│   ├── Dockerfile\n```", "```rs\n│   ├── __init__.py\n```", "```rs\n│   ├── app.py\n```", "```rs\n│   ├── fib_calcs\n```", "```rs\n│   │   ├── __init__.py\n```", "```rs\n│   │   └── fib_calculation.py\n```", "```rs\n│   └── requirements.txt\n```", "```rs\n    pip install flask\n    ```", "```rs\n    from flask import Flask\n    app = Flask(__name__)\n    @app.route(\"/\")\n    def home():\n        return \"home for the fib calculator\"\n    if __name__ == \"__main__\":\n        app.run(use_reloader=True, port=5002, \\\n          threaded=True)\n    ```", "```rs\n    class FibCalculation:\n        def __init__(self, input_number: int) -> None:\n            self.input_number: int = input_number\n            self.fib_number: int = self.recur_fib(\n                n=self.input_number\n            )\n        @staticmethod\n        def recur_fib(n: int) -> int:\n            if n <= 1:\n                return n\n            else:\n                return (FibCalculation.recur_fib(n - 1) +\n                        FibCalculation.recur_fib(n - 2))\n    ```", "```rs\n    from fib_calcs.fib_calculation import FibCalculation\n    . . .\n    @app.route(\"/calculate/<int:number>\")\n    def calculate(number):\n        calc = FibCalculation(input_number=number)\n        return f\"you entered {calc.input_number} \" \\\n               f\"which has a Fibonacci number of \" \\\n               f\"{calc.fib_number}\"\n    ```", "```rs\n    pip install gunicorn\n    ```", "```rs\n     pip freeze > requirements.txt\n    ```", "```rs\n    FROM python:3.6.13-stretch\n    ```", "```rs\n    # Set the working directory to /app\n    WORKDIR /app\n    # Copy the current directory contents into the \n      container at /app\n    ADD . /app\n    ```", "```rs\n    RUN apt-get update -y\n    RUN apt-get install -y python3-dev python-dev gcc\n    ```", "```rs\n    RUN pip install --upgrade pip setuptools wheel\n    RUN pip install -r requirements.txt\n    ```", "```rs\n    EXPOSE 5002\n    CMD [\"gunicorn\", \"-w 4\", \"-b\", \"0.0.0.0:5002\", \\\n      \"app:app\"]\n    ```", "```rs\n    flask-fib tag. \n    ```", "```rs\n    docker image ls\n    ```", "```rs\n    REPOSITORY      TAG         IMAGE ID\n    flask-fib       latest      0cdb0c979ac1\n    CREATED          SIZE\n    33 minutes ago   1.05GB\n    ```", "```rs\n    worker_processes  auto;\n    error_log  /var/log/nginx/error.log warn;\n    ```", "```rs\n    events {\n        worker_connections  512;\n    }\n    ```", "```rs\n    http {\n        server {\n               listen 80;\n               location / {\n                    proxy_pass http://flask_app:5002/;\n               }\n        }\n    }\n    ```", "```rs\n               location /another_app {\n                    proxy_pass http://another_app:5002/;\n               }\n               location / {\n                    proxy_pass http://flask_app:5002/;\n               }\n    ```", "```rs\n    version: \"3.7\"\n    ```", "```rs\n    services:\n        flask_app:\n            container_name: fib-calculator\n            image: \"flask-fib:latest\"\n            restart: always\n            ports:\n              - \"5002:5002\"\n            expose:\n                - 5002\n    ```", "```rs\n        nginx:\n            container_name: 'nginx'\n            image: \"nginx:1.13.5\"\n            ports:\n              - \"80:80\"\n            links:\n                - flask_app\n            depends_on:\n                - flask_app\n            volumes:\n              - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n    ```", "```rs\n    5002, and boots up workers to process requests. Following this, our NGINX service looks for a range of configurations before concluding that the configuration is complete and that it is ready to start up. Also, note that the NGINX started after our Flask application was started. This is because we stated that our NGINX was dependent on our Flask application when building our docker-compose file.Now, we can directly hit our localhost URL without having to specify a port because we are listening to the outside port of `80` with our NGINX. This gives us results similar to the following:\n    ```", "```rs\n├── deployment\n```", "```rs\n│   . . .\n```", "```rs\n├── docker-compose.yml\n```", "```rs\n├── src\n```", "```rs\n│   . . .\n```", "```rs\n│   ├── config.py\n```", "```rs\n│   ├── config.yml\n```", "```rs\n│   ├── data_access.py\n```", "```rs\n│   ├── fib_calcs\n```", "```rs\n│   │   . . .\n```", "```rs\n│   ├── models\n```", "```rs\n│   │   ├── __init__.py\n```", "```rs\n│   │   └── database\n```", "```rs\n│   │       ├── __init__.py\n```", "```rs\n│   │       └── fib_entry.py\n```", "```rs\n│   └── requirements.txt\n```", "```rs\n    Postgres:\n```", "```rs\n      container_name: 'fib-dev-Postgres\n```", "```rs\n      image: 'postgres:11.2'\n```", "```rs\n      restart: always\n```", "```rs\n      ports:\n```", "```rs\n        - '5432:5432'\n```", "```rs\n      environment:\n```", "```rs\n        - 'POSTGRES_USER=user'\n```", "```rs\n        - 'POSTGRES_DB=fib'\n```", "```rs\n        - 'POSTGRES_PASSWORD=password'\n```", "```rs\n    import os\n    import sys\n    from typing import Dict, List\n    import yaml\n    ```", "```rs\n    class GlobalParams(dict):\n        def __init__(self) -> None:\n            super().__init__()\n            self.update(self.get_yml_file())\n        @staticmethod\n        def get_yml_file() -> Dict:\n            file_name = sys.argv[-1]\n            if \".yml\" not in file_name:\n                file_name = \"config.yml\"\n            if os.path.isfile(file_name):\n                with open(\"./{}\".format(file_name)) as \\\n                  file:\n                    data = yaml.load(file, \n                           Loader=yaml.FullLoader)\n                return data\n            raise FileNotFoundError(\n                \"{} config file is not available\".\n                    format(file_name)\n            )\n        @property\n        def database_meta(self) -> Dict[str, str]:\n            db_string: str = self.get(\"DB_URL\")\n            buffer: List[str] = db_string.split(\"/\")\n            second_buffer: List[str] = buffer[- \\\n              2].split(\":\")\n            third_buffer: List[str] = \\\n              second_buffer[1].split(\"@\")\n            return {\n                \"DB_URL\": db_string,\n                \"DB_NAME\": buffer[-1],\n                \"DB_USER\": second_buffer[0],\n                \"DB_PASSWORD\": third_buffer[0],\n                \"DB_LOCATION\":f\"{third_buffer[1]} \\\n                  :{second_buffer[-1]}\",\n            }\n    ```", "```rs\n    DB_URL: \\\n    \"postgresql://user:password@localhost:5432/fib\"\n    ```", "```rs\n    from flask import _app_ctx_stack\n    from sqlalchemy import create_engine\n    from sqlalchemy.ext.declarative import \n    declarative_base\n    from sqlalchemy.orm import sessionmaker, \n    scoped_session\n    from config import GlobalParams\n    ```", "```rs\n    class DbEngine:\n        def __init__(self) -> None:\n            params = GlobalParams()\n            self.base = declarative_base()\n            self.engine = create_engine(params.get\n              (\"DB_URL\"),\n                                       echo=True,\n                                       pool_recycle=3600,\n                                       pool_size=2,\n                                       max_overflow=1,\n                                       connect_args={\n                                      'connect_timeout': 5\n                                        })\n            self.session = scoped_session(sessionmaker(\n                bind=self.engine\n            ), scopefunc=_app_ctx_stack)\n            self.url = params.get(\"DB_URL\")\n    dal = DbEngine()\n    ```", "```rs\n    from typing import Dict\n    from sqlalchemy import Column, Integer\n    from data_access import dal\n    class FibEntry(dal.base):\n        __tablename__ = \"fib_entries\"\n        id = Column(Integer, primary_key=True)\n        input_number = Column(Integer)\n        calculated_number = Column(Integer)\n        @property\n        def package(self) -> Dict[str, int]:\n            return {\n                \"input_number\": self.input_number,\n                \"calculated_number\": \\\n                  self.calculated_number\n            }\n    ```", "```rs\n    src/alembic/env.py file; we are going to alter this so that we can connect our alembic scripts and commands to our database. \n    ```", "```rs\n    import sys\n    import os\n    ```", "```rs\n    from alembic import context\n    # this is the Alembic Config object, which provides\n    # access to the values within the .ini file in use.\n    Config = context.config\n    # Interpret the config file for Python logging.\n    # This line sets up loggers basically.\n    fileConfig(config.config_file_name)\n    # add the src to our import path\n    sys.path.append(os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"../\")\n    )\n    ```", "```rs\n    # config the database url for migrations\n    from config import GlobalParams\n    params = GlobalParams()\n    section = config.config_ini_section\n    db_params = params.database_meta\n    config.set_section_option(section, 'sqlalchemy.url', \n                              params.get('DB_URL'))\n    from data_access import dal\n    db_engine = dal\n    from models.database.fib_entry import FibEntry\n    target_metadata = db_engine.base.metadata\n    ```", "```rs\n    def run_migrations_offline():\n        url = config.get_main_option(\"sqlalchemy.url\")\n        context.configure(\n            url=url,\n            target_metadata=target_metadata,\n            literal_binds=True,\n            dialect_opts={\"paramstyle\": \"named\"},\n            render_as_batch=True\n        )\n        with context.begin_transaction():\n            context.run_migrations()\n    ```", "```rs\n    src/alembic/versions/ file, there is an autogenerated script that creates our table with the following code:\n\n    ```", "```rs\n\n    Here, if we upgrade, the `upgrade` function will run, and if we downgrade, the `downgrade` function will run. We can upgrade our database using the following command:\n\n    ```", "```rs\n\n    This gives us the following printout:\n\n    ```", "```rs\n\n    ```", "```rs\n    from data_access import dal\n    from models.database.fib_entry import FibEntry\n    ```", "```rs\n    @app.route(\"/calculate/<int:number>\")\n    def calculate(number):\n        fib_calc = dal.session.query(FibEntry).filter_by(\n               input_number=number).one_or_none()\n        if fib_calc is None:\n            calc = FibCalculation(input_number=number)\n            new_calc = FibEntry(input_number=number,\n                      calculated_number=calc.fib_number)\n            dal.session.add(new_calc)\n            dal.session.commit()\n            return f\"you entered {calc.input_number} \" \\\n                   f\"which has a Fibonacci number of \" \\\n                   f\"{calc.fib_number}\"\n        return f\"you entered {fib_calc.input_number} \" \n           f\"which has an existing Fibonacci number of \" \n               f\"{fib_calc.calculated_number}\"\n    ```", "```rs\n    @app.teardown_request\n    def teardown_request(*args, **kwargs):\n        dal.session.expire_all()\n        dal.session.remove()\n        dal.session.close()\n    ```", "```rs\n    services:\n        flask_app:\n            container_name: fib-calculator\n            image: \"flask-fib:latest\"\n            restart: always\n            ports:\n              - \"5002:5002\"\n            expose:\n                - 5002\n            depends_on:\n              - postgres\n            links:\n              - postgres\n        nginx:\n            . . .\n        postgres:\n            container_name: 'fib-live-postgres'\n            image: 'postgres:11.2'\n            restart: always\n            ports:\n                - '5432:5432'\n            environment:\n                - 'POSTGRES_USER=user'\n                - 'POSTGRES_DB=fib'\n                - 'POSTGRES_PASSWORD=password'\n    ```", "```rs\n    # Copy the current directory contents into the \n      container at /app\n    ADD . /app\n    RUN rm ./config.yml\n    RUN mv live_config.yml config.yml\n    . . .\n    ```", "```rs\n    DB_URL: \"postgresql://user:password@postgres:5432/fib\"\n    ```", "```rs\n    docker build . -t flask-fib\n    ```", "```rs\n    docker exec -it fib-calculator alembic upgrade head\n    ```", "```rs\n    └── task_queue\n        ├── __init__.py\n        ├── engine.py\n        └── fib_calc_task.py\n    ```", "```rs\n    from celery import Celery\n    from config import GlobalParams\n    def make_celery(flask_app):\n        params = GlobalParams()\n        celery = Celery(\n            backend=params.get(\"QUEUE_BACKEND\"),\n            broker=params.get(\"QUEUE_BROKER\")\n        )\n        celery.conf.update(flask_app.config)\n        class ContextTask(celery.Task):\n            def __call__(self, *args, **kwargs):\n                with flask_app.app_context():\n                    return self.run(*args, **kwargs)\n        celery.Task = ContextTask\n        return celery\n    ```", "```rs\n    . . .\n    from task_queue.engine import make_celery\n    app = Flask(__name__)\n    celery = make_celery(app)\n    . . .\n    ```", "```rs\n    QUEUE_BACKEND: \"redis://localhost:6379/0\"\n    QUEUE_BROKER: \"redis://localhost:6379/0\"\n    ```", "```rs\nfrom data_access import dal\n```", "```rs\nfrom fib_calcs.fib_calculation import FibCalculation\n```", "```rs\nfrom models.database.fib_entry import FibEntry\n```", "```rs\ndef create_calculate_fib(input_celery):\n```", "```rs\n    @input_celery.task()\n```", "```rs\n    def calculate_fib(number):\n```", "```rs\n        calculation = FibCalculation(input_number=number)\n```", "```rs\n        fib_entry = FibEntry(\n```", "```rs\n            input_number=calculation.input_number,\n```", "```rs\n            calculated_number=calculation.fib_number\n```", "```rs\n        )\n```", "```rs\n        dal.session.add(fib_entry)\n```", "```rs\n        dal.session.commit()\n```", "```rs\n    return calculate_fib\n```", "```rs\n. . .\n```", "```rs\nfrom task_queue.engine import make_celery\n```", "```rs\napp = Flask(__name__)\n```", "```rs\ncelery = make_celery(app)\n```", "```rs\nfrom task_queue.fib_calc_task import create_calculate_fib\n```", "```rs\ncalculate_fib = create_calculate_fib(input_celery=celery)\n```", "```rs\n. . .\n```", "```rs\n@app.route(\"/calculate/<int:number>\")\n```", "```rs\ndef calculate(number):\n```", "```rs\n    fib_calc = dal.session.query(FibEntry).filter_by(\n```", "```rs\n                       input_number=number).one_or_none()\n```", "```rs\n    if fib_calc is None:\n```", "```rs\n        if number < 31:\n```", "```rs\n            calc = FibCalculation(input_number=number)\n```", "```rs\n            new_calc = FibEntry(input_number=number,\n```", "```rs\n                                calculated_number=calc.\n```", "```rs\n                                fib_number)\n```", "```rs\n            dal.session.add(new_calc)\n```", "```rs\n            dal.session.commit()\n```", "```rs\n            return f\"you entered {calc.input_number} \" \\\n```", "```rs\n                   f\"which has a Fibonacci number of \" \\\n```", "```rs\n                   f\"{calc.fib_number}\"\n```", "```rs\n        calculate_fib.delay(number)\n```", "```rs\n        return \"calculate fib sent to queue because \" \\\n```", "```rs\n               \"it's above 30\"\n```", "```rs\n    return f\"you entered {fib_calc.input_number} \" \\\n```", "```rs\n           f\"which has an existing Fibonacci number of \" \\\n```", "```rs\n           f\"{fib_calc.calculated_number}\"\n```", "```rs\n. . .\n```", "```rs\n    redis:\n```", "```rs\n      container_name: 'main-dev-redis'\n```", "```rs\n      image: 'redis:5.0.3'\n```", "```rs\n      ports:\n```", "```rs\n        - '6379:6379'\n```", "```rs\ncelery -A app.celery worker -l info\n```", "```rs\n-------------- celery@maxwells-MacBook-Pro.\n```", "```rs\n--- ***** ----- local v5.1.2 (sun-harmonics)\n```", "```rs\n-- ******* ---- Darwin-20.2.0-x86_64-i386-64bit\n```", "```rs\n- *** --- * --- 2021-08-22 23:24:14\n```", "```rs\n- ** ---------- [config]\n```", "```rs\n- ** ---------- .> app:         __main__:0x7fd0796d0ed0\n```", "```rs\n- ** ---------- .> transport:   redis://localhost:6379/0\n```", "```rs\n- ** ---------- .> results:     redis://localhost:6379/0\n```", "```rs\n- *** --- * --- .> concurrency: 4 (prefork)\n```", "```rs\n-- ******* ---- .> task events: OFF (enable -E to\n```", "```rs\n--- ***** -----    monitor tasks in this worker)\n```", "```rs\n -------------- [queues]\n```", "```rs\n                .> celery  exchange=celery(direct) \n```", "```rs\nkey=celery               \n```", "```rs\n[tasks]\n```", "```rs\n  . task_queue.fib_calc_task.calculate_fib\n```", "```rs\n[2021-08-22 23:24:14,385: INFO/MainProcess] Connected \n```", "```rs\nto redis://localhost:6379/0\n```", "```rs\n[2021-08-22 23:24:14,410: INFO/MainProcess] mingle: \n```", "```rs\nsearching for neighbors\n```", "```rs\n[2021-08-22 23:24:15,476: INFO/MainProcess] mingle: \n```", "```rs\nall alone\n```", "```rs\n[2021-08-22 23:24:15,514: INFO/MainProcess] \n```", "```rs\ncelery@maxwells-MacBook-Pro.local ready.\n```", "```rs\n[2021-08-22 23:24:39,822: INFO/MainProcess] \n```", "```rs\nTask task_queue.fib_calc_task.calculate_fib\n```", "```rs\n[c3241a5f-3208-48f7-9b0a-822c30aef94e] received\n```", "```rs\n. . .\n```", "```rs\n    main_cache:\n```", "```rs\n        container_name: 'main-live-redis'\n```", "```rs\n        image: 'redis:5.0.3'\n```", "```rs\n        ports:\n```", "```rs\n            - '6379:6379'\n```", "```rs\n    queue_worker:\n```", "```rs\n        container_name: fib-worker\n```", "```rs\n        image: \"flask-fib:latest\"\n```", "```rs\n        restart: always\n```", "```rs\n        entrypoint: \"celery -A app.celery worker -l info\"\n```", "```rs\n        ports:\n```", "```rs\n            - \"5003:5003\"\n```", "```rs\n        expose:\n```", "```rs\n            - 5003\n```", "```rs\n        depends_on:\n```", "```rs\n            - main_cache\n```", "```rs\n        links:\n```", "```rs\n            - main_cache\n```", "```rs\nQUEUE_BACKEND: \"redis://main_cache:6379/0\"\n```", "```rs\nQUEUE_BROKER: \"redis://main_cache:6379/0\"\n```"]