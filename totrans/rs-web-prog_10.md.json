["```rs\ncargo run --release config.yml\n```", "```rs\nmkdir \"$HOME\"/.ssh/keys/\n```", "```rs\ncp ./remotebuild.pem \"$HOME\"/.ssh/keys/\n```", "```rs\nchmod 600 \"$HOME\"/.ssh/keys/remotebuild.pem\n```", "```rs\naws configure\n```", "```rs\nterraform {\n  required_version = \">= 1.1.3\"\n}\n```", "```rs\nprovider \"aws\" {\n    version = \">= 2.28.1\"\n    region = \"eu-west-2\"\n}\n```", "```rs\nresource \"aws_instance\" \"build_server\" {\n    ami = \"ami-0fdbd8587b1cf431e\"\n    instance_type = \"t2.medium\"\n    key_name = \"remotebuild\"\n    user_data = file(\"server_build.sh\")\n    tags = {\n      Name = \"to-do build server\"\n    }\n}\n```", "```rs\noutput \"ec2_global_ips\" {\n  value = [\"${aws_instance.build_server.*.public_ip}\"]\n}\n```", "```rs\n#!/bin/bash\nsudo yum update -y\nsudo yum install git -y\nsudo yum install cmake -y\nsudo yum install tree -y\nsudo yum install vim -y\nsudo yum install tmux -y\nsudo yum install make automake gcc gcc-c++ kernel-devel -y\n```", "```rs\nsudo amazon-linux-extras install postgresql10 vim epel -y\nsudo yum install -y postgresql-server postgresql-devel -y\n```", "```rs\nsudo amazon-linux-extras install docker\nsudo service docker start\nsudo usermod -a -G docker ec2-user\n```", "```rs\nsudo curl -L \"https://github.com/docker/compose/releases\n/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\"\n-o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n```", "```rs\necho \"FINISHED\" > home/ec2-user/output.txt\n```", "```rs\nfrom subprocess import Popen\nfrom pathlib import Path\nimport json\nimport time\nDIRECTORY_PATH = Path(__file__).resolve().parent\n```", "```rs\ninit_process = Popen(f\"cd {DIRECTORY_PATH} && terraform init\",\n                     shell=True)\ninit_process.wait()\napply_process = Popen(f\"cd {DIRECTORY_PATH} && terraform apply\",\n                      shell=True)\napply_process.wait()\n```", "```rs\nproduce_output = Popen(f\"cd {DIRECTORY_PATH} && terraform\n                        output -json > {DIRECTORY_PATH}/\n                        output.json\", shell=True)\nproduce_output.wait()\nwith open(f\"{DIRECTORY_PATH}/output.json\", \"r\") as file:\n    data = json.loads(file.read())\nserver_ip = data[\"ec2_global_ips\"][\"value\"][0][0]\n```", "```rs\nprint(\"waiting for server to be built\")\ntime.sleep(5)\nprint(\"attempting to enter server\")\n```", "```rs\nbuild_process = Popen(f\"cd {DIRECTORY_PATH} &&\n                      sh ./run_build.sh {server_ip}\",\n                      shell=True)\nbuild_process.wait()\ndestroy_process = Popen(f\"cd {DIRECTORY_PATH} &&\n                        terraform destroy\", shell=True)\ndestroy_process.wait()\n```", "```rs\n#!/usr/bin/env bash\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\ncd $SCRIPTPATH\n```", "```rs\nrm -rf ../web_app/target/\nscp -i \"~/.ssh/keys/remotebuild.pem\" -r\n../web_app ec2-user@$1:/home/ec2-user/web_app\n```", "```rs\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  until [ -f ./output.txt ]\n  do\n      sleep 2\n  done\n  echo \"File found\"\n  curl https://sh.rustup.rs -sSf | bash -s -- -y\n  source ~/.cargo/env\n  cd web_app\n  cargo build --release\nEOF\n```", "```rs\n. . .\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\ncd $SCRIPTPATH\nterraform init\nterraform apply\nterraform output -json > ./output.json\nIP_ADDRESS=$(jq --raw-output '.ec2_global_ips.value[0][0]' output.json)\necho $IP_ADDRESS\necho \"waiting for server to be built\"\nsleep 5\necho \"attempting to enter server\"\nrm -rf ../web_app/target/\nscp -i \"~/.ssh/keys/remotebuild.pem\" -r\n../web_app ec2-user@$IP_ADDRESS:/home/ec2-user/web_app\n. . .\n```", "```rs\nSh run_build.sh\n```", "```rs\npython3 run_build.py\n```", "```rs\nterraform {\n    backend \"s3\" {\n    bucket = \"some_bucket\"\n    key    = \"some/ptaht/terraform.tfstate\"\n    region = \"eu-west-1\"\n  }\n}\n```", "```rs\nrm -rf ../front_end/node_modules/\nscp -i \"~/.ssh/keys/remotebuild.pem\" -r\n../front_end ec2-user@$1:/home/ec2-user/front_end\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  curl -o- https://raw.githubusercontent.com/nvm-sh\n  /nvm/v0.37.2/install.sh | bash\n  . ~/.nvm/nvm.sh\n  nvm install --lts\n  cd front_end\n  npm install\nEOF\n```", "```rs\nFROM rust:1.61\nRUN apt-get update -yqq && apt-get install -yqq cmake g++\nRUN cargo install diesel_cli --no-default-features --features postgres\n```", "```rs\nCOPY . .\nWORKDIR .\n```", "```rs\nRUN cargo clean\nRUN cargo build --release\n```", "```rs\nRUN cp ./target/release/web_app ./web_app\nRUN rm -rf ./target\nRUN rm -rf ./src\nRUN chmod +x ./web_app\n```", "```rs\nEXPOSE 8000\nCMD [\"./web_app\", \"config.yml\"]\n```", "```rs\ntarget\n```", "```rs\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    const ALLOWED_VERSION: &'static str = \"v1\";\n    . . .\n```", "```rs\n[package]\nname = \"web_app\"\nversion = \"0.1.0\"\nedition = \"2021\"\n# build = \"build.rs\"\n```", "```rs\ndocker build . -t rust_app\n```", "```rs\ndocker image ls\n```", "```rs\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nrust_app     latest    c2e465545e30   2 hours ago    2.69GB\n. . .\n```", "```rs\ndocker run rust_app\n```", "```rs\nthread 'main' panicked at 'called `Result::unwrap()`\non an `Err` value: Connection refused (os error 111)',\nsrc/counter.rs:24:47 note: run with `RUST_BACKTRACE=1`\nenvironment variable to display a backtrace\n```", "```rs\nresource \"aws_instance\" \"build_server\" {\n    ami = \"ami-0fdbd8587b1cf431e\"\n    instance_type = \"t2.medium\"\n    key_name = \"remotebuild\"\n    user_data = file(\"server_build.sh\")\n    tags = {\n      Name = \"to-do build server\"\n    }\n    # root disk\n    root_block_device {\n      volume_size           = \"150\"\n      volume_type           = \"gp2\"\n      delete_on_termination = true\n    }\n}\n```", "```rs\n#!/usr/bin/env bash\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\ncd $SCRIPTPATH\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 \"mkdir web_app\"\nscp -i \"~/.ssh/keys/remotebuild.pem\" -r\n../web_app/src ec2-user@$1:/home/ec2-user/web_app/src\nscp -i \"~/.ssh/keys/remotebuild.pem\"\n../web_app/Cargo.toml ec2-user@$1:/home/ec2-user/web_app/Cargo.toml\nscp -i \"~/.ssh/keys/remotebuild.pem\"\n../web_app/config.yml ec2-user@$1:/home/ec2-user/web_app/config.yml\nscp -i \"~/.ssh/keys/remotebuild.pem\"\n../web_app/Dockerfile ec2-user@$1:/home/ec2-user/web_app/Dockerfile\n```", "```rs\necho \"installing Rust\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  curl https://sh.rustup.rs -sSf | bash -s -- -y\n  until [ -f ./output.txt ]\n  do\n      sleep 2\n  done\n  echo \"File found\"\nEOF\necho \"Rust has been installed\"\n```", "```rs\necho \"building Rust Docker image\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  cd web_app\n  docker build . -t rust_app\nEOF\necho \"Docker image built\"\n```", "```rs\nFROM node:17.0.0\nWORKDIR .\nCOPY . ./\n```", "```rs\nRUN npm install -g serve\nRUN npm install\nRUN npm run react-build\n```", "```rs\nEXPOSE 4000\nCMD [\"serve\", \"-s\", \"build\", \"-l\", \"4000\"]\n```", "```rs\ndocker build . -t front_end\n```", "```rs\ndocker run -p 80:4000 front_end\n```", "```rs\nINFO: Accepting connections at http://localhost:4000\n```", "```rs\necho \"copying React app\"\nrm -rf ../front_end/node_modules/\nscp -i \"~/.ssh/keys/remotebuild.pem\" -r\n../front_end ec2-user@$1:/home/ec2-user/front_end\necho \"React app copied\"\necho \"installing node on build server\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm\n  /v0.37.2/install.sh | bash\n  . ~/.nvm/nvm.sh\n  nvm install --lts\nEOF\necho \"node installed\"\necho \"building front-end on server\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  cd front_end\n  docker build . -t front_end\nEOF\necho \"front-end Docker image has been built\"\n```", "```rs\n. . .\nimport argparse\n. . .\nparser = argparse.ArgumentParser(\n                    description='Run the build'\n                  )\nparser.add_argument('--u', action='store',\n                    help='docker username',\n                    type=str, required=True)\nparser.add_argument('--p', action='store',\n                    help='docker password',\n                    type=str, required=True)\nargs = parser.parse_args()\n```", "```rs\n. . .\nprint(\"attempting to enter server\")\nbuild_process = Popen(f\"cd {DIRECTORY_PATH} && sh ./run_build.sh\n    {server_ip} {args.u} {args.p}\", shell=True)\nbuild_process.wait()\ndestroy_process = Popen(f\"cd {DIRECTORY_PATH} && terraform destroy\",\n    shell=True)\n. . .\n```", "```rs\n. . .\necho \"Rust has been installed\"\necho \"logging in to Docker\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  echo $3 | docker login --username $2 --password-stdin\nEOF\necho \"logged in to Docker\"\necho \"building Rust Docker image\"\n. . .\n```", "```rs\necho \"building Rust Docker image\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  cd web_app\n  docker build . -t rust_app\n  docker tag rust_app:latest maxwellflitton/to_do_actix:latest\n  docker push maxwellflitton/to_do_actix:latest\nEOF\necho \"Docker image built\"\n```", "```rs\necho \"building front-end on server\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  cd front_end\n  docker build . -t front_end\n  docker tag front_end:latest maxwellflitton/to_do_react:latest\n  docker push maxwellflitton/to_do_react:latest\nEOF\necho \"front-end Docker image has been built\"\n```", "```rs\npython3 run_build.py --u some_username --p some_password\n```", "```rs\nservices:\n  nginx:\n    . . .\n  postgres_production:\n    . . .\n  redis_production:\n      . . .\n  rust_app:\n    . . .\n  front_end:\n    . . .\n```", "```rs\n  nginx:\n    container_name: 'nginx-rust'\n    image: \"nginx:latest\"\n    ports:\n      - \"80:80\"\n    links:\n      - rust_app\n      - front_end\n    volumes:\n      - ./nginx_config.conf:/etc/nginx/nginx.conf\n```", "```rs\nworker_processes  auto;\nerror_log  /var/log/nginx/error.log warn;\n```", "```rs\nevents {\n    worker_connections  512;\n}\n```", "```rs\nhttp {\n    server {\n        listen 80;\n        location /v1 {\n            proxy_pass http://rust_app:8000/v1;\n        }\n        location / {\n            proxy_pass http://front_end:4000/;\n        }\n    }\n}\n```", "```rs\n  postgres_production:\n    container_name: 'to-do-postgres-production'\n    image: 'postgres:latest'\n    restart: always\n    ports:\n      - '5433:5432'\n    environment:\n      - 'POSTGRES_USER=username'\n      - 'POSTGRES_DB=to_do'\n      - 'POSTGRES_PASSWORD=password'\n    expose:\n      - 5433\n  redis_production:\n      container_name: 'to-do-redis'\n      image: 'redis:5.0.5'\n      ports:\n        - '6379:6379'\n      volumes:\n    \t  - ./data/redis:/tmp\n```", "```rs\n  rust_app:\n    container_name: rust_app\n    build: \"../web_app\"\n    restart: always\n    ports:\n      - \"8000:8000\"\n    links:\n      - postgres_production\n      - redis_production\n    expose:\n      - 8000\n    volumes:\n      - ./rust_config.yml:/config.yml\n```", "```rs\nDB_URL: postgres://username:password@postgres_production/to_do\nSECRET_KEY: secret\nEXPIRE_MINUTES: 120\nREDIS_URL: redis://redis_production/\n```", "```rs\n})\n.bind(\"0.0.0.0:8000\")?\n.run()\n```", "```rs\nRUN rm config.yml\n```", "```rs\n  front_end:\n    container_name: front_end\n    image: \"maxwellflitton/to_do_react:latest\"\n    restart: always\n    ports:\n      - \"4000:4000\"\n    expose:\n      - 4000\n```", "```rs\ndocker-compose up\n```", "```rs\ndiesel migration run\n```", "```rs\ncurl --location --request POST 'http://localhost/v1/user/create' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"name\": \"maxwell\",\n    \"email\": \"maxwellflitton@gmail.com\",\n    \"password\": \"test\"\n}'\n```", "```rs\naxios.get(window.location.href + \"/v1/item/get\",\n```", "```rs\npython3 run_build.py --u some_username --p some_password\n```", "```rs\n#!/usr/bin/env bash\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\ncd $SCRIPTPATH\n```", "```rs\nscp -i \"~/.ssh/keys/remotebuild.pem\"\n./deployment-compose.yml ec2-user@$1:/home/ec2-user/docker-compose.yml\nscp -i \"~/.ssh/keys/remotebuild.pem\"\n./rust_config.yml ec2-user@$1:/home/ec2-user/rust_config.yml\nscp -i \"~/.ssh/keys/remotebuild.pem\"\n./.env ec2-user@$1:/home/ec2-user/.env\nscp -i \"~/.ssh/keys/remotebuild.pem\"\n./nginx_config.conf ec2-user@$1:/home/ec2-user/nginx_config.conf\nscp -i \"~/.ssh/keys/remotebuild.pem\" -r\n../web_app/migrations ec2-user@$1:/home/ec2-user/migrations\n```", "```rs\necho \"installing Rust\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  curl https://sh.rustup.rs -sSf | bash -s -- -y\n  until [ -f ./output.txt ]\n  do\n      sleep 2\n  done\n  echo \"File found\"\nEOF\necho \"Rust has been installed\"\n```", "```rs\necho \"installing diesel\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  cargo install diesel_cli --no-default-features --features postgres\nEOF\necho \"diesel has been installed\"\n```", "```rs\necho \"building system\"\nssh -i \"~/.ssh/keys/remotebuild.pem\" -t ec2-user@$1 << EOF\n  echo $3 | docker login --username $2 --password-stdin\n  docker-compose up -d\n  sleep 2\n  diesel migration run\n  curl --location --request POST 'http://localhost/v1/user/create' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n      \"name\": \"maxwell\",\n      \"email\": \"maxwellflitton@gmail.com\",\n      \"password\": \"test\"\n  }'\nEOF\necho \"system has been built\"\n```", "```rs\nresource \"aws_db_instance\" \"main_db\" {\n  instance_class         = \"db.t3.micro\"\n  allocated_storage      = 5\n  engine                 = \"postgres\"\n  username               = var.db_username\n  password               = var.db_password\n  db_name                = \"to_do\"\n  publicly_accessible    = true\n  skip_final_snapshot    = true\n  tags = {\n      Name = \"to-do production database\"\n    }\n}\n```", "```rs\nvariable \"db_password\" {\n    description = \"The password for the database\"\n    default = \"password\"\n}\nvariable \"db_username\" {\n    description = \"The username for the database\"\n    default = \"username\"\n}\n```", "```rs\n-var\"db_password=some_password\" -var\"db_username=some_username\"\n```", "```rs\npip install pyyaml\n```", "```rs\nimport yaml\n```", "```rs\nwith open(\"./database.json\") as json_file:\n    db_data = json.load(json_file)\nparams = f' -var=\"db_password={db_data[\"password\"]}\"\n            -var=\"db_username={db_data[\"user\"]}\"'\n```", "```rs\n{\n    \"user\": \"Santiago\",\n    \"password\": \"1234567890\",\n    \"host\": \"localhost\",\n    \"port\": \"5432\",\n    \"database\": \"test\"\n}\n```", "```rs\napply_process = Popen(f\"cd {DIRECTORY_PATH} && terraform apply\" + params, shell=True)\n```", "```rs\n. . .\nproduce_output.wait()\nwith open(f\"{DIRECTORY_PATH}/output.json\", \"r\") as file:\n    data = json.loads(file.read())\ndatabase_url = f\"postgresql://{db_data['user']}:{db_data['password']}\n    @{data['db_endpoint']['value'][0]}/to_do\"\nwith open(\"./database.txt\", \"w\") as text_file:\n    text_file.write(\"DATABASE_URL=\" + database_url)\n```", "```rs\nwith open(\"./rust_config.yml\") as yaml_file:\n    config = yaml.load(yaml_file, Loader=yaml.FullLoader)\nconfig[\"DB_URL\"] = database_url\nwith open(\"./rust_config.yml\", \"w\") as yaml_file:\n    yaml.dump(config, yaml_file, default_flow_style=False)\n```", "```rs\nscp -i \"~/.ssh/keys/remotebuild.pem\"\n./database.txt ec2-user@$1:/home/ec2-user/.env\n```"]