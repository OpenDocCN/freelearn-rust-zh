["```rs\n#[macro_use]\n```", "```rs\nextern crate rocket;\n```", "```rs\nuse rocket::{Build, Rocket};\n```", "```rs\n#[derive(FromForm)]\n```", "```rs\nstruct Filters {\n```", "```rs\n    age: u8,\n```", "```rs\n    active: bool,\n```", "```rs\n}\n```", "```rs\n#[route(GET, uri = \"/user/<uuid>\", rank = 1, format = \"text/plain\")]\n```", "```rs\nfn user(uuid: &str) { /* ... */ }\n```", "```rs\n#[route(GET, uri = \"/users/<grade>?<filters..>\")]\n```", "```rs\nfn users(grade: u8, filters: Filters) { /* ... */ }\n```", "```rs\n#[launch]\n```", "```rs\nfn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build().mount(\"/\", routes![user, users])\n```", "```rs\n}\n```", "```rs\n#[get(\"/user/<uuid>\", rank = 1, format = \"text/plain\")]\n```", "```rs\n#[get(\"/users/<grade>?<filters..>\")]\n```", "```rs\n#[get(\"/<id>\")]\n```", "```rs\nfn process(id: u8) {/* ... */}\n```", "```rs\n> cargo build\n   ...\n  Compiling route v0.1.0 (/Users/karuna/Chapter03/\n  04UnusedParameter)\nerror: unused parameter\n --> src/main.rs:6:7\n  |\n6 | #[get(\"/<id>\")]\n  |       ^^^^^^^\nerror: [note] expected argument named `id` here\n --> src/main.rs:7:15\n  |\n7 | fn process_abc() { /* ... */ }\n  |               ^^\n```", "```rs\nstruct S;\n```", "```rs\n#[get(\"/<id>\")]\n```", "```rs\nfn process(id: S) { /* ... */ }\n```", "```rs\n> cargo build\n...\n  Compiling route v0.1.0 (/home/karuna/workspace/\n  rocketbook/Chapter03/05NotFromParam)\nerror[E0277]: the trait bound `S: FromParam<'_>` is not satisfied\n--> src/main.rs:9:16\n  | \n9 | fn process(id: S) { /* ... */ }\n  |                ^ the trait `FromParam<'_>` is not implemented for `S` \n  | \n  = note: required by `from_param`\nerror: aborting due to previous error\n```", "```rs\n#[get(\"/<_>\")]\n```", "```rs\nfn index() {}\n```", "```rs\n#[launch]\n```", "```rs\nfn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build().mount(\"/\", routes![index])\n```", "```rs\n}\n```", "```rs\n#[get(\"/<rank>\", rank = 1)]\n```", "```rs\nfn first(rank: u8) -> String {\n```", "```rs\n    let result = rank + 10;\n```", "```rs\n    format!(\"Your rank is, {}!\", result)\n```", "```rs\n}\n```", "```rs\n#[get(\"/<name>\", rank = 2)]\n```", "```rs\nfn second(name: &str) -> String {\n```", "```rs\n    format!(\"Hello, {}!\", name)\n```", "```rs\n}\n```", "```rs\n#[launch]\n```", "```rs\nfn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build().mount(\"/\", routes![first, second])\n```", "```rs\n}\n```", "```rs\n> curl http://127.0.0.1:8000/1\nYour rank is, 11!\n> curl http://127.0.0.1:8000/jane\nHello, jane!\n```", "```rs\nGET /1:\n   >> Matched: (first) GET /<rank>\n   >> Outcome: Success\n   >> Response succeeded.\nGET /jane:\n   >> Matched: (first) GET /<rank>\n   >> `rank: u8` param guard parsed forwarding with error \n      \"jane\"\n   >> Outcome: Forward\n   >> Matched: (second) GET /<name> [2]\n   >> Outcome: Success\n   >> Response succeeded.\n```", "```rs\n#[get(\"/get\", format = \"text/plain\")]\n```", "```rs\nfn get() -> &'static str {\n```", "```rs\n    \"GET Request\"\n```", "```rs\n}\n```", "```rs\n#[post(\"/post\", format = \"form\")]\n```", "```rs\nfn post() -> &'static str {\n```", "```rs\n    \"POST Request\"\n```", "```rs\n}\n```", "```rs\n#[launch]\n```", "```rs\nfn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build().mount(\"/\", routes![get, post])\n```", "```rs\n}\n```", "```rs\n> curl -H \"Accept: text/plain\" http://127.0.0.1:8000/get\nGET Request\n> curl -H \"Accept: application/json\" http://127.0.0.1:8000/get\n{\n  \"error\": {\n    \"code\": 404,\n    \"reason\": \"Not Found\",\n    \"description\": \"The requested resource could not be \n    found.\"\n  }\n}\n```", "```rs\n> curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" http://127.0.0.1:8000/post\nPOST Request\n> curl -X POST -H \"Content-Type: text/plain\" http://127.0.0.1:8000/post\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>404 Not Found</title>\n</head>\n...\n</html>\n```", "```rs\n#[derive(FromForm)]\n```", "```rs\nstruct Filters {\n```", "```rs\n    age: u8,\n```", "```rs\n    active: bool,\n```", "```rs\n}\n```", "```rs\n#[post(\"/post\", data = \"<data>\")]\n```", "```rs\nfn post(data: Form<Filters>) -> &'static str {\n```", "```rs\n    \"POST Request\"\n```", "```rs\n}\n```", "```rs\n#[launch]\n```", "```rs\nfn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build().mount(\"/\", routes![post])\n```", "```rs\n}\n```", "```rs\nstruct Filters {\n```", "```rs\n    ...\n```", "```rs\n}\n```", "```rs\n#[derive(Debug)]\n```", "```rs\nstruct User {\n```", "```rs\n    uuid: String,\n```", "```rs\n    name: String,\n```", "```rs\n    age: u8,\n```", "```rs\n    grade: u8,\n```", "```rs\n    active: bool,\n```", "```rs\n}\n```", "```rs\nuse std::collections::HashMap;\n```", "```rs\n...\n```", "```rs\nstatic USERS: HashMap<&str, User> = {\n```", "```rs\n    let map = HashMap::new();\n```", "```rs\n    map.insert(\n```", "```rs\n        \"3e3dd4ae-3c37-40c6-aa64-7061f284ce28\",\n```", "```rs\n        User {\n```", "```rs\n            uuid: String::from(\"3e3dd4ae-3c37-40c6-aa64-\n```", "```rs\n            7061f284ce28\"),\n```", "```rs\n            name: String::from(\"John Doe\"),\n```", "```rs\n            age: 18,\n```", "```rs\n            grade: 1,\n```", "```rs\n            active: true,\n```", "```rs\n        },\n```", "```rs\n    );\n```", "```rs\n    map\n```", "```rs\n};\n```", "```rs\n[dependencies]\n```", "```rs\nlazy_static = \"1.4.0\"\n```", "```rs\nrocket = \"0.5.0-rc.1\"\n```", "```rs\nuse lazy_static::lazy_static;\n```", "```rs\nuse std::collections::HashMap;\n```", "```rs\n...\n```", "```rs\nlazy_static! {\n```", "```rs\n    static ref USERS: HashMap<&'static str, User> = {\n```", "```rs\n        let mut map = HashMap::new();\n```", "```rs\n        map.insert(\n```", "```rs\n            \"3e3dd4ae-3c37-40c6-aa64-7061f284ce28\",\n```", "```rs\n            User {\n```", "```rs\n                ...\n```", "```rs\n            },\n```", "```rs\n        );\n```", "```rs\n        map\n```", "```rs\n    };\n```", "```rs\n}\n```", "```rs\n#[get(\"/user/<uuid>\", rank = 1, format = \"text/plain\")]\n```", "```rs\nfn user(uuid: &str) -> String {\n```", "```rs\n    let user = USERS.get(uuid);\n```", "```rs\n    match user {\n```", "```rs\n        Some(u) => format!(\"Found user: {:?}\", u),\n```", "```rs\n        None => String::from(\"User not found\"),\n```", "```rs\n    }\n```", "```rs\n}\n```", "```rs\n#[route(GET, uri = \"/users/<grade>?<filters..>\")]\n```", "```rs\nfn users(grade: u8, filters: Filters) {}\n```", "```rs\nstruct NameGrade<'r> {\n```", "```rs\n    name: &'r str,\n```", "```rs\n    grade: u8,\n```", "```rs\n}\n```", "```rs\npub trait FromParam<'a>: Sized {\n```", "```rs\n    type Error: Debug;\n```", "```rs\n    fn from_param(param: &'a str) -> Result<Self, Self::Error>;\n```", "```rs\n}\n```", "```rs\nuse rocket::{request::FromParam, Build, Rocket};\n```", "```rs\n...\n```", "```rs\nimpl<'r> FromParam<'r> for NameGrade<'r> {\n```", "```rs\n    type Error = &'static str;\n```", "```rs\n    fn from_param(param: &'r str) -> Result<Self, Self::\n```", "```rs\n    Error> {}\n```", "```rs\n}\n```", "```rs\nconst ERROR_MESSAGE: Result<NameGrade, &'static str> = Err(\"Error parsing user parameter\");\n```", "```rs\nlet name_grade_vec: Vec<&'r str> = param.split('_').collect();\n```", "```rs\nmatch name_grade_vec.len() {\n```", "```rs\n    2 => match name_grade_vec[1].parse::<u8>() {\n```", "```rs\n        Ok(n) => Ok(Self {\n```", "```rs\n            name: name_grade_vec[0],\n```", "```rs\n            grade: n,\n```", "```rs\n        }),\n```", "```rs\n        Err(_) => ERROR_MESSAGE,\n```", "```rs\n    },\n```", "```rs\n    _ => ERROR_MESSAGE,\n```", "```rs\n}\n```", "```rs\n#[get(\"/users/<name_grade>?<filters..>\")]\n```", "```rs\nfn users(name_grade: NameGrade, filters: Filters) -> String {}\n```", "```rs\nlet users: Vec<&User> = USERS\n```", "```rs\n    .values()\n```", "```rs\n    .filter(|user| user.name.contains(&name_grade.name) && \n```", "```rs\n    user.grade == name_grade.grade)\n```", "```rs\n    .filter(|user| user.age == filters.age && user.active \n```", "```rs\n    == filters.active)\n```", "```rs\n    .collect();\n```", "```rs\nif users.len() > 0 {\n```", "```rs\n    users\n```", "```rs\n        .iter()\n```", "```rs\n        .map(|u| u.name.to_string())\n```", "```rs\n        .collect::<Vec<String>>()\n```", "```rs\n        .join(\",\")\n```", "```rs\n} else {\n```", "```rs\n    String::from(\"No user found\")\n```", "```rs\n}\n```", "```rs\ncurl -G -d age=18 -d active=true http://127.0.0.1:8000/users/John_1\n```", "```rs\nfn users(name_grade: NameGrade, filters: Option<Filters>) -> String {\n```", "```rs\n...\n```", "```rs\n        .filter(|user| {\n```", "```rs\n            if let Some(fts) = &filters {\n```", "```rs\n                user.age == fts.age && user.active == \n```", "```rs\n                fts.active\n```", "```rs\n            } else {\n```", "```rs\n                true\n```", "```rs\n            }\n```", "```rs\n        })\n```", "```rs\n...\n```", "```rs\nmatch something {\n```", "```rs\n    Ok(i) => /* use i here */ \"\",\n```", "```rs\n    Err(err) => /* use err here */ \"\",\n```", "```rs\n}\n```", "```rs\npub trait Responder<'r, 'o: 'r> {\n```", "```rs\n    fn respond_to(self, request: &'r Request<'_>) -> \n```", "```rs\n    Result<'o>;\n```", "```rs\n}\n```", "```rs\nuse rocket::http::ContentType;\n```", "```rs\nuse rocket::response::{self, Responder, Response};\n```", "```rs\nuse std::io::Cursor;\n```", "```rs\nimpl<'r> Responder<'r, 'r> for &'r User {\n```", "```rs\n    fn respond_to(self, _: &'r Request<'_>) -> \n```", "```rs\n    response::Result<'r> {    }\n```", "```rs\n}\n```", "```rs\nlet user = format!(\"Found user: {:?}\", self);\n```", "```rs\nResponse::build()\n```", "```rs\n    .sized_body(user.len(), Cursor::new(user))\n```", "```rs\n    .raw_header(\"X-USER-ID\", self.uuid.to_string())\n```", "```rs\n    .header(ContentType::Plain)\n```", "```rs\n    .ok()\n```", "```rs\nstruct Something {}\n```", "```rs\nimpl Something {\n```", "```rs\n    fn new() -> Something { ... }\n```", "```rs\n    fn func1(&mut self) -> &mut Something { ... }\n```", "```rs\n    fn func2(&mut self) -> &mut Something { ... }\n```", "```rs\n}\n```", "```rs\nstruct NewUser<'a>(Vec<&'a User>);\n```", "```rs\nimpl<'r> Responder<'r, 'r> for NewUser<'r> {\n```", "```rs\n    fn respond_to(self, _: &'r Request<'_>) -> \n```", "```rs\n    response::Result<'r> {\n```", "```rs\n        let user = self\n```", "```rs\n            .0\n```", "```rs\n            .iter()\n```", "```rs\n            .map(|u| format!(\"{:?}\", u))\n```", "```rs\n            .collect::<Vec<String>>()\n```", "```rs\n            .join(\",\");\n```", "```rs\n        Response::build()\n```", "```rs\n            .sized_body(user.len(), Cursor::new(user))\n```", "```rs\n            .header(ContentType::Plain)\n```", "```rs\n            .ok()\n```", "```rs\n    }\n```", "```rs\n}\n```", "```rs\n#[get(\"/user/<uuid>\", rank = 1, format = \"text/plain\")]\n```", "```rs\nfn user(uuid: &str) -> Option<&User> {\n```", "```rs\n    let user = USERS.get(uuid);\n```", "```rs\n    match user {\n```", "```rs\n        Some(u) => Some(u),\n```", "```rs\n        None => None,\n```", "```rs\n    }\n```", "```rs\n}\n```", "```rs\n#[get(\"/users/<name_grade>?<filters..>\")]\n```", "```rs\nfn users(name_grade: NameGrade, filters: Option<Filters>) -> Option<NewUser> {\n```", "```rs\n    ...\n```", "```rs\n    if users.len() > 0 {\n```", "```rs\n        Some(NewUser(users))\n```", "```rs\n    } else {\n```", "```rs\n        None\n```", "```rs\n    }\n```", "```rs\n}\n```", "```rs\nuse rocket::response::status;\n```", "```rs\n...\n```", "```rs\nfn user(uuid: &str) -> status::Accepted<&User>  {\n```", "```rs\n    ...\n```", "```rs\n    status::Accepted(user)\n```", "```rs\n}\n```", "```rs\nuse rocket::http::Status;\n```", "```rs\nuse rocket::response::status;\n```", "```rs\n...\n```", "```rs\nfn user(uuid: &str) -> status::Custom<&User>  {\n```", "```rs\n    ...\n```", "```rs\n    status::Custom(Status::PreconditionFailed, user)\n```", "```rs\n}\n```", "```rs\nuse rocket::response::content;\n```", "```rs\nuse rocket::http::ContentType;\n```", "```rs\n...\n```", "```rs\nfn user(uuid: &str) -> content::Plain<&User> {\n```", "```rs\n    ...\n```", "```rs\n    content::Plain(user)\n```", "```rs\n}\n```", "```rs\n...\n```", "```rs\nfn users(name_grade: NameGrade, filters: Option<Filters>) -> content::Custom<NewUser> {\n```", "```rs\n    ...\n```", "```rs\n    status::Custom(ContentType::Plain, NewUser(users));\n```", "```rs\n}\n```", "```rs\nfn user(uuid: &str) -> status::Accepted<content::Plain<&User>> {\n```", "```rs\n    ...\n```", "```rs\n    status::Accepted(content::Plain(user))\n```", "```rs\n}\n```", "```rs\nfn user(uuid: &str) -> (Status, (ContentType, &User)) {\n```", "```rs\n    ...\n```", "```rs\n    (Status::Accepted, (ContentType::Plain, user))\n```", "```rs\n}\n```", "```rs\nfn default_response<'r>() -> response::Response<'r> {\n```", "```rs\n    Response::build()\n```", "```rs\n        .header(ContentType::Plain)\n```", "```rs\n        .raw_header(\"X-CUSTOM-ID\", \"CUSTOM\")\n```", "```rs\n        .finalize()\n```", "```rs\n}\n```", "```rs\nfn respond_to(self, _: &'r Request<'_>) -> response::Result<'r> {\n```", "```rs\n    let base_response = default_response();\n```", "```rs\n    let user = format!(\"Found user: {:?}\", self);\n```", "```rs\n    Response::build()\n```", "```rs\n        .sized_body(user.len(), Cursor::new(user))\n```", "```rs\n        .raw_header(\"X-USER-ID\", self.uuid.to_string())\n```", "```rs\n        .merge(base_response)\n```", "```rs\n        .ok()\n```", "```rs\n}\n```", "```rs\nfn respond_to(self, _: &'r Request<'_>) -> response::Result<'r> {\n```", "```rs\n    let base_response = default_response();\n```", "```rs\n    ...\n```", "```rs\n    Response::build()\n```", "```rs\n        .sized_body(user.len(), Cursor::new(user))\n```", "```rs\n        .raw_header(\"X-CUSTOM-ID\", \"USERS\")\n```", "```rs\n        .join(base_response)\n```", "```rs\n        .ok()\n```", "```rs\n}\n```", "```rs\n< x-custom-id: CUSTOM \n< content-type: text/plain; charset=utf-8\n< x-custom-id: USERS \n< x-custom-id: CUSTOM \n< content-type: text/plain; charset=utf-8\n```", "```rs\n    use rocket::response::status::NotFound;\n    ...\n    fn user(uuid: &str) -> Result<&User, NotFound<&str>> {\n        let user = USERS.get(uuid);\n        user.ok_or(NotFound(\"User not found\"))\n    }\n    ```", "```rs\n    use rocket::fs::{NamedFile, relative};\n    use std::path::Path;\n    #[get(\"/favicon.png\")]\n    async fn favicon() -> NamedFile {\n        NamedFile::open(Path::new(relative!(\n        \"static\")).join(\"favicon.png\")).await.unwrap()\n    }\n    ```", "```rs\nfn user(uuid: &str) -> Result<&User, NotFound<&str>> {\n```", "```rs\n    let user = USERS.get(uuid);\n```", "```rs\n    user.ok_or(NotFound(\"User not found\"))\n```", "```rs\n}\n```", "```rs\nfn user(uuid: &str) -> Option<&User> {\n```", "```rs\n    USERS.get(uuid) \n```", "```rs\n}\n```", "```rs\n#[catch(404)]\n```", "```rs\nfn not_found(req: &Request) -> String {\n```", "```rs\n    format!(\"We cannot find this page {}.\", req.uri())\n```", "```rs\n}\n```", "```rs\n#[launch]\n```", "```rs\nfn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build().mount(\"/\", routes![user, users, \n```", "```rs\n    favicon]).register(\"/\", catchers![not_found])\n```", "```rs\n}\n```", "```rs\n#[catch(403)]\n```", "```rs\nfn forbidden(req: &Request) -> String {\n```", "```rs\n    format!(\"Access forbidden {}.\", req.uri())\n```", "```rs\n}\n```", "```rs\nfn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build().mount(\"/\", routes![user, users, \n```", "```rs\n    favicon]).register(\"/\", catchers![not_found, \n```", "```rs\n    forbidden])\n```", "```rs\n}\n```", "```rs\nuse rocket::http::{Status, ContentType};\n```", "```rs\n...\n```", "```rs\nfn users(name_grade: NameGrade, filters: Option<Filters>) -> Result<NewUser, Status> {\n```", "```rs\n    ...\n```", "```rs\n    if users.is_empty() {\n```", "```rs\n        Err(Status::Forbidden)\n```", "```rs\n    } else {\n```", "```rs\n        Ok(NewUser(users))\n```", "```rs\n    }\n```", "```rs\n}\n```", "```rs\ncurl -v http://127.0.0.1:8000/users/John_2\n...\n< HTTP/1.1 403 Forbidden\n< content-type: text/plain; charset=utf-8\n...\n< \n* Connection #0 to host 127.0.0.1 left intact\nAccess Forbidden /users/John_2.* Closing connection 0\n```"]