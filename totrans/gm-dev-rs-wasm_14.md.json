["```rs\n#[derive(Serialize, Deserialize)]\nstruct Options {\n    width: f32,\n    height: f32,\n}\n#[wasm_bindgen]\nextern \"C\" {\n    type Application;\n    type Container;\n    #[wasm_bindgen(method, js_name = \"addChild\")]\n    fn add_child(this: &Container, child: &Sprite);\n    #[wasm_bindgen(constructor, js_namespace = PIXI)]\n    fn new(dimens: &JsValue) -> Application;\n    #[wasm_bindgen(method, getter)]\n    fn view(this: &Application) -> HtmlCanvasElement;\n    #[wasm_bindgen(method, getter)]\n    fn stage(this: &Application) -> Container;\n    type Sprite;\n    #[wasm_bindgen(static_method_of = Sprite, js_namespace \n        = PIXI)]\n    fn from(name: &JsValue) -> Sprite;\n}\n// This is like the `main` function, except for JavaScript.\n#[wasm_bindgen(start)]\npub fn main_js() -> Result<(), JsValue> {\n    let app = Application::new(\n        &JsValue::from_serde(&Options {\n            width: 640.0,\n            height: 360.0,\n        })\n        .unwrap(),\n    );\n    let body = \n        browser::document().unwrap().body().unwrap();\n    body.append_child(&app.view()).unwrap();\n    let sprite = \n        Sprite::from(&JsValue::from_str(\"Stone.png\"));\n    app.stage().add_child(&sprite);\n    console_error_panic_hook::set_once();\n    Ok(())\n}\n```", "```rs\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>My Rust + Webpack project!</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" type=\"text/css\"\n      media=         \"screen\">\n  <link rel=\"preload\" as=\"image\" href=\"Button.svg\">\n  <link rel=\"preload\" as=\"font\" href=\n  \"kenney_future_narrow-webfont.woff2\">\n  <script src=\"img/pixi.js\">\n  </script>\n</head>\n...\n```", "```rs\nuse macroquad::prelude::*;\n#[macroquad::main(\"BasicShapes\")]\nasync fn main() {\n    loop {\n        clear_background(RED);\n        draw_line(40.0, 40.0, 100.0, 200.0, 15.0, BLUE);\n        draw_rectangle(screen_width() / 2.0 - 60.0, 100.0,\n            120.0, 60.0, GREEN);\n        draw_circle(screen_width() - 30.0, screen_height() \n            - 30.0, 15.0, YELLOW);\n        draw_text(\"HELLO\", 20.0, 20.0, 20.0, DARKGRAY);\n        next_frame().await\n    }\n}\n```", "```rs\nuse bevy::prelude::*;\nfn main() {\n    App::new().add_system(hello_world_system).run();\n}\nfn hello_world_system() {\n    println!(\"hello world\");\n}\n```"]