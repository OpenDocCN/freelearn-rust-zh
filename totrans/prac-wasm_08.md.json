["```rs\n$ git clone https://github.com/WebAssembly/binaryen\n```", "```rs\n$ cd binaryen\n```", "```rs\n$ cmake .\n```", "```rs\n$ make .\n```", "```rs\n$ mkdir build\n$ cd build\n```", "```rs\n$ \"<path-to-visual-studio-root>\\Common7\\IDE\\CommonExtensions\\\n  Microsoft\\CMake\\CMake\\bin\\cmake.exe\" ..\n```", "```rs\n$ msbuild binaryen.vcxproj\n```", "```rs\n$ tree -L 1\n├── wasm-as\n├── wasm-ctor-eval\n├── wasm-dis\n├── wasm-emscripten-finalize\n├── wasm-metadce\n├── wasm-opt\n├── wasm-reduce\n├── wasm-shell\n└── wasm2js \n```", "```rs\n    $ mkdir binaryen-playground\n    $ cd binaryen-playground\n    ```", "```rs\n    $ touch add.wat\n    ```", "```rs\n    (module\n        (func $add (param $x i32) (param $y i32) \n          (result i32)\n            (i32.add\n                (local.get $x)\n                (local.get $y)\n            )\n        )\n    )\n    ```", "```rs\n    $ /path/to/build/directory/of/binaryen/wasm-as add.wat\n    ```", "```rs\n00 61 73 6d 01 00 00 00 01 07 01 60 02 7f 7f 01\n7f 03 02 01 00 0a 09 01 07 00 20 00 20 01 6a 0b\n```", "```rs\n$ /path/to/build/directory/of/binaryen/wasm-as --help\nwasm-as INFILE\nAssemble a .wat (WebAssembly text format) into a .wasm (WebAssembly binary\nformat)\nOptions:\n  --version                        Output version information     and exit\n  --help,-h                        Show this help message and     exit\n  --debug,-d                       Print debug information to     stderr\n....\n  --output,-o                      Output file (stdout if not \n    specified)\n  --validate,-v                    Control validation of the \n    output module\n  --debuginfo,-g                   Emit names section and debug\n    info\n  --source-map,-sm                 Emit source map to the \n    specified file\n  --source-map-url,-su             Use specified string as \n    source map URL\n  --symbolmap,-s                   Emit a symbol map (indexes \n    => names)\n```", "```rs\n$ /path/to/build/directory/of/binaryen/wasm-as add.wat -d\nLoading 'add.wat'...\ns-parsing...\nw-parsing...\nValidating...\nwriting...\nwriting binary to add.wasm\nOpening 'add.wasm'\n== writeHeader\n...\n== writeTypes\n...\n== writeFunctionSignatures\n...\n== writeFunctions\n...\nfinishUp\nDone.\n```", "```rs\n    $ /path/to/build/directory/of/binaryen/wasm-dis add.wasm -o gen-add.wast\n    ```", "```rs\n    (module\n    (type $i32_i32_=>_i32 (func (param i32 i32) \n      (result i32)))\n    (func $0 (param $0 i32) (param $1 i32) (result i32)\n               (i32.add  (local.get $0)  (local.get $1) )\n    )\n    )\n    ```", "```rs\n    $ /path/to/build/directory/of/binaryen/wasm-dis --help\n    wasm-dis INFILE \n    Un-assemble a .wasm (WebAssembly binary format) into a .wat (WebAssembly text\n    format)\n    Options:\n      --version        Output version information and exit\n      --help,-h        Show this help message and exit\n      --debug,-d       Print debug information to stderr\n      --output,-o      Output file (stdout if not specified)\n      --source-map,-sm Consume source map from the specified file to add location\n    ```", "```rs\n    $ /path/to/build/directory/of/binaryen/wasm-dis\n      add.wat -o gen-add.wast -d\n    parsing binary...\n    reading binary from add.wasm\n    Loading 'add.wasm'...\n    == readHeader\n    ...\n    == readSignatures\n    ...\n    == readFunctionSignatures\n    ...\n    == processExpressions\n    ...\n    == processExpressions finished\n    end function bodies\n    Printing...\n    Opening 'gen-add.wast'\n    Done.\n    ```", "```rs\n    (module\n        (func $parent (export \"parent\") (result i32)\n            (i32.add\n                (call $child)\n                (i32.const 13)\n            )\n        )\n        (func $child (result i32) (call $grandChild))\n        (func $grandChild (result i32) (call\n           $greatGrandChild))\n        (func $greatGrandChild (result i32) (i32.const 7))\n    )\n    ```", "```rs\n      optimizer.wast -o inline.wasm --print\n    (module\n    (type $0 (func (result i32)))\n    (export \"parent\" (func $parent))\n    (func $parent (; 0 ;) (type $0) (result i32)\n    (i32.add\n    (call $child)\n    (i32.const 13)\n      )\n    )\n    (func $child (; 1 ;) (type $0) (result i32)\n      (call $grandChild)\n    )\n    (func $grandChild (; 2 ;) (type $0) (result i32)\n      (call $greatGrandChild)\n    )\n    (func $greatGrandChild (; 3 ;) (type $0) (result i32)\n      (i32.const 7)\n    )\n    )\n    ```", "```rs\n60B inline-optimize.wasm\n273B inline-optimize.wat\n```", "```rs\n      optimizer.wast -o inline.wasm --print --inlining-\n      optimizing\n    ```", "```rs\n39B inline-optimize.wasm\n273B inline-optimize.wat\n```", "```rs\n    /path/to/bin/folder/of/binaryen/wasm-opt –help\n    ```", "```rs\n    $ touch add-with-export.wast\n    ```", "```rs\n(module\n    (export \"add\" (func $add))\n    (func $add (param $x i32) (param $y i32) \n      (result i32)\n        (i32.add\n            (local.get $x)\n            (local.get $y)\n        )\n    )\n)\n```", "```rs\n    $ /path/to/build/directory/of/binaryen/wasm2js add-\n      with-export.wast\n    ```", "```rs\nfunction asmFunc(global, env) {\nvar Math_imul = global.Math.imul;\nvar Math_fround = global.Math.fround;\nvar Math_abs = global.Math.abs;\nvar Math_clz32 = global.Math.clz32;\nvar Math_min = global.Math.min;\nvar Math_max = global.Math.max;\nvar Math_floor = global.Math.floor;\nvar Math_ceil = global.Math.ceil;\nvar Math_sqrt = global.Math.sqrt;\nvar abort = env.abort;\nvar nan = global.NaN;\nvar infinity = global.Infinity;\nfunction add(x, y) {\n  x = x | 0;\n  y = y | 0;\n  return x + y | 0 | 0;\n}\nreturn {\n  \"add\": add\n};\n}\nvar retasmFunc = asmFunc({\n    Math,\n    Int8Array,\n    Uint8Array,\n    Int16Array,\n    Uint16Array,\n    Int32Array,\n    Uint32Array,\n    Float32Array,\n    Float64Array,\n    NaN,\n    Infinity\n  }, {\n    abort: function() { throw new Error('abort'); }\n  });\nexport var add = retasmFunc.add;\n```"]