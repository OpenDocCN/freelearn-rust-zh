["```rs\n// in Car::Engine \nuse Fuel; \nuse Electrics; \n```", "```rs\n// in the main code \nuse Car::Interior::Audio; \nuse Car::Interior::Windows::HeatedRear; \n```", "```rs\ncargo new myapp -bin \n```", "```rs\ncargo new MathLib \n```", "```rs\nmod Trigonometry // top level module \n{ \n    mod Natural  // sub module \n    { \n\n    } \n\n    mod Arc      // sub module \n    { \n\n    } \n} \n```", "```rs\npub fn fahrenheit_to_celcius(a: f32) -> f32 \n{ \n    (a - 32f32) * 5f32 / 9f32 \n} \n```", "```rs\nmod Trigonometry // top level module \n{ \n    mod Natural  // sub module \n    {  \n    } \n\n    mod Arc      // sub module \n    {  \n    } \n} \n```", "```rs\nmod Trigonometry; \nmod RegressionAnalysis; \nmod Conversions; \nmod Bases; \n```", "```rs\nmod mycode;\n```", "```rs\n// Temperature.rs \nmod Temperature \n{ \n    fn fahrenheit_to_celcius(f: f32) -> f32 \n    { \n        (f - 32f32) * 5f32/9f32 \n    }  \n    fn celcius_to_fahrenheit(f: f32) -> f32 \n    { \n        (c * (9f32/5f32)) + 32f32 \n    }  \n    fn celcius_to_kelvin(c: f32) -> f32 \n    { \n        c + 273.15 \n    }  \n    fn kelvin_to_celcius(k: f32) -> f32 \n    { \n        k - 273.15; \n    }  \n    fn fahrenheit_to_kelvin(f: f32) -> f32 \n    { \n        (f + 459.67) * 5f32 / 9f32 \n    }  \n    fn kelvin_to_fahrenheit(k: f32) -> f32 \n    { \n        (k * (9f32 / 5f32)) - 459.67 \n    } \n} \n```", "```rs\nfn kelvin_to_celcius(k: f32) -> (bool, f32) \n{ \n    if k < 0f32 \n    { \n        return (false, k); \n    } \n    else \n    { \n        return (true, k - 273.15); \n    } \n} \n\nfn main()  \n{ \n    let mut calc = kelvin_to_celcius(14.5); \n    match calc.0 \n    { \n        true => println!(\"14.5K = {}C\", calc.1), \n        _ => println!(\"equation was invalid\"), \n    } \n\n    calc = kelvin_to_celcius(-4f32); \n    match calc.0 \n    { \n        true => println!(\"-4K = {}C\", calc.1), \n        _ => println!(\"invalid K\"), \n    } \n} \n```", "```rs\nmathslib::conversions::temperature::temperature \n```", "```rs\nmathslib::conversions::temperature; \n```", "```rs\n// in mod.rs \npub mod temperature; \n// all code in temperature.rs \"belongs\" to mod temperature \nfn celcius_to_kelvin(c: f32) -> (bool, f32) { ... } \n```", "```rs\n#[test] \n```", "```rs\ncargo test \n```", "```rs\nextern crate mathslib; \nuse mathsLib::conversions::temperature; \n\n#[cfg(test)] \nmod temperature_tests \n{ \n    #[test] \n    fn test_kelvin_to_celcius_pass() \n    { \n        let calc = kelvin_to_celcius(14.5); \n        assert_eq!(calc.0, true); \n    } \n\n    #[test] \n    #[should_panic(expected = \"assertion failed\")] \n    fn test_kelvin_to_celcius_fail() \n    { \n        let calc = kelvin_to_celcius(-4f32); \n        assert_eq!(calc.0,true); \n    } \n} \n```", "```rs\npub mod Temperature \n{ \n    pub fn fahrenheit_to_celcius(f: f32) -> f32 \n    { \n        (f - 32f32) * 5f32/9f32 \n    } \n```", "```rs\nuse mathslib::conversions::temperature; \n```", "```rs\nuse mathslib::conversions::temperature::*; \n```", "```rs\nuse mathslib::conversions::temperature::kelvin_to_celcius; \n```", "```rs\nuse super::*; \n```", "```rs\nextern crate mathslib; \nuse mathslib::conversions::temperature::*;  \nfn main()  \n{ \n    let mut testval = celcius_to_fahrenheit(100f32); \n    println!(\"100C = {}F\", testval.1); // should be 212 \n} \n```", "```rs\n[dependencies] \nmathslib = \"0.1.0\" \n```", "```rs\nrustc -L . src/main.rs && ./main \n```", "```rs\nextern crate crate_name; \n```", "```rs\nextern crate crate_name as my_crate; \n```", "```rs\nuse crate_name::module; \n```", "```rs\nuse my_crate::module; \n```", "```rs\nuse my_crate::module_name::*; \n```", "```rs\nuse my_crate::module_name; \n```", "```rs\nlet some_text = module_name::print_me(10.1f32);   \n```", "```rs\nuse my_crate::module_name::print_me; \n```", "```rs\nuse my_crate::module_name as mod_name; \n```", "```rs\nuse my_crate::module_name; \nlet foo = module_name::print_me(10f32); \n```", "```rs\nlet foo = mod_name::print_me(10f32); \n```", "```rs\nlet foo = my_crate::module_name::print_me(10f32); \n```", "```rs\nuse my_crate::module_name::{print_me, calculate_time}; \n```", "```rs\nuse my_crate::module_name::{self, print as my_print, calculate as my_calc}; \n```", "```rs\nuse my_crate::module_name; \nuse my_crate::module_name::print as my_print; \nuse my_crate::module_name::calculate as my_calc; \n```"]