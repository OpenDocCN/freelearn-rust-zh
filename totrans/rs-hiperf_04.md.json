["```rs\ntrait MyTrait {\n    fn check_this(String);\n}\n```", "```rs\nfn main() {\n    let mut int = Box::new(5);\n    *int += 5;\n    println!(\"int: {}\", int);\n}\n```", "```rs\n#![warn(trivial_casts, trivial_numeric_casts)]\n\n#[derive(Default, Debug)]\nstruct MyStruct {\n    a: i32,\n    b: i32,\n}\n\nfn main() {\n    let test = MyStruct::default();\n    println!(\"{:?}\", (test as MyStruct).a as i32);\n}\n```", "```rs\n#![warn(unsafe_code)]\n\nfn main() {\n    let test = vec![1, 2, 3];\n    println!(\"{}\", unsafe { test.get_unchecked(2) });\n}\n```", "```rs\n#![deny(unsafe_code)]\n\nfn main() {\n    let test = vec![1, 2, 3];\n    println!(\"{}\", get_second(&test));\n}\n\n#[allow(unsafe_code)]\nfn get_second(slice: &[i32]) -> i32 {\n    *unsafe { slice.get_unchecked(1) }\n}\n```", "```rs\n#![warn(unused_results)]\n\nfn main() {\n    let _ = write_hello();\n}\n\nfn write_hello() -> usize {\n    unimplemented!()\n}\n```", "```rs\n#![warn(unused_qualifications)]\n\n#[derive(Debug)]\nenum Test {\n    A,\n    B,\n}\n\nfn main() {\n    use Test::*;\n\n    println!(\"{:?}\", Test::A);\n    println!(\"{:?}\", B);\n}\n```", "```rs\n#![warn(unused_import_braces)]\n\n#[derive(Debug)]\nenum Test {\n    A,\n    B,\n}\n\n#[derive(Debug)]\nenum Test2 {\n    C,\n    D,\n}\n\nfn main() {\n    use Test::{A, B};\n    use Test2::{C};\n\n    println!(\"{:?}, {:?}, {:?}\", A, B, C);\n}\n```", "```rs\n#![warn(variant_size_differences)]\n\nenum Test {\n    A(u8),\n    B(u32),\n}\n```", "```rs\n#[deny(warnings)]\n```", "```rs\ncyclomatic-complexity-threshold = 30\n```", "```rs\n#![cfg_attr(feature = \"cargo-clippy\", forbid(deprecated))]\n```", "```rs\n    let max = 10;\n    for i in 0..max + 1 {\n        println!(\"{}\", i);\n    }\n```", "```rs\n#![feature(inclusive_range_syntax)]\n\nfn main() {\n    let max = 10;\n    for i in 0..=max {\n        println!(\"{}\", i);\n    }\n}\n```", "```rs\n#![deny(clippy)]\n```"]