["```rs\n127.0.0.1 user-identifier frank [10/Oct/2000:13:55:36 -0700] \"GET /apache_pb.gif HTTP/1.0\" 200 2326\n```", "```rs\n{\n    \"request.host\": \"127.0.0.1\",\n    \"request.ident\": \"user-identifier\",\n    \"request.authuser\": \"frank\",\n    \"request.date\": \"2000-10-10 13:55:36-07\",\n    \"request.request\": \"GET /apache_pb.gif HTTP/1.0\",\n    \"request.status\": 200,\n    \"request.bytes\": 2326,\n}\n```", "```rs\n[dependencies]\n```", "```rs\nlettre = \"0.9\"\n```", "```rs\nlettre_email = \"0.9\"\n```", "```rs\nuse lettre::{SmtpClient, Transport};\n```", "```rs\nuse lettre_email::EmailBuilder;\n```", "```rs\nfn send_email(email: &str, name: &str) -> Result<String, String> {\n```", "```rs\n    let email = EmailBuilder::new()\n```", "```rs\n        .to((email, name))\n```", "```rs\n        .from(\"admin@our_application.com\")\n```", "```rs\n        .subject(\"Hi, welcome to our_application\")\n```", "```rs\n        .text(\"Hello, thank you for joining our_\n```", "```rs\n        application.\")\n```", "```rs\n        .build()\n```", "```rs\n        .unwrap();\n```", "```rs\n    let mut mailer = SmtpClient::new_unencrypted_\n```", "```rs\n    localhost().unwrap().transport();\n```", "```rs\n    mailer\n```", "```rs\n        .send(email.into())\n```", "```rs\n        .map(|_| String::from(\"Successfuly sent email\"))\n```", "```rs\n        .map_err(|_| String::from(\"Couldn't send email\"))\n```", "```rs\n}\n```", "```rs\n[dependencies]\n```", "```rs\nactix-web = \"4.0.1\"\n```", "```rs\nuse actix_web::{get, web, App, HttpServer, Responder};\n```", "```rs\n#[get(\"/users/{name}\")]\n```", "```rs\nasync fn user(name: web::Path<String>) -> impl Responder {\n```", "```rs\n    format!(\"Hello {name}!\")\n```", "```rs\n}\n```", "```rs\n#[actix_web::main]\n```", "```rs\nasync fn main() -> std::io::Result<()> {\n```", "```rs\n    HttpServer::new(|| {\n```", "```rs\n        App::new()\n```", "```rs\n            .route(\"/hello_world\", web::get().to(|| async { \n```", "```rs\n            \"Hello World!\" }))\n```", "```rs\n            .service(user)\n```", "```rs\n    })\n```", "```rs\n    .bind((\"127.0.0.1\", 8080))?\n```", "```rs\n    .run()\n```", "```rs\n    .await\n```", "```rs\n}\n```", "```rs\n[dependencies]\n```", "```rs\ntide = \"0.16.0\"\n```", "```rs\nasync-std = { version = \"1.8.0\", features = [\"attributes\"] }\n```", "```rs\nuse tide::Request;\n```", "```rs\nasync fn hello_world(_: Request<()>) -> tide::Result {\n```", "```rs\n    Ok(String::from(\"Hello World!\").into())\n```", "```rs\n}\n```", "```rs\n#[async_std::main]\n```", "```rs\nasync fn main() -> tide::Result<()> {\n```", "```rs\n    let mut app = tide::new();\n```", "```rs\n    app.at(\"/hello_world\").get(hello_world);\n```", "```rs\n    app.listen(\"127.0.0.1:8080\").await?;\n```", "```rs\n    Ok(())\n```", "```rs\n}\n```", "```rs\n[dependencies]\n```", "```rs\ntokio = {version = \"1\", features = [\"full\"]}\n```", "```rs\nwarp = \"0.3\"\n```", "```rs\nuse warp::Filter;\n```", "```rs\n#[tokio::main]\n```", "```rs\nasync fn main() {\n```", "```rs\n    let hello = warp::path!(\"hello_world\")\n```", "```rs\n        .and(warp::path::end())\n```", "```rs\n        .map(|| format!(\"Hello world!\"));\n```", "```rs\n    warp::serve(hello).run(([127, 0, 0, 1], 8080)).await;\n```", "```rs\n}\n```"]