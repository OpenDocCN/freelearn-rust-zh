["```rs\npub struct DemoStruct {\n pub id: u64,\n pub name: String,\n pub probability: f64,\n}\n// ...\nlet source1 = DemoStruct { id: 31, name: String::from(\"Example Thing\"), probability: 0.42 };\n\nlet DemoStruct{ id: x, name: y, probability: z } = source1;\n```", "```rs\nDemoStruct{ id: 31, name: y, probability: z } = source1;\n```", "```rs\nlet source2 = DemoStruct { id: 35, name: String::from(\"Another Thing\"), probability: 0.42 };\nlet source3 = DemoStruct { id: 63, name: String::from(\"Super Thing\"), probability: 0.99 };\n\nif let DemoStruct { id: 63, name: y, probability: z } = source2 {\n    println!(\"When id is 63, name is {} and probability is {}\", y, z);\n}\n\nif let DemoStruct { id: 63, name: y, probability: z } = source3 {\n    println!(\"When id is 63, name is {} and probability is {}\", y, z);\n}\n```", "```rs\n    if false {\n println!(\"This never happens\");\n }\n else if let DemoStruct{ id: 35, name: y, probability: z } = source4 {\n println!(\"When id is 35, name is {} and probability is {}\", y, z);\n }\n else if let DemoStruct{ id: 36, name: y, probability: z } = source4 {\n println!(\"When id is 36, name is {} and probability is {}\", y, z);\n }\n else {\n println!(\"None of the conditions matched\");\n }\n```", "```rs\npub fn might_fail(id: u64) -> Result<DemoStruct, &'static str> {\n    if id % 2 == 0 {\n     Ok(DemoStruct { id: id, name: String::from(\"An Even Thing\"), probability: 0.2})\n }\n else {\n Err(\"Only even numbers are allowed\")\n }\n}\n```", "```rs\n    if let Ok(x) = might_fail(37) {\n        println!(\"Odd succeeded, name is {}\", x.name);\n    }\n\n    if let Ok(x) = might_fail(38) {\n        println!(\"Even succeeded, name is {}\", x.name);\n    }\n```", "```rs\nif let Ok(x) = might_fail(39) {\n    println!(\"Odd succeeded, name is {}\", x.name);\n}\nelse if let Err(x) = might_fail(39) {\n    println!(\"Odd failed, message is '{}'\", x);\n}\n```", "```rs\nlet result = might_fail(39);\nif let Ok(x) = result {\n    println!(\"Odd succeeded, name is {}\", x.name);\n}\nelse if let Err(x) = result {\n    println!(\"Odd failed, message is '{}'\", x);\n}\n```", "```rs\nmatch might_fail(39) {\n    Ok(x) => { println!(\"Odd succeeded, name is {}\", x.name) }\n    Err(x) => { println!(\"Odd failed, message is '{}'\", x) }\n}\n```", "```rs\nmatch might_fail(39) {\n    Ok(x) => { println!(\"Odd succeeded, name is {}\", x.name) }\n    Err(_) => { println!(\"Odd failed! Woe is me.\") }\n}\n```", "```rs\n    match might_fail(39) {\n        Ok(x) => { println!(\"Odd succeeded, name is {}\", x.name) }\n        _ => { println!(\"If none of the above patterns match, _ certainly will\") }\n    }\n```", "```rs\nlet source5 = DemoStruct { id: 40, name: String::from(\"A Surprising Thing\"), probability: 0.93 };\n\nif let DemoStruct {id: 41, name: x, probability: _} = source5 {\n    println!(\"Extracted name: {}\", x);\n}\n\nprintln!(\"source5.name is {}\", source5.name);\n```", "```rs\nlet source5 = DemoStruct { id: 40, name: String::from(\"A Surprising Thing\"), probability: 0.93 };\n\nif let DemoStruct {id: 41, name: &x, probability: _} = source5 {\n    println!(\"Extracted name: {}\", x);\n}\n\nprintln!(\"source5.name is {}\", source5.name);\n```", "```rs\nlet source5 = DemoStruct { id: 40, name: String::from(\"A Surprising Thing\"), probability: 0.93 };\n\nif let DemoStruct {id: 41, name: ref x, probability: _} = source5 {\n    println!(\"Extracted name: {}\", x);\n}\n\nprintln!(\"source5.name is {}\", source5.name);\n```", "```rs\nlet ref borrowed1 = source5;\nlet borrowed2 = &source5;\n```", "```rs\npub fn borrow_demostruct(x: &DemoStruct) {\n    println!(\"Borrowed {}\", x.name);\n}\nlet ref borrowed_borrow = &source5;\nborrow_demostruct(borrowed_borrow);\n```", "```rs\nlet (_, (_, x, _, _), _) = ((5, 6, 7), (8, 9, 10, 11), (12, 13, 14, 15));\nprintln!(\"x is {}\", x);\n```", "```rs\nmatch might_fail(39) {\n    Ok(x) => { println!(\"Odd succeeded, name is {}\", x.name) }\n    Err(_) => { println!(\"Odd failed! Woe is me.\") }\n}\n```", "```rs\nmatch might_fail(38) {\n    Ok(DemoStruct {id: 38, name: ref name, probability: _}) => {\n        println!(\"Even succeeded with the proper id: name is {}\", name)\n    }\n    Ok(DemoStruct {id: ref id, name: ref name, probability: _}) => {\n        println!(\"Even succeeded with the wrong id: id is {}, name is {}\", id, name)\n    }\n    Err(_) => { println!(\"Even failed! Woe is me.\") }\n}\n```", "```rs\nif let (1, x @ (_, _), _) = (1, (2, 3), (4, 5, 6)) {\n    println!(\"matched x to {:?}\", x);\n}\n```", "```rs\nif let DemoStruct {id: 40, ..} = source5 {\n    println!(\"id is 40, don't care about the rest\");\n}\n```", "```rs\nlet x = 5;\nlet source6 = DemoStruct {id: 7, name: String::from(\"oops\"), probability: 0.26};\nif let DemoStruct { id: x, name: _, probability: _ } = source6 {\n    println!(\"The pattern matched, x is {}\", x);\n}\n```", "```rs\nlet x = 5;\nlet source6 = DemoStruct {id: 7, name: String::from(\"oops\"), probability: 0.26};\nif let DemoStruct { id: 7, name: x, probability: _ } = source6 {\n    println!(\"The pattern matched, x is {}\", x);\n}\n```", "```rs\nlet x = 5;\nlet source7 = DemoStruct {id: 7, name: String::from(\"oops\"), probability: 0.26};\nmatch source7 {\n    DemoStruct { id: y, name: _, probability: _ } if y == x => {\n        println!(\"The pattern with match guard matched, y is {}\", y);\n    }\n    _ => {\n        println!(\"The pattern with match guard did not match\")\n    }\n}\n```"]