["```rs\n    $ npm init rust-webpack wasm-rust\n    🦀 Rust + 🕸 WebAssembly + Webpack = ❤\n    ```", "```rs\n    cd wasm-rust\n    ```", "```rs\n    use wasm_bindgen::prelude::*;\n\n    #[cfg(feature = \"wee_alloc\")]\n    #[global_allocator]\n    static ALLOC: wee_alloc::WeeAlloc =\n      wee_alloc::WeeAlloc::INIT;\n    #[wasm_bindgen]\n    pub fn is_palindrome(input: &str) -> bool {\n        let s = input.to_string().to_lowercase();\n        s == s.chars().rev().collect::<String>()\n    }\n    ```", "```rs\n    const rust = import('../pkg/index.js');\n    rust.then(module => {\n        console.log(module.is_palindrome('tattarrattat'));\n      // returns true\n    });\n    ```", "```rs\n    $ npm run build\n    // comments, logs are elided\n       Asset     Size   Chunks    Chunk Names\n       0.js   9.84 KiB       0  [emitted]\n       0fd5cbc32a547ac3295c.module.wasm    115 KiB       0\n         [emitted] [immutable]\n       index.html  179 bytes          [emitted]\n       index.js    901 KiB   index  [emitted]\n         index\n    ```", "```rs\n    [profile.dev]\n    opt-level = 'z'\n    lto = true\n    debug = false\n    ```", "```rs\n    $ npm run build\n    // comments, logs are elided\n       Asset   Size   Chunks   Chunk Names\n       0.js  9.84 KiB     0  [emitted]\n       b5e867dd3d25627d7122.module.wasm  50.8 KiB       0\n         [emitted] [immutable]\n       index.js   901 KiB   index  [emitted]\n         index\n    ```", "```rs\n$ /path/to/build/directory/of/binaryen/wasm-opt -Oz\n  b5e867dd3d25627d7122.module.wasm -o opt-gen.wasm\n$ l\n-rw-r--r--    1 sendilkumar  staff    45K May  8 17:43\n opt-gen.wasm\n```", "```rs\n    $ cargo new --lib memory_world\n    ```", "```rs\n    #![no_std]\n\n    use core::panic::PanicInfo;\n    use core::slice::from_raw_parts_mut;\n\n    #[no_mangle]\n    fn memory_to_js() {\n        let obj: &mut [u8];\n\n        unsafe {\n          obj = from_raw_parts_mut::<u8>(0 as *mut u8, 1);\n        }\n\n        obj[0] = 13;\n    }\n\n    #[panic_handler]\n    fn panic(_info: &PanicInfo) -> !{\n        loop{}\n    } \n    ```", "```rs\n    <script>\n        ( async() => {\n             const bytes = await fetch(\"target/wasm32-\n             unknown-unknown/debug/memory_world.wasm\");\n             const response = await bytes.arrayBuffer();\n             const result = await\n               WebAssembly.instantiate(response, {});\n             result.exports.memory_to_js();\n             const memObj = new\n               UInt8Array(result.exports.memory.buffer, 0)\n               .slice(0, 1);\n             console.log(memObj[0]); // 13\n        })();\n    </script>\n    ```", "```rs\nconst memObj = new\n UInt8Array(result.exports.memory.buffer, 0)\n   .slice(0, 1);\nconsole.log(memObj[0]); // 13\n```", "```rs\n<script>\n     ( async() => {\n        const memory = new WebAssembly.Memory({initial: 10,\n          maximum:100}); // -> 1\n        const bytes = await fetch(\"target/wasm32-unknown-\n          unknown/debug/memory_world.wasm\");\n        const response = await bytes.arrayBuffer();\n        const instance = await\n          WebAssembly.instantiate(response, \n          { js: { mem: memory } }); // ->2\n        const s = new Set([1, 2, 3]);\n        let jsArr = Uint8Array.from(s); // -> 3\n        const len = jsArr.length;\n        let wasmArrPtr = instance.exports.malloc(length);\n          // -> 4\n        let wasmArr = new\n          Uint8Array(instance.exports.memory.buffer,\n          wasmArrPtr, len); // -> 5\n        wasmArr.set(jsArr); // -> 6\n        const sum = instance.exports.accumulate\n          (wasmArrPtr, len); // -> 7\n        console.log(sum);\n    })();\n</script>\n```", "```rs\nuse std::alloc::{alloc, dealloc,  Layout};\nuse std::mem;\n\n#[no_mangle]\nfn accumulate(data: *mut u8, len: usize) -> i32 {\n    let y = unsafe { std::slice::from_raw_parts(data as\n      *const u8, len) };\n    let mut sum = 0;\n    for i in 0..len {\n        sum = sum + y[i];\n    }\n    sum as i32\n}\n\n#[no_mangle]\nfn malloc(size: usize) -> *mut u8 {\n    let align = std::mem::align_of::<usize>();\n    if let Ok(layout) = Layout::from_size_align(size,\n      align) {\n        unsafe {\n            if layout.size() > 0 {\n                let ptr = alloc(layout);\n                if !ptr.is_null() {\n                    return ptr\n                }\n            } else {\n                return align as *mut u8\n            }\n        }\n    }\n    std::process::abort\n}\n```", "```rs\n    $ cargo install twiggy\n    ```", "```rs\n    $ twiggy\n    twiggy-opt 0.6.0\n    ...\n    Use `twiggy` to make your binaries slim!\n\n    USAGE:\n        twiggy <SUBCOMMAND>\n\n    FLAGS:\n        -h, --help Prints help information\n        -V, --version Prints version information\n\n    SUBCOMMANDS:\n        diff         Diff the old and new versions of a\n                     binary to see what sizes changed.\n        dominators   Compute and display the dominator\n                     tree for a binary's call graph.\n        garbage      Find and display code and data that\n                     is not transitively referenced by any\n                     exports or public functions.\n        help         Prints this message or the help of\n                     the given subcommand(s)\n        monos        List the generic function\n                     monomorphizations that are\n                     contributing to code bloat.\n    paths        Find and display the call paths \n                     to a function in the given binary's\n                     call graph.\n        top          List the top code size offenders in a\n                     binary.\n    ```", "```rs\n    $ mkdir twiggy-world\n    ```", "```rs\n    $ touch add.wat\n    (module\n        (func $add (param $lhs i32) (param $rhs i32)\n          (result i32)\n            get_local $lhs\n            get_local $rhs\n            i32.add)\n        (export \"add\" (func $add))\n    )\n    ```", "```rs\n    $ /path/to/build/directory/of/wabt/wat2wasm add.wat\n    ```", "```rs\n    $ twiggy paths add.wasm\n    Shallow Bytes │ Shallow % │ Retaining Paths\n    ───────────────┼───────────┼───────────────────────────\n    9 ┊21.95% ┊ code[0]\n    ┊┊⬑ export \"add\"\n    8 ┊19.51% ┊ wasm magic bytes\n    6 ┊14.63% ┊ type[0]: (i32, i32) -> i32\n    ┊┊⬑ code[0]\n    ┊┊⬑ export \"add\"\n    6 ┊14.63% ┊ export \"add\"\n    6 ┊14.63% ┊ code section headers\n    3 ┊7.32% ┊ type section headers\n    3 ┊7.32% ┊ export section headers\n    ```", "```rs\n$ twiggy top add.wasm\nShallow Bytes │ Shallow % │ Item\n───────────────┼───────────┼───────────────────────────\n9 ┊21.95% ┊ code[0]\n8 ┊19.51% ┊ wasm magic bytes\n6 ┊14.63% ┊ type[0]: (i32, i32) -> i32\n6 ┊14.63% ┊ export \"add\"\n6 ┊14.63% ┊ code section headers\n3 ┊7.32% ┊ type section headers\n3 ┊7.32% ┊ export section headers\n41 ┊100.00% ┊Σ [7 Total Rows]\nThe usage of the twiggy top is as follows\nUSAGE: twiggy top <input> -n <max_items> -o\n <output_destination> --format <output_format> --mode\n <parse_mode>\n```", "```rs\n$ twiggy top add.wasm -n 3\nShallow Bytes │ Shallow % │ Item\n───────────────┼───────────┼───────────────────────────\n9 ┊21.95% ┊ code[0]\n8 ┊19.51% ┊ wasm magic bytes\n             6 ┊14.63% ┊ type[0]: (i32, i32) -> i32\n18 ┊43.90% ┊ ... and 4 more.\n41 ┊100.00% ┊Σ [7 Total Rows]\n```", "```rs\n$ twiggy top add.wasm -n 3 --format json\n[{\"name\":\"code[0]\",\"shallow_size\":9,\"shallow_size_percent\":\n21.951219512195124},{\"name\":\"wasm magic\nbytes\",\"shallow_size\":8,\"shallow_size_percent\":19.512195121\n95122},{\"name\":\"type[0]: (i32, i32) ->\ni32\",\"shallow_size\":6,\"shallow_size_percent\":14.63414634146\n3413}]\n```", "```rs\n$ twiggy monos pkg/index_bg.wasm\nApprx. Bloat Bytes │ Apprx. Bloat % │ Bytes │ %      │ Monomorphizations\n────────────────────┼────────────────┼───────┼────────┼───────────────────────────────────────────────────────────────────\n                  4 ┊          0.01% ┊    32 ┊  0.06% ┊ core::ptr::drop_in_place\n                    ┊                ┊    28 ┊  0.05% ┊     core::ptr::drop_in_place::h9684ba572bb4c2f9\n                    ┊                ┊     4 ┊  0.01% ┊     core::ptr::drop_in_place::h00c08aab80423b88\n                  0 ┊          0.00% ┊  5437 ┊ 10.44% ┊ dlmalloc::dlmalloc::Dlmalloc::malloc\n                    ┊                ┊  5437 ┊ 10.44% ┊     dlmalloc::dlmalloc::Dlmalloc::malloc::hb0329e71e24f7e2f\n                  0 ┊          0.00% ┊  1810 ┊  3.48% ┊ <char as core::fmt::Debug>::fmt\n                    ┊                ┊  1810 ┊  3.48% ┊     <char as core::fmt::Debug>::fmt::h5472f29c33f4c4c9\n                  0 ┊          0.00% ┊  1126 ┊  2.16% ┊ dlmalloc::dlmalloc::Dlmalloc::free\n                    ┊                ┊  1126 ┊  2.16% ┊     dlmalloc::dlmalloc::Dlmalloc::free::h7ab57ecacfa2b1c3\n                  0 ┊          0.00% ┊  1123 ┊  2.16% ┊ core::str::slice_error_fail\n                    ┊                ┊  1123 ┊  2.16% ┊     core::str::slice_error_fail::h26278b2259fb6582\n                  0 ┊          0.00% ┊   921 ┊  1.77% ┊ core::fmt::Formatter::pad\n                    ┊                ┊   921 ┊  1.77% ┊     core::fmt::Formatter::pad::hb011277a1901f9f7\n                  0 ┊          0.00% ┊   833 ┊  1.60% ┊ dlmalloc::dlmalloc::Dlmalloc::dispose_chunk\n                    ┊                ┊   833 ┊  1.60% ┊     dlmalloc::dlmalloc::Dlmalloc::dispose_chunk::he00c681454a3c3b7\n                  0 ┊          0.00% ┊   787 ┊  1.51% ┊ core::fmt::write\n                    ┊                ┊   787 ┊  1.51% ┊     core::fmt::write::hb395f946a5ce2cab\n                  0 ┊          0.00% ┊   754 ┊  1.45% ┊ core::fmt::Formatter::pad_integral\n                    ┊                ┊   754 ┊  1.45% ┊     core::fmt::Formatter::pad_integral::h05ee6133195a52bc\n                  0 ┊          0.00% ┊   459 ┊  0.88% ┊ alloc::string::String::push\n                    ┊                ┊   459 ┊  0.88% ┊     alloc::string::String::push::he03a5b89b77597a1\n                  0 ┊          0.00% ┊  4276 ┊  8.21% ┊ ... and 64 more.\n                  4 ┊          0.01% ┊ 17558 ┊ 33.73% ┊ Σ [85 Total Rows]\n....\n```", "```rs\n$ twiggy garbage add.wasm\nBytes │ Size % │ Garbage Item\n───────┼────────┼─────────────────────────────────────────\n   109 ┊  0.21% ┊ custom section 'producers'\n   109 ┊  0.21% ┊ Σ [1 Total Rows]\n27818 ┊ 53.44% ┊ 1 potential false-positive data segments\n```"]