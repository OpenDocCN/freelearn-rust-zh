- en: Web Development with Rust
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be covering the following recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling JSONRequests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a custom error handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hosting templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rust has many packages available that allow the developer to spin up a web server
    with it, and Rust is an ideal choice for a web project where memory, safety, and
    speed are of a great significance.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be playing with the nickel crate in Rust, which is
    a web application framework in Rust and provides all the fundamental units required
    for building a web application in Rust. The fundamental units include setting
    up a web server, handling web requests, and more. We will focus on the different
    macros and types that the nickel crate provides us for creating a web application
    in Rust.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn the steps through which you can install the nickel
    crate into your Rust project and learn the commands with which you can start a
    web server where you can host your web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to install the following nickel crate before we can go ahead and
    spawn a web server. Follow the given steps to download and set up the `nickel`
    crate for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: We will require the Rust compiler and any text editor to develop the Rust code
    snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Rust project using the Cargo tool and enter the newly created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ab489f1f-34ef-4269-9c2a-d0e6c3d4657f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Cargo.toml` file in your favorite text editor and make the modification
    shown in the following screenshot. Here, we are using the nickel crate, which
    is entered in the dependencies field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8a98c8a-d53f-41b9-b313-f0be3b1d330c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the crate in your project with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/80c06119-f80b-43bb-af96-84cdde0a6187.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the given steps to implement this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.rs` file in the `src` directory in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the code header with the relevant information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the installed `nickel` crate by using the `extern` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function in which we declare the `server` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and start the server with the following command from the root
    directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output on the successful execution of our code in
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22e108f7-f971-4c33-9ac1-1b809a67e391.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open your favorite browser and redirect to `http://127.0.0.1:6767/` to get
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec0e4839-7bc6-473e-9182-8b10ccbde998.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we created a Rust project named `nickel-demo`, which helps us
    spawn a web server using the `nickel` web application crate.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the top, we referenced the external `nickel` crate using the `extern`
    keyword and loaded all its macros with `#[macro_use]`. The `nickel` crate is the
    application object and surface that holds all public APIs; it's a struct, which
    implements all the fundamental methods for performing all the web application
    tasks. In the `main` function, we first assign `server` instances to a mutable
    variable and create a new `nickel` application object with `Nickel::new()`, which
    creates an instance of nickel with default error handling.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set up our endpoint routing for which we use the `router!` macro, which
    listens at `"**"` and provides a simple message `"Hello world!"`, when a `get`
    request is demanded by the end user. The `get` method of the nickel crate or the
    server instance registers a handler to be used for a specific `get` request. Handlers
    are assigned to paths and paths are allowed to contain variables and wildcards;
    we have `"**"` in our case for handlers, which is a wild card entry and basically
    returns the same response for the get request of any endpoint. A handler added
    through this API will be attached to the default router. Double pipe characters
    represent a closure in Rust; this is the place where our `request` and `response`
    parameters go, which are `_req` and `_res` in our application. Fundamentally,
    there are structs that contain the request and response data.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `server.utilize` method, we add the endpoint to the server instance
    and register the handler, which will be invoked among other handlers before each
    request. The `server.listen` method listens to the API requests on `127.0.0.1:6767`,
    where it binds and listens for connections on the given host and port.
  prefs: []
  type: TYPE_NORMAL
- en: Creating endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn the steps through which you can install the nickel
    crate into your Rust project. You will also learn the commands with which we can
    create custom endpoints in our web application, which would display different
    messages on being accessed by an end user of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to install the following nickel crate before we can go ahead and
    spawn a web server. Follow the given steps to download and set up the `nickel`
    crate for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: We will require the Rust compiler and any text editor to develop the Rust code
    snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Rust project using the Cargo tool and enter the newly created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/5520e964-1bc2-49b0-bf98-a1d9801a8b53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Cargo.toml` file in your favorite text editor and make the modification
    shown in the following screenshot. Here, we are using the nickel crate, which
    is entered in the dependencies field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bcaf2dd9-4f06-4b90-bbea-1ac1f3535f04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the crate in your project with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command will install all the dependencies of the `nickel` crate in your
    Rust project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to implement this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.rs` file in the `src` directory in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the code header with the relevant information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the installed `nickel` crate by using the `extern` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function in which we declare the `server` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and start the server with the following command from the root
    directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output on the successful execution of our code in
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b85dfb27-66b6-46a9-af96-89e658562809.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open your favorite browser and redirect to the following endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the URL, `http://127.0.0.1:6767/bar`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b0ae273b-4816-4265-80a7-64bfc59bb08b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the URL, `http://127.0.0.1:6767/user/viki`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a5bdc4bd-33ee-4f01-bfac-9814db93b7c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the URL, `http://127.0.0.1:6767/a/b/d/d`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c8c4e97f-acaa-4b6d-830c-d621829585e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the URL, `http://127.0.0.1:6767/a/b/c/d`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fde183f3-5d96-4d54-aff9-b862a8cab52e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the URL, `http://127.0.0.1:6767/a/b/d`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3be22968-c278-4e56-8dae-2b3e112ef5c8.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we created a Rust project named `nickel-routing`, which helps
    us to create multiple endpoints in our web application, and each endpoint displays
    different custom messages.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the top, we referenced the external `nickel` crate using the `extern`
    keyword and loading all of its macros with `#[macro_use]`. We use `nickel` as
    the application object and surface, which holds all the public APIs. It's a struct
    that implements all the fundamental methods for performing all the web application
    tasks, and `HttpRouter` is a public trait provided by the `nickle` crate, which
    has the signature of various REST API calls.
  prefs: []
  type: TYPE_NORMAL
- en: In the `main` function, we first assign `server` instances to a mutable variable
    and create a new `nickel` application object with `Nickel::new()`, which creates
    an instance of nickel with default error handling.
  prefs: []
  type: TYPE_NORMAL
- en: The `server.get` method registers a handler to be used for a specific `get`
    request. Handlers are assigned to paths and paths are allowed to contain variables
    and wildcards. A handler added through this API will be attached to the default
    router. The `middleware!` macro reduces the amount of boilerplate code needed
    for each route.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the following routes in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/bar`: On hitting this endpoint, we get the message, This is the /bar handler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/user/:userid`: On hitting this endpoint, we get the message, This is user:
    {:?}. Here, the argument is replaced with the data (`:userid`) passed in the `get`
    request with the `request.param("userid")` command, where `param` is a method
    of the `request` struct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/a/*/d`: On hitting this endpoint, we get the message, matches /a/b/d but
    not /a/b/c/d. The asterisk here allows only one intermediate path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/a/**/d`: On hitting this endpoint, we get a message: This matches /a/b/d
    and also /a/b/c/d. The asterisk here allows only two intermediate paths.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routes can be as simple as `/foo`, use parameters, wildcards, and even double
    wildcards.
  prefs: []
  type: TYPE_NORMAL
- en: The `server.listen` method listens to the API requests on `127.0.0.1:6767` where
    it binds and listens for connections on the given host and port.
  prefs: []
  type: TYPE_NORMAL
- en: Handling JSONRequests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn the steps through which we can install the `nickel`
    crate into your Rust project and learn the commands with which we can accept a
    `POST` request to an endpoint from the end user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to install the following `nickel` crate before we can go ahead
    and spawn a web server. Follow the given steps to download and set up the `nickel`
    and `rustc_serialize` crates for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: We will require the Rust compiler and any text editor to develop the Rust code
    snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Rust project using the Cargo tool and enter the newly created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35670fb1-ccec-4082-9a84-d6e8e6a57428.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Cargo.toml` file in your favorite text editor and make the modification
    shown in the following screenshot. Here, we are using the nickel and `rustc-serialize`
    crates, which are entered in the dependencies field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be5f1bf6-479e-4c00-8ddf-5fcb4484224b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the crate in your project using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This command will install all the dependencies of the `nickel` and `rustc-serialize`
    crate in your Rust project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the given steps to implement this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.rs` file in the `src` directory in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the code header with the relevant information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the installed `nickel` and `rustc_serialize` crates by using the `extern`
    keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a custom `Struct` type named `Person`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function, where we declare the `server` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and start the server with the following command from the root
    directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output on the successful execution of our code in
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ba3af65-6ef8-4c96-a2eb-81c1be6103f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open your terminal and enter the following command to hit the endpoint with
    `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'On successfully hitting the endpoint with the `curl` command, we will get the
    following response (highlighted) in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87d48b7e-0306-4b81-9d9e-afaa360f7b18.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we created a Rust project named `nickel-jsonhandling`, which
    helps us get data from the end user and perform a certain set of actions based
    on the input. The `nickel` crate makes it easy to map JSON data right onto your
    struct. We use the `rustc-serialize` dependency for this project in order to handle
    JSON encoding and decoding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting at the top, we referenced the external `nickel` crate using the `extern`
    keyword and loaded all of its macros with `#[macro_use]`. We use `nickel` as the
    application object and surface, which holds all the public APIs; it''s basically
    a struct that implements all the fundamental methods for performing the web application
    tasks. The `HttpRouter` is a public trait provided by the `nickle` crate, which
    has the signature of various REST API calls. `JsonBody` is a public trait provided
    by the `nickle` crate, which has the signature of the `json_as` method, which
    takes a decodable type provided by the `rustc-serialize` crate. We create a custom
    struct type named `Person`, which has two string fields: `firstname` and `lastname`.
    The JSON body that is posted from the end user is converted to the `Person` type
    so that we can use it our application. To be able to encode a piece of data, it
    must implement the `rustc_serialize::Encodable` trait. To be able to decode a
    piece of data, it must implement the `rustc_serialize::Decodable` trait. The Rust
    compiler provides an annotation to automatically generate the code for these traits:
    `#[derive(RustcDecodable, RustcEncodable)]`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the `main` function, we first assign `server` instances to a mutable variable
    and create a new `nickel` application object with `Nickel::new()`, which creates
    an instance of `nickel` with default error handling.
  prefs: []
  type: TYPE_NORMAL
- en: The `server.post` method registers a handler to be used for a specific `POST`
    request. Handlers are assigned to paths and paths are allowed to contain variables
    and wildcards. A handler added through this API will be attached to the default
    router. The `middleware!` macro reduces the amount of boilerplate code needed
    for each route. We create a variable, `person`, which is assigned to `request.json_as::<Person>().unwrap()`,
    where `request` is a parameter containing the information from the end user and
    the `unwrap` method is one of the several ways that Rust provides for assigning
    a value. We provide a simple message, `"Hello {} {}", person.firstname, person.lastname"`,
    in the `format!` macro to be displayed when the `/a/post/request` endpoint is
    accessed, where `person` is a variable of the `Person` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'To hit the endpoint, we use the `curl` command, where `-H` stands for the header
    type, which is`"Content-Type: application/json"`, and we give a `POST` request
    (`-X`) at `http://127.0.0.1:6767/a/post/request` with the following data (`-d`):
    `''{"firstname":"Vigneshwer","lastname":"Dhinakaran"}''`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `server.listen` method listens to the API requests on `127.0.0.1:6767` where
    it binds and listens for connections on the given host and port.
  prefs: []
  type: TYPE_NORMAL
- en: Building custom error handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn the steps through which you can install the nickel
    crate into your Rust project. You will also learn the commands to create your
    custom error handler, which, for example, can help you create a custom `404` page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to install the following `nickel` crate before we can go ahead
    and spawn a web server. Follow the given steps to download and setup a `nickel`
    crate for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: We will require the Rust compiler and any text editor to develop the Rust code
    snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Rust project using the Cargo tool and enter the newly created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/d34b64b0-f53d-4d1d-9782-96bc5146b361.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Cargo.toml` file in your favorite text editor and make the modification
    shown in the following screenshot. Here, we are using the `nickel` crate, which
    is entered in the dependencies field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46940cf2-7b45-436b-8b61-92bb888644c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the crate in your project with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This command will install all the dependencies of the `nickle` crate in your
    Rust project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the given steps to implement this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.rs` file in the `src` directory in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the code header with the relevant information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the installed `nickel` crate by using the `extern` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function in which we declare the `server` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and start the server with the following command from the root
    directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output on the successful execution of our code in
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7347614f-956d-48ce-bda1-5ac413ddaa86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open your favorite browser and redirect to `127.0.0.1:6767/viki` to get the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03544319-dcb3-4337-ba2f-96d5c11bcdc1.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we created a Rust project named `nickel-errorhandling`, which
    helps us spawn the web server using the `nickel` web application crate. By default,
    `nickel` catches all the errors with its default ErrorHandler and tries to take
    reasonable actions.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the top, we referenced the external `nickel` crate using the `extern`
    keyword and loaded all of its macros with `#[macro_use]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used the following units from the `nickel` crate:'
  prefs: []
  type: TYPE_NORMAL
- en: The `nickel` crate is the application object and surface, which holds all the
    public APIs. It's a struct that implements all the fundamental methods for performing
    all the web application tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NickelError` is a basic error type for `HTTP` errors as well as user-defined
    errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Action` is an `enum` data type provided by the `nickel` crate, where `Continue`
    and `Halt` are variants of the `Action` type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Request` is a container for all the request data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We used `nickel::status::StatusCode::NotFound`; here, the status is a public
    module of the `nickel` crate, which defines the `StatusCode` `enum` type containing
    the different HTTP status codes. `NotFound` is one of them and `std::io::Write`,
    which is a trait that defines the `write_all` method, writes all the data in the
    entire buffer.
  prefs: []
  type: TYPE_NORMAL
- en: In the `main` function, we first assign `server` instances to a mutable variable
    and create a new `nickel` application object with `Nickel::new()`, which creates
    an instance of `nickel` with default error handling.
  prefs: []
  type: TYPE_NORMAL
- en: We create a custom error handler named `custom_handler`, which is invoked in
    the case of `NotFound` or `404` status code. We call the function, `custom_404`,
    which takes in two parameters, `NickelError` and `Request`, and returns an `Action`
    type. The `custom_404` is a way to overwrite the default error handler to handle
    `404` cases with a custom view.
  prefs: []
  type: TYPE_NORMAL
- en: The `custom_404` assigns the arguments `&mut NickelError` and `&mut Request`
    to `err` and `_req`, respectively. In the function, we assign `err.stream`, where
    `stream` is a field of the `NickelError` type to `Some(ref mut res)`, and check
    whether it is true; else we return `Continue(())`. If true, we know that there
    has been an error when the end user tried to access the endpoint, and the next
    step is to check whether the status code `res.status()` is `NotFound`. In such
    a case, we write the custom `404` page with the `res.write_all` method and return
    `Halt(())`.
  prefs: []
  type: TYPE_NORMAL
- en: The `server.handle_error` registers an error handler, which will be invoked
    among other error handlers as soon as any regular handler returns an error; the
    other error handler in our case is `custom_handler`.
  prefs: []
  type: TYPE_NORMAL
- en: The `server.listen` method listens to the API requests on `127.0.0.1:6767` where
    it binds and listens for connections on the given host and port.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn the steps through which you can install the `nickel`
    crate into your Rust project and learn the commands with which we can host a custom
    template when the end user hits an endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to install the following `nickel` crate before we can go ahead
    and spawn a web server. Follow the given steps to download and set up the `nickel`
    crate for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: We will require the Rust compiler and any text editor to develop the Rust code
    snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Rust project using the Cargo tool and enter the newly created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4578440a-4d03-44b0-89b3-188e1a70342a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Cargo.toml` file in your favorite text editor and make the modification
    shown in the following screenshot. Here, we are using the `nickel` crate, which
    is entered in the dependencies field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a75776da-da81-4853-bedc-20f3c389c696.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Install the crate in your project with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This command will install all the dependencies of the `nickle` crate in your
    Rust project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the given steps to implement this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.rs` file in the `src` directory in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the code header with the relevant information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the installed `nickel` crate by using the `extern` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function where we declare the `server` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `examples/assets` directory and the `template.tpl` file using the
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/7a98653a-d3e4-47dc-aaa9-8d776ea694ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the file `template.tpl` in a text editor and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and start the server with the following command from the root
    directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output on the successful execution of our code in
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90d49d32-0574-413a-a8c1-9efe852ab4d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open your favorite browser and redirect to `127.0.0.1:6767` to get the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32968ef2-1fc5-48d4-a75b-0870f9f40f93.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we created a Rust project named `nickel-template`, which loads
    a custom HTML template with dynamic data fields when the end user tries to access
    a particular endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the top, we referenced the external `nickel` crate using the `extern`
    keyword and loaded all of its macros with `#[macro_use]`. We used `nickel` as
    the application object and surface, which holds all the public APIs; it's a struct
    that implements all the fundamental methods for performing all the web application
    tasks. We also used `HttpRouter`, which is a public trait provided by the `nickle`
    crate and has the signature of various REST API calls, and the `Hashmap` type
    from `std::collections`.
  prefs: []
  type: TYPE_NORMAL
- en: HashMaps store values by key. `HashMap` keys can be Booleans, integers, Strings,
    and vectors. HashMaps are growable but HashMaps can also shrink themselves when
    they have excess space.
  prefs: []
  type: TYPE_NORMAL
- en: In the `main` function, we first assign `server` instances to a mutable variable
    and create a new `nickel` application object with `Nickel::new()`, which creates
    an instance of `nickel` with default error handling.
  prefs: []
  type: TYPE_NORMAL
- en: The `server.get` method registers a handler to be used for a specific `get`
    request. Handlers are assigned to paths and paths are allowed to contain variables
    and wildcards. A handler added through this API will be attached to the default
    router. The `middleware!` macro reduces the amount of boilerplate code needed
    for each route. The path here is `"/"`, where the response contains the data that
    needs to be returned to the end user. We host the template created in `examples/asset
    s/template.tpl` and provide the input for the `name` field in the arguments for
    `response.render`, which is returned as output to the end user. We create a mutable
    variable named `data`, which is of the `HashMap` type. We also insert a key named
    `name` and assign it a value, `"viki"` using `data.insert`.
  prefs: []
  type: TYPE_NORMAL
- en: The `server.listen` method listens to the API requests on `127.0.0.1:6767` where
    it binds and listens for connections on the given host and port.
  prefs: []
  type: TYPE_NORMAL
