["```rs\n    $ git clone https://github.com/emscripten-core/emsdk\n    $ cd emsdk\n    ```", "```rs\n$ ./emsdk install latest\n```", "```rs\n$ emsdk install latest\n```", "```rs\n $ ./emsdk activate latest\n```", "```rs\n $ emsdk activate latest\n```", "```rs\n $ source ./emsdk_env.sh\n```", "```rs\n $ emsdk_env.bat\n```", "```rs\n$ ./emsdk update\n```", "```rs\n$ emsdk update\n```", "```rs\n $ emcc --version\n```", "```rs\n // sum.cpp\nextern \"C\" {\n  unsigned sum(unsigned a, unsigned b) {\n      return a + b;\n  }\n}\n```", "```rs\n$ emcc -O1 ./sum.cpp -o sum.html -s WASM=0 -s EXPORTED_FUNCTIONS='[\"_sum\"]'\n```", "```rs\nfunction _sum($0,$1) {\n    $0 = $0|0;\n    $1 = $1|0;\n    var $2 = 0, label = 0, sp = 0;\n    sp = STACKTOP;\n    $2 = (($1) + ($0))|0;\n   return ($2|0);\n}\n```", "```rs\n ccall(\"sum\", \"number\", \"number, number\", [10, 20])\n// outputs 30\n```", "```rs\n    $ touch hello_web.c\n    ```", "```rs\n     #include <stdio.h>\n\n    int main() {\n        printf(\"Hello, Web!\\n\");\n        return 0;\n    }\n    ```", "```rs\n     $ emcc hello_web.c\n    ```", "```rs\n    $ node a.out.js\n    Hello, Web!\n    ```", "```rs\nfunction ccall(ident, returnType, argTypes, args, opts)  {\n  // the code is elided\n}\n```", "```rs\n function cwrap(ident, returnType, argTypes, opts) {\n    return function() {\n        return ccall(ident, returnType, argTypes,\n          arguments, opts);\n    }\n}\n```", "```rs\n$ emcc hello_web.c -o helloweb.html\n```", "```rs\n$ python -m http.server <port number>\n```", "```rs\n$ ./emsdk --help\nemsdk: Available commands:\nemsdk list [--old] [--uses] - To list down the tools\nemsdk update - To update the emsdk to the latest version.\nemsdk update-tags - To fetch the latest tags from the GitHub \n  repository.\nemsdk install - To install the tools and SDK.\nemsdk uninstall - To uninstall the tools and SDK installed \n  previously.\nemsdk activate - To activate the currently installed version.\n```", "```rs\nemsdk <option> <Tool / SDK > --<flags>\n```", "```rs\n$ ./emsdk list\n\nThe *recommended* precompiled SDK download is 2.0.6 \n  (4ba921c8c8fe2e8cae071ca9889d5c27f5debd87).\n\nTo install/activate it, use one of:\n        latest                  [default (llvm) backend]\n        latest-fastcomp         [legacy (fastcomp) backend]\n\nThose are equivalent to installing/activating the following:\n         2.0.6             INSTALLED\n         2.0.6-fastcomp\n\nAll recent (non-legacy) installable versions are:\n         2.0.6    INSTALLED\n         ...\n\nThe additional following precompiled SDKs are also available \n  for download:\n         sdk-fastcomp-1.38.31-64bit\n\nThe following SDKs can be compiled from source:\n         sdk-upstream-master-64bit\n          ...\nThe following precompiled tool packages are available for \n  download:\n        ...\n     *     node-12.18.1-64bit         INSTALLED\n     *     python-3.7.4-2-64bit       INSTALLED\n           emscripten-1.38.30\n        ...\nThe following tools can be compiled from source:\n           llvm\n           clang\n           emscripten\n           binaryen\n\nItems marked with * are activated for the current user.\n\nTo access the historical archived versions, type 'emsdk list \n  --old'\n\nRun \"git pull\" followed by \"./emsdk update-tags\" to pull \n  in the latest list.\n```", "```rs\n$ ./emsdk install <tool / SDK to install>\n```", "```rs\n./emsdk install latest\n```", "```rs\n./emsdk install <tool1> <tool2> <tool3>\n```", "```rs\n ./emsdk install [options] <tools / SDK>\n```", "```rs\n./emsdk install -j<number of cores to use for building> <tools \n  / SDK>\n```", "```rs\n./emsdk install --build=<type> <tools / SDK>\n```", "```rs\n./emsdk activate <tools / SDK to activate>\n```", "```rs\n./emsdk uninstall < tools / SDK to uninstall> \n```", "```rs\n    $ touch optimization_check.c\n    ```", "```rs\n    #include <stdio.h>\n     int addSame(int a) {\n        return a + a;\n    }\n\n    int add(int a, int b) {\n        return a + b;\n    }\n\n    int main() {\n        printf(\"Hello, Web!\\n\");\n\n        int a;\n        int sum = 0;\n        /* for loop execution */\n        for( a = 0; a < 20; a = a + 1 ){\n           sum = sum + a;\n        }\n         addSame(sum);\n         add(1, 2);\n         return 0;\n    }\n    ```", "```rs\n    $ time emcc optimization_check.c\n    emcc optimization_check.c  0.32s user 0.14s system \n      90% cpu 0.514 total\n    ```", "```rs\n     $ l\n    324B optimization_check.c\n    13K a.out.wasm\n    109K a.out.js\n    ```", "```rs\n    $ time emcc -O1 optimization_check.c\n    emcc -O1 optimization_check.c  0.31s user 0.13s system\n      86% cpu 0.519 total\n    ```", "```rs\n$ l\n324B optimization_check.c\n3.4K a.out.wasm\n59K a.out.js\n```", "```rs\n    $ time emcc -O2 optimization_check.c\n    emcc -O2 optimization_check.c  0.53s user 0.16s system\n      111% cpu 0.620 total\n    ```", "```rs\n$ l\n324B optimization_check.c\n2K a.out.wasm\n20K a.out.js\n```", "```rs\n    $ time emcc -O3 --profiling optimization_check.c\n    emcc -O3 --profiling optimization_check.c  1.03s user\n      0.21s system 110% cpu 1.117 total\n    ```", "```rs\n$ l\n324B optimization_check.c\n2.0K a.out.wasm\n17K a.out.js\n```", "```rs\n    $ time emcc -Os optimization_check.c\n    emcc -Os optimization_check.c  1.03s user 0.22s system\n      46% cpu 2.655 total\n    ```", "```rs\n$ l\n324B optimization_check.c\n1.7K a.out.wasm\n14K a.out.js\n```", "```rs\n    $ time emcc -Oz optimization_check.c\n    emcc -Oz optimization_check.c  1.03s user 0.21s system\n      110% cpu 1.123 total\n    ```", "```rs\n$ l\n324B optimization_check.c\n1.7K a.out.wasm\n14K a.out.js\n```", "```rs\n$ time emcc -O3 --closure 1 optimization_check.c\nemcc -O3 --closure 1 optimization_check.c  2.40s user 0.42s \n  system 105% cpu 2.681 total\n```", "```rs\n $ l\n324B optimization_check.c\n1.8K a.out.wasm\n6.5K a.out.js\n```", "```rs\ntime emcc -Os --closure 1 optimization_check.c\nemcc -Os --closure 1 optimization_check.c  2.53s user 0.42s \n  system 106% cpu 2.778 total\n```", "```rs\n$ l\n324B optimization_check.c\n1.7K a.out.wasm\n6.5K a.out.js\n```"]