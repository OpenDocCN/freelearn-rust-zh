["```rs\n[dependencies]\nrocket = \"0.5.0-rc.2\"\n```", "```rs\n#[macro_use] extern crate rocket;\n```", "```rs\n#[get(\"/\")]\nfn index() -> &'static str {\n    \"Hello, world!\"\n}\n```", "```rs\n#[get(\"/hello/<name>/<age>\")]\nfn hello(name: String, age: u8) -> String {\n    format!(\"Hello, {} year old named {}!\", age, name)\n}\n#[get(\"/bye/<name>/<age>\")]\nfn bye(name: String, age: u8) -> String {\n    format!(\"Goodbye, {} year old named {}!\", age, name)\n}\n```", "```rs\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/\", routes![index, hello, bye])\n}\n```", "```rs\n Configured for debug.\n   >> address: 127.0.0.1\n   >> port: 8000\n   >> workers: 8\n   >> ident: Rocket\n   >> limits: bytes = 8KiB, data-form = 2MiB, file = 1MiB, form =\n   32KiB, json = 1MiB, msgpack = 1MiB, string = 8KiB\n   >> temp dir: /var/folders/l7/q2pdx7lj0l72s0lsf3kc34fh0000gn/T/\n   >> http/2: true\n   >> keep-alive: 5s\n   >> tls: disabled\n   >> shutdown: ctrlc = true, force = true, signals = [SIGTERM],\n   grace = 2s, mercy = 3s\n   >> log level: normal\n   >> cli colors: true\n Routes:\n   >> (index) GET /\n   >> (bye) GET /bye/<name>/<age>\n   >> (hello) GET /hello/<name>/<age>\n Fairings:\n   >> Shield (liftoff, response, singleton)\n Shield:\n   >> X-Content-Type-Options: nosniff\n   >> X-Frame-Options: SAMEORIGIN\n   >> Permissions-Policy: interest-cohort=()\n Rocket has launched from http://127.0.0.1:8000\n```", "```rs\nGET /hello/maxwell/33 text/html:\n   >> Matched: (hello) GET /hello/<name>/<age>\n   >> Outcome: Success\n   >> Response succeeded.\n```", "```rs\n[dependencies]\nrocket = {version = \"0.5.0-rc.2\", features = [\"json\"]}\nbcrypt = \"0.13.0\"\nserde_json = \"1.0.59\"\nserde_yaml = \"0.8.23\"\nchrono = {version = \"0.4.19\", features = [\"serde\"]}\nserde = { version = \"1.0.136\", features = [\"derive\"] }\nuuid = {version = \"1.0.0\", features = [\"serde\", \"v4\"]}\ndiesel = { version = \"1.4.8\", features = [\"postgres\",\n                              \"chrono\", \"r2d2\"] }\nlazy_static = \"1.4.0\"\n```", "```rs\ncp -r ./web_app/src/json_serialization ./rocket_app/src/json_serialization\ncp -r ./web_app/src/to_do ./rocket_app/src/to_do\ncp -r ./web_app/src/models ./rocket_app/src/models\ncp web_app/src/config.rs rocket_app/src/config.rs\ncp web_app/config.yml rocket_app/config.yml\ncp web_app/src/schema.rs rocket_app/src/schema.rs\ncp ./web_app/src/database.rs ./rocket_app/src/database.rs\ncp -r ./web_app/migrations ./rocket_app/migrations\ncp ./web_app/docker-compose.yml ./rocket_app/docker-compose.yml\ncp ./web_app/.env ./rocket_app/.env\n```", "```rs\n#[macro_use] extern crate rocket;\n#[macro_use] extern crate diesel;\nuse diesel::prelude::*;\nuse rocket::serde::json::Json;\nmod schema;\nmod database;\nmod json_serialization;\nmod models;\nmod to_do;\nmod config;\nuse crate::models::item::item::Item;\nuse crate::json_serialization::to_do_items::ToDoItems;\nuse crate::models::item::new_item::NewItem;\nuse database::DBCONNECTION;\n```", "```rs\n#[post(\"/create/<title>\")]\nfn item_create(title: String) -> Json<ToDoItems> {\n    let db = DBCONNECTION.db_connection.get().unwrap();\n    let items = schema::to_do::table\n        .filter(schema::to_do::columns::title.eq(&title.as_str()))\n        .order(schema::to_do::columns::id.asc())\n        .load::<Item>(&db)\n        .unwrap();\n    if items.len() == 0 {\n        let new_post = NewItem::new(title, 1);\n        let _ = diesel::insert_into(schema::to_do::table)\n                        .values(&new_post)\n                        .execute(&db);\n    }\n    return Json(ToDoItems::get_state(1));\n}\n```", "```rs\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/\", routes![index, hello, bye])\n                   .mount(\"/v1/item\", routes![item_create])\n}\n```", "```rs\ncargo run config.yml\n```", "```rs\nhttp://127.0.0.1:8000/v1/item/create/coding\n```", "```rs\n{\n    \"pending_items\": [\n        {\n            \"title\": \"coding\",\n            \"status\": \"PENDING\"\n        }\n    ],\n    \"done_items\": [],\n    \"pending_item_count\": 1,\n    \"done_item_count\": 0\n}\n```", "```rs\ncp web_app/src/jwt.rs rocket_app/src/jwt.rs\n```", "```rs\njsonwebtoken = \"8.1.0\"\n```", "```rs\nuse rocket::http::Status;\nuse rocket::request::{self, Outcome, Request, FromRequest};\n```", "```rs\n#[derive(Debug)]\npub enum JwTokenError {\n    Missing,\n    Invalid,\n    Expired\n}\n```", "```rs\n#[rocket::async_trait]\nimpl<'r> FromRequest<'r> for JwToken {\n    type Error = JwTokenError;\n    async fn from_request(req: &'r Request<'_>)\n                          -> Outcome<Self, Self::Error> {\n        . . .\n    }\n}\n```", "```rs\nmatch req.headers().get_one(\"token\") {\n    Some(data) => {\n        let raw_token = data.to_string();\n        let token_result = JwToken::from_token(raw_token);\n        match token_result {\n            Ok(token) => {\n                return Outcome::Success(token)\n            },\n            Err(message) => {\n                if message == \"ExpiredSignature\".to_owned() {\n                    return Outcome::Failure((Status::BadRequest,\n                                           JwTokenError::Expired))\n                }\n                return Outcome::Failure((Status::BadRequest,\n                    JwTokenError::Invalid))\n            }\n        }\n    },\n    None => {\n        return Outcome::Failure((Status::BadRequest,\n                                 JwTokenError::Missing))\n    }\n}\n```", "```rs\nmod jwt;\n```", "```rs\nuse rocket::http::Status;\nuse rocket::request::{self, Outcome, Request, FromRequest};\n```", "```rs\n#[derive(Debug)]\npub enum DBError {\n    Unavailable\n}\n```", "```rs\n#[rocket::async_trait]\nimpl<'r> FromRequest<'r> for DB {\n    type Error = DBError;\n    async fn from_request(_: &'r Request<'_>)\n                          -> Outcome<Self, Self::Error> {\n      match DBCONNECTION.db_connection.get() {\n         Ok(connection) => {\n            return Outcome::Success(DB{connection})\n         },\n         Err(_) => {\n            return Outcome::Failure((Status::BadRequest,\n                                     DBError::Unavailable))\n         }\n      }\n    }\n}\n```", "```rs\ntrait fns cannot be declared `async`\n```", "```rs\nasync fn from_request(_: &'r Request<'_>)\n                      -> Pin<Box<dyn Future<Output\n                      = Outcome<Self, Self::Error>>\n                      + Send + '_>> {\n```", "```rs\n#[post(\"/create/<title>\")]\nfn item_create(title: String, db: DB) -> Json<ToDoItems> {\n    let items = schema::to_do::table\n        .filter(schema::to_do::columns::title.eq(&title.as_            str()))\n        .order(schema::to_do::columns::id.asc())\n        .load::<Item>(&db.connection)\n        .unwrap();\n    if items.len() == 0 {\n        let new_post = NewItem::new(title, 1);\n        let _ = diesel::insert_into(schema::to_do::table)\n            .values(&new_post)\n            .execute(&db.connection);\n    }\n    return Json(ToDoItems::get_state(1));\n}\n```", "```rs\ncp -r web_app/src/views rocket_app/src/views\n```", "```rs\nuse crate::diesel;\nuse diesel::prelude::*;\nuse rocket::serde::json::Json;\nuse crate::database::DB;\nuse crate::models::user::user::User;\nuse crate::json_serialization::{login::Login,\n                login_response::LoginResponse};\nuse crate::schema::users;\nuse crate::jwt::JwToken;\n```", "```rs\n#[post(\"/login\", data = \"<credentials>\", format = \"json\")]\npub async fn login<'a>(credentials: Json<Login>, db: DB) ->\n                                        Json<LoginResponse> {\n    . . .\n}\n```", "```rs\nlet username: String = credentials.username.clone();\nlet password: String = credentials.password.clone();\nlet users = users::table\n    .filter(users::columns::username.eq(username.as_str()))\n    .load::<User>(&db.connection).unwrap();\nmatch users[0].clone().verify(password) {\n    true => {\n        let user_id = users[0].clone().id;\n        let token = JwToken::new(user_id);\n        let raw_token = token.encode();\n        let body = LoginResponse{token: raw_token.clone()};\n        return Json(body)\n    },\n    false => panic!(\"unauthorised\")\n}\n```", "```rs\nuse rocket::response::content::RawHtml;\n#[get(\"/logout\")]\npub async fn logout() -> RawHtml<&'static str> {\n        return RawHtml(\"<html>\\\n                <script>\\\n                    localStorage.removeItem('user-token'); \\\n                    window.location.replace(\n                        document.location.origin);\\\n                </script>\\\n              </html>\")\n}\n```", "```rs\nuse rocket::serde::json::Json;\nuse rocket::response::status::Created;\n```", "```rs\n#[post(\"/create/<title>\")]\npub async fn create<'a>(token: JwToken, title: String, db: DB)\n                                 -> Created<Json<ToDoItems>> {\n    . . .\n}\n```", "```rs\nlet items = to_do::table\n    .filter(to_do::columns::title.eq(&title.as_str()))\n    .order(to_do::columns::id.asc())\n    .load::<Item>(&db.connection)\n    .unwrap();\nif items.len() == 0 {\n    let new_post = NewItem::new(title, token.user_id);\n    let _ = diesel::insert_into(to_do::table).values(&new_post)\n        .execute(&db.connection);\n}\n```", "```rs\nlet body = Json(ToDoItems::get_state(token.user_id));\nreturn Created::new(\"\").body(body)\n```", "```rs\nuse crate::diesel;\nuse diesel::prelude::*;\nuse rocket::serde::json::Json;\nuse rocket::http::Status;\nuse crate::database::DB;\nuse crate::json_serialization::new_user::NewUserSchema;\nuse crate::models::user::new_user::NewUser;\nuse crate::schema::users;\n```", "```rs\n#[post(\"/create\", data = \"<new_user>\", format = \"json\")]\npub async fn create_user(new_user: Json<NewUserSchema>, db: DB)\n    -> Status {\n    . . .\n}\n```", "```rs\nlet name: String = new_user.name.clone();\nlet email: String = new_user.email.clone();\nlet password: String = new_user.password.clone();\nlet new_user = NewUser::new(name, email, password);\nlet insert_result = diesel::insert_into(users::table)\n            .values(&new_user).execute(&db.connection);\n```", "```rs\nmatch insert_result {\n    Ok(_) => Status::Created,\n    Err(_) => Status::Conflict\n}\n```", "```rs\n#[macro_use] extern crate rocket;\n#[macro_use] extern crate diesel;\nuse rocket::http::Header;\nuse rocket::{Request, Response};\nuse rocket::fairing::{Fairing, Info, Kind};\n```", "```rs\nmod schema;\nmod database;\nmod json_serialization;\nmod models;\nmod to_do;\nmod config;\nmod jwt;\nmod views;\n```", "```rs\nuse views::auth::{login::login, logout::logout};\nuse views::to_do::{create::create, delete::delete,\n                   edit::edit, get::get};\nuse views::users::create::create_user;\n```", "```rs\npub struct CORS;\n#[rocket::async_trait]\nimpl Fairing for CORS {\n    fn info(&self) -> Info {\n        Info {\n            name: \"Add CORS headers to responses\",\n            kind: Kind::Response\n        }\n    }\n    async fn on_response<'r>(&self, _request: &'r Request<'_>,\n                                response: &mut Response<'r>) {\n        response.set_header(Header::new(\n                         \"Access-Control-Allow-Origin\", \"*\"));\n        response.set_header(Header::new(\n                        \"Access-Control-Allow-Methods\",\n                        \"POST, GET, PATCH, OPTIONS\"));\n        response.set_header(Header::new(\n                        \"Access-Control-Allow-Headers\", \"*\"));\n        response.set_header(Header::new(\n                        \"Access-Control-Allow-Credentials\",\n                        \"true\"));\n    }\n}\n```", "```rs\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/\", routes![index, hello, bye])\n                   .mount(\"/v1/item/\", routes![create, delete,\n                                               edit, get])\n                   .mount(\"/v1/auth/\", routes![login, logout])\n                   .mount(\"/v1/user/\", routes![create_user])\n                   .attach(CORS)\n                   .manage(CORS)\n}\n```", "```rs\ncp -r web_app/scripts rocket_app/scripts\n```", "```rs\n#[get(\"/login\", data = \"<credentials>\", format = \"json\")]\npub async fn login_get<'a>(credentials: Json<Login>, db: DB)\n                                    -> Json<LoginResponse> {\n    // same logic as in the login view\n}\n```", "```rs\nsh scripts/run_test_pipeline.sh\n```", "```rs\n  #  failure                   detail\n 1.  AssertionError            response is ok\n                               expected response to have status\n                               code 200 but got 201\n                               at assertion:0 in test-script\n                               inside \"1_create\"\n 2.  AssertionError            response is ok\n                               expected response to have status\n                               code 200 but got 201\n                               at assertion:0 in test-script\n                               inside \"2_create\"\n 3.  AssertionError            response is ok\n                               expected response to have status\n                               code 200 but got 201\n                               at assertion:0 in test-script\n                               inside \"3_create\"\n```"]