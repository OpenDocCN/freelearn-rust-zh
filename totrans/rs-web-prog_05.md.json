["```rs\nviews\n├── app\n│   ├── items.rs\n│   └── mod.rs\n```", "```rs\nuse actix_web::HttpResponse;\npub async fn items() -> HttpResponse {\n    HttpResponse::Ok()\n        .content_type(\"text/html; charset=utf-8\")\n        .body(\"<h1>Items</h1>\")\n}\n```", "```rs\nuse actix_web::web;\nmod items;\npub fn app_views_factory(app: &mut web::ServiceConfig) {\n    app.route(\"/\", web::get().to(items::items));\n}\n```", "```rs\nmod app;\n```", "```rs\napp::app_views_factory(app);\n```", "```rs\nHttpResponse::Ok()\n    .content_type(\"text/html; charset=utf-8\")\n    .body(\"<h1>Items</h1>\")\n```", "```rs\nuse std::fs;\npub fn read_file(file_path: &str) -> String {\n    let data: String = fs::read_to_string(\n        file_path).expect(\"Unable to read file\");\n    return data\n}\n```", "```rs\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charSet=\"UTF-8\"/>\n        <meta name=\"viewport\"\n              content=\"width=device-width, initial-\n                                           scale=1.0\"/>\n        <meta httpEquiv=\"X-UA-Compatible\"\n              content=\"ie=edge\"/>\n        <meta name=\"description\"\n              content=\"This is a simple to do app\"/>\n        <title>To Do App</title>\n    </head>\n    <body>\n        <h1>To Do Items</h1>\n    </body>\n</html>\n```", "```rs\nuse actix_web::HttpResponse;\nuse super::content_loader::read_file;\npub async fn items() -> HttpResponse {\n    let html_data = read_file(\n        \"./templates/main.html\");\n    HttpResponse::Ok()\n        .content_type(\"text/html; charset=utf-8\")\n        .body(html_data)\n}\n```", "```rs\n<body>\n    <h1>To Do Items</h1>\n    <input type=\"text\" id=\"name\" placeholder=\"create to do \n         item\">\n    <button id=\"create-button\" value=\"Send\">Create</button>\n</body>\n<script>\n    let createButton = document.getElementById(\"create-\n        button\");\n    createButton.addEventListener(\"click\", postAlert);\n    function postAlert() {\n        let titleInput = document.getElementById(\"name\");\n        alert(titleInput.value);\n        titleInput.value = null;\n    }\n</script>\n```", "```rs\nuse actix_web::HttpResponse;\nuse serde_json::Value;\nuse serde_json::Map;\nuse actix_web::HttpRequest;\nuse crate::to_do::{to_do_factory, enums::TaskStatus};\nuse crate::json_serialization::to_do_items::ToDoItems;\nuse crate::state::read_file;\nuse crate::processes::process_input;\npub async fn create(req: HttpRequest) -> HttpResponse {\n    let state: Map<String, Value> = \n        read_file(\"./state.json\");\n    let title: String = req.match_info().get(\"title\"\n    ).unwrap().to_string();\n    let item = to_do_factory(&title.as_str(), \n        TaskStatus::PENDING);\n    process_input(item, \"create\".to_string(), &state);\n    return HttpResponse::Ok().json(ToDoItems::get_state())\n}\n```", "```rs\n    use actix_web::{web, HttpResponse};\n    ```", "```rs\n    use serde_json::value::Value;\n    ```", "```rs\n    use serde_json::Map;\n    ```", "```rs\n    use crate::to_do::{to_do_factory, enums::TaskStatus};\n    ```", "```rs\n    use crate::json_serialization::{to_do_item::ToDoItem, \n    ```", "```rs\n        to_do_items::ToDoItems};\n    ```", "```rs\n    use crate::processes::process_input;\n    ```", "```rs\n    use crate::jwt::JwToken;\n    ```", "```rs\n    use crate::state::read_file;\n    ```", "```rs\n    pub async fn delete(to_do_item: web::Json<ToDoItem>, \n    ```", "```rs\n        token: JwToken) -> HttpResponse {\n    ```", "```rs\n        . . .\n    ```", "```rs\n    }\n    ```", "```rs\n    let state: Map<String, Value> = read_file(\"./state.json\");\n    ```", "```rs\n    let status: TaskStatus;\n    ```", "```rs\n    match &state.get(&to_do_item.title) {\n    ```", "```rs\n        Some(result) => {\n    ```", "```rs\n            status = TaskStatus::from_string\n    ```", "```rs\n                     (result.as_str().unwrap().to_string()                 );\n    ```", "```rs\n        }\n    ```", "```rs\n        None=> {\n    ```", "```rs\n            return HttpResponse::NotFound().json(\n    ```", "```rs\n                format!(\"{} not in state\", \n    ```", "```rs\n                         &to_do_item.title))\n    ```", "```rs\n        }\n    ```", "```rs\n    }\n    ```", "```rs\n    let existing_item = to_do_factory(to_do_item.title.as_    str(),\n    ```", "```rs\n        status.clone());\n    ```", "```rs\n    process_input(existing_item, \"delete\".    to_owned(), \n    ```", "```rs\n        &state);\n    ```", "```rs\n    return HttpResponse::Ok().json(ToDoItems::get_state())\n    ```", "```rs\n    mod create;\n    ```", "```rs\n    mod get;\n    ```", "```rs\n    mod edit;\n    ```", "```rs\n    mod delete;\n    ```", "```rs\n    use actix_web::web::{ServiceConfig, post, get, scope};\n    ```", "```rs\n    pub fn to_do_views_factory(app: &mut ServiceConfig) {\n    ```", "```rs\n        app.service(\n    ```", "```rs\n            scope(\"v1/item\")\n    ```", "```rs\n            .route(\"create/{title}\", \n    ```", "```rs\n                    post().to(create::create))\n    ```", "```rs\n            .route(\"get\", get().to(get::get))\n    ```", "```rs\n            .route(\"edit\", post().to(edit::edit))\n    ```", "```rs\n            .route(\"delete\", post().to(delete::delete))\n    ```", "```rs\n        );\n    ```", "```rs\n    }\n    ```", "```rs\npub async fn items() -> HttpResponse {\n    let mut html_data = read_file(\n        \"./templates/main.html\");\n    let javascript_data = read_file(\n        \"./javascript/main.js\");\n    html_data = html_data.replace(\"{{JAVASCRIPT}}\", \n        &javascript_data);\n    HttpResponse::Ok()\n        .content_type(\"text/html; charset=utf-8\")\n        .body(html_data)\n}\n```", "```rs\n<body>\n    <h1>Done Items</h1>\n    <div id=\"doneItems\"></div>\n    <h1>To Do Items</h1>\n    <div id=\"pendingItems\"></div>\n    <input type=\"text\" id=\"name\" placeholder=\"create to do\n     item\">\n    <button id=\"create-button\" value=\"Send\">Create</button>\n</body>\n<script>\n    {{JAVASCRIPT}}\n</script>\n```", "```rs\n    <div>\n    ```", "```rs\n        <div>\n    ```", "```rs\n            <p>learn to code rust</p>\n    ```", "```rs\n            <button id=\"edit-learn-to-code-rust\">\n    ```", "```rs\n                edit\n    ```", "```rs\n            </button>\n    ```", "```rs\n        </div>\n    ```", "```rs\n    </div>\n    ```", "```rs\n    function renderItems(items, processType, \n    ```", "```rs\n        elementId, processFunction) {\n    ```", "```rs\n     . . .\n    ```", "```rs\n    }\n    ```", "```rs\n    let itemsMeta = [];\n    ```", "```rs\n    let placeholder = \"<div>\"\n    ```", "```rs\n    for (let i = 0; i < items.length; i++) {\n    ```", "```rs\n        . . .\n    ```", "```rs\n    }\n    ```", "```rs\n    placeholder += \"</div>\"\n    ```", "```rs\n    document.getElementById(elementId).innerHTML = \n    ```", "```rs\n        placeholder;\n    ```", "```rs\n    let title = items[i][\"title\"];\n    ```", "```rs\n    let placeholderId = processType +\n    ```", "```rs\n    \"-\" + title.replaceAll(\" \", \"-\");\n    ```", "```rs\n    placeholder += \"<div>\" + title +\n    ```", "```rs\n    \"<button \" + 'id=\"' + placeholderId + '\">'\n    ```", "```rs\n    + processType +\n    ```", "```rs\n    '</button>' + \"</div>\";\n    ```", "```rs\n    itemsMeta.push({\"id\": placeholderId, \"title\": title});\n    ```", "```rs\n        . . .\n    ```", "```rs\n        placeholder += \"</div>\"\n    ```", "```rs\n        document.getElementById(elementId).innerHTML \n    ```", "```rs\n        = placeholder;\n    ```", "```rs\n        for (let i = 0; i < itemsMeta.length; i++) {\n    ```", "```rs\n            document.getElementById(\n    ```", "```rs\n                itemsMeta[i][\"id\"]).addEventListener(\n    ```", "```rs\n                \"click\", processFunction);\n    ```", "```rs\n        }\n    ```", "```rs\n    }\n    ```", "```rs\n    function apiCall(url, method) {\n    ```", "```rs\n        let xhr = new XMLHttpRequest();\n    ```", "```rs\n        xhr.withCredentials = true;\n    ```", "```rs\n    xhr.addEventListener('readystatechange', function() {\n    ```", "```rs\n        if (this.readyState === this.DONE) {\n    ```", "```rs\n            renderItems(JSON.parse(\n    ```", "```rs\n            this.responseText)[\"pending_items\"], \n    ```", "```rs\n            \"edit\", \"pendingItems\", editItem);\n    ```", "```rs\n            renderItems(JSON.parse(this.responseText)\n    ```", "```rs\n                [\"done_items\"],\n    ```", "```rs\n            \"delete\", \"doneItems\", deleteItem);\n    ```", "```rs\n        }\n    ```", "```rs\n    });\n    ```", "```rs\n    xhr.open(method, url);\n    xhr.setRequestHeader('content-type', \n        'application/json');\n    xhr.setRequestHeader('user-token', 'token');\n    return xhr\n}\n```", "```rs\nfunction editItem() {\n    let title = this.id.replaceAll(\"-\", \" \")\n        .replace(\"edit \", \"\");\n    let call = apiCall(\"/v1/item/edit\", \"POST\");\n    let json = {\n        \"title\": title,\n        \"status\": \"DONE\"\n    };\n    call.send(JSON.stringify(json));\n}\n```", "```rs\nfunction deleteItem() {\n    let title = this.id.replaceAll(\"-\", \" \")\n        .replace(\"delete \", \"\");\n    let call = apiCall(\"/v1/item/delete\", \"POST\");\n    let json = {\n        \"title\": title,\n        \"status\": \"DONE\"\n    };\n    call.send(JSON.stringify(json));\n}\n```", "```rs\nfunction getItems() {\n    let call = apiCall(\"/v1/item/get\", 'GET');\n    call.send()\n}\ngetItems();\n```", "```rs\ndocument.getElementById(\"create-button\")\n        .addEventListener(\"click\", createItem);\nfunction createItem() {\n    let title = document.getElementById(\"name\");\n    let call = apiCall(\"/v1/item/create/\" + \n        title.value, \"POST\");\n    call.send();\n    document.getElementById(\"name\").value = null;\n}\n```", "```rs\n <style>\n    {{BASE_CSS}}\n    {{CSS}}\n</style>\n<body>\n    <div class=\"mainContainer\">\n        <h1>Done Items</h1>\n        <div id=\"doneItems\"></div>\n        <h1>To Do Items</h1>\n        <div id=\"pendingItems\"></div>\n        <div class=\"inputContainer\">\n            <input type=\"text\" id=\"name\"\n                   placeholder=\"create to do item\">\n            <div class=\"actionButton\" \n                 id=\"create-button\" \n                 value=\"Send\">Create</div>\n        </div>\n    </div>\n</body>\n<script>\n    {{JAVASCRIPT}}\n</script>\n```", "```rs\nfunction renderItems(items, processType, \n    elementId, processFunction) {\n    . . . \n    for (i = 0; i < items.length; i++) {\n        . . .\n        placeholder += '<div class=\"itemContainer\">' +\n            '<p>' + title + '</p>' +\n            '<div class=\"actionButton\" ' + \n                  'id=\"' + placeholderId + '\">'\n            + processType + '</div>' + \"</div>\";\n        itemsMeta.push({\"id\": placeholderId, \"title\":        title});\n    }\n    . . .\n}\n```", "```rs\nbody {\n    background-color: #92a8d1;\n    font-family: Arial, Helvetica, sans-serif;\n    height: 100vh;\n} \n```", "```rs\n@media(max-width: 500px) {\n    body {\n        padding: 1px;\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n}\n```", "```rs\n@media(min-width: 501px) and (max-width: 550px) {\n    body {\n        padding: 1px;\n        display: grid;\n        grid-template-columns: 1fr 5fr 1fr;\n    } \n    .mainContainer {\n        grid-column-start: 2;\n    }\n}\n```", "```rs\n@media(min-width: 551px) and (max-width: 1000px) {\n    body {\n        padding: 1px;\n        display: grid;\n        grid-template-columns: 1fr 3fr 1fr;\n    } \n    .mainContainer {\n        grid-column-start: 2;\n    }\n} \n@media(min-width: 1001px) {\n    body {\n        padding: 1px;\n        display: grid;\n        grid-template-columns: 1fr 1fr 1fr;\n    } \n    .mainContainer {\n        grid-column-start: 2;\n    }\n}\n```", "```rs\n.itemContainer {\n    background: #034f84;\n    margin: 0.3rem;\n}\n```", "```rs\n.itemContainer:hover {\n    background: #034f99;\n}\n```", "```rs\n.itemContainer p {\n    color: white;\n    display: inline-block;\n    margin: 0.5rem;\n    margin-right: 0.4rem;\n    margin-left: 0.4rem;\n}\n```", "```rs\n.actionButton {\n    display: inline-block;\n    float: right;\n    background: #f7786b;\n    border: none;\n    padding: 0.5rem;\n    padding-left: 2rem;\n    padding-right: 2rem;\n    color: white;\n}\n```", "```rs\n.actionButton:hover {\n    background: #f7686b;\n    color: black;\n}\n```", "```rs\n.inputContainer {\n    background: #034f84;\n    margin: 0.3rem;\n    margin-top: 2rem;\n}\n.inputContainer input {\n    display: inline-block;\n    margin: 0.4rem;\n}\n```", "```rs\npub async fn items() -> HttpResponse {\n    let mut html_data = read_file(\n        \"./templates/main.html\");\n    let javascript_data: String = read_file(\n        \"./javascript/main.js\");\n    let css_data: String = read_file(\n        \"./css/main.css\");\n    let base_css_data: String = read_file(\n        \"./css/base.css\");\n    html_data = html_data.replace(\"{{JAVASCRIPT}}\", \n    &javascript_data);\n    html_data = html_data.replace(\"{{CSS}}\", \n    &css_data);\n    html_data = html_data.replace(\"{{BASE_CSS}}\", \n    &base_css_data);\n    HttpResponse::Ok()\n        .content_type(\"text/html; charset=utf-8\")\n        .body(html_data)\n}\n```", "```rs\npub fn add_component(component_tag: String, \n    html_data: String) -> String {\n    let css_tag: String = component_tag.to_uppercase() + \n        \"_CSS\";\n    let html_tag: String = component_tag.to_uppercase() + \n        \"_HTML\";\n    let css_path = String::from(\"./templates/components/\") \n        + &component_tag.to_lowercase() + \".css\";\n    let css_loaded = read_file(&css_path);\n    let html_path = String::from(\"./templates/components/\") \n        + &component_tag.to_lowercase() + \".html\";\n    let html_loaded = read_file(&html_path);\n    let html_data = html_data.replace(html_tag.as_str(), \n        &html_loaded);\n    let html_data = html_data.replace(css_tag.as_str(), \n        &css_loaded);\n    return html_data\n} \n```", "```rs\n<div class=\"header\">\n    <p>complete tasks: </p><p id=\"completeNum\"></p>\n    <p>pending tasks: </p><p id=\"pendingNum\"></p>\n</div>\n```", "```rs\n.header {\n    background: #034f84;\n    margin-bottom: 0.3rem;\n}\n.header p {\n    color: white;\n    display: inline-block;\n    margin: 0.5rem;\n    margin-right: 0.4rem;\n    margin-left: 0.4rem;\n}\n```", "```rs\n. . . \n    <style>\n        {{BASE_CSS}}\n        {{CSS}}\n        HEADER_CSS\n    </style>\n    <body>\n        <div class=\"mainContainer\">\n            HEADER_HTML\n            <h1>Done Items</h1>\n. . .\n```", "```rs\nuse super::content_loader::add_component;\n```", "```rs\nhtml_data = add_component(String::from(\"header\"), \n    html_data);\n```", "```rs\ndocument.getElementById(\"completeNum\").innerHTML = \n    JSON.parse(this.responseText)[\"done_item_count\"];\ndocument.getElementById(\"pendingNum\").innerHTML = \n    JSON.parse(this.responseText)[\"pending_item_count\"]; \n```", "```rs\nnpx create-react-app front_end\n```", "```rs\n. . .\n\"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n},\n. . .\n```", "```rs\nimport React, { Component } from 'react';\nclass App extends Component {\n  state = {\n    \"message\": \"To Do\"\n  }\n  render() {\n    return (\n        <div className=\"App\">\n          <p>{this.state.message} application</p>\n        </div>\n    )\n  }\n}\nexport default App;\n```", "```rs\nnpm start\n```", "```rs\n\"axios\": \"^0.26.1\"\n```", "```rs\nnpm install\n```", "```rs\nimport React, { Component } from 'react';\nimport axios from 'axios';\n```", "```rs\nclass App extends Component {\n  state = {\n      \"pending_items\": [],\n      \"done_items\": [],\n      \"pending_items_count\": 0,\n      \"done_items_count\": 0\n  }\n}\nexport default App;\n```", "```rs\nclass App extends Component {\n\n  state = {\n      . . .\n  }\n  // makes the API call\n  getItems() {\n      . . .\n  }\n  // ensures the API call is updated when mounted\n  componentDidMount() {\n      . . .\n  }\n  // convert items from API to HTML \n  processItemValues(items) {\n      . . .\n  }\n  // returns the HTML to be rendered\n  render() {\n    return (\n        . . .\n    )\n  }\n}\n```", "```rs\n    axios.get(\"http://127.0.0.1:8000/v1/item/get\",\n    ```", "```rs\n      {headers: {\"token\": \"some_token\"}})\n    ```", "```rs\n      .then(response => {\n    ```", "```rs\n          let pending_items = response.data[\"pending_items\"]\n    ```", "```rs\n          let done_items = response.data[\"done_items\"]\n    ```", "```rs\n          this.setState({\n    ```", "```rs\n                . . .\n    ```", "```rs\n            })\n    ```", "```rs\n      });\n    ```", "```rs\n\"pending_items\": this.processItemValues(pending_items),\n\"done_items\": this.processItemValues(done_items),\n\"pending_items_count\": response.data[\"pending_item_count\"],\n\"done_items_count\": response.data[\"done_item_count\"]\n```", "```rs\n    componentDidMount() {\n    ```", "```rs\n      this.getItems();\n    ```", "```rs\n    }\n    ```", "```rs\n    processItemValues(items) {\n    ```", "```rs\n      let itemList = [];\n    ```", "```rs\n      items.forEach((item, index)=>{\n    ```", "```rs\n          itemList.push(\n    ```", "```rs\n              <li key={index}>{item.title} {item.status}</li>\n    ```", "```rs\n          )\n    ```", "```rs\n      })\n    ```", "```rs\n      return itemList\n    ```", "```rs\n    }\n    ```", "```rs\n    <div className=\"App\">\n    ```", "```rs\n    <h1>Done Items</h1>\n    ```", "```rs\n    <p>done item count: {this.state.done_items_count}</p>\n    ```", "```rs\n    {this.state.done_items}\n    ```", "```rs\n    <h1>Pending Items</h1>\n    ```", "```rs\n    <p>pending item count: \n    ```", "```rs\n        {this.state.pending_items_count}</p>\n    ```", "```rs\n    {this.state.pending_items}\n    ```", "```rs\n    </div>\n    ```", "```rs\n    actix-cors = \"0.6.1\"\n    ```", "```rs\nuse actix_cors::Cors;\n```", "```rs\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        let cors = Cors::default().allow_any_origin()\n                                  .allow_any_method()\n                                  .allow_any_header();\n        let app = App::new()\n            .wrap_fn(|req, srv|{\n                println!(\"{}-{}\", req.method(), \n                          req.uri());\n                let future = srv.call(req);\n                async {\n                    let result = future.await?;\n                    Ok(result)\n                }\n        }).configure(views::views_factory).wrap(cors);\n        return app\n    })\n    .bind(\"127.0.0.1:8000\")?\n    .run()\n    .await\n}\n```", "```rs\nimport React, { Component } from 'react';\nimport axios from \"axios\";\n```", "```rs\nclass ToDoItem extends Component {\n    state = {\n        \"title\": this.props.title,\n        \"status\": this.props.status,\n        \"button\": this.processStatus(this.props.status)\n    }\n    processStatus(status) {\n        . . .\n    }\n    inverseStatus(status) {\n        . . .\n    }\n    sendRequest = () => {\n        . . .\n    }\n    render() {\n        return(\n            . . .\n        )\n    }\n}\nexport default ToDoItem;\n```", "```rs\nprocessStatus(status) {\n    if (status === \"PENDING\") {\n        return \"edit\"\n    } else {\n        return \"delete\"\n    }\n}\ninverseStatus(status) {\n    if (status === \"PENDING\") {\n        return \"DONE\"\n    } else {\n        return \"PENDING\"\n    }\n}\n```", "```rs\nsendRequest = () => {\n    axios.post(\"http://127.0.0.1:8000/v1/item/\" + \n                this.state.button,\n        {\n            \"title\": this.state.title,\n            \"status\": this.inverseStatus(this.state.status)\n        },\n    {headers: {\"token\": \"some_token\"}})\n        .then(response => {\n            this.props.passBackResponse(response);\n        });\n}\n```", "```rs\n<div>\n    <p>{this.state.title}</p>\n    <button onClick={this.sendRequest}>\n                    {this.state.button}</button>\n</div>\n```", "```rs\nimport React, { Component } from 'react';\nimport axios from \"axios\";\n```", "```rs\nclass CreateToDoItem extends Component {\n    state = {\n        title: \"\"\n    }\n    createItem = () => {\n        . . .\n    }\n    handleTitleChange = (e) => {\n        . . .\n    }\n    render() {\n        return (\n            . . .\n        )\n    }\n}\nexport default CreateToDoItem;\n```", "```rs\n<div className=\"inputContainer\">\n    <input type=\"text\" id=\"name\"\n           placeholder=\"create to do item\"\n           value={this.state.title}\n           onChange={this.handleTitleChange}/>\n    <div className=\"actionButton\"\n         id=\"create-button\"\n         onClick={this.createItem}>Create</div>\n</div>\n```", "```rs\ncreateItem = () => {\n    axios.post(\"http://127.0.0.1:8000/v1/item/create/\" +\n        this.state.title,\n        {},\n        {headers: {\"token\": \"some_token\"}})\n        .then(response => {\n            this.setState({\"title\": \"\"});\n            this.props.passBackResponse(response);\n        });\n}\nhandleTitleChange = (e) => {\n    this.setState({\"title\": e.target.value});\n}    \n```", "```rs\nimport ToDoItem from \"./components/ToDoItem\";\nimport CreateToDoItem from \"./components/CreateToDoItem\";\n```", "```rs\nprocessItemValues(items) {\n  let itemList = [];\n  items.forEach((item, _)=>{\n      itemList.push(\n          <ToDoItem key={item.title + item.status}\n                    title={item.title}\n                    status={item.status.status}\n                    passBackResponse={\n                    this.handleReturnedState}/>\n      )\n  })\n  return itemList\n}\n```", "```rs\nhandleReturnedState = (response) => {\n  let pending_items = response.data[\"pending_items\"]\n  let done_items = response.data[\"done_items\"]\n  this.setState({\n      \"pending_items\": \n       this.processItemValues(pending_items),\n      \"done_items\": this.processItemValues(done_items),\n      \"pending_items_count\": \n       response.data[\"pending_item_count\"],\n      \"done_items_count\": response.data[\"done_item_count\"]\n  })\n}\n```", "```rs\n<div className=\"App\">\n    <h1>Pending Items</h1>\n    <p>done item count: \n    {this.state.pending_items_count}</p>\n    {this.state.pending_items}\n    <h1>Done Items</h1>\n    <p>done item count: {this.state.done_items_count}</p>\n    {this.state.done_items}\n    <CreateToDoItem \n     passBackResponse={this.handleReturnedState} />\n</div>\n```", "```rs\n.App {\n  background-color: #92a8d1;\n  font-family: Arial, Helvetica, sans-serif;\n  height: 100vh;\n}\n@media(min-width: 501px) and (max-width: 550px) {\n  .App {\n    padding: 1px;\n    display: grid;\n    grid-template-columns: 1fr 5fr 1fr;\n  }\n  .mainContainer {\n    grid-column-start: 2;\n  }\n}\n. . .\n```", "```rs\nimport \"./App.css\";\n```", "```rs\n<div className=\"App\">\n    <div className=\"mainContainer\">\n        <div className=\"header\">\n            <p>complete tasks: \n            {this.state.done_items_count}</p>\n            <p>pending tasks: \n            {this.state.pending_items_count}</p>\n        </div>\n        <h1>Pending Items</h1>\n        {this.state.pending_items}\n        <h1>Done Items</h1>\n        {this.state.done_items}\n        <CreateToDoItem passBackResponse=\n       {this.handleReturnedState}/>\n    </div>\n</div>\n```", "```rs\nimport \"../App.css\";\n```", "```rs\n<div className=\"itemContainer\">\n    <p>{this.state.title}</p>\n    <div className=\"actionButton\" onClick=\n    {this.sendRequest}>\n    {this.state.button}</div>\n</div>\n```", "```rs\nimport \"../App.css\";\n```", "```rs\n<div className=\"inputContainer\">\n    <input type=\"text\" id=\"name\"\n           placeholder=\"create to do item\"\n           value={this.state.title}\n           onChange={this.handleTitleChange}/>\n    <div className=\"actionButton\"\n         id=\"create-button\"\n         onClick={this.createItem}>Create</div>\n</div>\n```", "```rs\n{\n  \"name\": \"front_end\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"homepage\": \"./\",\n  \"main\": \"public/electron.js\",\n  \"description\": \"GUI Desktop Application for a simple To \n                  Do App\",\n  \"author\": \"Maxwell Flitton\",\n  \"build\": {\n    \"appId\": \"Packt\"\n  },\n  \"dependencies\": {\n    . . .\n```", "```rs\n\"webpack\": \"4.28.3\",\n\"cross-env\": \"^7.0.3\",\n\"electron-is-dev\": \"^2.0.0\"\n```", "```rs\n    . . .\n\"scripts\": {\n    \"react-start\": \"react-scripts start\",\n    \"react-build\": \"react-scripts build\",\n    \"react-test\": \"react-scripts test\",\n    \"react-eject\": \"react-scripts eject\",\n    \"electron-build\": \"electron-builder\",\n    \"build\": \"npm run react-build && npm run electron-\n              build\",\n    \"start\": \"concurrently \\\"cross-env BROWSER=none npm run \n              react-start\\\" \\\"wait-on http://localhost:3000 \n              && electron .\\\"\"\n},\n```", "```rs\nnpm run react-start\n```", "```rs\n    . . .\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"^7.1.0\",\n    \"electron\": \"^18.0.1\",\n    \"electron-builder\": \"^22.14.13\",\n    \"wait-on\": \"^6.0.1\"\n  }\n}\n```", "```rs\nnpm install\n```", "```rs\nconst { app, BrowserWindow } = require(\"electron\");\nconst path = require(\"path\");\nconst isDev = require(\"electron-is-dev\");\n```", "```rs\nfunction createWindow() {\n    const mainWindow = new BrowserWindow({\n        width: 800,\n        height: 600,\n        webPreferences: {\n            nodeIntegration: true,\n            enableRemoteModule: true,\n            contextIsolation: false,\n        },\n    });\n    mainWindow.loadURL(\n        isDev\n           ? \"http://localhost:3000\"\n           : `file://${path.join(__dirname, \n                                 \"../build/index.html\")}`\n    );\n    if (isDev) {\n        mainWindow.webContents.openDevTools();\n    }\n}\n```", "```rs\napp.whenReady().then(() => {\n    createWindow();\n    app.on(\"activate\", function () {\n        if (BrowserWindow.getAllWindows().length === 0){\n           createWindow(); \n        }\n    });\n});\n```", "```rs\napp.on(\"window-all-closed\", function () {\n    if (process.platform !== \"darwin\") app.quit();\n});\n```", "```rs\nnpm start\n```", "```rs\nnpm build\n```"]