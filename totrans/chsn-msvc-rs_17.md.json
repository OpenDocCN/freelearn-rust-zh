["```rs\n[dependencies]\nlambda_runtime = { git = \"https://github.com/awslabs/aws-lambda-rust-runtime\" }\nlog = \"0.4\"\nrand = \"0.5\"\nserde = \"1.0\"\nserde_derive = \"1.0\"\nsimple_logger = \"1.0\"\n```", "```rs\n[[bin]]\nname = \"bootstrap\"\npath = \"src/main.rs\"\n```", "```rs\nuse serde_derive::{Serialize, Deserialize};\nuse lambda_runtime::{lambda, Context, error::HandlerError};\nuse rand::Rng;\nuse rand::distributions::{Bernoulli, Normal, Uniform};\nuse std::error::Error;\nuse std::ops::Range;\n```", "```rs\nfn main() -> Result<(), Box<dyn Error>> {\n    simple_logger::init_with_level(log::Level::Debug).unwrap();\n    lambda!(rng_handler);\n    Ok(())\n}\n```", "```rs\nfn rng_handler(event: RngRequest, _ctx: Context) -> Result<RngResponse, HandlerError> {\n    let mut rng = rand::thread_rng();\n    let value = {\n        match event {\n            RngRequest::Uniform { range } => {\n                rng.sample(Uniform::from(range)) as f64\n            },\n            RngRequest::Normal { mean, std_dev } => {\n                rng.sample(Normal::new(mean, std_dev)) as f64\n            },\n            RngRequest::Bernoulli { p } => {\n                rng.sample(Bernoulli::new(p)) as i8 as f64\n            },\n        }\n    };\n    Ok(RngResponse { value })\n}\n```", "```rs\n#[derive(Deserialize)]\n#[serde(tag = \"distribution\", content = \"parameters\", rename_all = \"lowercase\")]\nenum RngRequest {\n    Uniform {\n        #[serde(flatten)]\n        range: Range<i32>,\n    },\n    Normal {\n        mean: f64,\n        std_dev: f64,\n    },\n    Bernoulli {\n        p: f64,\n    },\n}\n```", "```rs\n#[derive(Serialize)]\nstruct RngResponse {\n    value: f64,\n}\n```", "```rs\ngit clone git://git.musl-libc.org/musl\n cd musl\n ./configure\n make\n sudo make install\n```", "```rs\n[build]\ntarget = \"x86_64-unknown-linux-musl\"\n```", "```rs\nrustup target add x86_64-unknown-linux-musl\n```", "```rs\nzip -j minimal-lambda.zip target/x86_64-unknown-linux-musl/debug/bootstrap\n```", "```rs\n{\n  \"distribution\": \"uniform\",\n  \"parameters\": {\n    \"start\": 0,\n    \"end\": 100\n  }\n}\n```", "```rs\nsudo npm install -g serverless\n```", "```rs\nsls install --url https://github.com/softprops/serverless-aws-rust-multi --name rust-sls\n```", "```rs\nServerless: Downloading and installing \"serverless-aws-rust-multi\"...\nServerless: Successfully installed \"rust-sls\"\n```", "```rs\nnpm install --save serverless-finch\n```", "```rs\n[workspace]\n members = [\n     \"lambda_1\",\n     \"lambda_2\",\n ]\n```", "```rs\n[dependencies]\nchrono = \"0.4\"\nlambda_runtime = { git = \"https://github.com/awslabs/aws-lambda-rust-runtime\" }\nlog = \"0.4\"\nrand = \"0.6\"\nrusoto_core = {version = \"0.35.0\", default_features = false, features=[\"rustls\"]}\nrusoto_dynamodb = {version = \"0.35.0\", default_features = false, features=[\"rustls\"]}\nserde = \"1.0\"\nserde_derive = \"1.0\"\nserde_json = \"1.0\"\nsimple_logger = \"1.0\"\nuuid = { version = \"0.7\", features = [\"v4\"] }\n```", "```rs\nuse chrono::Utc;\nuse lambda_runtime::{error::HandlerError, lambda, Context};\nuse log::debug;\nuse rand::thread_rng;\nuse rand::seq::IteratorRandom;\nuse rusoto_core::Region;\nuse rusoto_dynamodb::{AttributeValue, DynamoDb, DynamoDbClient, PutItemError, PutItemInput, PutItemOutput};\nuse serde_derive::{Serialize, Deserialize};\nuse std::collections::HashMap;\nuse std::error::Error;\nuse uuid::Uuid;\n```", "```rs\nfn main() -> Result<(), Box<dyn Error>> {\n     simple_logger::init_with_level(log::Level::Debug)?;\n     debug!(\"Starting lambda with Rust...\");\n     lambda!(handler);\n     Ok(())\n }\n```", "```rs\nfn handler(event: Request, _: Context) -> Result<Response, HandlerError> {\n     let region = Region::default();\n     let client = DynamoDbClient::new(region);\n     let username = event\n         .request_context\n         .authorizer\n         .claims\n         .get(\"cognito:username\")\n         .unwrap()\n         .to_owned();\n     debug!(\"USERNAME: {}\", username);\n     let ride_id = Uuid::new_v4().to_string();\n     let request: RequestBody = serde_json::from_str(&event.body).unwrap();\n     let unicorn = find_unicorn(&request.pickup_location);\n     record_ride(&client, &ride_id, &username, &unicorn).unwrap();\n     let body = ResponseBody {\n         ride_id: ride_id.clone(),\n         unicorn_name: unicorn.name.clone(),\n         unicorn,\n         eta: \"30 seconds\".into(),\n         rider: username.clone(),\n     };\n     let mut headers = HashMap::new();\n     headers.insert(\"Access-Control-Allow-Origin\".into(), \"*\".into());\n     let body = serde_json::to_string(&body).unwrap();\n     let resp = Response {\n         status_code: 201,\n         body,\n         headers,\n     };\n     Ok(resp)\n }\n```", "```rs\n#[derive(Clone, Serialize)]\n #[serde(rename_all = \"PascalCase\")]\n struct Unicorn {\n     name: String,\n     color: String,\n     gender: String,\n }\n```", "```rs\nimpl Unicorn {\n     fn new(name: &str, color: &str, gender: &str) -> Self {\n         Unicorn {\n             name: name.to_owned(),\n             color: color.to_owned(),\n             gender: gender.to_owned(),\n         }\n     }\n }\n```", "```rs\n#[derive(Deserialize)]\n #[serde(rename_all = \"PascalCase\")]\n struct Location {\n     latitude: f64,\n     longitude: f64,\n }\n```", "```rs\n#[derive(Deserialize)]\n #[serde(rename_all = \"camelCase\")]\n struct Request {\n     body: String,\n     request_context: RequestContext,\n }\n```", "```rs\n#[derive(Deserialize)]\n #[serde(rename_all = \"camelCase\")]\n struct RequestContext {\n     authorizer: Authorizer,\n }\n```", "```rs\n#[derive(Deserialize)]\n #[serde(rename_all = \"camelCase\")]\n struct Authorizer {\n     claims: HashMap<String, String>,\n }\n```", "```rs\n#[derive(Deserialize)]\n #[serde(rename_all = \"PascalCase\")]\n struct RequestBody {\n     pickup_location: Location,\n }\n```", "```rs\n#[derive(Serialize)]\n #[serde(rename_all = \"camelCase\")]\n struct Response {\n     body: String,\n     status_code: u16,\n     headers: HashMap<String, String>,\n }\n```", "```rs\n#[derive(Serialize)]\n #[serde(rename_all = \"PascalCase\")]\n struct ResponseBody {\n     ride_id: String,\n     unicorn: Unicorn,\n     unicorn_name: String,\n     eta: String,\n     rider: String,\n }\n```", "```rs\nfn find_unicorn(location: &Location) -> Unicorn {\n     debug!(\"Finding unicorn for {}, {}\", location.latitude, location.longitude);\n     let unicorns = [\n         Unicorn::new(\"Bucephalus\", \"Golden\", \"Male\"),\n         Unicorn::new(\"Shadowfax\", \"White\", \"Male\"),\n         Unicorn::new(\"Rocinante\", \"Yellow\", \"Female\"),\n     ];\n     let mut rng = thread_rng();\n     unicorns.iter().choose(&mut rng).cloned().unwrap()\n }\n```", "```rs\nfn record_ride(\n     conn: &DynamoDbClient,\n     ride_id: &str,\n     username: &str,\n     unicorn: &Unicorn,\n ) -> Result<PutItemOutput, PutItemError> {\n     let mut item: HashMap<String, AttributeValue> = HashMap::new();\n     item.insert(\"RideId\".into(), s_attr(ride_id));\n     item.insert(\"User\".into(), s_attr(username));\n     item.insert(\"UnicornName\".into(), s_attr(&unicorn.name));\n     let timestamp = Utc::now().to_string();\n     item.insert(\"RequestTime\".into(), s_attr(&timestamp));\n     item.insert(\"Unicorn\".into(), unicorn_map(unicorn));\n     let put = PutItemInput {\n         table_name: \"Rides\".into(),\n         item,\n         ..Default::default()\n     };\n     conn.put_item(put).sync()\n }\n```", "```rs\nfn s_attr<T: AsRef<str>>(s: T) -> AttributeValue {\n     AttributeValue {\n         s: Some(s.as_ref().to_owned()),\n         ..Default::default()\n     }\n }\n```", "```rs\nfn unicorn_map(unicorn: &Unicorn) -> AttributeValue {\n     let mut item = HashMap::new();\n     item.insert(\"Name\".into(), s_attr(&unicorn.name));\n     item.insert(\"Color\".into(), s_attr(&unicorn.color));\n     item.insert(\"Gender\".into(), s_attr(&unicorn.gender));\n     AttributeValue {\n         m: Some(item),\n         ..Default::default()\n     }\n }\n```", "```rs\nservice: rust-sls\n provider:\n   name: aws\n   runtime: rust\n   memorySize: 128\n```", "```rs\npackage:\n   individually: true\n```", "```rs\nplugins:\n   - serverless-rust\n   - serverless-finch\n```", "```rs\nfunctions:\n   lambda_1:\n     handler: lambda_1\n     role: RustSlsLambdaRole\n     events:\n       - http:\n           path: ride\n           method: post\n           cors: true\n           authorizer:\n             type: COGNITO_USER_POOLS\n             authorizerId:\n               Ref: RustSlsApiGatewayAuthorizer\n   lambda_2:\n     handler: lambda_2\n     events:\n       - http:\n           path: check\n           method: get\n```", "```rs\nresources:\n   Resources:\n```", "```rs\nRustSlsBucket:\n   Type: AWS::S3::Bucket\n   Properties:\n     BucketName: rust-sls-aws\n     WebsiteConfiguration:\n       IndexDocument: index.html\n```", "```rs\nRustSlsBucketPolicy:\n   Type: AWS::S3::BucketPolicy\n   Properties:\n     Bucket:\n       Ref: \"RustSlsBucket\"\n     PolicyDocument:\n       Statement:\n         -\n           Effect: \"Allow\"\n           Principal: \"*\"\n           Action:\n             - \"s3:GetObject\"\n           Resource:\n             Fn::Join:\n               - \"\"\n               -\n                 - \"arn:aws:s3:::\"\n                 -\n                   Ref: \"RustSlsBucket\"\n                 - \"/*\"\n```", "```rs\nRustSlsCognitoUserPool:\n   Type: AWS::Cognito::UserPool\n   Properties:\n     UserPoolName: RustSls\n     UsernameAttributes:\n       - email\n     AutoVerifiedAttributes:\n       - email\nRustSlsCognitoUserPoolClient:\n   Type: AWS::Cognito::UserPoolClient\n   Properties:\n     ClientName: RustSlsWebApp\n     GenerateSecret: false\n     UserPoolId:\n       Ref: \"RustSlsCognitoUserPool\"\n```", "```rs\nRustSlsDynamoDBTable:\n   Type: AWS::DynamoDB::Table\n   Properties:\n     TableName: Rides\n     AttributeDefinitions:\n       - AttributeName: RideId\n         AttributeType: S\n     KeySchema:\n       - AttributeName: RideId\n         KeyType: HASH\n     ProvisionedThroughput:\n       ReadCapacityUnits: 1\n       WriteCapacityUnits: 1\n```", "```rs\nRustSlsLambdaRole:\n   Type: AWS::IAM::Role\n   Properties:\n     RoleName: RustSlsLambda\n     AssumeRolePolicyDocument:\n       Version: '2012-10-17'\n       Statement:\n         - Effect: Allow\n           Principal:\n             Service:\n               - lambda.amazonaws.com\n           Action: sts:AssumeRole\n```", "```rs\nPolicies:\n   - PolicyName: DynamoDBWriteAccess\n     PolicyDocument:\n       Version: '2012-10-17'\n       Statement:\n         - Effect: Allow\n           Action:\n             - logs:CreateLogGroup\n             - logs:CreateLogStream\n             - logs:PutLogEvents\n           Resource:\n             - 'Fn::Join':\n               - ':'\n               -\n                 - 'arn:aws:logs'\n                 - Ref: 'AWS::Region'\n                 - Ref: 'AWS::AccountId'\n                 - 'log-group:/aws/lambda/*:*:*'\n         - Effect: Allow\n           Action:\n             - dynamodb:PutItem\n           Resource:\n             'Fn::GetAtt': [ RustSlsDynamoDBTable, Arn ]\n```", "```rs\nRustSlsApiGatewayAuthorizer:\n   Type: AWS::ApiGateway::Authorizer\n   Properties:\n     Name: RustSls\n     RestApiId:\n       Ref: ApiGatewayRestApi\n     Type: COGNITO_USER_POOLS\n     ProviderARNs:\n       - Fn::GetAtt: [ RustSlsCognitoUserPool, Arn ]\n     IdentitySource: method.request.header.Authorization\n```", "```rs\nOutputs:\n   RustSlsBucketURL:\n     Description: \"RustSls Bucket Website URL\"\n     Value:\n       \"Fn::GetAtt\": [ RustSlsBucket, WebsiteURL ]\n   RustSlsCognitoUserPoolId:\n     Description: \"RustSls Cognito User Pool ID\"\n     Value:\n       Ref: \"RustSlsCognitoUserPool\"\n   RustSlsCognitoUserPoolClientId:\n     Description: \"RustSls Cognito User Pool Client ID\"\n     Value:\n       Ref: \"RustSlsCognitoUserPoolClient\"\n   RustSlsDynamoDbARN:\n     Description: \"RustSls DynamoDB ARN\"\n     Value:\n       \"Fn::GetAtt\": [ RustSlsDynamoDBTable, Arn ]\n```", "```rs\ncustom:\n   client:\n     bucketName: rust-sls-aws\n     distributionFolder: assets\n```", "```rs\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1449904348000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudformation:CreateStack\",\n                \"cloudformation:CreateChangeSet\",\n                \"cloudformation:ListStacks\",\n                \"cloudformation:UpdateStack\",\n                \"cloudformation:DeleteStack\",\n                \"cloudformation:DescribeStacks\",\n                \"cloudformation:DescribeStackResource\",\n                \"cloudformation:DescribeStackEvents\",\n                \"cloudformation:ValidateTemplate\",\n                \"cloudformation:DescribeChangeSet\",\n                \"cloudformation:ExecuteChangeSet\"\n            ],\n            \"Resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n```", "```rs\nextract() {\n     echo \"$DATA\" | grep $1 | cut -d \" \" -f2\n }\n```", "```rs\ndeploy() {\n     echo \"ASSETS DOWNLOADING\"\n     curl -L https://api.github.com/repos/aws-samples/aws-serverless-workshops/tarball \\\n         | tar xz --directory assets --wildcards \"*/WebApplication/1_StaticWebHosting/website\" --strip-components=4\n     echo \"LAMBDAS BUILDING\"\n     sls deploy\n     echo \"ASSETS UPLOADING\"\n     sls client deploy\n     echo \"CONFIGURATION UPLOADING\"\n     DATA=`sls info -v`\n     POOL_ID=`extract PoolId`\n     POOL_CLIENT_ID=`extract PoolClientId`\n     REGION=`extract region`\n     ENDPOINT=`extract ServiceEndpoint`\n     CONFIG=\"\n     window._config = {\n         cognito: {\n             userPoolId: '$POOL_ID',\n             userPoolClientId: '$POOL_CLIENT_ID',\n             region: '$REGION'\n         },\n         api: {\n             invokeUrl: '$ENDPOINT'\n         }\n     };\n     \"\n     echo \"$CONFIG\" | aws s3 cp - s3://rust-sls-aws/js/config.js\n     INDEX=`extract BucketURL`\n     echo \"INDEX: $INDEX\"\n }\n```", "```rs\n./deploy.sh deploy\n```", "```rs\nASSETS DOWNLOADING\n   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                  Dload  Upload   Total   Spent    Left  Speed\n   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n 100 65.7M    0 65.7M    0     0  7647k      0 --:--:--  0:00:08 --:--:-- 9968k\n LAMBDAS BUILDING\n Serverless: Building native Rust lambda_1 func...\n     Finished release [optimized] target(s) in 0.56s                                                                                                                                                                \n   adding: bootstrap (deflated 60%)\n Serverless: Building native Rust lambda_2 func...\n     Finished release [optimized] target(s) in 0.32s                                                                                                                                                                \n   adding: bootstrap (deflated 61%)\n Serverless: Packaging service...\n Serverless: Creating Stack...\n Serverless: Checking Stack create progress...\n .....\n Serverless: Stack create finished...\n Serverless: Uploading CloudFormation file to S3...\n Serverless: Uploading artifacts...\n Serverless: Uploading service .zip file to S3 (2.75 MB)...\n Serverless: Uploading service .zip file to S3 (1.12 MB)...\n Serverless: Validating template...\n Serverless: Updating Stack...\n Serverless: Checking Stack update progress...\n ........................................................................\n Serverless: Stack update finished...\n Service Information\n service: rust-sls\n stage: dev\n region: us-east-1\n stack: rust-sls-dev\n api keys:\n   None\n endpoints:\n   POST - https://48eggoi698.execute-api.us-east-1.amazonaws.com/dev/ride\n   GET - https://48eggoi698.execute-api.us-east-1.amazonaws.com/dev/check\n functions:\n   lambda_1: rust-sls-dev-lambda_1\n   lambda_2: rust-sls-dev-lambda_2\n layers:\n   None\n```", "```rs\n\nASSETS UPLOADING\nServerless: This deployment will:\nServerless: - Upload all files from 'assets' to bucket 'rust-sls-aws'\nServerless: - Set (and overwrite) bucket 'rust-sls-aws' configuration\nServerless: - Set (and overwrite) bucket 'rust-sls-aws' bucket policy\nServerless: - Set (and overwrite) bucket 'rust-sls-aws' CORS policy\n? Do you want to proceed? true\nServerless: Looking for bucket...\nServerless: Bucket found...\nServerless: Deleting all objects from bucket...\nServerless: Configuring bucket...\nServerless: Configuring policy for bucket...\nServerless: Configuring CORS for bucket...\nServerless: Uploading client files to bucket...\nServerless: Success! Your site should be available at http://rust-sls-aws.s3-website-us-east-1.amazonaws.com/\nCONFIGURATION UPLOADING\nINDEX: http://rust-sls-aws.s3-website-us-east-1.amazonaws.com\n```", "```rs\nupdate() {\n     sls deploy\n }\n```", "```rs\nremove() {\n     echo \"ASSETS REMOVING\"\n     sls client remove\n     echo \"LAMBDAS REMOVING\"\n     sls remove\n     echo \"ASSETS CLEANUP\"\n     rm -rf assets\n     mkdir assets\n     touch assets/.gitkeep\n }\n```"]