- en: Adding All Game Mechanisms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, [Chapter 1](part0020.html#J2B80-13a27bdc411a4c2eaad1cc3a71f7fca7), *Basics
    of Rust*, [Chapter 2](part0063.html#1S2JE0-13a27bdc411a4c2eaad1cc3a71f7fca7), 
    *Starting with SDL*, and [Chapter 3](part0093.html#2OM4A0-13a27bdc411a4c2eaad1cc3a71f7fca7), *Events
    and Basic Game Mechanisms*, we wrote all the mechanisms that we needed. The only
    missing parts are the UI rendering and the font management. In short, the easy
    parts So in this chapter, we'll add the drawing of the game and some fonts handling
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with game mechanisms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the UI rendering first and then add the font management in
    order to display the game information in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the current code base, very few changes are required in order to be able
    to have a fully working Tetris.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering initialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For now, the `main` function is very small. First, let''s add the following
    lines at the top of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: No need for explanations, we've already explained everything in the previous
    chapters, so let's continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just after the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the following ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There's even a macro in the middle, so yes, a few explanations are required!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve already seen all this, so we''ll just go very quickly through each:'
  prefs: []
  type: TYPE_NORMAL
- en: We create the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We initialize the area where we'll draw.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We initialize the texture engine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The two next calls are more interesting and are the start of the actual UI
    rendering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'They both call a function defined in [Chapter 2](part0063.html#1S2JE0-13a27bdc411a4c2eaad1cc3a71f7fca7), *Starting
    with SDL*. `grid` is where we''ll draw the tetriminoes and border to represent
    the borders of the game area. The first one is black, whereas the other one is
    white. The following is a screenshot of what they''ll look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)*Figure 4.1*'
  prefs: []
  type: TYPE_NORMAL
- en: 'So now let''s write down the code to load more easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We already introduced macros in [Chapter 1](part0020.html#J2B80-13a27bdc411a4c2eaad1cc3a71f7fca7), *Basics
    of Rust*, so we will assume you'll understand pretty easily what this one is doing.
    (It calls the `create_texture_rect` function with `$r`, `$g`, and `$b` being the
    color we want the texture to be.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In here, we create the textures for our tetriminoes blocks. So seven textures
    for seven types of tetrimino blocks.
  prefs: []
  type: TYPE_NORMAL
- en: We initialized everything we needed for the rendering. So now, let's render!
  prefs: []
  type: TYPE_NORMAL
- en: Rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Still in the `main` function, but this time we''re going into the main loop
    (no wordplay!). Just after the `is_time_over` if condition, let''s add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If we want to change the background depending on the player's actual level,
    we can just change the first line. No sweat.
  prefs: []
  type: TYPE_NORMAL
- en: 'About the following formulas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'I think a small explanation might come in handy here. As you certainly remember,
    `Rect::new` takes the four following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '*x* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*y* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: height
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the first two, we center our game map. For example, for the *x* position,
    we need to first compute how much width it''ll take (so a width of `10` tetriminoes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we subtract this from the total width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'What remains is what isn''t the game map. So if we use it as *x* position,
    the game map will be fully on the left. Not pretty. Luckily, centering is quite
    easy, we just have to divide this result by 2, which is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And here we go! Now, about the subtraction of 10; it''s because of the borders.
    It has a width of `10`, so we need to subtract it as well to be *really* centered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Not very complicated, but it can be hard to read the first time. The same goes
    for the height, so we won''t make the same explanations twice. Time to speak about
    the width and height computation! I think that you already got it from the previous
    explanations, but just in case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A `Tetris` has a width of ten blocks. Therefore, our game map must have the
    same as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We've now added the width of the total borders as well (since there is a border
    on each side and a border has a width of 10 pixels, `10 * 2 = 20`).
  prefs: []
  type: TYPE_NORMAL
- en: The same goes for the height.
  prefs: []
  type: TYPE_NORMAL
- en: Once you get how these formulas work, you'll get how all the others are working
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we''ve drawn the game environment, it''s time to draw the tetriminoes.
    First, let''s draw the current one! In order to do this, we need to update the
    `for` loop inside the `handle_events` condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: For each block of the current tetrimino, we paste a texture corresponding to
    its ID. From the explanations of the preceding formulas, we can suppose it's not
    necessary to go back on those *new* ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, only the last part is remaining; drawing all the other tetriminoes
    blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we iterate over a block of each line of the game map and paste
    the corresponding texture, if the game map's *occupied*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, we apply all the changes to the display, with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, our `Tetris` is now complete! You can now play by launching the
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `--release` is for starting the program in non-debug mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code of the `main` function is now the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is an example of the current output of this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)*Figure 4.2*'
  prefs: []
  type: TYPE_NORMAL
- en: It's now working, but what about displaying the game information, such as the
    current score, level, or the number of lines sent?
  prefs: []
  type: TYPE_NORMAL
- en: Playing with fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display these pieces of information, we''ll need to use fonts. No additional
    external dependencies are required, however, we''ll need to use a feature, so
    we need to update our `Cargo.toml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the `sdl2` crate doesn''t provide the `ttf` module, you need to
    enable it by adding the `ttf` feature to the compilation process. That''s what
    we did by saying to `cargo`: *by default, I want the `ttf` feature of the `sdl2`
    crate enabled*. You can try with and without it to see the difference, after adding
    this new context initialization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If you get a missing library compilation error, it means you didn't install
    the corresponding library. To fix this issue, you need to install it through your
    favorite package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Install on OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Install on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command (depending on your package manager, of course):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Other system/package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the library at [https://www.libsdl.org/projects/SDL_ttf/.](https://www.libsdl.org/projects/SDL_ttf/)
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions and install it on your system, then just run the projects.
    If no errors appear, then it means you installed it correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Time to start the real thing!
  prefs: []
  type: TYPE_NORMAL
- en: Loading font
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before going any further, we actually need a font. I chose **Lucida console**,
    but pick the one you prefer, it doesn''t really matter. Once downloaded, put it
    in the `assets` folder as well. Now, time to actually load the font:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if you want to apply a style to your font (such as bold, italic,
    strikethrough, or underline), that''s the object on which you need to apply it.
    Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, two steps are remaining to be able to actually display text:'
  prefs: []
  type: TYPE_NORMAL
- en: Render the text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a texture from it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s write a function in order to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Looks a lot like `create_texture_rect`, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Why not test it? Let''s call the function and paste the texture onto the screen
    to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00026.jpeg)*Figure 4.3*'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the texture rectangle, I use the following rule: one character is a block
    of 10 x 30 pixels. So in this example, since `test` has 4 letters, we need a block
    of 40 x 30 pixels. Let''s write a function to make this easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Ok, so now is the time to render the game information and write a new function
    to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'And then we call it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'And now it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)*Figure 4.4*'
  prefs: []
  type: TYPE_NORMAL
- en: Wonderful, we have the game information in real time! Isn't it awesome? What?
    It's ugly and overlaps the game? Let's move the game then! Instead of centering
    it, we'll give it a fixed `x` position (which will make our formula way simpler).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s update our `grid_x` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s update so `canvas.copy` calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And that''s it. You now have a nice Tetris playing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)**Figure 4.5**'
  prefs: []
  type: TYPE_NORMAL
- en: We could improve the display a bit by adding a border around the text, or even
    display a preview of the next piece, or even add a *ghost*, but I think that,
    from this point, you can add them easily.
  prefs: []
  type: TYPE_NORMAL
- en: That's it for this Tetris, have fun while playing with the `sdl2`!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a fully working Tetris. In the last three chapters, we saw how to
    use the `sdl2` crate, how to add dependencies to Rust projects, how to handle
    I/O (with files), and how modules were working.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if we stop here for this Tetris project, you can continue this project (and
    it''d be even a good idea to improve yourself in `sdl2`!).  A few ideas of missing
    things you could add:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the background depending on the current level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asking the players, once the game is over, if they want to start a new game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the next tetrimino preview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a ghost (to see where the tetrimino will fall)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And so much more. Just have fun while adding new features!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, a lot of things are possible. Have fun!
  prefs: []
  type: TYPE_NORMAL
