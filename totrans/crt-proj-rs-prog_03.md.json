["```rs\nGET /users/susan/index.html HTTP/1.1\nHost: www.acme.com\nAccept: image/png, image/jpeg, */*\nAccept-Language: en-us\nUser-Agent: Mozilla/5.0\n\n```", "```rs\nHTTP/1.1 200 OK\nDate: Wed, 15 Apr 2020 14:03:39 GMT\nServer: Apache/2.2.14\nAccept-Ranges: bytes\nContent-Length: 42\nConnection: close\nContent-Type: text/html\n\n<html><body><p>Some text</p></body></html>\n```", "```rs\ncurl -X GET http://localhost:8080/datafile.txt\n```", "```rs\nContents of the file.\n```", "```rs\nDownloading file \"datafile.txt\" ... Downloaded file \"datafile.txt\"\n```", "```rs\ncurl http://localhost:8080/datafile.txt\n```", "```rs\ncurl http://localhost:8080/datafile.txt >localfile.txt\n```", "```rs\ncurl -X PUT http://localhost:8080/datafile.txt -d \"File contents.\"\n```", "```rs\nUploading file \"datafile.txt\" ... Uploaded file \"datafile.txt\"\n```", "```rs\ncurl -X PUT http://localhost:8080/datafile.txt -d @localfile.txt\n```", "```rs\ncurl -X POST http://localhost:8080/data -d \"File contents.\"\n```", "```rs\nUploading file \"data*.txt\" ... Uploaded file \"data17.txt\"\n```", "```rs\ncurl -X DELETE http://localhost:8080/datafile.txt\n```", "```rs\nDeleting file \"datafile.txt\" ... Deleted file \"datafile.txt\"\n```", "```rs\ncurl -X GET http://localhost:8080/a/b\n```", "```rs\nInvalid URI: \"/a/b\"\n```", "```rs\nHttpServer::new(|| ... )\n.bind(server_address)?\n.run()\n```", "```rs\nApp::new()\n    .service(\n        web::resource(\"/{filename}\")\n            .route(web::delete().to(delete_file))\n            .route(web::get().to(download_file))\n            .route(web::put().to(upload_specified_file))\n            .route(web::post().to(upload_new_file)),\n     )\n     .default_service(web::route().to(invalid_resource))\n```", "```rs\nfn invalid_resource(req: HttpRequest) -> impl Responder {\n    println!(\"Invalid URI: \\\"{}\\\"\", req.uri());\n    HttpResponse::NotFound()\n}\n```", "```rs\nlet filename = &info.0;\n```", "```rs\nprint!(\"Deleting file \\\"{}\\\" ... \", filename);\nflush_stdout();\n\n// TODO: Delete the file.\n\nprintln!(\"Deleted file \\\"{}\\\"\", filename);\nHttpResponse::Ok()\n```", "```rs\nHttpResponse::Ok().content_type(\"text/plain\").body(contents)\n```", "```rs\nprint!(\"Uploading file \\\"{}\\\" ... \", filename);\nflush_stdout();\n\n// TODO: Get from the client the contents to write into the file.\nlet _contents = \"Contents of the file.\\n\".to_string();\n\n// TODO: Create the file and write the contents into it.\n\nprintln!(\"Uploaded file \\\"{}\\\"\", filename);\nHttpResponse::Ok()\n```", "```rs\nprint!(\"Uploading file \\\"{}*.txt\\\" ... \", filename_prefix);\nflush_stdout();\n\n// TODO: Get from the client the contents to write into the file.\nlet _contents = \"Contents of the file.\\n\".to_string();\n\n// TODO: Generate new filename and create that file.\nlet file_id = 17;\n\nlet filename = format!(\"{}{}.txt\", filename_prefix, file_id);\n\n// TODO: Write the contents into the file.\n\nprintln!(\"Uploaded file \\\"{}\\\"\", filename);\nHttpResponse::Ok().content_type(\"text/plain\").body(filename)\n```", "```rs\ncurl -X GET http://localhost:8080/datafile.txt\n```", "```rs\nDownloading file \"datafile.txt\" ... Downloaded file \"datafile.txt\"\n```", "```rs\nDownloading file \"datafile.txt\" ... Failed to read file \"datafile.txt\": No such file or directory (os error 2)\n```", "```rs\ncurl -X PUT http://localhost:8080/datafile.txt -d \"File contents.\"\n```", "```rs\nUploading file \"datafile.txt\" ... Uploaded file \"datafile.txt\"\n```", "```rs\nUploading file \"datafile.txt\" ... Failed to create file \"datafile.txt\"\n```", "```rs\nUploading file \"datafile.txt\" ... Failed to write file \"datafile.txt\"\n```", "```rs\ncurl -X POST http://localhost:8080/data -d \"File contents.\"\n```", "```rs\nUploading file \"data*.txt\" ... Uploaded file \"data917.txt\"\n```", "```rs\nUploading file \"data*.txt\" ... Failed to create new file with prefix \"data\", after 100 attempts.\n```", "```rs\nUploading file \"data*.txt\" ... Failed to write file \"data917.txt\"\n```", "```rs\ncurl -X DELETE http://localhost:8080/datafile.txt\n```", "```rs\nDeleting file \"datafile.txt\" ... Deleted file \"datafile.txt\"\n```", "```rs\nDeleting file \"datafile.txt\" ... Failed to delete file \"datafile.txt\": No such file or directory (os error 2)\n```", "```rs\nfutures = \"0.1\"\nrand = \"0.6\"\n```", "```rs\nuse actix_web::Error;\nuse futures::{\n    future::{ok, Future},\n    Stream,\n};\nuse rand::prelude::*;\nuse std::fs::{File, OpenOptions};\n```", "```rs\n.route(web::put().to_async(upload_specified_file))\n.route(web::post().to_async(upload_new_file)),\n```", "```rs\npayload\n    .map_err(Error::from)\n    .fold(web::BytesMut::new(), move |mut body, chunk| {\n        body.extend_from_slice(&chunk);\n        Ok::<_, Error>(body)\n    })\n    .and_then(move |contents| {\n```", "```rs\nmatch std::fs::remove_file(&filename) {\n    Ok(_) => {\n        println!(\"Deleted file \\\"{}\\\"\", filename);\n        HttpResponse::Ok()\n    }\n    Err(error) => {\n        println!(\"Failed to delete file \\\"{}\\\": {}\", filename, error);\n        HttpResponse::NotFound()\n    }\n}\n```", "```rs\nfn read_file_contents(filename: &str) -> std::io::Result<String> {\n    use std::io::Read;\n    let mut contents = String::new();\n    File::open(filename)?.read_to_string(&mut contents)?;\n    Ok(contents)\n}\n```", "```rs\nmatch read_file_contents(&filename) {\n    Ok(contents) => {\n        println!(\"Downloaded file \\\"{}\\\"\", filename);\n        HttpResponse::Ok().content_type(\"text/plain\").body(contents)\n    }\n    Err(error) => {\n        println!(\"Failed to read file \\\"{}\\\": {}\", filename, error);\n        HttpResponse::NotFound().finish()\n    }\n}\n```", "```rs\nstruct AppState {\n    db: db_access::DbConnection,\n}\n\n```", "```rs\nlet db_conn = web::Data::new(Mutex::new(AppState {\n    db: db_access::DbConnection::new(),\n}));\n```", "```rs\n.register_data(db_conn.clone())\n```", "```rs\nstate: web::Data<Mutex<AppState>>\n```", "```rs\nlet db_conn = &mut state.lock().unwrap().db\n```", "```rs\n.service(\n    web::resource(\"/persons/ids\")\n        .route(web::get().to(get_all_persons_ids)))\n.service(\n    web::resource(\"/person/name_by_id/{id}\")\n        .route(web::get().to(get_person_name_by_id)),\n)\n.service(\n    web::resource(\"/persons\")\n        .route(web::get().to(get_persons)))\n.service(\n    web::resource(\"/person/{name}\")\n        .route(web::post().to(insert_person)))\n.default_service(\n    web::route().to(invalid_resource))\n```", "```rs\ncurl -X POST http://localhost:8080/person/John\ncurl -X POST http://localhost:8080/person/Jonathan\ncurl -X POST http://localhost:8080/person/Mary%20Jane\n```", "```rs\ncurl -X GET http://localhost:8080/persons/ids\n```", "```rs\ncurl -X GET http://localhost:8080/person/name_by_id/3\n```", "```rs\ncurl -X GET http://localhost:8080/persons?partial_name=an\n```", "```rs\n#[derive(Deserialize)]\npub struct Filter {\n    partial_name: Option<String>,\n}\n```", "```rs\n&query.partial_name.clone().unwrap_or_else(|| \"\".to_string()),\n```", "```rs\nserde_json = \"1.0\"\n```", "```rs\nHttpResponse::Ok()\n    .content_type(\"application/json\")\n    .body(\n        json!(db_conn.get_all_persons_ids().collect::<Vec<_>>())\n        .to_string())\n```"]