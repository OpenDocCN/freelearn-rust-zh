- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Delivering high-performance applications is a nightmare. JavaScript is a dynamically
    typed language. Thus, the JavaScript engine assumes the type when executing JavaScript.
    These assumptions lead to unpredictable performance. This makes it even harder
    to deliver consistently high-performance applications in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly provides a way to run type-safe and high-performance applications
    in the JavaScript engine.
  prefs: []
  type: TYPE_NORMAL
- en: '**WebAssembly is blazingly fast**'
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly is the next great thing that happened in the web. It promises high
    and consistent performance with maintainable code, running native code and providing
    near-native performance on the web.
  prefs: []
  type: TYPE_NORMAL
- en: '**WebAssembly is type-safe**'
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript compiler struggles to provide high performance when you have
    polymorphic JavaScript code. WebAssembly, on the other hand, is type-safe (or
    monomorphic) at compile time. This not only boosts performance but also greatly
    reduces runtime errors, which is a win-win.
  prefs: []
  type: TYPE_NORMAL
- en: '**WebAssembly runs your native code**'
  prefs: []
  type: TYPE_NORMAL
- en: There have been multiple attempts to make the web faster by running native code.
    But they all failed because they are either vendor-specific or tied to a single
    language. The web is built on top of open standards. By being an open standard,
    WebAssembly makes it easy for all companies to adopt and support it. WebAssembly
    is not a language; it is a high-level implementation plan for other languages
    that compile to byte code that will run on the JavaScript engines.
  prefs: []
  type: TYPE_NORMAL
- en: '**WebAssembly is byte code**'
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly is nothing but a bytecode that runs in JavaScript Engine. In this
    book, we will learn how to convert native code into WebAssembly and how to optimize
    it to get even better performance. We will also cover how the entire WebAssembly
    runs on the JavaScript engine and how to use the various tools available and what
    they help us to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, learn where and how to use WebAssembly to get the desired
    result out of it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's make the web even more awesome and faster with WebAssembly.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for JavaScript developers who want to deliver better performance
    and ship type-safe code. Rust developers or backend engineers looking to build
    full-stack applications without worrying too much about JavaScript programming
    will also find the book useful.
  prefs: []
  type: TYPE_NORMAL
- en: A basic understanding of JavaScript is required to follow along with this book.
    Rust knowledge is preferred but not mandatory. The code samples are simple and
    easy for any developer to follow along with.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B14844_01_ePub.xhtml#_idTextAnchor013), *Understanding LLVM*,
    gives a brief introduction to LLVM, what it is, and how to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B14844_02_ePub.xhtml#_idTextAnchor022), *Understanding Emscripten*,
    introduces you to Emscripten, where you will build and run your first WebAssembly
    module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B14844_03_ePub.xhtml#_idTextAnchor041), *Exploring WebAssembly
    Modules*, explores the WebAssembly module, what the module consists of, and what
    the different sections are.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B14844_04_ePub.xhtml#_idTextAnchor052), *Understanding WebAssembly
    Binary Toolkit*, explores how to install and use **WebAssembly Binary Toolkit**
    (**WABT**).'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B14844_05_ePub.xhtml#_idTextAnchor069), *Understanding Sections
    in WebAssembly Modules*, explores various sections inside the WebAssembly binary
    and what their purpose is.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B14844_06_ePub.xhtml#_idTextAnchor078), *Installing and Using
    Binaryen*, explores how to install and use Binaryen.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B14844_07_ePub.xhtml#_idTextAnchor090), *Integrating Rust with
    WebAssembly*, starts by looking at Rust and various ways to convert Rust into
    a WebAssembly module and ends by looking at `wasm_bindgen`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B14844_08_ePub.xhtml#_idTextAnchor102), *Bundling WebAssembly
    Using wasm-pack*, explores `wasm-pack` and how it makes it easy to build Rust
    and WebAssembly applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B14844_09_ePub.xhtml#_idTextAnchor114), *Crossing the Boundary
    between Rust and WebAssembly*, focuses on how `wasm-bindgen`, along with crates
    such as `js-sys` and `web-sys`, helps to share entities from WebAssembly with
    JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B14844_10_ePub.xhtml#_idTextAnchor123), *Optimizing Rust and
    WebAssembly*, introduces various ways to optimize Rust and WebAssembly with examples.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book assumes that you have a basic understanding of JavaScript. The code
    samples are mostly written in C++/Rust. Please install Rust (briefly explained
    in[*Chapter 7*](B14844_07_ePub.xhtml#_idTextAnchor090)*, Integrating Rust with
    WebAssembly*) and Node.js before starting.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B14844_Preface.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book''s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Practical-WebAssembly](https://github.com/PacktPublishing/Practical-WebAssembly).
    If there's an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "Mount the downloaded `WebStorm-10*.dmg` disk image
    file as another disk in your system."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    "Select **System info** from the **Administration** panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or Important Notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '`customercare@packtpub.com` and mention the book title in the subject of your
    message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '`copyright@packt.com` with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've read *Practical WebAssembly*, we'd love to hear your thoughts! Please
    [click here to go straight to the Amazon review page](https://packt.link/r/1838828001)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we're delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
