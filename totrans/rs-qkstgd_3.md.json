["```rs\n{\n    let main_1 = Point2D {x: 10.0, y: 10.0};\n    receive_ownership(main_1);\n    receive_ownership(main_1); // This will cause a compiler error!\n}\n```", "```rs\npub fn receive_ownership(point: Point2D) -> Point2D {\n    println!(\"Point2D{{x: {}, y: {}}} is now owned by a new scope\", point.x, point.y);\n    return point;\n}\n```", "```rs\nlet mut main_4 = main_2;\n```", "```rs\npub fn uncertain_ownership(switch: bool) {\n    let point = Point2D {x: 3.0, y: 3.0};\n\n    if switch {\n        receive_ownership(point);\n    }\n\n    println!(\"point is Point2D{{x: {}, y: {}}}\", point.x, point.y);\n}\n```", "```rs\npub fn copied_ownership(switch: bool) {\n    let local = 4.0;\n\n    if switch {\n        receive_ownership(Point2D {x: local, y: 4.0});\n    }\n\n    println!(\"x is {}\", x);\n}\n```", "```rs\nborrow_ownership(&main_3);\n```", "```rs\nlet mut main_4 = main_2;\n```", "```rs\nborrow_ownership_mutably(&mut main_4);\n```", "```rs\npub fn borrow_ownership(point: &Point2D) {\n    println!(\"Point2D{{x: {}, y: {}}} is now borrowed by a new scope\", point.x, point.y);\n}\n\npub fn borrow_ownership_mutably(point: &mut Point2D) {\n    println!(\"Point2D{{x: {}, y: {}}} is now borrowed by a new scope\", point.x, point.y);\n    point.x = 13.5;\n    println!(\"Borrowed value changed to Point2D{{x: {}, y: {}}}\", point.x, point.y);\n}\n```", "```rs\npub fn set_to_six(value: &mut u32) {\n    value = 6;\n}\n```", "```rs\npub fn set_to_six(value: &mut u32) {\n    *value = 6;\n}\n```", "```rs\npub fn smaller_x(value1: &Point2D, value2: &Point2D) -> &f64 {\n    if value1.x < value2.x {\n        &value1.x\n    }\n    else {\n        &value2.x\n    }\n}\n```", "```rs\npub fn smaller_x<'a>(value1: &'a Point2D, value2: &'a Point2D) -> &'a f64 {\n    if value1.x < value2.x {\n        &value1.x\n    }\n    else {\n        &value2.x\n    }\n}\n```", "```rs\nlet main_4 = Point2D {x: 25.0, y: 25.0};\nlet smaller;\n{\n    let main_5 = Point2D {x: 50.0, y: 50.0};\n    smaller = smaller_x(&main_4, &main_5);\n}\nprintln!(\"The smaller x is {}\", smaller);\n```", "```rs\nimpl Point2D {\n    pub fn transpose(self) -> Point2D {\n        return Point2D {x: self.y, y: self.x};\n    }\n}\n```", "```rs\nimpl Point2D {\n    // ...\n    pub fn magnitude(&self) -> f64 {\n        return (self.x.powi(2) + self.y.powi(2)).sqrt();\n    }\n}\n```", "```rs\nimpl Point2D {\n    // ...\n    pub fn unit(&mut self) {\n        let mag = self.magnitude();\n        self.x = self.x / mag;\n        self.y = self.y / mag;\n    }\n}\n```"]