- en: '*Chapter 6*: Installing and Using Binaryen'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 6 章*：安装和使用 Binaryen'
- en: During the compilation process, compiled languages produce their own **Intermediate
    Representation** (**IR**). The compilers then optimize the IR to generate optimized
    code. Before passing it to LLVM, compilers should convert this IR into something
    that LLVM understands (LLVM IR). LLVM optimizes LLVM IR and produces native code
    (like the WebAssembly binary). These multiple IR generations and optimizations
    at different levels make the compilation process slower and not very effective.
    Binaryen tries to eliminate these multiple IR generations and uses its own IR.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译过程中，编译语言会产生它们自己的**中间表示**（**IR**）。然后编译器会优化 IR 以生成优化代码。在传递给 LLVM 之前，编译器应将此
    IR 转换为 LLVM 理解的内容（LLVM IR）。LLVM 优化 LLVM IR 并生成原生代码（如 WebAssembly 二进制文件）。这些不同级别的多个
    IR 生成和优化使得编译过程变慢且不太有效。Binaryen 试图消除这些多个 IR 生成，并使用自己的 IR。
- en: '**(WebAssembly) Binary + Emscripten = Binaryen**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**(WebAssembly) 二进制 + Emscripten = Binaryen**'
- en: Binaryen is a compiler and toolchain infrastructure library for WebAssembly,
    written in C++. It aims to make compiling to WebAssembly easy, fast, and effective.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Binaryen 是一个用于 WebAssembly 的编译器和工具链基础设施库，用 C++ 编写。它的目标是使编译到 WebAssembly 变得简单、快速和有效。
- en: '- Binaryen''s GitHub repository ([https://github.com/WebAssembly/binaryen](https://github.com/WebAssembly/binaryen))'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '- Binaryen 的 GitHub 仓库 ([https://github.com/WebAssembly/binaryen](https://github.com/WebAssembly/binaryen))'
- en: Binaryen uses its own version of IR. Binaryen's IR is a subset of WebAssembly.
    Thus, it makes compiling Binaryen to WebAssembly faster and easier. Binaryen's
    IR uses a compact data structure and is designed with modern CPU architecture
    in mind. That is, the WebAssembly binary can be generated and optimized in parallel
    using all the available CPU cores.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Binaryen 使用自己的 IR 版本。Binaryen 的 IR 是 WebAssembly 的一个子集。因此，它使得将 Binaryen 编译到
    WebAssembly 变得更快、更简单。Binaryen 的 IR 使用紧凑的数据结构，并考虑到现代 CPU 架构。也就是说，可以使用所有可用的 CPU
    核心并行生成和优化 WebAssembly 二进制文件。
- en: In addition to that, Binaryen's optimizer has many passes that can improve the
    code significantly. Binaryen's optimizer uses techniques such as local coloring
    to coalesce local variables, dead code elimination, and precomputing expressions
    wherever possible. Binaryen also provides a way to shrink the WebAssembly binary.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Binaryen 的优化器有许多可以通过显著改进代码的遍历。Binaryen 的优化器使用诸如局部着色以合并局部变量、删除死代码以及在可能的情况下预计算表达式等技术。Binaryen
    还提供了一种缩小 WebAssembly 二进制文件的方法。
- en: Binaryen is easy to use. It accepts the WebAssembly binary or even the control
    graph to generate a highly optimized WebAssembly binary. Binaryen also provides
    Binaryen.js, which enables the use of Binaryen from JavaScript. Similar to WABT,
    Binaryen includes a different set of tools that are useful while dealing with
    WebAssembly.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Binaryen 使用简单。它接受 WebAssembly 二进制文件，甚至控制图来生成高度优化的 WebAssembly 二进制文件。Binaryen
    还提供了 Binaryen.js，它使得从 JavaScript 使用 Binaryen 成为可能。类似于 WABT，Binaryen 包含一套不同的工具，这些工具在处理
    WebAssembly 时非常有用。
- en: These toolchain utilities help in parsing the WebAssembly binary and then optimizing
    it further, and finally, emit a highly optimized WebAssembly binary (in other
    words, wasm-to-wasm optimizer), providing a polyfill for WebAssembly when the
    browser does not have WebAssembly support.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具链实用程序有助于解析 WebAssembly 二进制文件，然后进一步优化它，并最终输出高度优化的 WebAssembly 二进制文件（换句话说，wasm-to-wasm
    优化器），当浏览器没有 WebAssembly 支持时，提供 WebAssembly 的 polyfill。
- en: 'In this chapter, we will understand how to install and use various tools provided
    by Binaryen. Understanding Binaryen and the tools provided by it will help you
    to optimize the WebAssembly binaries in terms of performance and size. We will
    cover the following sections in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解如何安装和使用 Binaryen 提供的各种工具。了解 Binaryen 及其提供的工具将帮助您在性能和大小方面优化 WebAssembly
    二进制文件。本章将涵盖以下部分：
- en: Installing and using Binaryen
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和使用 Binaryen
- en: '`wasm-as`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-as`'
- en: '`wasm-dis`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-dis`'
- en: '`wasm-opt`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-opt`'
- en: '`wasm2js`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm2js`'
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We'll be requiring Binaryen and Visual C++ installed. You can find the code
    files present in this chapter on GitHub at [https://github.com/PacktPublishing/Practical-WebAssembly](https://github.com/PacktPublishing/Practical-WebAssembly).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要安装 Binaryen 和 Visual C++。您可以在 GitHub 上找到本章中提供的代码文件，网址为 [https://github.com/PacktPublishing/Practical-WebAssembly](https://github.com/PacktPublishing/Practical-WebAssembly)。
- en: Installing and using Binaryen
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和使用 Binaryen
- en: 'In order to install Binaryen, first clone the repository from GitHub:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装 Binaryen，首先从 GitHub 克隆仓库：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After the repository is cloned, go into the folder:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在将仓库克隆后，进入以下文件夹：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Linux/macOS
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux/macOS
- en: 'Generate the project build system by running the `cmake` command with the path
    to the `binaryen` folder:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行带有 `binaryen` 文件夹路径的 `cmake` 命令来生成项目构建系统：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, build the project using the `make` command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 `make` 命令构建项目：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This generates all the binaries in the `bin` folder.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `bin` 文件夹中生成所有二进制文件。
- en: Windows
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: 'For Windows, once the repository is cloned, we will create a `build` directory
    and go inside it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，一旦克隆了存储库，我们将创建一个 `build` 目录并进入其中：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By default, Windows does not have the cmake command available. Install the
    Visual C++ tools to make the `cmake` command available in the system. To install
    the Visual C++ tools, check out the following link: [https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-160&viewFallbackFrom=vs-2019](https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-160&viewFallbackFrom=vs-2019).
    Then, run the following command inside the `build` folder:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Windows 没有可用的 cmake 命令。安装 Visual C++ 工具以使 `cmake` 命令在系统中可用。要安装 Visual
    C++ 工具，请查看以下链接：[https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-160&viewFallbackFrom=vs-2019](https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-160&viewFallbackFrom=vs-2019)。然后，在
    `build` 文件夹中运行以下命令：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding command will generate all the necessary build files in the `build`
    directory. Then, we can build the project using the `binaryen.vcxproj` file generated
    by `cmake`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在 `build` 目录中生成所有必要的构建文件。然后，我们可以使用 `cmake` 生成的 `binaryen.vcxproj` 文件构建项目：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The generated binary includes the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的二进制文件包括以下内容：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The various tools generated by Binaryen are as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Binaryen 生成的各种工具如下：
- en: '`wasm-as` – This tool is similar to `wat2wasm` in WABT. This tool converts
    WebAssembly text format (`.wast`) into WebAssembly binary format (`.wasm`).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-as` – 此工具与 WABT 中的 `wat2wasm` 类似。该工具将 WebAssembly 文本格式 (`.wast`) 转换为
    WebAssembly 二进制格式 (`.wasm`)。'
- en: '`wasm-ctor-eval` – This tool executes C++ global constructors ahead of time
    and has them ready. This optimization speeds up the WebAssembly execution.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-ctor-eval` – 此工具在预编译时执行 C++ 全局构造函数，并使其就绪。这种优化加快了 WebAssembly 的执行速度。'
- en: '`wasm-dis` – This tool is similar to `wasm2wat` in wabt. That is, it converts
    WebAssembly binary format (`.wasm`) into WebAssembly text format (`.wat`).'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-dis` – 此工具与 wabt 中的 `wasm2wat` 类似。也就是说，它将 WebAssembly 二进制格式 (`.wasm`)
    转换为 WebAssembly 文本格式 (`.wat`)。'
- en: '`wasm-emscripten-finalize` – This tool performs Emscripten-specific transforms
    on the given `.wasm` files.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-emscripten-finalize` – 此工具对给定的 `.wasm` 文件执行 Emscripten 特定的转换。'
- en: '`wasm-metadce` – This tool removes dead code in the provided WebAssembly binary.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-metadce` – 此工具从提供的 WebAssembly 二进制文件中删除死代码。'
- en: '`wasm-opt` – This tool optimizes the provided WebAssembly binary.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-opt` – 此工具优化提供的 WebAssembly 二进制文件。'
- en: '`wasm-reduce` – This tool reduces the given WebAssembly binary into a smaller
    binary.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-reduce` – 此工具将给定的 WebAssembly 二进制文件减小到更小的二进制文件。'
- en: '`wasm-shell` – This tool creates a shell that can load and interpret WebAssembly
    code.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-shell` – 此工具创建一个可以加载和解释 WebAssembly 代码的壳。'
- en: '`wasm2js` – This tool is useful in polyfill. It converts WebAssembly into a
    JavaScript compiler.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm2js` – 此工具在 polyfill 中非常有用。它将 WebAssembly 转换为 JavaScript 编译器。'
- en: '`binaryen.js` – A standalone JavaScript library that exposes Binaryen methods
    for creating and optimizing the WebAssembly modules. This JavaScript file is just
    like any other JavaScript file that can be loaded into the browser.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binaryen.js` – 一个独立的 JavaScript 库，它公开 Binaryen 方法以创建和优化 WebAssembly 模块。此 JavaScript
    文件就像任何其他可以加载到浏览器中的 JavaScript 文件一样。'
- en: Now that we have built and generated the tools provided by Binaryen, let's explore
    the tools generated.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建并生成了 Binaryen 提供的工具，让我们探索生成的工具。
- en: wasm-as
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wasm-as
- en: 'The `wasm-as` tool converts WAST into WASM. Let''s look at the steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm-as` 工具将 WAST 转换为 WASM。让我们看看步骤：'
- en: 'Let''s create a new folder, called `binaryen-playground`, and go into the folder:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `binaryen-playground` 的新文件夹，并进入该文件夹：
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a `.wat` file called `add.wat`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `add.wat` 的 `.wat` 文件：
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following contents to `add.wat`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `add.wat`：
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Convert the Web Assembly text format into a WebAssembly module, using the `wasm-as`
    binary:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `wasm-as` 二进制将 Web Assembly 文本格式转换为 WebAssembly 模块：
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This generates the `add.wasm` file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 生成 `add.wasm` 文件：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The size of the binary generated is just 32 bytes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的二进制文件大小仅为 32 字节。
- en: '`wasm-as` first validates the given file (`.wat`) and then converts it into
    a `.wasm` file. To check various options supported by `wasm-as`, we can run the
    following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm-as` 首先验证给定的文件（`.wat`），然后将其转换为 `.wasm` 文件。要检查 `wasm-as` 支持的各种选项，我们可以运行以下命令：'
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we need to generate the WebAssembly module file in a different name, we will
    use the `-o` option with the filename. For example, `wasm-as add.wat -o customAdd.wasm`
    will generate `customAdd.wasm`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要将 WebAssembly 模块文件生成在不同的名称下，我们将使用 `-o` 选项和文件名。例如，`wasm-as add.wat -o customAdd.wasm`
    将生成 `customAdd.wasm`。
- en: '`wasm-as` also provides verbose output that clearly explains how the WebAssembly
    module is structured. In order to see the structure of the WebAssembly module,
    we run it with the `-d` option:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm-as` 也提供了详细的输出，清楚地解释了 WebAssembly 模块的结构。为了查看 WebAssembly 模块的结构，我们使用 `-d`
    选项运行它：'
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The previous output is a detailed description of how the binary is generated.
    First, it loads the given `.wat` file. After that, it parses and validates the
    file. Finally, it creates `add.wasm` and writes the header, the type, function
    signatures, and functions. While generating the binary, we can enable the compiler
    to include the new and shiny features and disable various existing features using
    the appropriate `enable-*` and `disable-*` options. Additionally, you can generate
    `sourcemap` using the `--sm` option.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出是关于如何生成二进制的详细描述。首先，它加载了给定的 `.wat` 文件。之后，它解析并验证文件。最后，它读取了头部、类型、函数签名和函数后创建了
    `add.wasm` 并写入了头部、类型、函数签名和函数。在生成二进制文件时，我们可以通过使用适当的 `enable-*` 和 `disable-*` 选项来启用编译器包括新的和闪亮的功能，并禁用各种现有功能。此外，您可以使用
    `--sm` 选项生成 `sourcemap`。
- en: Now that we have seen how to convert WAST to WASM, let's see how to convert
    WASM to WAST.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何将 WAST 转换为 WASM，让我们看看如何将 WASM 转换为 WAST。
- en: wasm-dis
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wasm-dis
- en: 'The `wasm-dis` tool converts WAST into WASM. We will use the `add.wasm` file
    that we created in the previous example here. Let''s look at the steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm-dis` 工具将 WAST 转换为 WASM。在这里，我们将使用之前示例中创建的 `add.wasm` 文件。让我们看看步骤：'
- en: 'In order to convert the WebAssembly module into WebAssembly text format, using
    the `wasm-dis` binary, run the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将 WebAssembly 模块转换为 WebAssembly 文本格式，使用 `wasm-dis` 二进制文件，运行以下命令：
- en: '[PRE15]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We generate the `gen-add.wast` file using the `-o` option with the filename
    (`gen-add.wast`):'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用 `-o` 选项和文件名（`gen-add.wast`）生成 `gen-add.wast` 文件：
- en: '[PRE16]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`wasm-dis` first validates the given file (`.wasm`) and then converts it into
    a `.wat` file. To check various options supported by `wasm-dis`, run the following
    command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wasm-dis` 首先验证给定的文件（`.wasm`），然后将其转换为 `.wat` 文件。要检查 `wasm-dis` 支持的各种选项，请运行以下命令：'
- en: '[PRE17]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`wasm-dis` also provides verbose output that clearly explains how the WebAssembly
    module is structured. In order to see the structure of the WebAssembly module,
    we run it with the `-d` option:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wasm-dis` 还提供了详细的输出，清楚地解释了 WebAssembly 模块的结构。为了查看 WebAssembly 模块的结构，我们使用 `-d`
    选项运行它：'
- en: '[PRE18]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The previous output is a detailed description of how the `.wast` file is generated.
    First, it loads the given `.wasm` file. After that, it parses and validates the
    file. Finally, it creates `gen-add.wast` after reading the header, type, function
    signatures, and functions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出是关于如何生成 `.wast` 文件的详细描述。首先，它加载了给定的 `.wasm` 文件。之后，它解析并验证文件。最后，在读取了头部、类型、函数签名和函数后创建了
    `gen-add.wast`。
- en: While generating the file, we can enable the compiler to include the new and
    shiny features and disable various existing features using the appropriate `enable-*`
    and `disable-*` options, respectively.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成文件时，我们可以通过使用适当的 `enable-*` 和 `disable-*` 选项来启用编译器包括新的和闪亮的功能，并分别禁用各种现有功能。
- en: Additionally, we can also input `sourcemap` using the `--sm <filename>` option.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以使用 `--sm <filename>` 选项输入 `sourcemap`。
- en: Now that we have seen how to convert WASM to WAST, let's see how to optimize
    the WebAssembly binaries further.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何将 WASM 转换为 WAST，让我们看看如何进一步优化 WebAssembly 二进制文件。
- en: wasm-opt
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wasm-opt
- en: 'The `wasm-opt` tool is a `wasm-to-wasm` optimizer. It will receive a WebAssembly
    module as input and run transformation passes on it to optimize and generate the
    optimized WebAssembly module. Let''s look at the steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm-opt` 工具是一个 `wasm-to-wasm` 优化器。它将接收一个 WebAssembly 模块作为输入，并在其上运行转换过程以优化并生成优化的
    WebAssembly 模块。让我们看看步骤：'
- en: 'Let''s first create the `inline-optimizer.wast` file and add the following
    content:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先创建 `inline-optimizer.wast` 文件并添加以下内容：
- en: '[PRE19]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To generate the WebAssembly module, we will run the following:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要生成 WebAssembly 模块，我们将运行以下命令：
- en: '[PRE20]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will generate `inline.wasm`. The `--print` option prints the WebAssembly
    text format before converting it to the WebAssembly binary. We also passed in
    the `-o` option to output the WebAssembly module as `inline.wasm`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成 `inline.wasm`。`--print` 选项在转换成 WebAssembly 二进制之前打印出 WebAssembly 文本格式。我们还传递了
    `-o` 选项，将 WebAssembly 模块输出为 `inline.wasm`：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This generated binary of 60 bytes in memory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生成的二进制文件在内存中占用 60 字节。
- en: 'We can further optimize the binary with the `--inlining-optimizing` option:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 `--inlining-optimizing` 选项进一步优化二进制文件：
- en: '[PRE22]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will optimize the functions and inline the functions where the binary
    is called. Let''s check what the file size generated is:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将优化函数并将函数内联到二进制文件被调用的地方。让我们检查生成的文件大小：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The generated file is just 39 bytes, which is 35% less than the original binary.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件只有 39 字节，比原始二进制文件少了 35%。
- en: 'To check various options supported by `wasm-opt`, run the following command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查 `wasm-opt` 支持的各种选项，请运行以下命令：
- en: '[PRE24]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `wasm-opt` tool helps us to optimize the WebAssembly binaries further. Let's
    next explore the `wasm2js` tool.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm-opt` 工具帮助我们进一步优化 WebAssembly 二进制文件。接下来，让我们探索 `wasm2js` 工具。'
- en: wasm2js
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wasm2js
- en: 'The `wasm2js` tool converts WASM/WAST files into JavaScript files. Let''s look
    at the steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm2js` 工具将 WASM/WAST 文件转换为 JavaScript 文件。让我们看看步骤：'
- en: 'Create a file called `add-with-export.wast`:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `add-with-export.wast` 的文件：
- en: '[PRE25]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, add the following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，添加以下代码：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In order to convert the WebAssembly text format into JavaScript using `wasm2js`,
    run the following command:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用 `wasm2js` 将 WebAssembly 文本格式转换为 JavaScript，运行以下命令：
- en: '[PRE27]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This will print out the generated JavaScript:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出生成的 JavaScript：
- en: '[PRE28]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `asmFunc` function is defined. In `asmFunc`, we import the math functions
    from the global object. After that, we have an `add` function. The `add` function
    initializes `x` and `y`. The function returns the sum of two values. Finally,
    we return the `add` function.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`asmFunc` 函数被定义了。在 `asmFunc` 中，我们从全局对象中导入数学函数。之后，我们有一个 `add` 函数。`add` 函数初始化
    `x` 和 `y`。该函数返回两个值的和。最后，我们返回 `add` 函数。'
- en: Note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The generated JavaScript is `asmjs` and not normal JavaScript. We also imported
    a lot of functions from the global namespace in JavaScript into `asmFunc`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 JavaScript 是 `asmjs` 而不是常规 JavaScript。我们还在 JavaScript 中从全局命名空间导入了大量函数到 `asmFunc`。
- en: The `wasm2js` tool makes it easy to generate JavaScript from a WebAssembly module.
    The generated JavaScript module is faster than its normal JavaScript counterpart.
    This can be used as a polyfill for browsers that do not support WebAssembly yet.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm2js` 工具使得从 WebAssembly 模块生成 JavaScript 变得容易。生成的 JavaScript 模块比其常规 JavaScript
    对应物更快。这可以用作不支持 WebAssembly 的浏览器的 polyfill。'
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen how to install Binaryen and what the various tools
    provided by the Binaryen toolkit are. Binaryen makes it easier to convert WebAssembly
    modules into various formats. It is an important tool that makes your WebAssembly
    journey easier and more efficient.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何安装 Binaryen 以及 Binaryen 工具包提供的各种工具。Binaryen 使得将 WebAssembly 模块转换为各种格式变得更加容易。这是一个使您的
    WebAssembly 之旅更加轻松和高效的工具。
- en: In the next chapter, we will start our Rust and WebAssembly journey.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始我们的 Rust 和 WebAssembly 之旅。
