- en: '*Chapter 6*: Installing and Using Binaryen'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the compilation process, compiled languages produce their own **Intermediate
    Representation** (**IR**). The compilers then optimize the IR to generate optimized
    code. Before passing it to LLVM, compilers should convert this IR into something
    that LLVM understands (LLVM IR). LLVM optimizes LLVM IR and produces native code
    (like the WebAssembly binary). These multiple IR generations and optimizations
    at different levels make the compilation process slower and not very effective.
    Binaryen tries to eliminate these multiple IR generations and uses its own IR.
  prefs: []
  type: TYPE_NORMAL
- en: '**(WebAssembly) Binary + Emscripten = Binaryen**'
  prefs: []
  type: TYPE_NORMAL
- en: Binaryen is a compiler and toolchain infrastructure library for WebAssembly,
    written in C++. It aims to make compiling to WebAssembly easy, fast, and effective.
  prefs: []
  type: TYPE_NORMAL
- en: '- Binaryen''s GitHub repository ([https://github.com/WebAssembly/binaryen](https://github.com/WebAssembly/binaryen))'
  prefs: []
  type: TYPE_NORMAL
- en: Binaryen uses its own version of IR. Binaryen's IR is a subset of WebAssembly.
    Thus, it makes compiling Binaryen to WebAssembly faster and easier. Binaryen's
    IR uses a compact data structure and is designed with modern CPU architecture
    in mind. That is, the WebAssembly binary can be generated and optimized in parallel
    using all the available CPU cores.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to that, Binaryen's optimizer has many passes that can improve the
    code significantly. Binaryen's optimizer uses techniques such as local coloring
    to coalesce local variables, dead code elimination, and precomputing expressions
    wherever possible. Binaryen also provides a way to shrink the WebAssembly binary.
  prefs: []
  type: TYPE_NORMAL
- en: Binaryen is easy to use. It accepts the WebAssembly binary or even the control
    graph to generate a highly optimized WebAssembly binary. Binaryen also provides
    Binaryen.js, which enables the use of Binaryen from JavaScript. Similar to WABT,
    Binaryen includes a different set of tools that are useful while dealing with
    WebAssembly.
  prefs: []
  type: TYPE_NORMAL
- en: These toolchain utilities help in parsing the WebAssembly binary and then optimizing
    it further, and finally, emit a highly optimized WebAssembly binary (in other
    words, wasm-to-wasm optimizer), providing a polyfill for WebAssembly when the
    browser does not have WebAssembly support.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will understand how to install and use various tools provided
    by Binaryen. Understanding Binaryen and the tools provided by it will help you
    to optimize the WebAssembly binaries in terms of performance and size. We will
    cover the following sections in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using Binaryen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-as`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-dis`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-opt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm2js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll be requiring Binaryen and Visual C++ installed. You can find the code
    files present in this chapter on GitHub at [https://github.com/PacktPublishing/Practical-WebAssembly](https://github.com/PacktPublishing/Practical-WebAssembly).
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using Binaryen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to install Binaryen, first clone the repository from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After the repository is cloned, go into the folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Linux/macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Generate the project build system by running the `cmake` command with the path
    to the `binaryen` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, build the project using the `make` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This generates all the binaries in the `bin` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Windows, once the repository is cloned, we will create a `build` directory
    and go inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Windows does not have the cmake command available. Install the
    Visual C++ tools to make the `cmake` command available in the system. To install
    the Visual C++ tools, check out the following link: [https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-160&viewFallbackFrom=vs-2019](https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-160&viewFallbackFrom=vs-2019).
    Then, run the following command inside the `build` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will generate all the necessary build files in the `build`
    directory. Then, we can build the project using the `binaryen.vcxproj` file generated
    by `cmake`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated binary includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The various tools generated by Binaryen are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wasm-as` – This tool is similar to `wat2wasm` in WABT. This tool converts
    WebAssembly text format (`.wast`) into WebAssembly binary format (`.wasm`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-ctor-eval` – This tool executes C++ global constructors ahead of time
    and has them ready. This optimization speeds up the WebAssembly execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-dis` – This tool is similar to `wasm2wat` in wabt. That is, it converts
    WebAssembly binary format (`.wasm`) into WebAssembly text format (`.wat`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-emscripten-finalize` – This tool performs Emscripten-specific transforms
    on the given `.wasm` files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-metadce` – This tool removes dead code in the provided WebAssembly binary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-opt` – This tool optimizes the provided WebAssembly binary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-reduce` – This tool reduces the given WebAssembly binary into a smaller
    binary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm-shell` – This tool creates a shell that can load and interpret WebAssembly
    code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wasm2js` – This tool is useful in polyfill. It converts WebAssembly into a
    JavaScript compiler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binaryen.js` – A standalone JavaScript library that exposes Binaryen methods
    for creating and optimizing the WebAssembly modules. This JavaScript file is just
    like any other JavaScript file that can be loaded into the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have built and generated the tools provided by Binaryen, let's explore
    the tools generated.
  prefs: []
  type: TYPE_NORMAL
- en: wasm-as
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `wasm-as` tool converts WAST into WASM. Let''s look at the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new folder, called `binaryen-playground`, and go into the folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `.wat` file called `add.wat`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following contents to `add.wat`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the Web Assembly text format into a WebAssembly module, using the `wasm-as`
    binary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This generates the `add.wasm` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The size of the binary generated is just 32 bytes.
  prefs: []
  type: TYPE_NORMAL
- en: '`wasm-as` first validates the given file (`.wat`) and then converts it into
    a `.wasm` file. To check various options supported by `wasm-as`, we can run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If we need to generate the WebAssembly module file in a different name, we will
    use the `-o` option with the filename. For example, `wasm-as add.wat -o customAdd.wasm`
    will generate `customAdd.wasm`.
  prefs: []
  type: TYPE_NORMAL
- en: '`wasm-as` also provides verbose output that clearly explains how the WebAssembly
    module is structured. In order to see the structure of the WebAssembly module,
    we run it with the `-d` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The previous output is a detailed description of how the binary is generated.
    First, it loads the given `.wat` file. After that, it parses and validates the
    file. Finally, it creates `add.wasm` and writes the header, the type, function
    signatures, and functions. While generating the binary, we can enable the compiler
    to include the new and shiny features and disable various existing features using
    the appropriate `enable-*` and `disable-*` options. Additionally, you can generate
    `sourcemap` using the `--sm` option.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to convert WAST to WASM, let's see how to convert
    WASM to WAST.
  prefs: []
  type: TYPE_NORMAL
- en: wasm-dis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `wasm-dis` tool converts WAST into WASM. We will use the `add.wasm` file
    that we created in the previous example here. Let''s look at the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to convert the WebAssembly module into WebAssembly text format, using
    the `wasm-dis` binary, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We generate the `gen-add.wast` file using the `-o` option with the filename
    (`gen-add.wast`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`wasm-dis` first validates the given file (`.wasm`) and then converts it into
    a `.wat` file. To check various options supported by `wasm-dis`, run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`wasm-dis` also provides verbose output that clearly explains how the WebAssembly
    module is structured. In order to see the structure of the WebAssembly module,
    we run it with the `-d` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous output is a detailed description of how the `.wast` file is generated.
    First, it loads the given `.wasm` file. After that, it parses and validates the
    file. Finally, it creates `gen-add.wast` after reading the header, type, function
    signatures, and functions.
  prefs: []
  type: TYPE_NORMAL
- en: While generating the file, we can enable the compiler to include the new and
    shiny features and disable various existing features using the appropriate `enable-*`
    and `disable-*` options, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we can also input `sourcemap` using the `--sm <filename>` option.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to convert WASM to WAST, let's see how to optimize
    the WebAssembly binaries further.
  prefs: []
  type: TYPE_NORMAL
- en: wasm-opt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `wasm-opt` tool is a `wasm-to-wasm` optimizer. It will receive a WebAssembly
    module as input and run transformation passes on it to optimize and generate the
    optimized WebAssembly module. Let''s look at the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first create the `inline-optimizer.wast` file and add the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To generate the WebAssembly module, we will run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will generate `inline.wasm`. The `--print` option prints the WebAssembly
    text format before converting it to the WebAssembly binary. We also passed in
    the `-o` option to output the WebAssembly module as `inline.wasm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This generated binary of 60 bytes in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can further optimize the binary with the `--inlining-optimizing` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will optimize the functions and inline the functions where the binary
    is called. Let''s check what the file size generated is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The generated file is just 39 bytes, which is 35% less than the original binary.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check various options supported by `wasm-opt`, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `wasm-opt` tool helps us to optimize the WebAssembly binaries further. Let's
    next explore the `wasm2js` tool.
  prefs: []
  type: TYPE_NORMAL
- en: wasm2js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `wasm2js` tool converts WASM/WAST files into JavaScript files. Let''s look
    at the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `add-with-export.wast`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to convert the WebAssembly text format into JavaScript using `wasm2js`,
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will print out the generated JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `asmFunc` function is defined. In `asmFunc`, we import the math functions
    from the global object. After that, we have an `add` function. The `add` function
    initializes `x` and `y`. The function returns the sum of two values. Finally,
    we return the `add` function.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The generated JavaScript is `asmjs` and not normal JavaScript. We also imported
    a lot of functions from the global namespace in JavaScript into `asmFunc`.
  prefs: []
  type: TYPE_NORMAL
- en: The `wasm2js` tool makes it easy to generate JavaScript from a WebAssembly module.
    The generated JavaScript module is faster than its normal JavaScript counterpart.
    This can be used as a polyfill for browsers that do not support WebAssembly yet.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to install Binaryen and what the various tools
    provided by the Binaryen toolkit are. Binaryen makes it easier to convert WebAssembly
    modules into various formats. It is an important tool that makes your WebAssembly
    journey easier and more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start our Rust and WebAssembly journey.
  prefs: []
  type: TYPE_NORMAL
