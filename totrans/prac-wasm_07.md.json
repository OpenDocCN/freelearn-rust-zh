["```rs\n; add.wat\n(module\n    (func $add (param $lhs i32) (param $rhs i32) \n      (result i32)\n        get_local $lhs\n        get_local $rhs\n        i32.add)\n    (export \"add\" (func $add))\n)\n```", "```rs\n; add.wat\n(module\n    (func $add (export \"add\") (param $lhs i32) \n      (param $rhs i32) (result i32)\n        get_local $lhs\n        get_local $rhs\n        i32.add)\n)\n```", "```rs\n$ /path/to/wabt/bin/wat2wasm add.wat\n```", "```rs\n$ hexdump add.wasm\n0000000 00 61 73 6d 01 00 00 00 01 07 01 60 02 7f 7f 01\n0000010 7f 03 02 01 00 07 07 01 03 61 64 64 00 00 0a 09\n0000020 01 07 00 20 00 20 01 6a 0b\n0000029\n```", "```rs\n0000000: 0061 736d                   ; WASM_BINARY_MAGIC\n0000004: 0100 0000                   ; WASM_BINARY_VERSION\n```", "```rs\n; section \"Type\" (1)\n0000008: 01                          ; section code\n0000009: 07                          ; section size\n000000a: 01                          ; num types\n```", "```rs\n; type 0\n000000b: 60                          ; func\n000000c: 02                          ; num params\n000000d: 7f                          ; i32\n000000e: 7f                          ; i32\n000000f: 01                          ; num results\n0000010: 7f                          ; i32\n```", "```rs\n; section \"Function\" (3)\n0000011: 03                          ; section code\n0000012: 02                          ; section size\n0000013: 01                          ; num functions\n0000014: 00                          ; function 0 signature\n  index\n```", "```rs\n; section \"Export\" (7)\n0000015: 07                          ; section code\n0000016: 07                          ; section size\n0000017: 01                          ; num exports\n0000018: 03                          ; string length\n0000019: 6164 64                add  ; export name\n000001c: 00                          ; export kind\n000001d: 00                          ; export func index\n```", "```rs\n; section \"Code\" (10)\n000001e: 0a                          ; section code\n000001f: 09                          ; section size\n0000020: 01                          ; num functions\n  ; function body 0\n0000021: 07                          ; func body size\n\n0000022: 00                          ; local decl count\n0000023: 20                          ; local.get\n0000024: 00                          ; local index\n0000025: 20                          ; local.get\n0000026: 01                          ; local index\n0000027: 6a                          ; i32.add\n0000028: 0b                          ; end\n```", "```rs\n(module\n    (func $i (import \"imports\" \"jsAdd\") (param i32))\n)\n```", "```rs\n$ /path/to/wabt/bin/wat2wasm jsAdd.wat\n```", "```rs\n$ hexdump jsAdd.wasm\n0000000 00 61 73 6d 01 00 00 00 01 05 01 60 01 7f 00 02\n0000010 11 01 07 69 6d 70 6f 72 74 73 05 6a 73 41 64 64\n0000020 00 00\n0000022\n```", "```rs\n; Other information\n; section \"Import\" (2)\n000000f: 02                          ; section code\n0000010: 11                          ; section size\n0000011: 01                          ; num imports\n; import header 0\n0000012: 07                          ; string length\n0000013: 696d 706f 7274 73           imports  ; import\n  module name\n000001a: 05                          ; string length\n000001b: 6a73 4164 64         jsAdd  ; import field name\n0000020: 00                          ; import kind\n0000021: 00                          ; import signature\n  index\n```", "```rs\n$ touch globals.wat\n(module\n     (global $mutableValue (import \"js\" \"mutableGlobal\")\n       (mut i32))\n     (global $immutableValue (import \"js\"\n       \"immutableGlobal\") i32)\n     (global $wasmValue i32 (i32.const 10))\n     (func (export \"getWasmValue\") (result i32)\n        (global.get $wasmValue))\n     (func (export \"getMutableValue\") (result i32)\n        (global.get $mutableValue))\n     (func (export \"getImmutableValue\") (result i32)\n        (global.get $immutableValue))\n     (func (export \"setMutableValue\") (param $v i32)\n        (global.set $mutableValue\n            (local.get $v)))\n)\n```", "```rs\n$ /path/to/wabt/bin/wat2wasm globals.wat\n```", "```rs\n// globals.html\n<html>\n    <head> </head>\n    <body>\n        <script>\n            async function run() {  }\n            run()\n        </script>\n    </body>\n</html>\n```", "```rs\nlet immutableGlobal = new WebAssembly.Global({value:'i32',\n  mutable:false}, 1000)\nlet mutableGlobal = new WebAssembly.Global({value:'i32',\n  mutable:true}, 0)\n```", "```rs\nmutableGlobal.value = 1337  // valid.\nimmutableGlobal.value = 7331 // Error\n```", "```rs\nconst response = await fetch('./globals.wasm')\nconst bytes = await response.arrayBuffer()\nconst wasm = await WebAssembly.instantiate(bytes, { js: {\n  mutableGlobal, immutableGlobal } })\n```", "```rs\nconst {\n    getWasmValue,\n    getMutableValue,\n    setMutableValue,\n    getImmutableValue\n} =  wasm.instance.exports\n```", "```rs\nconsole.log(getWasmValue()) // 10\n```", "```rs\nconsole.log(getMutableValue()) // 1337\nsetMutableValue(1338)\nconsole.log(getMutableValue()) // 1338\n```", "```rs\nconsole.log(getImmutableValue()) // 1000\n```", "```rs\n$ python -m http.server\n```", "```rs\n\n; section \"Import\" (2)\n0000013: 02                          ; section code\n0000014: 2b                          ; section size\n0000015: 02                          ; num imports\n```", "```rs\n\n; import header 0\n0000016: 02                          ; string length\n0000017: 6a73                    js  ; import module name\n0000019: 0d                          ; string length\n000001a: 6d75 7461 626c 6547 6c6f 6261 6c\n         mutableGlobal  ; import field name\n0000027: 03                          ; import kind\n0000028: 7f                          ; i32\n0000029: 01                          ; global mutability\n  ; import header 1\n000002a: 02                          ; string length\n000002b: 6a73                    js  ; import module name\n000002d: 0f                          ; string length\n000002e: 696d 6d75 7461 626c 6547 6c6f 6261 6c\n    immutableGlobal  ; import field name\n000003d: 03                          ; import kind\n000003e: 7f                          ; i32\n000003f: 00                          ; global mutability\n```", "```rs\n; section \"Global\" (6)\n0000047: 06                          ; section code\n0000048: 06                          ; section size\n0000049: 01                          ; num globals\n000004a: 7f                          ; i32\n000004b: 00                          ; global mutability\n000004c: 41                          ; i32.const\n000004d: 0a                          ; i32 literal\n000004e: 0b                          ; end\n```", "```rs\n; function body 0\n000009c: 04                          ; func body size\n000009d: 00                          ; local decl count\n000009e: 23                          ; global.get\n000009f: 02                          ; global index\n00000a0: 0b                          ; end\n```", "```rs\n; function body 3\n00000ab: 06                          ; func body size\n00000ac: 00                          ; local decl count\n00000ad: 20                          ; local.get\n00000ae: 00                          ; local index\n00000af: 24                          ; global.set\n00000b0: 00                          ; global index\n00000b1: 0b                          ; end\n```", "```rs\n(module\n    ; Code is elided\n    (func $initMutableValue\n          (global.set $mutableValue\n               (i32.const 200))) \n     (start $initMutableValue)\n)\n```", "```rs\n$ /path/to/wabt/bin/wat2wasm globals.wat\n```", "```rs\n$ python -m http.server\n```", "```rs\n; section \"Start\" (8)\n0000085: 08                          ; section code\n0000086: 01                          ; section size\n0000087: 03                          ; start func index\n```", "```rs\n$ touch memory.html\n$ vi memory.html\nlet memory = new WebAssembly.Memory({initial: 10, maximum: 100})\n```", "```rs\nconst response = await fetch('./memory.wasm')\nconst bytes = await response.arrayBuffer()\nconst wasm = await WebAssembly.instantiate(bytes, { js: { memory } })\n```", "```rs\n(module\n     (memory (import \"js\" \"memory\") 1)\n     (func (export \"sum\") (param $ptr i32) (param $len i32)\n       (result i32)\n          (local $end i32)\n          (local $sum i32)\n          (local.set $end (i32.add (local.get $ptr)\n            (i32.mul (local.get $len) (i32.const 4))))\n          (block $break (loop $top\n               (br_if $break (i32.eq (local.get $ptr)\n               (local.get $end)))\n               (local.set $sum (i32.add (local.get $sum)\n                 (i32.load (local.get $ptr))))\n               (local.set $ptr (i32.add (local.get $ptr)\n                 (i32.const 4)))\n               (br $top)\n          ))\n          (local.get $sum)\n     )\n)\n```", "```rs\nfunction sum(ptr, len) {\n    let end = ptr + (len * 4)\n    let tmp = 0\n    while (ptr < end) {\n        tmp = memory[ptr]\n        ptr = ptr + 4\n    }\n    return tmp;\n}\n```", "```rs\nlet i32Arr = new Uint32Array(memory.buffer)\nfor (var i = 0; i < 50; i++) {\n    i32Arr[i] = i * i * i\n}\n```", "```rs\nvar sum = wasm.instance.exports.sum(0, 50)\nconsole.log(sum) // 1500625\n```", "```rs\n$ /path/to/wabt/bin/wat2wasm memory.wat\n```", "```rs\n$ python -m http.server\n```"]