["```rs\nFROM buildpack-deps:stretch\n\nENV RUSTUP_HOME=/usr/local/rustup \\\n    CARGO_HOME=/usr/local/cargo \\\n    PATH=/usr/local/cargo/bin:$PATH\n\nRUN set -eux; \\\n    url=\"https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init\"; \\\n    wget \"$url\"; \\\n    chmod +x rustup-init; \\\n    ./rustup-init -y --no-modify-path --default-toolchain nightly; \\\n    rm rustup-init; \\\n    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \\\n    rustup --version; \\\n    cargo --version; \\\n    rustc --version;\n```", "```rs\nset -eux\n```", "```rs\nurl=\"https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init\"; \\\nwget \"$url\"; \\\nchmod +x rustup-init; \\\n```", "```rs\n./rustup-init -y --no-modify-path --default-toolchain nightly; \\\nrm rustup-init; \\\n```", "```rs\nchmod -R a+w $RUSTUP_HOME $CARGO_HOME; \\\nrustup --version; \\\ncargo --version; \\\nrustc --version;\n```", "```rs\ndocker build -t rust:nightly  .\n```", "```rs\nREPOSITORY   TAG       IMAGE ID       CREATED             SIZE\nrust         nightly   91e52fb2cea5   About an hour ago   1.67GB\n```", "```rs\ntarget\n Cargo.lock\n **/*.rs.bk\n files\n *.db\n```", "```rs\nFROM rust:nightly\n\nRUN USER=root cargo new --bin users-microservice\nWORKDIR /users-microservice\nCOPY ./Cargo.toml ./Cargo.toml\nRUN cargo build\n\nRUN rm src/*.rs\nCOPY ./src ./src\nCOPY ./diesel.toml ./diesel.toml\nRUN rm ./target/debug/deps/users_microservice*\nRUN cargo build\n\nCMD [\"./target/debug/users-microservice\"]\n\nEXPOSE 8000\n```", "```rs\nRUN USER=root cargo new --bin users-microservice\n```", "```rs\nWORKDIR /users-microservice\nCOPY ./Cargo.toml ./Cargo.toml\nRUN cargo build\n```", "```rs\nRUN rm src/*.rs\nCOPY ./src ./src\nCOPY ./diesel.toml ./diesel.toml\nRUN rm ./target/debug/deps/users_microservice*\nRUN cargo build\n```", "```rs\nCMD [\"./target/debug/users-microservice\"]\n```", "```rs\nEXPOSE 8000\n```", "```rs\ndocker build -t users-microservice:latest \n```", "```rs\nSending build context to Docker daemon  13.82kB\nStep 1/12 : FROM rust:nightly\n ---> 91e52fb2cea5\nStep 2/12 : RUN USER=root cargo new --bin users-microservice\n ---> Running in 3ff6b18a9c72\n     Created binary (application) `users-microservice` package\nRemoving intermediate container 3ff6b18a9c72\n ---> 85f700c4a567\nStep 3/12 : WORKDIR /users-microservice\n ---> Running in eff894de0a40\nRemoving intermediate container eff894de0a40\n ---> 66366486b1e2\nStep 4/12 : COPY ./Cargo.toml ./Cargo.toml\n ---> 8864ae055d16\nStep 5/12 : RUN cargo build\n ---> Running in 1f1150ae4661\n    Updating crates.io index\n Downloading crates ...\n Compiling crates ...\n   Compiling users-microservice v0.1.0 (/users-microservice)\n    Finished dev [unoptimized + debuginfo] target(s) in 2m 37s\nRemoving intermediate container 1f1150ae4661\n ---> 7868ea6bf9b3\n```", "```rs\nStep 6/12 : RUN rm src/*.rs\n ---> Running in 5b7d9a1f96cf\nRemoving intermediate container 5b7d9a1f96cf\n ---> b03e7d0b23cc\nStep 7/12 : COPY ./src ./src\n ---> 2212e3db5223\nStep 8/12 : COPY ./diesel.toml ./diesel.toml\n ---> 5d4c59d31614\nStep 9/12 : RUN rm ./target/debug/deps/users_microservice*\n ---> Running in 6bc9df93ebc1\nRemoving intermediate container 6bc9df93ebc1\n ---> c2e3d67d3bf8\nStep 10/12 : RUN cargo build\n ---> Running in b985b6c793d1\n   Compiling users-microservice v0.1.0 (/users-microservice)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.98s\nRemoving intermediate container b985b6c793d1\n ---> 553156f97943\nStep 11/12 : CMD [\"./target/debug/users-microservice\"]\n ---> Running in c36ff8e44db3\nRemoving intermediate container c36ff8e44db3\n ---> 56e7eb1144aa\nStep 12/12 : EXPOSE 8000\n ---> Running in 5e76a47a0ded\nRemoving intermediate container 5e76a47a0ded\n ---> 4b6fc8aa6f1b\nSuccessfully built 4b6fc8aa6f1b\nSuccessfully tagged users-microservice:latest\n```", "```rs\nREPOSITORY           TAG       IMAGE ID       CREATED         SIZE\nusers-microservice   latest    4b6fc8aa6f1b   7 minutes ago   2.3GB\nrust                 nightly   91e52fb2cea5   3 hours ago     1.67GB\n```", "```rs\ndocker run -it --rm -p 8080:8000 users-microservice\n```", "```rs\nFROM rust:nightly\n\nRUN USER=root cargo new --bin content-microservice\nWORKDIR /content-microservice\nCOPY ./Cargo.toml ./Cargo.toml\nRUN cargo build\n\nRUN rm src/*.rs\nCOPY ./src ./src\nRUN rm ./target/debug/deps/content_microservice*\nRUN cargo build\n\nCMD [\"./target/debug/content-microservice\"]\nEXPOSE 8000\n```", "```rs\n docker build -t content-microservice:latest .\n```", "```rs\nFROM rust:1.30.1\n\nRUN USER=root cargo new --bin mails-microservice\nWORKDIR /mails-microservice\nCOPY ./Cargo.toml ./Cargo.toml\nRUN cargo build\n\nRUN rm src/*.rs\nCOPY ./src ./src\nCOPY ./templates ./templates\nRUN rm ./target/debug/deps/mails_microservice*\nRUN cargo build\n\nCMD [\"./target/debug/mails-microservice\"]\n```", "```rs\nCOPY ./templates ./templates\n```", "```rs\nFROM rust:1.30.1\n\nRUN USER=root cargo new --bin router-microservice\nWORKDIR /router-microservice\nCOPY ./Cargo.toml ./Cargo.toml\nRUN cargo build\n\nRUN rm src/*.rs\nCOPY ./src ./src\nCOPY ./static ./static\nRUN rm ./target/debug/deps/router_microservice*\nRUN cargo build\n\nCMD [\"./target/debug/router-microservice\"]\n\nEXPOSE 8000\n```", "```rs\nclap = \"2.32\"\nconfig = \"0.9\"\ndiesel = { version = \"^1.1.0\", features = [\"postgres\", \"r2d2\"] }\ndiesel_migrations = \"1.3\"\nenv_logger = \"0.6\"\nfailure = \"0.1\"\nlog = \"0.4\"\npostgres = \"0.15\"\nr2d2 = \"0.8\"\nserde = \"1.0\"\nserde_derive = \"1.0\"\n```", "```rs\nuse diesel::prelude::*;\nuse diesel::connection::Connection;\nuse failure::{format_err, Error};\nuse log::debug;\nuse serde_derive::Deserialize;\n```", "```rs\nembed_migrations!();\n```", "```rs\n#[derive(Deserialize)]\nstruct Config {\n    database: Option<String>,\n}\n```", "```rs\nfn main() -> Result<(), Error> {\n    env_logger::init();\n    let mut config = config::Config::default();\n    config.merge(config::Environment::with_prefix(\"DBSYNC\"))?;\n    let config: Config = config.try_into()?;\n    let db_address = config.database.unwrap_or(\"postgres://localhost/\".into());\n    debug!(\"Waiting for database...\");\n    loop {\n        let conn: Result<PgConnection, _> = Connection::establish(&db_address);\n        if let Ok(conn) = conn {\n            debug!(\"Database connected\");\n            embedded_migrations::run(&conn)?;\n            break;\n        }\n    }\n    debug!(\"Database migrated\");\n    Ok(())\n}\n```", "```rs\nFROM rust:nightly as builder\n\nRUN USER=root cargo new --bin dbsync-worker\nWORKDIR /dbsync-worker\nCOPY ./Cargo.toml ./Cargo.toml\nRUN cargo build\n\nRUN rm src/*.rs\nCOPY ./src ./src\nCOPY ./migrations ./migrations\nCOPY ./diesel.toml ./diesel.toml\nRUN rm ./target/debug/deps/dbsync_worker*\nRUN cargo build\n\nFROM buildpack-deps:stretch\n\nCOPY --from=builder /dbsync-worker/target/debug/dbsync-worker  /app/\nENV RUST_LOG=debug\nEXPOSE 8000\nENTRYPOINT [\"/app/dbsync-worker\"]\n```", "```rs\nFROM rust:nightly as builder\n```", "```rs\nCOPY --from=builder /dbsync-worker/target/debug/dbsync-worker  /app/\n```", "```rs\nENTRYPOINT [\"/app/dbsync-worker\"]\n```", "```rs\nversion: \"3.6\"\nservices:\n    # the place for containers definition\n```", "```rs\ndb:\n  image: postgres:latest\n  restart: always\n  environment:\n    - POSTGRES_USER=postgres\n    - POSTGRES_PASSWORD=password\n  ports:\n    - 5432:5432\n```", "```rs\nsmtp:\n  image: juanluisbaptiste/postfix\n  restart: always\n  environment:\n    - SMTP_SERVER=smtp.example.com\n    - SMTP_USERNAME=admin@example.com\n    - SMTP_PASSWORD=password\n    - SERVER_HOSTNAME=smtp.example.com\n  ports:\n    - \"2525:25\"\n```", "```rs\ndbsync:\n  build: ./microservices/dbsync\n  depends_on:\n    - db\n  environment:\n    - RUST_LOG=dbsync_worker=debug\n    - RUST_BACKTRACE=1\n    - DBSYNC_DATABASE=postgresql://postgres:password@db:5432\n```", "```rs\nmails:\n  build: ./microservices/mails\n  depends_on:\n    - smtp\n  environment:\n    - RUST_LOG=mails_microservice=debug\n    - RUST_BACKTRACE=1\n    - MAILS_ADDRESS=0.0.0.0:8000\n    - MAILS_SMTP_ADDRESS=smtp:2525\n    - MAILS_SMTP_LOGIN=admin@example.com\n    - MAILS_SMTP_PASSWORD=password\n  ports:\n    - 8002:8000\n```", "```rs\nusers:\n  build: ./microservices/users\n  environment:\n    - RUST_LOG=users_microservice=debug\n    - RUST_BACKTRACE=1\n    - USERS_ADDRESS=0.0.0.0:8000\n    - USERS_DATABASE=postgresql://postgres:password@db:5432\n  depends_on:\n    - dbsync\n    - mails\n  ports:\n    - 8001:8000\n```", "```rs\ncontent:\n  build: ./microservices/content\n  depends_on:\n    - dbsync\n  ports:\n    - 8888:8000\n  environment:\n    - RUST_LOG=content_microservice=debug\n    - RUST_BACKTRACE=1\n    - ROCKET_ADDRESS=0.0.0.0\n    - ROCKET_PORT=8000\n    - ROCKET_DATABASES={postgres_database={url=\"postgresql://postgres:password@db:5432\"}}\n  ports:\n    - 8003:8000\n```", "```rs\nrouter:\n  build: ./microservices/router\n  depends_on:\n    - users\n    - content\n  environment:\n    - RUST_LOG=router_microservice=debug\n    - RUST_BACKTRACE=1\n    - ROUTER_ADDRESS=0.0.0.0:8000\n    - ROUTER_USERS=http://users:8000\n    - ROUTER_CONTENT=http://content:8000\n  ports:\n    - 8000:8000\n```", "```rs\ndocker-compose -f docker-compose.test.yml up\n```", "```rs\nCreating network \"deploy_default\" with the default driver\nCreating deploy_smtp_1 ... done\nCreating deploy_db_1    ... done\nCreating deploy_mails_1  ... done\nCreating deploy_dbsync_1 ... done\nCreating deploy_users_1   ... done\nCreating deploy_content_1 ... done\nCreating deploy_router_1  ... done\nAttaching to deploy_smtp_1, deploy_db_1, deploy_mails_1, deploy_dbsync_1, deploy_content_1, deploy_users_1, deploy_router_1\n```", "```rs\nsmtp_1     | Setting configuration option smtp_sasl_password_maps with value: hash:\\/etc\\/postfix\\/sasl_passwd\nmails_1    | [2018-12-24T19:08:20Z DEBUG mails_microservice] Waiting for SMTP server\nsmtp_1     | Setting configuration option smtp_sasl_security_options with value: noanonymous\ndbsync_1   | [2018-12-24T19:08:20Z DEBUG dbsync_worker] Waiting for database...\ndb_1       | \ndb_1       | fixing permissions on existing directory /var/lib/postgresql/data ... ok\nmails_1    | [2018-12-24T19:08:20Z DEBUG mails_microservice] SMTP connected\nsmtp_1     | Adding SASL authentication configuration\nmails_1    | Listening on http://0.0.0.0:8000\nmails_1    | Ctrl-C to shutdown server\ncontent_1  | Configured for development.\nrouter_1   | DEBUG 2018-12-24T19:08:22Z: router_microservice: Started http server: 0.0.0.0:8000\ncontent_1  | Rocket has launched from http://0.0.0.0:8000\nusers_1    | [2018-12-24T19:08:24Z DEBUG users_microservice] Starting microservice...\n```", "```rs\nGracefully stopping... (press Ctrl+C again to force)\nStopping deploy_router_1  ... done\nStopping deploy_users_1   ... done\nStopping deploy_content_1 ... done\nStopping deploy_mails_1   ... done\nStopping deploy_db_1      ... done\nStopping deploy_smtp_1    ... do\n```", "```rs\nservices:\n  db:\n    image: postgres:latest\n    restart: always\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - database_data:/var/lib/postgresql/data\n  # other containers definition\nvolumes:\n  database_data:\n    driver: local\n```", "```rs\ndocker-compose -f docker-compose.prod.yml up -d\n```", "```rs\nStarting deploy_db_1   ... done\nStarting deploy_smtp_1   ... done\nStarting deploy_dbsync_1 ... done\nStarting deploy_mails_1   ... done\nStarting deploy_content_1 ... done\nStarting deploy_users_1   ... done\nStarting deploy_router_1  ... done\n```", "```rs\ndocker-compose -f docker-compose.prod.yml logs users\n```", "```rs\ndocker-compose -f docker-compose.test.yml stop\n```", "```rs\nStopping deploy_router_1  ... done\nStopping deploy_users_1   ... done\nStopping deploy_content_1 ... done\nStopping deploy_mails_1   ... done\nStopping deploy_db_1      ... done\nStopping deploy_smtp_1    ... done\n```"]