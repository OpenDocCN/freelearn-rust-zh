["```rs\n// from Chapter 7/code/structs.rs\n#![crate_type = \"lib\"] \n#![crate_name = \"mycrate\"]\n```", "```rs\nmod game1 {\n  // all of the module's code items go in here\n}\n```", "```rs\n// from Chapter 7/code/modules.rs\nmod game1 {\n    // all of the module's code items go in here\n    fn func1() {\n      println!(\"Am I visible?\");\n    }\n    pub fn func2() {\n      println!(\"You called func2 in game1!\");\n    }\n}\n\nfn main() {\n  // game1::func1(); // <- error!\n  game1::func2();\n}\n```", "```rs\nmod game1 {\n   // other code\n    pub mod subgame1 {\n      pub fn subfunc1() {\n        println!(\"You called subfunc1 in subgame1!\");\n      }\n    }\n}\n\nfn main() {\n  // other code\n  game1::subgame1::subfunc1();\n}\n```", "```rs\n    pub struct Magician {\n        pub name: String,\n        pub age: i32,\n        power: i32\n    }\n```", "```rs\nlet mag1 = game1::Magician { name: \"Gandalf\".to_string(), age: 725, power: 98};\n```", "```rs\n// from Chapter 7/code/import_modules.rs\nmod modul1;\nmod modul2;\nfn main() {\n  modul1::func1();\n  modul2::func1();\n}\n```", "```rs\npub fn func1() {\n    println!(\"called func1 from modul1\");\n}\n```", "```rs\npub fn func1() {\n    println!(\"called func1 from modul2\");\n}\n```", "```rs\n#[test]\nfn it_works() {\n}\n```", "```rs\n// from Chapter 7/code/monsters/src/lib.rs:\nfn print_from_monsters() {\n  println!(\"Printing from crate monsters!\");\n}\n```", "```rs\n// from Chapter 7/code/monsters/src/main.rs:\nfn main() {\n  print_from_monsters();\n  let zmb1 = Zombie {health: 75, damage: 15};\n  println!(\"Oh no, I hear: {}\", zmb1.noise());\n  zmb1.attack();\n  println!(\"{:?}\", zmb1);\n}\n```", "```rs\nextern crate monsters; \n\n```", "```rs\nmonsters::print_from_monsters();\n\n```", "```rs\npub fn print_from_monsters() { â€¦ }\n\n```", "```rs\nlet zmb1 = monsters::Zombie {health: 75, damage: 15}; \n\n```", "```rs\nextern crate monsters;\nuse monsters::Monster;\n\n```", "```rs\nPrinting from crate monsters!\nOh no, I hear: Aaargh!\nThe Zombie bites! Your health lowers with 30 damage points.\nZombie { health: 75, damage: 15 }\n```", "```rs\n[dependencies]\nlog = \"0.2.5\"\nmac = \"*\"\n```", "```rs\n#[macro_use]\nextern crate log;\nextern crate mac;\n\n```", "```rs\ninfo!(\"Gathering information from monster {:?}\", zmb1);\n```", "```rs\n  // from Chapter 7/code/cube/src/lib.rs:\n#[cfg(test)]\nmod test;\npub fn cube(val: u32) -> u32 {\n    // implementation goes here\n    val * val * val\n}\n```", "```rs\n// from Chapter 7/code/cube/src/test.rs:\nuse super::*;\n#[test]\nfn cube_of_2_is_8() {\n     assert_eq!(cube(2), 8);\n}\n// other test functions:\n// ...\n```", "```rs\n// from Chapter 7/code/cube/tests/lib.rs:\nextern crate cube;\n#[test]\nfn cube_of_4_is_64() {\n    assert_eq!(cube::cube(4), 64);\n}\n// other test functions:\n// ...\n```", "```rs\nmacro_rules! mac1 {\n  (pattern) => (expansion);\n  (pattern) => (expansion);\n...\n}\n\n```", "```rs\n// from Chapter 7/code/macros.rs\nmacro_rules! welcome {\n    () => (\n        println!(\"\"Welcome to the Game!\");\n    )\n}\n```", "```rs\nfn main() {\n welcome!() \n}\n```", "```rs\nmacro_rules! mac1 {\n ($arg:expr) => (println!(\"arg is {}\", $arg));\n}\n```", "```rs\nmacro_rules! printall {\n ( $( $arg:expr ), * ) => ( {$( print!(\"{} / \", $arg) ); *} );\n}\n```", "```rs\nmacro_rules! create_fn {\n    ($fname:ident) => (\n        fn $fname() {\n          println!(\"Called the function {:?}()\", stringify!($fname))\n        }\n    )\n}\n```", "```rs\nmacro_rules! massert {\n    ($arg:expr) => (\n            if $arg {}\n            else { panic!(\"Assertion failed!\"); }\n    );\n}\n```", "```rs\n    let v = [10, 40, 30];\n    massert!(v.contains(&30));\n    massert!(!v.contains(&50));\n```", "```rs\n  unless!(v.contains(&25), println!(\"v does not contain 25\"));\n```", "```rs\nmacro_rules! unless {\n    ($arg:expr, $branch:expr) => ( if !$arg { $branch }; );\n}\n```", "```rs\n   test_eq!(seven_times_six_is_forty_two, 7 * 6, 42);\n```", "```rs\n        #[test]\n        fn seven_times_six_is_forty_two() {\n            assert_eq!(7 * 6, 42);\n        }\n```", "```rs\ntest_eq!(seven_times_six_is_not_forty_three, 7 * 6, 43);\n```", "```rs\nmacro_rules! test_eq {\n    ($name:ident, $left:expr, $right:expr) => {\n        #[test]\n        fn $name() {\n            assert_eq!($left, $right);\n        }\n    }\n}\n```", "```rs\nrunning 2 tests\ntest seven_times_six_is_forty_two ... ok\ntest seven_times_six_is_not_forty_three ... FAILED\n```", "```rs\n#[macro_use(mac1, mac2)]\nextern crate abc;\n```"]