- en: Implementing Asynchronous File Transfer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we started to write an asynchronous FTP server using
    `tokio`. Now, we''ll start using the second channel used in the FTP protocol:
    the data channel. We''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backtraces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuzzing tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll start this chapter by implementing the command to list files. This will
    allow us to actually see the files in an FTP client, and we''ll be able to tests
    some commands from the previous chapter by navigating in the directories. So,
    let''s add a case in the `Client::handle_cmd()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This simply calls the `list()` method, which begins as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We first check that the data channel is opened and, if this is the case, we
    check that the provided optional path is valid. If it is, we send a response that
    indicates to the client that we''re about to send it the data. The next part of
    the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We first create a variable, `out`, that will contain the data to send to the
    client. If the specified path is a directory, we use the `read_dir()` function
    from the standard library. We then iterate over all files in the directory to
    gather the info about every file. If we were unable to open the directory, we
    send an error back to the client. If the path is not a directory, for example,
    if it is a file, we only get the info for this single file. Here''s the end of
    the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We then send the data in the right channel using the `send_data()` method that
    we'll see later. If there was another error, we send the appropriate response
    to the client. If we successfully sent the data, we close the connection and indicate
    this action to the client. This code used a few new methods, so let's implement
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, here''s the method that sends data in the data channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It is very similar to the `send()` method, but this one only sends the data
    if the data socket is opened. Another method that is needed is the one that closes
    the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to implement the method to gather the info about a file. Here is how
    it starts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameter `out` is a mutable reference, because we''ll append the info
    in this variable. Then, we gather the different required info and permissions
    of the file. Here''s the rest of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It formats the info and appends it to the variable `out`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function uses another one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have two versions of `get_file_info()`: one for Windows and the other
    for all non-Windows operating systems. Since we use a new crate, we need to add
    this line in `Cargo.toml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now test, in the FTP client, that the files are indeed listed (on the
    right):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)**Figure 10.1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we double-click on a directory, for instance, src, the FTP client will update
    its content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)*Figure 10.2*'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very useful feature of an FTP server is the ability to download files. So,
    it's time to add the command to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we add the case in the `handle_cmd()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the start of the `retr()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we check that the data channel is opened and we check the path. If it
    is a file, we open it, read its content, and send it to the client. Otherwise,
    we send the appropriate error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we use this pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This converts the `Option` into a `Result`, and returns the error if there is
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'And finally, we close the data socket if we successfully sent the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s download a file in FileZilla to check that it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)**Figure 10.3**'
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s do the opposite command: `STOR` to upload a file on the server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, we''ll add a case in the `handle_cmd()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the start of the corresponding method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, we check that the data channel is opened. Then, we use a new function
    to check that the path is valid, by which we mean it does not contain `..`. In
    the other cases, we used another method, `canonicalize()`, and checked that the
    path was under the server root, but we cannot do so here since there exists no
    file to upload yet. Here''s the end of the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, we call `receive_data()`, which is a `Future` that will resolve to the
    data received from the client. Then, we write this content in a new file. Finally,
    we close the connection and send the response to indicate that the transfer is
    done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the method to read the data from the data socket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, we take the `data_reader` attribute, which means it will be `None` after
    this statement. And we iterate, using an `async for` loop, over the reader stream.
    At every iteration, we add the data to the vector that is returned at the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the method to check if the path is valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check that the upload does indeed work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)*Figure 10.4*'
  prefs: []
  type: TYPE_NORMAL
- en: Going further!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding a bit of configuration would be nice, don't you think? Adding user authentication
    would be nice as well. Let's start with the configuration!
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's create a new file in `src/` called `config.rs`. To make things
    easier, we'll use the TOML format for our configuration file. Luckily for us,
    there is a crate for handling TOML files in Rust, called `toml`. In addition to
    this one, we'll use `serde` to handle serialization and deserialization (very
    useful!).
  prefs: []
  type: TYPE_NORMAL
- en: 'Ok, let''s start by adding the dependencies into our `Cargo.toml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Good, now let''s write our `Config` struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: So what should we put in there? The port and address the server should listen
    on to start, maybe?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Done. We also talked about handling authentication. Why not adding it as well?
    We''ll need a new `struct` for users. Let''s call it `User` (yay for originality!):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add the users into the `Config` struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To make these two `struct` work with `serde`, we''ll have to add the following
    tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'And because we''ll need to clone `Config`, we''ll add `Debug` into the tags,
    which gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Ok, we''re now ready to implement the reading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go through the `Config::new` method''s code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to `serde`, we can directly load the configuration file from a `&str`
    and it'll return our `Config` struct fully set. Amazing, right?
  prefs: []
  type: TYPE_NORMAL
- en: For information, the `get_content` function is just a `utility` function that
    allows the return of the content of a file, if this file exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, don''t forget to add the `DEFAULT_PORT` constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In case the file doesn''t exist, we can create a new one with some default
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now you might wonder, how will we actually be able to generate TOML from our
    `Config` struct using this code? With `serde`'s magic once again!
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, our `config` file is now complete. Let get back to the `main.rs`
    one. First, we''ll need to define a new constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll need to update quite a few methods/functions. Let''s start with
    the `main` function. Add this line at the beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now pass the `config` variable to the `server` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s update the `server` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Now, the server is started with the value from the `Config` struct. However,
    we still need the user list for each client in order to handle the authentication.
    To do so, we need to give a `Config` instance to each `Client`. In here, to make
    things simpler, we'll just `clone`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Time to update the `handle_client` function now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s update the `client` function now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is updating the `Client` struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The brand new `config` field seems logical, however what about `is_admin` and
    `waiting_password`? The first one will be used to be able to list/download/overwrite
    the `config.toml` file, whereas the second one will be used when the `USER` command
    has been used and the server is now expecting the user's password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add another method to our `Client` struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to update the `Config::new` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Ok, now here comes the huge update! But first, don''t forget to add the `Pass`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the `Command::new` match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to also update the `AsRef` implementation!
  prefs: []
  type: TYPE_NORMAL
- en: 'Good, we''re ready for the last (and very big) step. Let''s head to the `Client::handle_cmd`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'I told you it was huge! The main points in here are just the flow rework. The
    following commands only work when you''re logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Cwd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`List`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pasv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Port`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pwd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Retr`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Stor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CdUp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mkd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rmd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This command only works when you''re not *yet* logged in and the server is
    waiting for the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Pass`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the commands work in any case. We're almost done in here. Remember
    when I talked about the security? You wouldn't want anyone to have access to the
    configuration file with the list of all users, I suppose.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the config.toml access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This time, not much to do! We just need to add a check when a user wants to
    list, download, or overwrite the file. Which means that the three following commands
    have to be updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '`List`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Retr`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Stor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start with `List`. Before the first `add_file_info` function call, just
    wrap the `add_file_info` function call around this block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Before the second one, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s update the `retr` function. Take the following condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s update the `stor` function. Take the following condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: And we're done! You now have a configurable server that you can easily extend,
    following your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good software needs tests to ensure that it works in most cases. So, we will
    add tests to our FTP server by starting to write unit tests for the FTP `codec`.
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests verify only a unit of the program, which may be a function. They
    are different from the integration tests, which we will see later, that test the
    software as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go in the `codec` module and add a new inner module to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: We are again using the `#[cfg]` attribute; this time, it only compiles the following
    module when running the tests. This is to avoid adding useless code in the final
    binary.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this new module, we will add a few import statements that we will need later
    when writing the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we use `super` to access some types from the parent module
    (`codec`): this is very frequent for unit tests because we usually test the code
    from the same file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now add a `test` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In the `test_encoder()` function, we will write the code that will test that
    the `FtpCodec`, `Encoder` implementation works as intended.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first check that an `Answer` with a message produces the right output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we start by creating the objects needed to call `Encode::encode`, for
    example, a `codec` and a buffer. Then, we call `codec.encode()`, since it is the
    method we actually want to test. After that, we check if the result is `Ok` and
    we check that the buffer was filled accordingly. To do so, we use some macros:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assert!`: This checks if the value is `true`. If it is `false`, it will panic
    and make the test fail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assert_eq!`: This checks that both values are equal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This a quite simple and effective test, but it does not test every path of
    the function. So, let''s add more lines in this function to test the other possible
    path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we test with an empty message. The rest is basically the same: we create
    the necessary objects and use the assert macros. But this time, we added a new
    parameter to the assert macros; this is an optional message to show when the test
    fails.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the test with `cargo test`, we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This shows the test that was run and that it passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write a `test` function that fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run `cargo test`, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the message we specified (`Always fail`) is shown. We also see
    that `1` test failed.
  prefs: []
  type: TYPE_NORMAL
- en: Backtraces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the output, we can set the environment variable `RUST_BACKTRACE`
    to `1` in order to get more information about where the test failed. Let''s do
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The important part here is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This shows the file, function, and line where the code panicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'This variable is useful even outside of testing code: when debugging a problem
    with a code that panics, we can use this variable as well.'
  prefs: []
  type: TYPE_NORMAL
- en: Testing failures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, we want to test that a function will panic. To do so, we can simply
    add the `#[should_panic]` attribute at the top of the `test` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'When doing so, the `test` now passes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Ignoring tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, we have tests that take a lot of time, or we want to avoid running
    a specific test all the time. To avoid running a test by default, we can add the
    `#[ignore]` attribute above the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the `test`, we''ll see that the `test` function was not running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `test_dummy()` test function was ignored. To run it, we
    need to specify a command-line argument to the program running the tests (not
    to `cargo` itself):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** We specified `--` before `--ignored` to send the latter to the program
    running the tests (which is not `cargo`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'With that argument, we see that the test indeed runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'To end this section, let''s write a unit test for the decoder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we test that `None` is returned in the case when more input is needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'And here, we add the missing output to check that the command was parsed correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we test that parsing a command with an argument works. If we run `cargo
    test` again, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Integration tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we checked that a part of our code works: now, we
    will check that the program as a whole works, by writing integration tests. These
    tests reside in the `tests/` directory, so we start by creating it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'In this directory, we can create a new file, `tests/server.rs`, in which we''ll
    put the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We import the `ftp` crate which is an FTP client; it will be useful to test
    our FTP server. We need to add it in `Cargo.toml` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we see a new section, `dev-dependencies`: it contains the dependencies
    that are needed outside the main crate itself, like in the integration tests.
    By putting the dependency here and not in `[dependencies]`, it won''t be available
    in the main crate, which is what we want.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to the file `tests/server.rs` and add a `test` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Here, we don't need to put the code in an inner `tests` module because the integration
    tests are compiled separately. Since our crate is a binary, we need to run it
    with the `Command` object. We give the child process to a `ProcessController`
    that we will create later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: If our crate was a library, we would add an `extern crate` for it, and
    we would be able to call functions from it directly.'
  prefs: []
  type: TYPE_NORMAL
- en: We then call `thread::sleep()` to give some time for our server to start. After
    that, we use the `ftp` crate to connect to our server, and then we quit.
  prefs: []
  type: TYPE_NORMAL
- en: Teardown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Rust test framework, there''s no `setup()` and `teardown()` functions
    like there are in the test frameworks of many other languages. And here, we need
    to run some code when the test is done: we need to kill our FTP server. So, we
    need some kind of `teardown` function. We cannot simply say `child.kill()` at
    the end of the function because, if the test panics before that, the FTP server
    will continue running after the test ends. To make sure the cleanup code is always
    called, no matter how the function ended, we''ll have to use the `RAII` pattern
    that we discovered in [Chapter 6](part0143.html#48C0E0-13a27bdc411a4c2eaad1cc3a71f7fca7)*,
    Implementing the Engine of the Music Player*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write a simple `teardown` structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The structure contains the child process that will be killed in the destructor.
    So, if the test panics, this destructor will be called. It will also be called
    if the function ends normally.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll also create a constructor and the `utility` method that we used in the
    `test` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The function `is_running()` is used to ensure that the FTP server we launched
    is actually running; if another instance of the application is already running,
    our instance will not run. That's why we used an assert in the test function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to create a destructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re now ready to write the `test` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we issue some FTP commands and make sure the server state
    is correct by calling the `assert_eq!()` macro. When we run `cargo test`, we see
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: A new section is added for our integration test.
  prefs: []
  type: TYPE_NORMAL
- en: Print output to stdout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see what happens when we add a call to `println!()` in our test (for
    debug purposes, for instance):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'It will not be printed to the terminal. In order to see it, we need to pass
    another parameter to the test runner. Let''s run `cargo test` this way to see
    the output to `stdout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, we see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another very important aspect of a software is documentation. It is useful
    to describe how to use a project, giving some examples and detailing the complete
    public API: let''s see how we can document a crate in Rust.'
  prefs: []
  type: TYPE_NORMAL
- en: Documenting a crate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation is written in comments, but these doc-comments start with a special
    symbol. We use the token `///` to document the item following the comment, and
    `//!` to document the item from within this item. Let's start by seeing an example
    of the latter.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of our crate''s root (specifically, in the file `main.rs`), we''ll
    add the following comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use the `//!` form because we cannot write a comment before a crate;
    we can only write a comment from within the crate.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting a module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Documenting a module is very similar: we add a comment of the form `//!` at
    the top of a module''s file. Let''s add the following doc-comment in `codec.rs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The doc-comments are written in Markdown, so let's look at some Markdown formatting
    syntax. We can write headers by starting a line with a `#`. The more `#`'s, the
    smaller the title.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: I think you get it at this point!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of common headers:'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Panics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code we write in doc-comments must be inserted between two pairs of [PRE87]
    [PRE88]
  prefs: []
  type: TYPE_NORMAL
- en: /// Convert a sequence of bytes to uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: ///
  prefs: []
  type: TYPE_NORMAL
- en: '/// # Examples'
  prefs: []
  type: TYPE_NORMAL
- en: ///
  prefs: []
  type: TYPE_NORMAL
- en: /// [PRE89]
  prefs: []
  type: TYPE_NORMAL
- en: 'fn to_uppercase(data: &mut [u8]) {'
  prefs: []
  type: TYPE_NORMAL
- en: for byte in data {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if *byte >= 'a' as u8 && *byte <= 'z' as u8 {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*byte -= 32;'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: /// An FTP command parsed by the parser.
  prefs: []
  type: TYPE_NORMAL
- en: '#[derive(Clone, Debug, PartialEq)]'
  prefs: []
  type: TYPE_NORMAL
- en: pub enum Command {
  prefs: []
  type: TYPE_NORMAL
- en: Auth,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Change the working directory to the one specified as an argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cwd(PathBuf),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Get a list of files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: List(Option<PathBuf>),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Create a new directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Mkd(PathBuf),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// No operation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NoOp,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Specify the port to use for the data channel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Port(u16),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Enter passive mode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Pasv,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Print current directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Pwd,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Terminate the connection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Quit,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Retrieve a file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Retr(PathBuf),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Remove a directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Rmd(PathBuf),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Store a file on the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stor(PathBuf),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Syst,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Specify the transfert type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type(TransferType),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /// Go to the parent directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CdUp,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unknown(String),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: User(String),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: cargo doc
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'warning: missing documentation for crate'
  prefs: []
  type: TYPE_NORMAL
- en: --> src/main.rs:9:1
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '9   | / #![feature(proc_macro, conservative_impl_trait, generators)]'
  prefs: []
  type: TYPE_NORMAL
- en: '10  | | #![warn(missing_docs)]'
  prefs: []
  type: TYPE_NORMAL
- en: 11  | |
  prefs: []
  type: TYPE_NORMAL
- en: 12  | | extern crate bytes;
  prefs: []
  type: TYPE_NORMAL
- en: '...   |'
  prefs: []
  type: TYPE_NORMAL
- en: 528 | |     }
  prefs: []
  type: TYPE_NORMAL
- en: 529 | | }
  prefs: []
  type: TYPE_NORMAL
- en: '| |_^'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'note: lint level defined here'
  prefs: []
  type: TYPE_NORMAL
- en: --> src/main.rs:10:9
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '10  | #![warn(missing_docs)]'
  prefs: []
  type: TYPE_NORMAL
- en: '|         ^^^^^^^^^^^^'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '#[doc(hidden)]'
  prefs: []
  type: TYPE_NORMAL
- en: '#[derive(Clone, Copy, Debug, PartialEq)]'
  prefs: []
  type: TYPE_NORMAL
- en: pub enum TransferType {
  prefs: []
  type: TYPE_NORMAL
- en: Ascii,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Image,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unknown,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE95]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '/// # Some text'
  prefs: []
  type: TYPE_NORMAL
- en: ///
  prefs: []
  type: TYPE_NORMAL
- en: /// [PRE97]
  prefs: []
  type: TYPE_NORMAL
- en: ///
  prefs: []
  type: TYPE_NORMAL
- en: '/// # Why not C?'
  prefs: []
  type: TYPE_NORMAL
- en: ///
  prefs: []
  type: TYPE_NORMAL
- en: /// [PRE98]
  prefs: []
  type: TYPE_NORMAL
- en: ///
  prefs: []
  type: TYPE_NORMAL
- en: '/// # Or an unknown language?'
  prefs: []
  type: TYPE_NORMAL
- en: ///
  prefs: []
  type: TYPE_NORMAL
- en: /// [PRE99]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE101]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE103]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE105]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE107]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE109]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE111]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE113]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE115]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: /// [PRE117]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: let mut file = File::open("some-file.txt")?;
  prefs: []
  type: TYPE_NORMAL
- en: write!(file, "Hello world!")?;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: fn main() {
  prefs: []
  type: TYPE_NORMAL
- en: use std::fs::File;
  prefs: []
  type: TYPE_NORMAL
- en: use std::io::prelude::*;
  prefs: []
  type: TYPE_NORMAL
- en: fn foo() -> std::io::Result<()> {
  prefs: []
  type: TYPE_NORMAL
- en: let mut file = File::open("some-file.txt")?;
  prefs: []
  type: TYPE_NORMAL
- en: write!(file, "Hello world!")?;
  prefs: []
  type: TYPE_NORMAL
- en: Ok(())
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: cargo install cargo-fuzz
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: cargo fuzz init
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '#![no_main]'
  prefs: []
  type: TYPE_NORMAL
- en: '#[macro_use] extern crate libfuzzer_sys;'
  prefs: []
  type: TYPE_NORMAL
- en: mod error {
  prefs: []
  type: TYPE_NORMAL
- en: include!("../../src/error.rs");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: include!("../../src/cmd.rs");
  prefs: []
  type: TYPE_NORMAL
- en: 'fuzz_target!(|data: &[u8]| {'
  prefs: []
  type: TYPE_NORMAL
- en: let _ = Command::new(data.to_vec());
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: mod error {
  prefs: []
  type: TYPE_NORMAL
- en: include!("../../src/error.rs");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: include!("../../src/cmd.rs");
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'fuzz_target!(|data: &[u8]| {'
  prefs: []
  type: TYPE_NORMAL
- en: let _ = Command::new(data.to_vec());
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: cargo fuzz run fuzz_target_1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Fresh arbitrary v0.1.0
  prefs: []
  type: TYPE_NORMAL
- en: Fresh cc v1.0.3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fresh libfuzzer-sys v0.1.0 (https://github.com/rust-fuzz/libfuzzer-sys.git#737524f7)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Compiling ftp-server-fuzz v0.0.1 (file:///path/to/FTP-server-rs/fuzz)
  prefs: []
  type: TYPE_NORMAL
- en: Running `rustc --crate-name fuzz_target_1 fuzz/fuzz_targets/fuzz_target_1.rs
    --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=7eb012a2948092cc
    -C extra-filename=-7eb012a2948092cc --out-dir /path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps
    --target x86_64-unknown-linux-gnu -L dependency=/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps
    -L dependency=/path/to/FTP-server-rs/fuzz/target/debug/deps --extern libfuzzer_sys=/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/liblibfuzzer_sys-44f07aaa9fd00b00.rlib
    --cfg fuzzing -Cpasses=sancov -Cllvm-args=-sanitizer-coverage-level=3 -Zsanitizer=address
    -Cpanic=abort -L native=/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/build/libfuzzer-sys-b260d147c5e0139d/out`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finished dev [unoptimized + debuginfo] target(s) in 1.57 secs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fresh arbitrary v0.1.0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fresh cc v1.0.3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fresh libfuzzer-sys v0.1.0 (https://github.com/rust-fuzz/libfuzzer-sys.git#737524f7)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fresh ftp-server-fuzz v0.0.1 (file:///path/to/FTP-server-rs/fuzz)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Running `fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1 -artifact_prefix=/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/
    /path/to/FTP-server-rs/fuzz/corpus/fuzz_target_1`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'INFO: Seed: 1369551667'
  prefs: []
  type: TYPE_NORMAL
- en: 'INFO: Loaded 0 modules (0 guards):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Loading corpus dir: /path/to/FTP-server-rs/fuzz/corpus/fuzz_target_1'
  prefs: []
  type: TYPE_NORMAL
- en: 'INFO: -max_len is not provided, using 64'
  prefs: []
  type: TYPE_NORMAL
- en: 'INFO: A corpus is not provided, starting from an empty corpus'
  prefs: []
  type: TYPE_NORMAL
- en: '#0  READ units: 1'
  prefs: []
  type: TYPE_NORMAL
- en: '#1  INITED cov: 389 corp: 1/1b exec/s: 0 rss: 23Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#4  NEW    cov: 393 corp: 2/4b exec/s: 0 rss: 23Mb L: 3 MS: 3 ShuffleBytes-InsertByte-InsertByte-'
  prefs: []
  type: TYPE_NORMAL
- en: '#5  NEW    cov: 412 corp: 3/62b exec/s: 0 rss: 23Mb L: 58 MS: 4 ShuffleBytes-InsertByte-InsertByte-InsertRepeatedBytes-'
  prefs: []
  type: TYPE_NORMAL
- en: '#7  NEW    cov: 415 corp: 4/121b exec/s: 0 rss: 23Mb L: 59 MS: 1 InsertByte-'
  prefs: []
  type: TYPE_NORMAL
- en: '#21 NEW    cov: 416 corp: 5/181b exec/s: 0 rss: 23Mb L: 60 MS: 5 ChangeBit-InsertByte-ChangeBinInt-ChangeByte-InsertByte-'
  prefs: []
  type: TYPE_NORMAL
- en: '#707    NEW    cov: 446 corp: 6/241b exec/s: 0 rss: 23Mb L: 60 MS: 1 ChangeBit-'
  prefs: []
  type: TYPE_NORMAL
- en: '#710    NEW    cov: 447 corp: 7/295b exec/s: 0 rss: 23Mb L: 54 MS: 4 ChangeBit-InsertByte-EraseBytes-InsertByte-'
  prefs: []
  type: TYPE_NORMAL
- en: '#767    NEW    cov: 448 corp: 8/357b exec/s: 0 rss: 23Mb L: 62 MS: 1 CMP- DE:
    "\x01\x00"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#780    NEW    cov: 449 corp: 9/421b exec/s: 0 rss: 23Mb L: 64 MS: 4 CopyPart-InsertByte-ChangeByte-CrossOver-'
  prefs: []
  type: TYPE_NORMAL
- en: '#852    NEW    cov: 450 corp: 10/439b exec/s: 0 rss: 23Mb L: 18 MS: 1 CrossOver-'
  prefs: []
  type: TYPE_NORMAL
- en: '#1072   NEW    cov: 452 corp: 11/483b exec/s: 0 rss: 23Mb L: 44 MS: 1 InsertRepeatedBytes-'
  prefs: []
  type: TYPE_NORMAL
- en: '#85826  NEW    cov: 454 corp: 12/487b exec/s: 85826 rss: 41Mb L: 4 MS: 5 ChangeBit-InsertByte-InsertByte-EraseBytes-CMP-
    DE: "NOOP"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#92732  NEW    cov: 456 corp: 13/491b exec/s: 92732 rss: 43Mb L: 4 MS: 1 CMP-
    DE: "PASV"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#101858 NEW    cov: 477 corp: 14/495b exec/s: 50929 rss: 46Mb L: 4 MS: 2 ChangeByte-CMP-
    DE: "STOR"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#105338 NEW    cov: 497 corp: 15/499b exec/s: 52669 rss: 47Mb L: 4 MS: 2 ShuffleBytes-CMP-
    DE: "LIST"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#108617 NEW    cov: 499 corp: 16/503b exec/s: 54308 rss: 48Mb L: 4 MS: 1 CMP-
    DE: "AUTH"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#108867 NEW    cov: 501 corp: 17/507b exec/s: 54433 rss: 48Mb L: 4 MS: 1 CMP-
    DE: "QUIT"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#115442 NEW    cov: 503 corp: 18/511b exec/s: 57721 rss: 50Mb L: 4 MS: 1 CMP-
    DE: "SYST"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#115533 NEW    cov: 505 corp: 19/515b exec/s: 57766 rss: 50Mb L: 4 MS: 2 ChangeBinInt-CMP-
    DE: "CDUP"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#123001 NEW    cov: 513 corp: 20/518b exec/s: 61500 rss: 52Mb L: 3 MS: 5 PersAutoDict-EraseBytes-ChangeByte-ChangeBinInt-CMP-
    DE: "\x01\x00"-"RMD"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#127270 NEW    cov: 515 corp: 21/521b exec/s: 63635 rss: 54Mb L: 3 MS: 4 EraseBytes-ChangeByte-InsertByte-CMP-
    DE: "PWD"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#131072 pulse  cov: 515 corp: 21/521b exec/s: 65536 rss: 55Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#148469 NEW    cov: 527 corp: 22/525b exec/s: 49489 rss: 59Mb L: 4 MS: 3 ChangeBit-ChangeBit-CMP-
    DE: "USER"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#151237 NEW    cov: 528 corp: 23/529b exec/s: 50412 rss: 60Mb L: 4 MS: 1 CMP-
    DE: "TYPE"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#169842 NEW    cov: 536 corp: 24/532b exec/s: 56614 rss: 65Mb L: 3 MS: 1 ChangeByte-'
  prefs: []
  type: TYPE_NORMAL
- en: '#262144 pulse  cov: 536 corp: 24/532b exec/s: 52428 rss: 90Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#274258 NEW    cov: 544 corp: 25/535b exec/s: 54851 rss: 94Mb L: 3 MS: 2 ChangeBit-CMP-
    DE: "MKD"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#355992 NEW    cov: 566 corp: 26/539b exec/s: 50856 rss: 116Mb L: 4 MS: 1 InsertByte-'
  prefs: []
  type: TYPE_NORMAL
- en: '#356837 NEW    cov: 575 corp: 27/558b exec/s: 50976 rss: 116Mb L: 19 MS: 1
    InsertRepeatedBytes-'
  prefs: []
  type: TYPE_NORMAL
- en: '#361667 NEW    cov: 586 corp: 28/562b exec/s: 51666 rss: 117Mb L: 4 MS: 1 PersAutoDict-
    DE: "MKD"-'
  prefs: []
  type: TYPE_NORMAL
- en: 'thread ''<unnamed>'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', fuzz/fuzz_targets/../../src/cmd.rs:85:46'
  prefs: []
  type: TYPE_NORMAL
- en: 'note: Run with `RUST_BACKTRACE=1` for a backtrace.'
  prefs: []
  type: TYPE_NORMAL
- en: '==10969== ERROR: libFuzzer: deadly signal'
  prefs: []
  type: TYPE_NORMAL
- en: '#0 0x55e90764cf73  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x110f73)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#1 0x55e9076aa701  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x16e701)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#2 0x55e9076aa64b  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x16e64b)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#3 0x55e907683059  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x147059)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#4 0x7f4bda433d9f  (/usr/lib/libpthread.so.0+0x11d9f)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#5 0x7f4bd9e8789f  (/usr/lib/libc.so.6+0x3489f)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#6 0x7f4bd9e88f08  (/usr/lib/libc.so.6+0x35f08)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#7 0x55e9076c2b18  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x186b18)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NOTE: libFuzzer has rudimentary signal handlers.'
  prefs: []
  type: TYPE_NORMAL
- en: Combine libFuzzer with AddressSanitizer or similar for better crash reports.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'SUMMARY: libFuzzer: deadly signal'
  prefs: []
  type: TYPE_NORMAL
- en: 'MS: 2 CopyPart-InsertByte-; base unit: 6e9816a8e9d0388eecdb52866188c04e75e4b1b3'
  prefs: []
  type: TYPE_NORMAL
- en: 0x54,0x59,0x50,0x45,0x20,
  prefs: []
  type: TYPE_NORMAL
- en: TYPE
  prefs: []
  type: TYPE_NORMAL
- en: artifact_prefix='/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/'; Test
    unit written to /path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/crash-601e8dbb61bd6c7d63cff0bd3f749f7cb53922bc
  prefs: []
  type: TYPE_NORMAL
- en: 'Base64: VFlQRSA='
  prefs: []
  type: TYPE_NORMAL
- en: ==10969==LeakSanitizer has encountered a fatal error.
  prefs: []
  type: TYPE_NORMAL
- en: '==10969==HINT: For debugging, try setting environment variable LSAN_OPTIONS=verbosity=1:log_threads=1'
  prefs: []
  type: TYPE_NORMAL
- en: '==10969==HINT: LeakSanitizer does not work under ptrace (strace, gdb, etc)'
  prefs: []
  type: TYPE_NORMAL
- en: 'MS: 2 CopyPart-InsertByte-; base unit: 6e9816a8e9d0388eecdb52866188c04e75e4b1b3'
  prefs: []
  type: TYPE_NORMAL
- en: 0x54,0x59,0x50,0x45,0x20,
  prefs: []
  type: TYPE_NORMAL
- en: TYPE
  prefs: []
  type: TYPE_NORMAL
- en: artifact_prefix='/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/'; Test
    unit written to /path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/crash-601e8dbb61bd6c7d63cff0bd3f749f7cb53922bc
  prefs: []
  type: TYPE_NORMAL
- en: 'Base64: VFlQRSA='
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'thread ''<unnamed>'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', fuzz/fuzz_targets/../../src/cmd.rs:85:46'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: match TransferType::from(data?[0]) {
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: impl Command {
  prefs: []
  type: TYPE_NORMAL
- en: 'pub fn new(input: Vec<u8>) -> Result<Self> {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: let command =
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: match command.as_slice() {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: // …
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: b"TYPE" => {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: let error = Err("command not implemented for that
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: parameter".into());
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: let data = data?;
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if data.is_empty() {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return error;
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: match TransferType::from(data[0]) {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: TransferType::Unknown => return error,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: typ => {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Command::Type(typ)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: // …
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '};'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Ok(command)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'INFO: Seed: 81554194'
  prefs: []
  type: TYPE_NORMAL
- en: 'INFO: Loaded 0 modules (0 guards):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Loading corpus dir: /home/bouanto/Ordinateur/Programmation/Rust/Projets/FTP-server-rs/fuzz/corpus/fuzz_target_1'
  prefs: []
  type: TYPE_NORMAL
- en: 'INFO: -max_len is not provided, using 64'
  prefs: []
  type: TYPE_NORMAL
- en: '#0  READ units: 27'
  prefs: []
  type: TYPE_NORMAL
- en: '#27 INITED cov: 595 corp: 23/330b exec/s: 0 rss: 28Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#21494  NEW    cov: 602 corp: 24/349b exec/s: 0 rss: 28Mb L: 19 MS: 2 ShuffleBytes-CMP-
    DE: "STOR"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#21504  NEW    cov: 606 corp: 25/354b exec/s: 0 rss: 28Mb L: 5 MS: 2 InsertByte-PersAutoDict-
    DE: "STOR"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#24893  NEW    cov: 616 corp: 26/359b exec/s: 0 rss: 29Mb L: 5 MS: 1 CMP- DE:
    "TYPE"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#25619  NEW    cov: 620 corp: 27/365b exec/s: 0 rss: 29Mb L: 6 MS: 2 PersAutoDict-InsertByte-
    DE: "TYPE"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#25620  NEW    cov: 621 corp: 28/379b exec/s: 0 rss: 29Mb L: 14 MS: 3 PersAutoDict-InsertByte-CMP-
    DE: "TYPE"-"\x00\x00\x00\x00\x00\x00\x00\x00"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#32193  NEW    cov: 628 corp: 29/398b exec/s: 0 rss: 31Mb L: 19 MS: 1 CMP-
    DE: "CWD"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#34108  NEW    cov: 662 corp: 30/417b exec/s: 0 rss: 31Mb L: 19 MS: 1 CMP-
    DE: "USER"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#35745  NEW    cov: 666 corp: 31/421b exec/s: 0 rss: 31Mb L: 4 MS: 3 ShuffleBytes-EraseBytes-PersAutoDict-
    DE: "CWD"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#36518  NEW    cov: 673 corp: 32/426b exec/s: 0 rss: 32Mb L: 5 MS: 1 PersAutoDict-
    DE: "USER"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#36634  NEW    cov: 685 corp: 33/433b exec/s: 0 rss: 32Mb L: 7 MS: 2 CMP-CMP-
    DE: "\xff\xff"-"RETR"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#37172  NEW    cov: 688 corp: 34/437b exec/s: 0 rss: 32Mb L: 4 MS: 5 EraseBytes-ChangeBinInt-InsertByte-ChangeBit-CMP-
    DE: "RETR"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#39248  NEW    cov: 692 corp: 35/442b exec/s: 0 rss: 32Mb L: 5 MS: 1 PersAutoDict-
    DE: "RETR"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#65735  NEW    cov: 699 corp: 36/492b exec/s: 65735 rss: 39Mb L: 50 MS: 3 InsertRepeatedBytes-ChangeBit-CMP-
    DE: "LIST"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#69797  NEW    cov: 703 corp: 37/497b exec/s: 69797 rss: 40Mb L: 5 MS: 5 ChangeByte-CopyPart-CopyPart-EraseBytes-PersAutoDict-
    DE: "LIST"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#131072 pulse  cov: 703 corp: 37/497b exec/s: 65536 rss: 55Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#217284 NEW    cov: 707 corp: 38/511b exec/s: 54321 rss: 75Mb L: 14 MS: 2 CMP-ShuffleBytes-
    DE: "LIST"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#219879 NEW    cov: 708 corp: 39/525b exec/s: 54969 rss: 76Mb L: 14 MS: 2 ChangeByte-ChangeBit-'
  prefs: []
  type: TYPE_NORMAL
- en: '#262144 pulse  cov: 708 corp: 39/525b exec/s: 52428 rss: 86Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#524288 pulse  cov: 708 corp: 39/525b exec/s: 52428 rss: 148Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#1048576    pulse  cov: 708 corp: 39/525b exec/s: 52428 rss: 273Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#2097152    pulse  cov: 708 corp: 39/525b exec/s: 51150 rss: 522Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#4194304    pulse  cov: 708 corp: 39/525b exec/s: 50533 rss: 569Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#8388608    pulse  cov: 708 corp: 39/525b exec/s: 50533 rss: 569Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#12628080   NEW    cov: 835 corp: 40/530b exec/s: 50311 rss: 570Mb L: 5 MS:
    3 ChangeBit-ChangeBinInt-ShuffleBytes-'
  prefs: []
  type: TYPE_NORMAL
- en: '#12628883   NEW    cov: 859 corp: 41/540b exec/s: 50314 rss: 570Mb L: 10 MS:
    1 CopyPart-'
  prefs: []
  type: TYPE_NORMAL
- en: '#12628893   NEW    cov: 867 corp: 42/604b exec/s: 50314 rss: 570Mb L: 64 MS:
    1 CrossOver-'
  prefs: []
  type: TYPE_NORMAL
- en: '#12643279   NEW    cov: 868 corp: 43/608b exec/s: 50371 rss: 570Mb L: 4 MS:
    2 EraseBytes-EraseBytes-'
  prefs: []
  type: TYPE_NORMAL
- en: '#12670956   NEW    cov: 871 corp: 44/652b exec/s: 50281 rss: 570Mb L: 44 MS:
    4 EraseBytes-InsertByte-ChangeBinInt-ChangeBinInt-'
  prefs: []
  type: TYPE_NORMAL
- en: '#12671130   NEW    cov: 872 corp: 45/697b exec/s: 50282 rss: 570Mb L: 45 MS:
    3 ChangeBit-CMP-InsertByte- DE: "\xff\xff\xff\xff"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#12671140   NEW    cov: 873 corp: 46/750b exec/s: 50282 rss: 570Mb L: 53 MS:
    3 ChangeBinInt-CMP-CopyPart- DE: "\x00\x00\x00\x00\x00\x00\x00\x00"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#12671906   NEW    cov: 874 corp: 47/803b exec/s: 50285 rss: 570Mb L: 53 MS:
    4 ChangeBit-ChangeByte-PersAutoDict-ShuffleBytes- DE: "CWD"-'
  prefs: []
  type: TYPE_NORMAL
- en: '#12687428   NEW    cov: 875 corp: 48/856b exec/s: 50346 rss: 574Mb L: 53 MS:
    1 ShuffleBytes-'
  prefs: []
  type: TYPE_NORMAL
- en: '#12699014   NEW    cov: 945 corp: 49/862b exec/s: 50392 rss: 574Mb L: 6 MS:
    2 InsertByte-ChangeBit-'
  prefs: []
  type: TYPE_NORMAL
- en: '#13319888   NEW    cov: 946 corp: 50/869b exec/s: 50074 rss: 579Mb L: 7 MS:
    1 InsertByte-'
  prefs: []
  type: TYPE_NORMAL
- en: '#13424473   NEW    cov: 1015 corp: 51/878b exec/s: 50091 rss: 580Mb L: 9 MS:
    1 CopyPart-'
  prefs: []
  type: TYPE_NORMAL
- en: '#13432333   NEW    cov: 1018 corp: 52/888b exec/s: 50120 rss: 580Mb L: 10 MS:
    1 CopyPart-'
  prefs: []
  type: TYPE_NORMAL
- en: '#13651748   NEW    cov: 1019 corp: 53/901b exec/s: 50006 rss: 582Mb L: 13 MS:
    1 CopyPart-'
  prefs: []
  type: TYPE_NORMAL
- en: '#13652268   NEW    cov: 1020 corp: 54/920b exec/s: 50008 rss: 582Mb L: 19 MS:
    1 CopyPart-'
  prefs: []
  type: TYPE_NORMAL
- en: '#13652535   NEW    cov: 1025 corp: 55/978b exec/s: 50009 rss: 582Mb L: 58 MS:
    3 InsertRepeatedBytes-ChangeBit-InsertByte-'
  prefs: []
  type: TYPE_NORMAL
- en: '#13662779   NEW    cov: 1028 corp: 56/997b exec/s: 50046 rss: 582Mb L: 19 MS:
    2 ChangeBit-ShuffleBytes-'
  prefs: []
  type: TYPE_NORMAL
- en: '#16777216   pulse  cov: 1028 corp: 56/997b exec/s: 48913 rss: 589Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#33554432   pulse  cov: 1028 corp: 56/997b exec/s: 46154 rss: 589Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#67108864   pulse  cov: 1028 corp: 56/997b exec/s: 45343 rss: 589Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#134217728  pulse  cov: 1028 corp: 56/997b exec/s: 44325 rss: 589Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '#268435456  pulse  cov: 1028 corp: 56/997b exec/s: 43819 rss: 589Mb'
  prefs: []
  type: TYPE_NORMAL
- en: '^C==16792== libFuzzer: run interrupted; exiting'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: So, we ran the fuzzer for a very long time and it didn't find a panic, so we
    ended it with *Ctrl* + *C*. We cannot be certain that there's no bug left, but
    we are more confident thanks to all these tests.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we finalized our FTP server. Then, we learned how to do different
    types of tests. We saw how we can test a single function or type by writing unit
    tests. We learned how to test a program as a whole by writing integration tests.
    We also learned about documentation and fuzzing tests to make sure our examples
    are up to date and to find even more bugs in our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and ultimate chapter, we will learn about Rust's good practice and
    common idioms.
  prefs: []
  type: TYPE_NORMAL
