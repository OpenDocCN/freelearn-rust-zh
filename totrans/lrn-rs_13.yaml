- en: The Standard Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all programming languages, Rust comes with a rich library to make the
    life of the developer that much simpler by providing frequently-used functionality
    without having to recode the same thing time and again. We have already encountered
    part of the standard library in this book, and I have no doubt that you will have
    seen any number of instances of it in other code examples.
  prefs: []
  type: TYPE_NORMAL
- en: Over the next two chapters, we will be looking at what the library provides
    and how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be dealing with the standard crate (`std::`).
  prefs: []
  type: TYPE_NORMAL
- en: Chapter format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike the other chapters in this book, due to the sheer size of the library
    this chapter will be slightly different. It will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Trait name*'
  prefs: []
  type: TYPE_NORMAL
- en: '*What it does / provides*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Notes*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Traits / Structs and Enums provided*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Download example*'
  prefs: []
  type: TYPE_NORMAL
- en: Due to Rust also having two main variants (stable and unstable), I won't be
    covering anything that is currently classed as unstable within the library; there
    is no guarantee that it will remain in the library or will remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: What is the standard library?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The standard library contains the core functionality for Rust. It is split
    into four parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The standard modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primitive types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Macros
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prelude
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The standard modules (overview)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard modules implement the likes of string handling, IO, network, and
    operating system calls. There are around 60 of these modules in total. Some are
    self-contained while others provide implementations for traits and structs.
  prefs: []
  type: TYPE_NORMAL
- en: The module names may give rise to some confusion as they share the same name
    with a primitive type (such as `i32`).
  prefs: []
  type: TYPE_NORMAL
- en: Primitive types (overview)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Primitive types are those types that are provided for us. In other languages,
    they would be the likes of `int`, `float`, and `char`. In Rust, we have `i32`,
    `d32`, and `i8` (respectively). Rust provides the developer with 19 primitives,
    some of which will provide additional implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Macros (overview)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Macros play a significant role in Rust application development; they have been
    designed to provide a number of very convenient shortcuts to avoid the pain of
    having to implement common functionality (such as `println!(...)` and `format!(...)`).
    Rust provides 30 macros.
  prefs: []
  type: TYPE_NORMAL
- en: Prelude
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Prelude is very useful. You may have wondered why many of the examples in this
    book use standard modules, but you rarely see `use std::` at the top of source
    files. The reason is that Rust auto-injects the prelude module into every source
    file, which provides the source file with a number of core modules. It inserts
    the following in no particular order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`std::marker::{Copy, Send, Sized, Sync}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::ops::{Drop, Fn, FnMut, FnOnce}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::mem::drop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::boxed::Box`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::borrow::ToOwned`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::clone::Clone`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::cmp::{PartialEq, PartialOrd, Eq, Ord }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::convert::{AsRef, AsMut, Into, From}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::default::Default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::iter::{Iterator, Extend, IntoIterator, DoubleEndedIterator, ExactSizeIterator}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::option::Option::{self, Some, None}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::result::Result::{self, Ok, Err}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::slice::SliceConcatExt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::string::{String, ToString}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::vec::Vec`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It inserts into each crate `extern crate std;` and into each module `use std::prelude::v1::*;`.
    This is all that is needed for prelude - it is that simple! Each module, though,
    will be dealt with in turn.
  prefs: []
  type: TYPE_NORMAL
- en: The standard modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the overviews done, let's look at the standard modules.
  prefs: []
  type: TYPE_NORMAL
- en: std::Any
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module enables the dynamic casting of `'static` via runtime reflection.
  prefs: []
  type: TYPE_NORMAL
- en: It can be used to obtain a `TypeId`. When used as a borrowed trait reference
    (`&Any`), it can be used to determine whether the value is a given type (using `Is`)
    and also to get a reference to the inner value as a type (using `downcast_ref`). `&mut
    Any` will allow access to `downcast_mut`, which obtains the mutable reference
    to the inner value. `&Any` can only be used for testing a specific type and cannot
    be used to test whether a type implements a trait.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**'
  prefs: []
  type: TYPE_NORMAL
- en: '`TypeId`: `TypeId` is an opaque object that cannot be examined, but does allow
    for clone, compare, print, and show. Only available for types that use `''static`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implement**'
  prefs: []
  type: TYPE_NORMAL
- en: '`of<T>() -> TypeId where T:’static + Reflect + ?Sized`: This returns the `TypeId`
    of the type `T` the function was instantiated with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**'
  prefs: []
  type: TYPE_NORMAL
- en: '`pub trait Any: ''static + Reflect {fn get_type_id(&self) -> TypeId;}`: Emulates
    dynamic typing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait methods**'
  prefs: []
  type: TYPE_NORMAL
- en: '`impl Any + ''static`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is<T>(&self) -> bool where T:Any`: Returns `true` if the boxed type is the
    same as `T`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downcast_ref<T>(&self) -> Option<&T> where T:Any`: Returns `ref` to the boxed
    value whether it is of type `T` or `None`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downcast_mut<T>(&mut self) -> Option<&mut T> where T:Any`: As for `downcast_ref` but
    returns a mutable `ref` or `None`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Any + ''static + Send`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is<T>(&self) -> bool where T:Any`: Sends to the method defined on the type `Any`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downcast_ref<T>(&self) -> Option<&T> where T:Any`: Sends to the method defined
    on the type `Any`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downcast_mut<T>(&mut self) -> Option<&mut T> where T:Any`: Sends to the method
    defined on the type `Any`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait implementations**'
  prefs: []
  type: TYPE_NORMAL
- en: '`impl Debug for Any + ‘static`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Format the value using
    the formatter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Debug for Any + ‘static + Send`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Sends to the method defined
    on the `Debug` method'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: std::ascii
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module performs operations on ASCII strings.
  prefs: []
  type: TYPE_NORMAL
- en: The `AsciiExt` trait contains a number of useful string slice utilities for
    testing, as well as conversion to upper and lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**'
  prefs: []
  type: TYPE_NORMAL
- en: '`pub struct EscapeDefault`: Iterates over the escaped version of a byte'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl` iterator for `EscapeDefault`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type Item = u8`: Type of the elements iterated over'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl` iterator for `EscapeDefault` functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next(&mut self) -> Option<u8>`: Advances the iterator and return the next
    value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size_hint(&self) -> (usize, Option<usize>)`: Returns the bounds on the remaining
    length of the iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count(self) -> usize`: Returns the number of iterations'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last(self) -> Option<Self::Item>`: Returns the last element'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nth(&mut self, n:usize) -> Option<Self::Item>`: Returns the next element after
    the n^(th) position'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chain<U>(self, other:U) -> Chain<Self, U::IntoIterator> where U: IntoIterator<Item=Self::Item>`:
    Takes two iterators and creates a new one over both in sequence'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zip<U>(self, other: U) -> Zip<Self, U:IntoIterator> where U:IntoIterator`:
    Takes two iterators and makes them into a single pair iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`map<T,U>(self, u: U) -> Map<Self, U> where U:FnMut(Self::Item) -> T`: Creates
    an iterator from a closure that calls that closure on each element'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter<F>(self, predicate: F) -> Filter<Self, F> where F: FnMut(&Self::Item)
    -> bool`: Creates an iterator that uses a closure to determine whether an element
    should be returned'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enumerate(self) -> Enumerate<Self>`: Gives the current iteration count and
    the next value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`peekable(self) -> Peekable<Self>`: Peeks at the next value without the iterator
    consuming it'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_while<P>(self, predicate:P) -> SkipWhile<Self, P> where P:FnMut(&Self::Item)
    -> bool`: Creates an iterator that skips *n* elements based on the predicate.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`take_while<P>(self, predicate:P) -> TakeWhile<Self, P> where P:FnMut(&Self::Item)
    -> bool`: Creates an iterator that yields elements based on the predicate.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip(self, n: usize) -> Skip<Self>`: Skips the first *n* elements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`take(self, n: usize) -> Take<Self>`: The iterator that yields the first *n*
    elements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scan<S, T, U>(self, interal_state: S, u: U) -> Scan<Self, S, U> where U:FnMut(&mut
    S, Self::Item)-> Option<T>`: The iterator adapter that holds an internal state
    and produces a new iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flat_map<T, U>(self, u:U) -> Flat_Map<Self, T, U> where U:FnMut(Self::Item)
    -> T, T:IntoIterator`: Creates an iterator that works like a map, but produces
    a flattened, nested structure'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fuse(self)->Fuse(Self)`: Iterator that terminates after the first instance
    of `None`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inspect<T>(self, t: T)->Insepect<Self, T> where T: FnMut(&self::Item)->()`:
    Does something with each iterated element and passes the value on.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`by_ref(&mut self) -> &mut Self`: Borrows rather than consumes the iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collect<T>(self) -> T where T:FromIterator(Self::Item)`: Makes a collection
    from an iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`partition<T, U>(self, u:U) -> (T,T) where T:Default + Extend<Self::Item>,
    U:FnMut(&Self::Item> -> bool`: Takes the iterator and creates two collections
    from it'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fold<T, U>(self, init:T, u:U)->T where U:FnMut(T, Self::Item) -> T`: The iterator
    adapter that applies a function to produce a single final result'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all<T>(&mut self, t:T) -> bool where T:FnMut(Self::Item) -> bool`: Tests whether
    all elements of the iterator match the predicate `T`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`any<T>(&mut self, t:T) -> bool where T:FnMut(Self::Item) -> bool`: Tests whether
    any elements of the iterator match the predicate `T`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find<T>(&mut self, predicate:T) -> Option<Self::Item> where T: FnMut(&Self::Item)
    -> bool`: Searches the iterator for a match to the predicate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`position<T>(&mut self, predicate:T) -> Option<usize> where T:FnMut(Self::Item)
    -> bool`: Searches the iterator for a match to the predicate and return the index'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rposition<T>(&mut self, predicate:T) -> Option<usize> where T:FnMut(Self::Item)
    -> bool, Self:ExtractSizeIterator + doubleEndedIterator`: As for position, except
    it searches from the right'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max(self_ => Option<Self::Item>`: Returns the max element of the iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min(self_ => Option<Self::Item>`: Returns the min element of the iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rev(self) -> Rev<Self> where Self:DoubleEndedIterator`: Reverses the direction
    of the iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unzip<T, U, FromT, FromU>(self) -> (FromT, FromU) -> Where FromT: Default
    + Extend<T>, FromU: Default + Extend<U>, Self::Iterator<Item=(T,U)>`: Performs
    the reverse of ZIP (two collections from a single iterator)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloned<''a, Y>(self) -> Cloned<Self> where Self:Iterator<Item = &''a T>, T:
    ''a + Clone`: Creates an iterator that clones all of its elements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cycle(self) -> Cycle<Self> where Self:Clone`: Repeats the iterator endlessly'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sum<T>(self) -> T where Y:Add<Self::Item, Output=T> + Zero`: Returns the sum
    of the iterator elements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Product<T>(self) -> T where T: Mul<Self::Item, Output = T> + One`: Multiplies
    the elements of the iterator and returns the value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl DoubleEndedIterator for EscapeDefault`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next_back(&mut self) -> Option<u8>`: Iterator able to yield a result from
    both ends'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl ExactSizeIterator for EscapeDefault`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Len(&self) -> usize`: Returns the number of times the iterator will iterate.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are extension methods for ASCII subset operations on string slices:'
  prefs: []
  type: TYPE_NORMAL
- en: Associated type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Owned:` Container for copied ASCII characters.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Required methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_ascii(&self) -> bool`: Whether value is an ASCII value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_ascii_uppercase(&self) -> Self::Owned`: Makes a copy of the string in ASCII
    uppercase'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_ascii_lowercase(&self) -> Self::Owned`: As for uppercase, but in lowercase'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eq_ignore_ascii_case(&self, other: &Self) -> bool`: Are two strings the same
    ignoring the case'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: std::borrow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for working with borrowed data.
  prefs: []
  type: TYPE_NORMAL
- en: enum `Cow` (clone-on-write smarter pointer)
  prefs: []
  type: TYPE_NORMAL
- en: The `Cow` allows for immutable access to borrowed data (and can enclose this
    data) and permits cloning lazily when mutation or ownership is required. It is
    designed to work using the `Borrow` trait. It also implements `Deref`, which will
    allow access to non-mutating methods on the data `Cow` has enclosed. `to_mut`
    will provide a mutable reference to the owned value.
  prefs: []
  type: TYPE_NORMAL
- en: '`Trait std::borrow::Borrow`: Data can be borrowed in a number of different
    ways: shared borrowing (`T` and `&T`), mutable borrowing (`&mut T`), and borrowed
    slices from the likes of `Vec<T> (&[T]`, and `&mut[T])`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Borrow` trait provides a convenient method to abstract over the given
    type. For example: `T: Borrow<U>` means that `&U` is borrowed from `&T`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`fn borrow(&self) -> &Borrowed`: Immutably borrows from an owned value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Trait std::borrow::BorrowMut`: Used for mutably borrowing data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn borrow_mut(&mut self) -> &mut Borrowed`: Mutably borrows from an owned
    value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Trait std::borrow:ToOwned`: A generalization of `Clone` for borrowing data.
    `Clone` only works when going from `&T` to `T`. `ToOwned` generalizes `Clone`
    to construct owned data from any borrow of a given type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn to_owned(&self) -> Self::Owned`: Creates owned data from borrowed data'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: std::boxed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for heap allocation.
  prefs: []
  type: TYPE_NORMAL
- en: A very simple way to allocate memory on the heap, provide ownership, and drop
    when out of scope.
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<T> Box<T>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn new(x:T) -> Box<T>`: Allocates memory on the heap and places `x` into it'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl <T> Box<T> where T: ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unsafe fn from_raw(raw: *mut T) -> Box<T>`: Constructs a box from a raw pointer.
    After creation, the pointer is owned by the new `Box`. It is unsafe for this very
    reason; the `Box` destructor will call the destructor of `T` and free the allocated
    memory. This may lead to double freeing that will cause a crash.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn into_raw(b: Box<T> -> *mut T`: Consumes the box and returns the wrapped
    raw pointer.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Box<Any + ''static>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn downcast<T>(self) -> Result<Box<T>, Box<Any + ''static>> where T:Any`:
    Attempts to downcast the box to a concrete type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Box<Any + ''static + Send>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn downcast<T>(self) -> Result<Box<T>, Box<Any + ‘static + Send>> where T:Any`: Attempts
    to downcast the box to a concrete type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: Trait Implementations
  prefs: []
  type: TYPE_NORMAL
- en: '`Impl <T> Default for Box<T> where T:Default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn default() -> Box<T>`: Returns the default value for the type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Default for Box<[T]>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn default() -> Box<T>`: Returns the default value for the type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Clone for Box<T> where T:Clone`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone(&self) -> Box<T>`: Returns a new box with a clone of the box''s contents'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone_from(&mut self, source: &Box<T>)`: Copies *sources* contents into
    self without creating a new allocation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Clone for Box<str>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone(&self) -> Box<str>`: Returns a copy of the value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone_from(&mut self, source: &Self)`: Performs a copy-assignment from
    *source*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> PartialEq<Box<T>> for Box<T> where T:PartialEq<T> + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn eq(&self, other: &Box<T>) -> bool`: Test self and other to be equal. Used
    by `==`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ne(&self, other: &Box<T>) ->`: Tests for inequality. Used by `!=`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> PartialOrd<Box<T>> for Box<T> where T:PartialOrd<T> + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn partial_cmp(&self, other: &Box<T>) -> Option<Ordering>`: Returns an ordering
    between self and other values if it exists'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn lt(&self, other: &Box<T>) -> bool`: Tests whether self is less than other.
    Used by `<`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn le(&self, other: &Box<T>) -> bool`: Tests whether self is less than or
    equal to other. Used by `<=`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ge(&self, other: &Box<T>) -> bool`: Tests whether self is greater than
    or equal to other. Used by `>=`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn gt(&self, other: &Box<T>) -> bool`: Tests whether self is greater than
    other. Used by `>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl <T> Ord for Box<T> where T:Ord + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cmp(&self, other: &Box<T>) -> Ordering`: Returns an ordering between self
    and other'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl <T> Hash for Box<T> where T: Hash + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn hash<H>(&self, state: &mut H) where H: Hasher`: Feeds the value into the
    state and updates the hasher if required'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn hash_slice<H>(data: &[Self], state &mut H) where H: Hasher`: Feeds the
    slice of this type into the state'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> From<T> for Box<T>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn from(t: T) -> Box<T>`: Performs a conversion'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Display for Box<T> where T: Display + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Debug for Box<T> where T:Debug + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Pointer for Box<T> where T: ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Deref for Box<T> where T: ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn deref(&self) -> &T`: Dereference a value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> DerefMut for Box<T> where T: ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn deref_mut(&mut self) -> &mut T`: Mutably dereference a value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<I> Iterator for Box<I> where I: Iterator + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn next(&mut self) -> Option<I::Item>`: Advances the iterator and returns
    the next value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn size_hint(&self) -> (usize, Option<usize>)`: Returns the bounds on the
    remaining length of the iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn count(self) -> usize`: Returns the number of iterations'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn last(self) -> Option<Self::Item>`: Returns the last element'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn nth(&mut self, n: usize) -> Option<Self::Item>`: Consumes *n* elements
    of the iterator and returns the next one after that'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn chain<U>(self, other: U) -> Chain<Self, U::Iterator> where U: IntoIterator
    <Item=Self::Item>`: Takes two iterators and creates a new one over both in sequence'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter> where U: IntoIter`: Zips
    two iterators into a single pair'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn map<B, F>(self, f: F) -> Map<Self, F> where F: FnMut(Self::Item) -> B`:
    Takes a closure and creates an iterator that calls that closure on each element'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn filter<P>(self, predicate: P) -> Filter<Self, P> where P: FnMut(&Self::Item)
    -> bool`: Creates an iterator that uses a closure to see if an element should
    be yielded'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> where F: FnMut(Self::Item)
    -> Option<B<`: Creates an iterator that filters and maps'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn enumerate(self) -> Enumerate<Self>`: Creates an iterator that gives the
    current iteration count and the next value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn peekable(self) -> Peekable<Self>`: Creates an iterator to peek at the next
    element of the iterator without consuming'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn skip_while<P>(self, predicate: P)-> SkipWhile<Self, P> where P: FnMut(&Self::Item)
    -> bool`: Creates an iterator that skips elements based on the predicate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn skip(self, n: usize) -> Skip<Self>`: Creates an iterator that skips the
    first *n* elements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn take(self, n:usize) -> Take<Self>`: Creates an iterator that yields the
    first *n* elements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn take_while<P>(self, predicate: P) -> TakeWhile<Self. P> where P:FnMut(&Self::Item)
    -> bool`: Creates an iterator that yields elements based on the predicate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn scan<St, B, F>(self, init_state: St, f : F) -> Scan<Self, St, F> where
    F: FnMut(&mut St, Self::Item) -> Option<B>`: An iterator adaptor similar to `fold()`
    that holds the internal state and produces a new iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn flat_map<U, F>(self f: F) -> FlatMap<Self, U, F> where F: FnMut(Self::Item)
    -> U, U:IntoIterator`: Creates a flattened nested structure. Works like map.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fuse(self) -> Fuse<Self>`: Creates an iterator that ends after the first
    instance of `None`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn inspect<F>(self, f: F) -> Inspect<Self, F> where F:FnMut(&Self::Item) ->
    ()`: Does something with each element and passes the value on'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn by_ref(&mut self) -> &mut Self`: Borrow the iterator. Doesn’t consume it.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn collect<B>(self) -> B where B: FromIterator <Self::Item>`: Changes the
    iterator to a collection'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn partition<B, F>(self, f: F) -> (B, B) where B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool`: Consumes an iterator, creating two collections
    from it'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fold<B, F>(self, init: B, f: F) -> B where F: FnMut(B, Self::Item) -> B`:
    An iterator adaptor that applies a function, producing a single, final value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn all<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool`: Tests
    if every element of the iterator matches a predicate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn any<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool`: Tests
    if any element of the iterator matches a predicate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn find<P>(&mut self, predicate: P) -> Option<Self::Item> where P: FnMut(&Self::Item)
    -> bool`: Searches for an element of an iterator that satisfies a predicate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn position<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item)
    -> bool`: Searches for an element in an iterator, returning its index'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn rposition<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item)
    -> bool, Self: ExactSizeIterator + DoubleEndedIterator`: Searches for an element
    in an iterator from the right, returning its index'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn max(self) -> Option<Self::Item> where Self::Item: Ord`: Returns the maximum
    element of an iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn min(self) -> Option<Self::Item> where Self::Item: Ord`: Returns the minimum
    element of an iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn max_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item)
    -> B`: Returns the element that gives the maximum value from the specified function'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn min_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item)
    -> B`: Returns the element that gives the minimum value from the specified function'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn rev(self) -> Rev<Self> where Self: DoubleEndedIterator`: Reverses an iterator''s
    direction'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn unzip <A, B, FromA, FromB> (self) -> (FromA, FromB) where FromA: Default
    + Extend<A>, FromB: Default + Extend<B>, Self: Iterator<Item=(A, B)>`: Converts
    an iterator of pairs into a pair of containers'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cloned<''a, T>(self) -> Cloned<Self> where Self: Iterator<Item=&''a T>,
    T: ''a + Clone`: Creates an iterator that clones all of its elements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cycle(self) -> Cycle<Self> where Self: Clone`: Repeats an iterator endlessly'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn sum<S>(self) -> S where S: Sum<Self::Item>`: Sums the elements of an iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn product<P>(self) -> P where P: Product<Self::Item>`: Iterates over the
    entire iterator, multiplying all the elements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cmp<I>(self, other: I) -> Ordering where I: IntoIterator <Item=Self::Item>,
    Self::Item: Ord`: Compares the elements of this Iterator with those of another'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn partial_cmp<I>(self, other: I) -> Option<Ordering> where I: IntoIterator,
    Self::Item: PartialOrd<I::Item>`: Compares the elements of this Iterator with
    those of another'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn eq<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<I::Item>`:
    Determines if the elements of this Iterator are equal to those of another'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ne<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<I::Item>`:
    Determines if the elements of this `Iterator` are unequal to those of another'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn lt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    Determines if the elements of this Iterator are less than those of another'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn le<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    Determines if the elements of this Iterator are less than or equal to those of
    another'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn gt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    Determines if the elements of this Iterator are greater than those of another'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ge<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    Determines if the elements of this Iterator are greater than or equal to those
    of another'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<I> DoubleEndedIterator for Box<I> where I: DoubleEndedIterator + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn next_back(&mut self) -> Option<I::Item>`: Removes and returns an element
    from the end of the iterator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl <T> ExactSizeIterator for Box<I> where I: ExactSizeIterator + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn len(&self) -> usize`: Returns the exact number of times the iterator will
    iterate.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Clone for Box<[T]> where T:Clone`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone(&self) -> Box<[T]>`: Returns a copy of the value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone_from(&mut self, source: &Self)`: Performs copy-assignment from source'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Borrow<T> for Box<T> where T:?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn borrow(&self) -> &T`: Immutably borrows from an owned value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> BorrowMut<T> for Box<T> where T:?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn borrow_mut(&mut self) -> &mut T`: Mutably borrows from an owned value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> AsRef<T> for Box<T> where T:?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn as_ref(&self) -> &T`: Performs the conversion'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> AsMut for Box<T> where T:?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn as_mut(&mut self) -> &mut T`: Performs the conversion'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<’a, E: Error + ‘a> From<E> from Box<Error + ‘a>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn from(err: E) -> Box<Error + ''a>`: Performs the conversion'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl From<String> for Box<Error + Send + Sync>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn from(err: String) -> Box<Error + Send + Sync>`: Performs the conversion'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl From<’a, ‘b> From<&’b str> for Box<Error + Send + Sync + ‘a>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn from(err: &''b str) -> Box<Error + Send + Sync + ''a>`: Performs the conversion'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T: Error> Error for Box<T>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn description(&self) -> &str`: Short description of the error'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cause(&self) -> Option<&Error>`: Lower-level cause of this error, if any'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<R: Read + ?Sized> Read for Box<R>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read(&mut self, buf: &mut [u8]) -> Result<usize>`: Pulls some bytes from
    this source into the specified buffer, returning how many bytes were read'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize>`: Reads all
    bytes until EOF in this source, placing them into `buf`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_to_string(&mut self, buf: &mut String) -> Result<usize>`: Reads all
    bytes until EOF in this source, placing them into `buf`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_exact(&mut self, buf: &mut [u8]) -> Result<()>`: Reads the exact number
    of bytes required to fill `buf`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn by_ref(&mut self) -> &mut Self where Self: Sized`: Creates a *by reference* adaptor
    for this instance of `Read`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn bytes(self) -> Bytes<Self> where Self: Sized`: Transforms this `Read` instance
    to an Iterator over its bytes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn chain<R: Read>(self, next: R) -> Chain<Self, R> where Self: Sized`: Creates
    an adaptor that will chain this stream with another'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn take(self, limit: u64) -> Take<Self> where Self: Sized`: Creates an adaptor
    that will read at most limit bytes from it'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl <W: Write + ?Sized> Write for Box<W>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn write(&mut self, buf: &[u8]) -> Result<usize>`: Writes a buffer into this
    object, returning how many bytes were written'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn flush(&mut self) -> Result<()>`: Flushes this output stream, ensuring that
    all intermediately buffered contents reach their destination'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn write_all(&mut self, buf: &[u8]) -> Result<()>`: Attempts to write an entire
    buffer into this write'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn write_fmt(&mut self, fmt: Arguments) -> Result<()>`: Writes a formatted
    string into this writer, returning any error encountered'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn by_ref(&mut self) -> &mut Self where Self: Sized`: Creates a *by reference* adaptor
    for this instance of `Write`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<S: Seek + ?Sized> Seek for Box<S>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn seek(&mut self, pos: SeekFrom) -> Result<u64>`: Seeks to an offset, in
    bytes, in a stream'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<B: BufRead + ?Sized> BufRead for Box<B>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fill_buf(&mut self) -> Result<&[u8]>`: Fills the internal buffer of this
    object, returning the buffer contents'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn consume(&mut self, amt: usize)`: Tells this buffer that amt bytes have
    been consumed from the buffer, so they should no longer be returned in calls to
    be read'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> Result<usize>`: Reads
    all bytes into `buf` until the delimiter byte is reached'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_line(&mut self, buf: &mut String) -> Result<usize>`: Reads all bytes
    until a newline (the 0 x A byte) is reached, and appends them to the provided
    buffer'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn split(self, byte: u8) -> Split<Self> where Self: Sized`: Returns an iterator
    over the contents of this reader split on the byte byte'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn lines(self) -> Lines<Self> where Self: Sized`: Returns an iterator over
    the lines of this reader'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: std::cell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Used in conjunction with shared mutable containers:'
  prefs: []
  type: TYPE_NORMAL
- en: For details on using `Cells`, `RefCell`, and both interior and external references,
    see [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  prefs: []
  type: TYPE_NORMAL
- en: '`Std::cell::BorrowError`: Returned by `RefCell::try_borrow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Display for BorrowError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Debug for BorrowError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Error for BorrowError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn description(&self) -> &str`: A short description of the error'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cause(&self) -> Option<&Error>`: The lower-level cause of this error, if
    any'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::cell::BorrowMutError`: Returned by `RefCell::try_borrow_mut`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Display for BorrowMutError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Debug for BorrowMutError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Error for BorrowMutError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn description(&self) -> &str`: A short description of the error'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cause(&self) -> Option<&Error>`: The lower-level cause of this error, if
    any'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::cell::Cell`: A mutable memory location that admits only `Copy` data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Methods**'
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<T> Cell<T> where T: Copy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn new(value: T) -> Cell<T>`: Creates a new Cell containing the given value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn get(&self) -> T`: Returns a copy of the contained value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn set(&self, value: T)`: Sets the contained value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn as_ptr(&self) -> *mut T`: Returns a raw pointer to the underlying data
    in this cell'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn get_mut(&mut self) -> &mut T`: Returns a mutable reference to the underlying
    data'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**'
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<T> PartialEq<Cell<T>> for Cell<T> where T: Copy + PartialEq<T>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn eq(&self, other: &Cell<T>) -> bool`: Tests for self and other values being
    equal, and is used by `==`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ne(&self, other: &Rhs) -> bool`: Tests for `!=`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Default for Cell<T> where T: Copy + Default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn default() -> Cell<T>`: Creates a `Cell<T>`, with the `Default` value for
    `T`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Clone for Cell<T> where T: Copy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone(&self) -> Cell<T>`: Returns a copy of the value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone_from(&mut self, source: &Self)`: Performs copy-assignment from source'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> From<T> for Cell<T> where T: Copy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn from(t: T) -> Cell<T>`: Performs the conversion'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Ord for Cell<T> where T: Copy + Ord`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cmp(&self, other: &Cell<T>) -> Ordering`: This method returns an `Ordering`
    between self and other'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Debug for Cell<T> where T: Copy + Debug`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> PartialOrd<Cell<T>> for Cell<T> where T: Copy + PartialOrd<T>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn partial_cmp(&self, other: &Cell<T>) -> Option<Ordering>`: This method returns
    an ordering between self and other values if one exists'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn lt(&self, other: &Cell<T>) -> bool`: This method tests less than (for self
    and other) and is used by the `<` operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn le(&self, other: &Cell<T>) -> bool`: This method tests less than or equal
    to (for self and other) and is used by the `<=` operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn gt(&self, other: &Cell<T>) -> bool`: This method tests greater than (for
    self and other) and is used by the `>` operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ge(&self, other: &Cell<T>) -> bool`: This method tests greater than or
    equal to (for self and other) and is used by the `>=` operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Std::cell::Ref`: Wraps a borrowed reference to a value in a `RefCell` box'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Methods**'
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<''b, T> Ref<''b, T> where T: ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone(orig: &Ref<''b, T>) -> Ref<''b, T>`: Copies a `Ref`. The `RefCell`
    is already immutably borrowed, so this cannot fail.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn map<U, F>(orig: Ref<''b, T>, f: F) -> Ref<''b, U>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`where F: FnOnce(&T) -> &U, U: ?Sized`: Makes a new `Ref` for a component of
    the borrowed data. The `RefCell` is already immutably borrowed, so this cannot
    fail.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Trait implementation**'
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<''b, T> Debug for Ref<''b, T> where T: Debug + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<''b, T> Deref for Ref<''b, T> where T: ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn deref(&self) -> &T`: The method is called to dereference a value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Std::cell::RefCell`: A mutable memory location with dynamically checked borrow
    rules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Methods**'
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<T> RefCell<T>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn new(value: T) -> RefCell<T>`: Creates a new `RefCell` containing a value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn into_inner(self) -> T`: Consumes the `RefCell`, returning the wrapped value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> RefCell<T> where T: ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn borrow(&self) -> Ref<T>`: Immutably borrows the wrapped value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows
    can be taken out at the same time. Throws a panic if the value is currently mutably
    borrowed.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`fn try_borrow(&self) -> Result<Ref<T>, BorrowError>`: Immutably borrows the
    wrapped value, returning an error if the value is currently mutably borrowed.
    The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows
    can be taken out at the same time.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn borrow_mut(&self) -> RefMut<T>`: Mutably borrows the wrapped value. The
    borrow lasts until the returned `RefMut` exits scope. The value cannot be borrowed
    while this borrow is active (throws a panic).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn try_borrow_mut(&self) -> Result<RefMut<T>, BorrowMutError>`: Mutably borrows
    the wrapped value, returning an error if the value is currently borrowed. The
    borrow lasts until the returned `RefMut` exits scope. The value cannot be borrowed
    while this borrow is active.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn as_ptr(&self) -> *mut T`:  Returns a raw pointer to the underlying data
    in this cell.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn get_mut(&mut self) -> &mut T`: Returns a mutable reference to the underlying
    data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait implementations**'
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<T> PartialEq<RefCell<T>> for RefCell<T> where T: PartialEq<T> + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn eq(&self, other: &RefCell<T>) -> bool`: Tests for self and other values
    being equal, and is used by `==`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ne(&self, other: &Rhs) -> bool`: Tests for `!=`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Default for RefCell<T> where T: Default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn default() -> RefCell<T>`: Creates a `RefCell<T>`, with the `Default` value
    for `T`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Clone for RefCell<T> where T: Clone`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone(&self) -> RefCell<T>`: Returns a copy of the value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone_from(&mut self, source: &Self)`: Performs copy-assignment from source'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> From<T> for RefCell<T>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn from(t: T) -> RefCell<T>`: Performs the conversion'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Ord for RefCell<T> where T: Ord + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cmp(&self, other: &RefCell<T>) -> Ordering`: Returns an `Ordering` between
    self and other'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Debug for RefCell<T> where T: Debug + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> PartialOrd<RefCell<T>> for RefCell<T> where T: PartialOrd<T> + ?Sized`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn partial_cmp(&self, other: &RefCell<T>) -> Option<Ordering>`: Returns an
    ordering between self and other values if one exists'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn lt(&self, other: &RefCell<T>) -> bool`: Tests less than (for self and other)
    and is used by the `<` operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn le(&self, other: &RefCell<T>) -> bool`: Tests less than or equal to (for
    self and other) and is used by the `<=` operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn gt(&self, other: &RefCell<T>) -> bool`: Tests greater than (for self and
    other) and is used by the `>` operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ge(&self, other: &RefCell<T>) -> bool`: Tests greater than or equal to
    (for self and other) and is used by the `>=` operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The code examples are in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  prefs: []
  type: TYPE_NORMAL
- en: std::char
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for the Structs, Traits, and Enum character types.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `DecodeUtf16`, `DecodeUtf16Error`, `EscapeDefault`, `EscapeUnicode`, `ToLowercase`,
    and `ToUpperCase`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constants**: `Max` and `Replacement_Character`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `decode_utf16`, `from_digit`, `from_u32`, and `from_u32_unchecked`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::clone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is for use with types that cannot be implicitly copied.
  prefs: []
  type: TYPE_NORMAL
- en: More complex types (such as strings) are not implicitly copyable. These types
    have to be made explicitly copyable using the `Clone` trait and clonable using
    the `clone` method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Trait `Clone`.'
  prefs: []
  type: TYPE_NORMAL
- en: std::cmp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides the ability to order and compare data.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines both `PartialOrd` (overloads `<`. `<=`, `>`, and `>=`) and `PartialEq` traits
    (overloads `==` and `!=`) .
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Enum `Ordering`, traits `Eq` (equality comparisons), `Ord` (total
    order), `PartialEq` (partial equality relations), `PartialOrd` (values that can
    be compared for a sort-order) .'
  prefs: []
  type: TYPE_NORMAL
- en: std::collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This covers the vectors, maps, sets, and binary heaps.
  prefs: []
  type: TYPE_NORMAL
- en: There are four main categories of collection, but for the majority of the time `Vec` and `HashMap` should
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: The collection types are
  prefs: []
  type: TYPE_NORMAL
- en: Sequences (`Vec`, `VecDeque`, `LinkedList` - if you're used to C#, these provide
    the functionality of `List<T>`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maps (`HashMap`, `BTreeMap`. For C# users, these equate roughly to `Dictionary<T,
    U>`, and `Map`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets (`HashSet`, `BTreeSet`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BinaryHeap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which collection should be used depends on what you want to do. Each will have
    a performance impact depending on what you're doing, though usually it's only `HashMap` that
    will give a negative impact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Vec`: Creates a collection of type `T` that can be resized; elements can be
    added to the end'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VecDeque`: Creates a collection of type `T`, but with elements insertable
    at both ends; needs a queue or double-ended queue (deque)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LinkedList`: Used when you want a `Vec` or `VecDeque`, and to split and append
    lists'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HashMap`: Creates a cached association of keys with values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BTreeMap: Use with key-pair values where in general you want the largest and
    smallest key-pair values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BinaryHeap: Stores elements, but only processes the biggest or most important
    ones when you want them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these collections deals with its own memory handling. This is important
    as collections are able to allocate more space as required (and within the limitations
    of the hardware capacity of the machine they are running on).
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following: I create a `Vec<T>` without setting a capacity. Let `T` be
    a structure. This is not an uncommon occurrence. I add a number of objects to
    the `Vec`, and each is then allocated on the heap. The heap expands, which is
    fine. I then delete a number of these objects. Rust then *repositions* the other
    members of the heap belonging to the `Vec`.'
  prefs: []
  type: TYPE_NORMAL
- en: If I allocated space using `with_capacity`, then we have a maximum allocation
    available, which further helps with memory handling. We can help memory allocation
    further by using `shrink_to_fit`, which reduces the size of our `Vec` to fit the
    size required.
  prefs: []
  type: TYPE_NORMAL
- en: '**Iterators**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Iterators are very useful and used in libraries. Primarily, an iterator is
    used in a for loop. Almost all collections provide three iterators: `iter`, `iter_mut`,
    and `into_iter`. Each of the iterator types performs a different function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iter`: This provides an iterator of immutable references to all contents of
    the collection in the order that best suits the collection type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iter_mut`: This provides an iterator of mutable references in the same order
    as `iter`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`into_iter`: This transforms the collection into an iterator. Very useful when
    the collection isn''t needed, but its contents are. The `into_iter` iterator also
    includes the ability to extend a vector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structs**: `BTreeMap`, `BTreeSet`, `BinaryHeap`, `HashMap`, `HashSet`, `LinkedList`,
    and `VecDeque`.'
  prefs: []
  type: TYPE_NORMAL
- en: std::convert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for the conversion between types.
  prefs: []
  type: TYPE_NORMAL
- en: When writing a library, implement `From<T>` and `TryFrom<T>` instead of `Into<T>` and `TryInto<T>` as
    the `From` forms provide greater flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: '**Implementations**: `As*` (reference-to-reference conversions), `Into` (consume
    the value in the conversion), `From` (useful for value and reference conversion), `TryFrom`,
    and `TryInto` (similar to `From` and `Into`, allows for failure)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Traits `AsMut`, `AsRef`, `From`, and `Into`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::default
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This trait provides meaningful values for types.
  prefs: []
  type: TYPE_NORMAL
- en: Default provides default values for various primitive types. If a complex type
    is used, you will need to implement `Default`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Trait `Default`.'
  prefs: []
  type: TYPE_NORMAL
- en: std:env
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for dealing with process environment.
  prefs: []
  type: TYPE_NORMAL
- en: Provides a number of functions to obtain values from the current operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enum**: `VarError` (possible errors from the `env::var` method)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structs**: `Args` (yields a `String` for each argument), `ArgOs` (yields
    an `OsString` for each argument), `JoinPathsError` (returns an error when the
    paths fail to join), `SplitPaths` (iterates over `PathBuf` for parsing an environment
    variable to platform-specific conventions), `Vars`, and `VarsOS` (iterates over
    a snapshot of the environment variables for a process)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std:error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for working with errors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Trait `Error` (base functionality for all errors)'
  prefs: []
  type: TYPE_NORMAL
- en: std::f32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used to deal with 32-bit floating point types.
  prefs: []
  type: TYPE_NORMAL
- en: This module provides basic math constants: `Digits`, `Epsilon`, `Infinity`, `Mantissa_Digits`, `Max` (largest
    finite `f32` value), `Max_10_Exp`, `Max_Exp`, `Min` (smallest finite `f32` value), `Min_10_Exp`, `Min_Exp`, `Min_Positive` (smallest
    possible normalized `f32` value), `NAN`, `Neg_Infinity`, and `Radix`.
  prefs: []
  type: TYPE_NORMAL
- en: std::f64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used to deal with 64-bit floating point types.
  prefs: []
  type: TYPE_NORMAL
- en: This module provides basic math constants: `Digits`, `Epsilon`, `Infinity`, `Mantissa_Digits`, `Max` (largest
    finite `f64` value), `Max_10_Exp`, `Max_Exp`, `Min` (smallest finite `f64` value), `Min_10_Exp`, `Min_Exp`, `Min_Positive` (smallest
    possible normalized `f64` value), `NAN`, `Neg_Infinity`, and `Radix`.
  prefs: []
  type: TYPE_NORMAL
- en: std:ffi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FFI is Rust's method of interacting with non-Rust libraries. This trait provides
    a number of utilities for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Structs `CStr`, `CString` (representation of
    a borrowed C string and an owned C-compatible string respectively), `FromBytesWithNullError` (error
    returned from `CStr::from_bytes_with_nul`), `IntoStringError` (error returned
    from `CString::into_string` to indicate a UTF8 error during a conversion), `NulError` (returns
    an error from `CString::new` indicating a null byte was found in the provided
    vector), `OsStr`, and `OsString` (slices into OS strings).'
  prefs: []
  type: TYPE_NORMAL
- en: std::fmt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for formatting and outputting strings.
  prefs: []
  type: TYPE_NORMAL
- en: This module provides the `format!` macro for dealing with output. The macro
    is extremely powerful and very flexible, and provides a great deal of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Arguments` (represents a safely precompiled version of a format
    string and arguments), `DebugList`, `DebugMap`, `DebugSet`, `DebugStruct`, `DebugTuple` (helps
    with `fmt::Debug` implementations), `Error` (an error type returned from formatting
    a message into a stream), and `Formatter` (represents both where to emit formatting
    strings and how to format them).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `Binary`, `Debug`, `Display`, `LowerExp`, `LowerHex`, `Octal`, `Pointer`, `UpperExp`, `UpperHex`,
    and `Write` (provides collection of methods that are required to format a message
    into a stream).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `format` (takes a precompiled format string with arguments and
    returns a formatted string) and  `write` (takes an output stream, a precompiled
    format string and list of arguments. The arguments will be formatted according
    to the specified format string).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::fs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used when using the filesystem and manipulating files.
  prefs: []
  type: TYPE_NORMAL
- en: This module provides a set of cross-platform methods to manipulate the filesystem
    the application is sitting on. If at all possible, avoid using the `remove_dir_all` function.
  prefs: []
  type: TYPE_NORMAL
- en: Structs, Traits, and Enums
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `DirBuilder` (used to create directories), `DirEntry` (returned
    by the `ReadDir` iterator), File (opens a file on the filesystem), `FileType` (represents
    a type of file with accessors to each file type), `Metadata` (information about
    the file), `OpenOptions` (options and flags used to configure how a file is opened), `Permissions` (file
    permissions on a file), and `ReadDir` (an iterator over the entries in a directory).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `canonicalize` (returns the canonical form of a path), `copy` (copies
    files), `create_dir`, `create_dir_all` (recursively creates a directory and all
    parent components if missing), `hard_link` (creates a hard link on the file system), `metadata` (gets
    the metadata for a given path and file), `read_dir` (returns an iterator over
    the entries within a directory), `read_link` (reads a symbolic link returning
    the file it points to), `remove_dir` (removes an empty directory), `remove_dir_all` (removes
    a directory on a path recursively—on some operating systems this can completely
    delete your hard drive, so be careful!), `remove_file` (deletes a file), `rename` (renames
    a given file or directory), `set_permissions` (sets permissions on a given file
    or directory), and `symlink_metadata` (queries the metadata for a file without
    following any symlinks).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::hash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used to provide hashing support.
  prefs: []
  type: TYPE_NORMAL
- en: This module ensures that the easiest way to create a hash for a given type is
    to use `#[derive(Hash)]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `BuildHasherDefault` (implements `BuildHasher` for all Hasher
    types that also implement `Default`) and `SipHasher` (implementation of `SipHash`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `BuildHasher`, `Hash`, and `Hasher`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::i8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the 8-bit integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::i16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the 16-bit integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::i32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the 32-bit integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::i64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for working with the 64-bit integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides a number of facilities for core input/output.
  prefs: []
  type: TYPE_NORMAL
- en: This module provides code `Read` and `Write` functionality for not only normal
    control, but also for various stream types (such as TCP and File). Access can
    be sequential or random. IO behavior also depends on the platform the application
    sits on, so testing is highly encouraged.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `BufReader` (adds buffering to any reader), `BufWriter` (buffers
    the writer output), `Bytes` (an iterator of values of a reader), `Chain` (chains
    two readers), `Cursor` (wraps another type and provides the Seek implementation), `Empty` (reader
    that is always at EOF), `Error` (error type for IO operations), `IntoInnerError` (error
    returned by `into_inner` that combines the error and buffered writer object, which
    may be recovered), `LineWriter` (wraps a writer and buffers into it), `Lines` (iterates
    over the lines of `BufRead`), `Repeat` (reader that continually returns a byte), `Sink` (writer
    that moves data to null), `Split` (an iterator over the contents of `BufRead` split
    at a point), `Stderr` (a handle for the process standard error stream), `StdErrLock` (locked
    ref. to `Stderr`), `Stdin` (standard input stream), `StdinLock` (locked ref. to `Stdin`), `Stdout` (global
    output stream), `StdoutLock` (locked ref. to `Stdout`), and `Take` (limits the
    bytes read from the reader).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enums**: `ErrorKind` and `SeekFrom`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `BufRead` (buffered input read), `Read` (reads bytes from source), `Seek` (provides
    cursor that can be moved within the stream), and `Write`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `copy` (copies contents of reader to writer), `empty` (new handle
    to an empty reader), `repeat` (creates an instance of reader that repeats 1 byte
    forever), `sink` (an instance of the writer that consumes all data), `stderr`
    (a new handle to `stderr`), `stdin` (a new handle to `stdin`), and `stdout` (a
    new handle to `stdout`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::isize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is for use with the pointer-sized integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::iter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Chain` (strings two iterators together), `Cloned` (clones the
    underlying iterator), `Cycle` (never-ending iterator), `Empty` (yields nothing), `Enumerate` (yields
    the current count and element while iterating), `Filter` (filters the elements
    of `iter` with predicate), `FilterMap` (iterator that uses a type for both filter
    and map from `iter`), `FlatMap` (maps each element to the iterator, yields the
    elements produced), `Fuse` (yields `None` continually once the underlying iterator
    first iterates `None`), `Inspect` (calls a function with a reference to each element
    before yielding it), `Map` (maps the values of `iter` with a type), `Once` (yields
    an element once), `Peekable` (allows `peek()` to be used), `Repeat` (repeats an
    element forever), `Rev` (double ended iterator with the read direction reversed), `Scan` (maintains
    state while iterating another iterator), `Skip` (skips *n* elements of `iter`), `SkipWhile` (rejects
    elements while predicate is true), `Take` (only iterates over the first *n* of `iter`), `TakeWhile` (only
    accepts elements to iterate over while the predicate is true), and `Zip` (iterates
    two iterators simultaneously).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `DoubleEndedIterator` (yields the elements at both ends), `ExactSizeIterator` (exact
    length known), `Extend` (extends a collection with the contents of an iterator), `FromIterator` (converts
    from `Iterator`), `ToIterator` (converts into `Iterator`), and `Iterator` (interface
    for dealing with iterators).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `empty` (new iterator that yields nothing), `once` (new iterator
    that yields an element once), and `repeat` (new iterator that continually repeats
    a single element).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::marker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides primitive traits and markers to represent basic kinds of
    type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Struct**: `PhantomData` (allows the description of type `T`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `Copy` (types that can be copied), `Send` (types that can be transferred
    across threads), `Sized` (types with a constant size), and `Sync` (types that
    can be safely shared between threads).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::mem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module performs memory handling functions.
  prefs: []
  type: TYPE_NORMAL
- en: This module is used to query size and alignment types, initialization, and the
    manipulation of memory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions**: `align_of` (returns alignment in memory of type), `align_of_val` (minimum
    alignment of type of value `val` points to), `drop` (disposes), `forget` (leaves
    a value to void, takes ownership but doesn''t run the destructor), `replace` (replaces
    the value at a `mut` location with a new one, returns the old value but doesn''t
    de-initialize or copy either one), `size_of` (returns size of type in bytes), `size_of_val` (returns
    the size of a value in bytes), `swap` (swaps the values of two mut locations;
    must be of the same type), `transmute` (unsafely transforms a value of one type
    into another), `transmute_copy` (interprets `src` as `&T`, then reads `src` without
    moving the contained value), `uninitialized` (bypasses Rust''s memory initialization
    requirement), and `zeroed` (creates a value initialized to zero).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std:net
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides basic TCP/UDP communication primitives.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `AddrParseError` (error returned when parsing an IP or socket
    address), `Incoming` (infinite iterator over connections from `TcpListener`), `Ipv4Addr` (represents
    an IPv4 address), `Ipv6Addr` (represents an IPv6 address), `SocketAddrV4` (IPv4
    socket address), `SocketAddrV6` (IPv6 socket address), `TcpListener` (represents
    a socket server), `TcpStream` (represents a TCP stream between the local and remote
    sockets), and `UdpSocket` (UDP socket).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enums**: `IpAddr` (either an IPv4 or IPv6 address), `Shutdown` (values passed
    to the shutdown method of `TcpStream`), and `SocketAddr` (socket address for networking
    applications).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait**: `ToSocketAddrs` (object that can be converted to or resolved from
    one or more `SocketAddr` values).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::num
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for dealing with numbers.
  prefs: []
  type: TYPE_NORMAL
- en: This module provides extra types that are useful for dealing with numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums **'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `ParseFloatError` (error returned when parsing a `float`), `ParseIntError` (error
    returned when parsing an `int`), and `Wrapping` (intentionally-wrapped arithmetic
    on `T`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enum**: `FpCategory` (classification of floating point numbers).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::os
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module contains functions that provide abstracted access to the OS the
    application is running on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This module contains three modules: `linux` (Linux-specific), `raw` (raw OS-specific
    types for current platform), and `unix` (experimental extension).'
  prefs: []
  type: TYPE_NORMAL
- en: std::panic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides support for panic within the standard library.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `AssertUnwindSafe` (checks whether a type is panic-safe), `Location` (information
    about the panic location), and `PanicInfo` (information about the panic).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `RefUnwindSafe` (trait that represents types where the shared ref
    is considered `recovery` safe) and `UnwindSafe` (trait that represents panic-safe
    types in Rust).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `catch_unwind` (invokes a closure, captures the cause of the
    unwind), `resume_unwind` (triggers a panic without invoking the panic), `set_hook` (registers
    a custom panic hook and replaces previous hooks), and `take_hook` (unregisters
    a current panic hook).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides abstracted access to the path in a cross-platform way for
    manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: Two types are provided, `PathBuf` and `Path`. These are wrappers around `OsString` and `OsStr` and
    allow direct work to be performed on strings according to the local platform path.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Components` (core iterator giving the parts of a path), `Display` (for
    safely printing paths with `format!()` and `{}`), `Iter` (iterator over the parts
    of a path), `Path` (slice of a path), `PathBuf` (owned mutable path), `PrefixComponent` (Windows-specific
    path prefix), and `StripPrefixError` (error returned from the `Path::strip_prefix` method
    indicating the prefix was not found in self).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enums**: `Component` (single component of a path) and `Prefix` (path prefix
    [Windows only]).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function**: `is_separator` (determines whether the character is one of the
    permitted path separators).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for working with processes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Child` (represents a running or exited child process), `ChildStderr` (handle
    to a child process stderr), `ChildStdin` (handle child process stdin), `ChildStdout` (handle
    for child process stdout), `Command` (acts as a process builder), `ExitStatus` (describes
    the result of a process after it is terminated), `Output` (output of finished
    process), and `Stdio` (describes what to do with the standard IO stream for a
    child process).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function**: `exit` (terminates current process with exit code).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::ptr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides access for handling raw, unsafe pointers.
  prefs: []
  type: TYPE_NORMAL
- en: See [Chapter 5](part0106.html#352RK0-a5175cb437d742a9aed0ea574000ee2d), *Remember,
    Remember*, for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions**: `copy` (copies `count * size_of<T>` from `src` to `dest`; can
    overlap), `copy_nonoverlapping` (same as `copy`, except cannot overlap), `drop_in_place` (executes
    destructor of the pointed-to value), `null` (new null raw pointer), `null_mut` (new
    null mutable raw pointer), `read` (reads value from `src` without moving it), `read_volatile` (volatile
    read of the value from `src` without moving it), `replace` (replaces value at `dest` with `src`,
    returning the old value), `swap` (swaps the values at two mutable locations of
    the same type), `write` (overwrites the memory location with the value without
    reading or dropping the old value), `write_bytes` (invokes `memset` on the specified
    pointer), and `write_volatile` (performs a volatile write of a memory location
    with a given value).'
  prefs: []
  type: TYPE_NORMAL
- en: std::slice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides a dynamically-sized placement into a contiguous `[T]`.
  prefs: []
  type: TYPE_NORMAL
- en: Slices are mutable (`&mut [T]`) or shared slices (`&[T]`) of memory represented
    as a pointer. They implement `IntoIter`, which duplicates the type `IntoIter` is
    being performed on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Chunks` (iterates over a non-overlapping slice in chunks of `size_of<T>` elements
    at a time), `ChunksMut` (as for `Chunks` except are mutable), `Iter` (immutable
    iterator), `IterMut` (mutable iterator), `RSplitN` and `RSplitNMut` (iterate over
    sub-slices that match a predicate, limited to a given number of splits, and start
    from the end of the slice). `Split` and `SplitMut` (iterator over sub-slice separated
    by elements that match a predicate function or predicate respectively), and `SplitN` and `SplitNMut` (iterate
    over sub-slices that match predicate function), and `Windows` (iterates over overlapping
    sub-slice of length `size_of<T>`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `from_raw_parts` (forms a slice from a pointer and length) and `from_raw_parts_mut` (as `from_raw_parts` except
    the slice returned is mutable).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::str
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for Unicode string slices.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Bytes` (iterator for a strings bytes), `CharIndices` (iterator
    for a string''s characters and byte offsets), `Chars` (iterator for the char of
    a string), `EncodeUtf16` (external iterator for a string''s UTF16 code), `Lines` (created
    with `lines()`), `MatchIndices` (created with `match_indices()`), `Matches` (created
    with `matches()`), `ParseBoolError` (error returned when passing a `bool` from
    a string fail), `RMatchIndicies` (created with `rmatch_indicies()`), `RMatches` (created
    with `rmatches()`), `RSplit` (created with `rsplit()`), `RSplitN` (created with `rsplitn()`), `RSplitTerminator` (created
    with `rsplit_terminator()`), `Split` (created with `split()`), `SplitN` (created
    with `splitn()`), `SplitTerminator` (created with `split_terminator()`), `SplitWhitespace` (iterates
    over the non-whitespace substrings of a string), and `Utf8Error` (error that can
    occur when attempting to interpret a sequence of `u8` as a string)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait**: `FromStr` (abstracts the idea of creating a new instance of a type
    from a string)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `from_utf8` (converts a slice of bytes to a string slice) and `from_utf8_unchecked` (as
    with `from_utf8` without checking the string contains valid UTF8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides string handling with a UTF-8 encoded growable string.
  prefs: []
  type: TYPE_NORMAL
- en: Contains the String type and a trait to convert to a String (`ToString`) as
    well as error types.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Drain` (draining iterator), `FromUtf16Error` (possible error
    value when converting from a UTF16 slice), and `FromUtf8Error` (as for `FromUtf16Error` except
    for UTF8), and `String` (UTF8-encoded growing string).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enum**: `ParseError`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait**: `ToString` (converts a value to a string).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::sync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides thread synchronization functions.
  prefs: []
  type: TYPE_NORMAL
- en: This is covered in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Arc` (atomic ref counted wrapper), `Barrier` (enables multiple
    threads to synchronize the beginning of some computation), `BarrierWaitResult` (result
    from a thread wait), `Condvar` (CONDitional VARiable), `Mutex` (mutual exclusion
    primitive), `MutexGuard` (scoped lock mutex; becomes unlocked when the structure
    goes out of scope), `Once` (sync primitive used to run a one-time global initialization), `PoisonError` (error
    that can be returned when a lock is required), `RwLock` (read/write lock), `RWLockReadGuard` (used
    to release shared read access to a lock when dropped), `RWWriteGuard` (used to
    release shared write access if a lock when dropped), `WaitTimeoutResult` (type
    used to determine whether a condition variable timed out or not), and `Weak` (weak
    pointer to `Arc`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enum**: `TryLockError` (errors that may occur when calling `try_lock`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the code examples in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  prefs: []
  type: TYPE_NORMAL
- en: std::thread
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the main threading module, providing native threads to your Rust application.
  prefs: []
  type: TYPE_NORMAL
- en: Threading is covered in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Builder` (provides detailed control over new threads), `JoinHandle` (owned
    permission to join on a thread), `LocalKey` (key to local storage that owns the
    contents), and `Thread` (handle to thread).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `current` (get handle to the thread invocation), `panicking` (if
    the thread is unwinding due to a panic), `park` (blocks unless or until the token
    is available), `park_timeout` (blocks for a duration), and `sleep` (puts the current
    thread to sleep for a duration), `spawn` (spawns a new thread, returns a `JoinHandle`),
    and `yield_now` (gives up a timeslice to the OS scheduler).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the code examples in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  prefs: []
  type: TYPE_NORMAL
- en: std::time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a module for handling time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Duration` (represents a span of time), `Instant` (measurement
    of a monotonically increasing clock), `SystemTime` (measures the system clock),
    and `SystemTimeError` (error returned from `SystemTime.duration_since()`).'
  prefs: []
  type: TYPE_NORMAL
- en: std::u8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the unsigned 8-bit integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::u16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the unsigned 16-integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::u32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the unsigned 32-bit integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::u64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the unsigned 64-bit integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::usize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the pointer-sized unsigned integer type.
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  prefs: []
  type: TYPE_NORMAL
- en: std::vec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the growable array type with heap-allocated contents.
  prefs: []
  type: TYPE_NORMAL
- en: This is written as `Vec<T>`, and values are added to (or removed from) the end
    of the `vec` using `push` and `pull`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Drain` (draining iterator for `Vec<T>`), `IntoIter` (iterator
    that moves out of a vector), and `Vec` (contiguous growable array type).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered a sizable portion of the Rust standard library. Always check
    the official documentation online at [https://doc.rust-lang.org/std/](https://doc.rust-lang.org/std/)—it
    is of an exceptionally high quality and always up-to-date!
  prefs: []
  type: TYPE_NORMAL
- en: In the next and last chapter, we will take a look at using external libraries
    from Rust via its **Foreign Function Interface** (**FFI**).
  prefs: []
  type: TYPE_NORMAL
