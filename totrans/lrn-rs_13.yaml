- en: The Standard Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准库
- en: As with all programming languages, Rust comes with a rich library to make the
    life of the developer that much simpler by providing frequently-used functionality
    without having to recode the same thing time and again. We have already encountered
    part of the standard library in this book, and I have no doubt that you will have
    seen any number of instances of it in other code examples.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有编程语言一样，Rust 提供了一个丰富的库，通过提供常用功能来简化开发者的生活，而无需反复重写相同的内容。我们在这本书中已经遇到了标准库的一部分，我毫不怀疑你已经在其他代码示例中看到了它的许多实例。
- en: Over the next two chapters, we will be looking at what the library provides
    and how to use it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，我们将探讨库提供的内容以及如何使用它。
- en: In this chapter, we will be dealing with the standard crate (`std::`).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将处理标准包（`std::`）。
- en: Chapter format
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节格式
- en: 'Unlike the other chapters in this book, due to the sheer size of the library
    this chapter will be slightly different. It will look like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中的其他章节不同，由于库的规模庞大，本章将略有不同。它看起来像这样：
- en: '*Trait name*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*特型名称*'
- en: '*What it does / provides*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*它做什么/提供什么*'
- en: '*Notes*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*笔记*'
- en: '*Traits / Structs and Enums provided*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*提供的特性和结构体/枚举*'
- en: '*Download example*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*下载示例*'
- en: Due to Rust also having two main variants (stable and unstable), I won't be
    covering anything that is currently classed as unstable within the library; there
    is no guarantee that it will remain in the library or will remain the same.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Rust 也有两个主要变体（稳定版和不稳定版），我不会涵盖库中目前被分类为不稳定的内容；没有保证它将保留在库中或保持不变。
- en: What is the standard library?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准库是什么？
- en: 'The standard library contains the core functionality for Rust. It is split
    into four parts:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库包含 Rust 的核心功能。它分为四个部分：
- en: The standard modules
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准模块
- en: Primitive types
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始类型
- en: Macros
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏
- en: Prelude
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预设
- en: The standard modules (overview)
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准模块（概述）
- en: The standard modules implement the likes of string handling, IO, network, and
    operating system calls. There are around 60 of these modules in total. Some are
    self-contained while others provide implementations for traits and structs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 标准模块实现了字符串处理、IO、网络和操作系统调用等功能。总共有大约 60 个这样的模块。有些是自包含的，而有些为特性和结构体提供了实现。
- en: The module names may give rise to some confusion as they share the same name
    with a primitive type (such as `i32`).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 模块名称可能与原始类型（如 `i32`）同名，这可能会引起一些混淆。
- en: Primitive types (overview)
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始类型（概述）
- en: Primitive types are those types that are provided for us. In other languages,
    they would be the likes of `int`, `float`, and `char`. In Rust, we have `i32`,
    `d32`, and `i8` (respectively). Rust provides the developer with 19 primitives,
    some of which will provide additional implementations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 原始类型是我们提供的类型。在其他语言中，它们可能是 `int`、`float` 和 `char`。在 Rust 中，我们有 `i32`、`d32` 和
    `i8`（分别）。Rust 为开发者提供了 19 个原始类型，其中一些将提供额外的实现。
- en: Macros (overview)
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宏（概述）
- en: Macros play a significant role in Rust application development; they have been
    designed to provide a number of very convenient shortcuts to avoid the pain of
    having to implement common functionality (such as `println!(...)` and `format!(...)`).
    Rust provides 30 macros.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 宏在 Rust 应用程序开发中起着重要作用；它们被设计用来提供许多非常方便的快捷方式，以避免实现常见功能（如 `println!(...)` 和 `format!(...)`）的痛苦。Rust
    提供了 30 个宏。
- en: Prelude
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预设
- en: 'Prelude is very useful. You may have wondered why many of the examples in this
    book use standard modules, but you rarely see `use std::` at the top of source
    files. The reason is that Rust auto-injects the prelude module into every source
    file, which provides the source file with a number of core modules. It inserts
    the following in no particular order:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 预设（Prelude）非常有用。你可能想知道为什么这本书中的许多示例都使用了标准模块，但你很少在源文件的顶部看到 `use std::`。原因是 Rust
    会自动将预设模块注入到每个源文件中，为源文件提供许多核心模块。它按无特定顺序插入以下内容：
- en: '`std::marker::{Copy, Send, Sized, Sync}`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::marker::{Copy, Send, Sized, Sync}`'
- en: '`std::ops::{Drop, Fn, FnMut, FnOnce}`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::ops::{Drop, Fn, FnMut, FnOnce}`'
- en: '`std::mem::drop`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::mem::drop`'
- en: '`std::boxed::Box`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::boxed::Box`'
- en: '`std::borrow::ToOwned`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::borrow::ToOwned`'
- en: '`std::clone::Clone`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::clone::Clone`'
- en: '`std::cmp::{PartialEq, PartialOrd, Eq, Ord }`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::cmp::{PartialEq, PartialOrd, Eq, Ord }`'
- en: '`std::convert::{AsRef, AsMut, Into, From}`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::convert::{AsRef, AsMut, Into, From}`'
- en: '`std::default::Default`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::default::Default`'
- en: '`std::iter::{Iterator, Extend, IntoIterator, DoubleEndedIterator, ExactSizeIterator}`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::iter::{Iterator, Extend, IntoIterator, DoubleEndedIterator, ExactSizeIterator}`'
- en: '`std::option::Option::{self, Some, None}`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::option::Option::{self, Some, None}`'
- en: '`std::result::Result::{self, Ok, Err}`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::result::Result::{self, Ok, Err}`'
- en: '`std::slice::SliceConcatExt`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: std::slice::SliceConcatExt
- en: '`std::string::{String, ToString}`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: std::string::{String, ToString}
- en: '`std::vec::Vec`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::vec::Vec`'
- en: It inserts into each crate `extern crate std;` and into each module `use std::prelude::v1::*;`.
    This is all that is needed for prelude - it is that simple! Each module, though,
    will be dealt with in turn.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它将 `extern crate std;` 插入到每个包中，并将 `use std::prelude::v1::*;` 插入到每个模块中。这就是预览所需的所有内容——就这么简单！然而，每个模块都将依次处理。
- en: The standard modules
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准模块
- en: With the overviews done, let's look at the standard modules.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 完成概述后，让我们看看标准模块。
- en: std::Any
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: std::Any
- en: This module enables the dynamic casting of `'static` via runtime reflection.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块通过运行时反射启用 `'static` 的动态转换。
- en: It can be used to obtain a `TypeId`. When used as a borrowed trait reference
    (`&Any`), it can be used to determine whether the value is a given type (using `Is`)
    and also to get a reference to the inner value as a type (using `downcast_ref`). `&mut
    Any` will allow access to `downcast_mut`, which obtains the mutable reference
    to the inner value. `&Any` can only be used for testing a specific type and cannot
    be used to test whether a type implements a trait.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以用来获取一个 `TypeId`。当用作借用特质引用 (`&Any`) 时，它可以用来确定值是否是给定类型（使用 `Is`），也可以用来获取内部值的引用作为类型（使用
    `downcast_ref`）。`&mut Any` 将允许访问 `downcast_mut`，它获取内部值的可变引用。`&Any` 只能用于测试特定类型，不能用来测试类型是否实现了特质。
- en: '**Structs**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**结构体**'
- en: '`TypeId`: `TypeId` is an opaque object that cannot be examined, but does allow
    for clone, compare, print, and show. Only available for types that use `''static`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TypeId`: `TypeId` 是一个无法检查的不可见对象，但允许进行克隆、比较、打印和显示。仅适用于使用 `''static` 的类型。'
- en: '**Implement**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**实现**'
- en: '`of<T>() -> TypeId where T:’static + Reflect + ?Sized`: This returns the `TypeId`
    of the type `T` the function was instantiated with.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`of<T>() -> TypeId where T:’static + Reflect + ?Sized`: 返回函数实例化的类型 `T` 的 `TypeId`'
- en: '**Traits**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**特质**'
- en: '`pub trait Any: ''static + Reflect {fn get_type_id(&self) -> TypeId;}`: Emulates
    dynamic typing.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pub trait Any: ''static + Reflect {fn get_type_id(&self) -> TypeId;}`: 模拟动态类型。'
- en: '**Trait methods**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**特质方法**'
- en: '`impl Any + ''static`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl Any + ''static`'
- en: '`is<T>(&self) -> bool where T:Any`: Returns `true` if the boxed type is the
    same as `T`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is<T>(&self) -> bool where T:Any`: 如果装箱类型与 `T` 相同，则返回 `true`'
- en: '`downcast_ref<T>(&self) -> Option<&T> where T:Any`: Returns `ref` to the boxed
    value whether it is of type `T` or `None`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`downcast_ref<T>(&self) -> Option<&T> where T:Any`: 返回 `ref` 到装箱值，无论它是否为类型
    `T` 或 `None`'
- en: '`downcast_mut<T>(&mut self) -> Option<&mut T> where T:Any`: As for `downcast_ref` but
    returns a mutable `ref` or `None`'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`downcast_mut<T>(&mut self) -> Option<&mut T> where T:Any`: 对于 `downcast_ref`
    但返回一个可变引用或 `None`'
- en: '`impl Any + ''static + Send`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl Any + ''static + Send`'
- en: '`is<T>(&self) -> bool where T:Any`: Sends to the method defined on the type `Any`'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is<T>(&self) -> bool where T:Any`: 将发送到在类型 `Any` 上定义的方法'
- en: '`downcast_ref<T>(&self) -> Option<&T> where T:Any`: Sends to the method defined
    on the type `Any`'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`downcast_ref<T>(&self) -> Option<&T> where T:Any`: 将发送到在类型 `Any` 上定义的方法'
- en: '`downcast_mut<T>(&mut self) -> Option<&mut T> where T:Any`: Sends to the method
    defined on the type `Any`'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`downcast_mut<T>(&mut self) -> Option<&mut T> where T:Any`: 将发送到在类型 `Any` 上定义的方法'
- en: '**Trait implementations**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**特质实现**'
- en: '`impl Debug for Any + ‘static`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl Debug for Any + ‘static`'
- en: '`fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Format the value using
    the formatter'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fmt(&self, f: &mut Formatter) -> Result<(), Error>`: 使用格式化器格式化值'
- en: '`impl Debug for Any + ‘static + Send`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl Debug for Any + ‘static + Send`'
- en: '`fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Sends to the method defined
    on the `Debug` method'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fmt(&self, f: &mut Formatter) -> Result<(), Error>`: 发送到 `Debug` 方法上定义的方法'
- en: std::ascii
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: std::ascii
- en: This module performs operations on ASCII strings.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块对 ASCII 字符串执行操作。
- en: The `AsciiExt` trait contains a number of useful string slice utilities for
    testing, as well as conversion to upper and lowercase.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsciiExt` 特质包含许多有用的字符串切片实用工具，用于测试，以及转换为大写和小写。'
- en: '**Structs**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**结构体**'
- en: '`pub struct EscapeDefault`: Iterates over the escaped version of a byte'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pub struct EscapeDefault`: 迭代字节的逃逸版本'
- en: '`impl` iterator for `EscapeDefault`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl` 迭代器为 `EscapeDefault`'
- en: '`type Item = u8`: Type of the elements iterated over'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type Item = u8`: 迭代器遍历的元素类型'
- en: '`impl` iterator for `EscapeDefault` functions'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl` 迭代器为 `EscapeDefault` 函数'
- en: '`next(&mut self) -> Option<u8>`: Advances the iterator and return the next
    value'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next(&mut self) -> Option<u8>`: 前进迭代器并返回下一个值'
- en: '`size_hint(&self) -> (usize, Option<usize>)`: Returns the bounds on the remaining
    length of the iterator'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size_hint(&self) -> (usize, Option<usize>)`: 返回迭代器剩余长度的界限'
- en: '`count(self) -> usize`: Returns the number of iterations'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count(self) -> usize`: 返回迭代次数'
- en: '`last(self) -> Option<Self::Item>`: Returns the last element'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last(self) -> Option<Self::Item>`: 返回最后一个元素'
- en: '`nth(&mut self, n:usize) -> Option<Self::Item>`: Returns the next element after
    the n^(th) position'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nth(&mut self, n:usize) -> Option<Self::Item>`: 返回第 n 个位置之后的下一个元素'
- en: '`chain<U>(self, other:U) -> Chain<Self, U::IntoIterator> where U: IntoIterator<Item=Self::Item>`:
    Takes two iterators and creates a new one over both in sequence'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chain<U>(self, other:U) -> Chain<Self, U::IntoIterator> where U: IntoIterator<Item=Self::Item>`:
    取两个迭代器并按顺序创建一个新的迭代器'
- en: '`zip<U>(self, other: U) -> Zip<Self, U:IntoIterator> where U:IntoIterator`:
    Takes two iterators and makes them into a single pair iterator'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zip<U>(self, other: U) -> Zip<Self, U:IntoIterator> where U:IntoIterator`:
    取两个迭代器并将它们合并成一个单一的对迭代器'
- en: '`map<T,U>(self, u: U) -> Map<Self, U> where U:FnMut(Self::Item) -> T`: Creates
    an iterator from a closure that calls that closure on each element'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map<T,U>(self, u: U) -> Map<Self, U> where U:FnMut(Self::Item) -> T`: 从闭包创建迭代器，该闭包对每个元素调用该闭包'
- en: '`filter<F>(self, predicate: F) -> Filter<Self, F> where F: FnMut(&Self::Item)
    -> bool`: Creates an iterator that uses a closure to determine whether an element
    should be returned'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter<F>(self, predicate: F) -> Filter<Self, F> where F: FnMut(&Self::Item)
    -> bool`: 创建一个使用闭包确定是否返回元素的迭代器'
- en: '`enumerate(self) -> Enumerate<Self>`: Gives the current iteration count and
    the next value'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enumerate(self) -> Enumerate<Self>`: 提供当前迭代计数和下一个值'
- en: '`peekable(self) -> Peekable<Self>`: Peeks at the next value without the iterator
    consuming it'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`peekable(self) -> Peekable<Self>`: 查看下一个值而不消耗迭代器'
- en: '`skip_while<P>(self, predicate:P) -> SkipWhile<Self, P> where P:FnMut(&Self::Item)
    -> bool`: Creates an iterator that skips *n* elements based on the predicate.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_while<P>(self, predicate:P) -> SkipWhile<Self, P> where P:FnMut(&Self::Item)
    -> bool`: 创建一个基于谓词跳过 *n* 个元素的迭代器'
- en: '`take_while<P>(self, predicate:P) -> TakeWhile<Self, P> where P:FnMut(&Self::Item)
    -> bool`: Creates an iterator that yields elements based on the predicate.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`take_while<P>(self, predicate:P) -> TakeWhile<Self, P> where P:FnMut(&Self::Item)
    -> bool`: 创建一个基于谓词的迭代器，它产生元素。'
- en: '`skip(self, n: usize) -> Skip<Self>`: Skips the first *n* elements'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip(self, n: usize) -> Skip<Self>`: 跳过前 *n* 个元素'
- en: '`take(self, n: usize) -> Take<Self>`: The iterator that yields the first *n*
    elements'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`take(self, n: usize) -> Take<Self>`: 产生前 *n* 个元素的迭代器'
- en: '`scan<S, T, U>(self, interal_state: S, u: U) -> Scan<Self, S, U> where U:FnMut(&mut
    S, Self::Item)-> Option<T>`: The iterator adapter that holds an internal state
    and produces a new iterator'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scan<S, T, U>(self, interal_state: S, u: U) -> Scan<Self, S, U> where U:FnMut(&mut
    S, Self::Item)-> Option<T>`: 持有内部状态并产生新迭代器的迭代器适配器'
- en: '`flat_map<T, U>(self, u:U) -> Flat_Map<Self, T, U> where U:FnMut(Self::Item)
    -> T, T:IntoIterator`: Creates an iterator that works like a map, but produces
    a flattened, nested structure'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flat_map<T, U>(self, u:U) -> Flat_Map<Self, T, U> where U:FnMut(Self::Item)
    -> T, T:IntoIterator`: 创建一个像 map 一样工作的迭代器，但产生一个扁平、嵌套的结构'
- en: '`fuse(self)->Fuse(Self)`: Iterator that terminates after the first instance
    of `None`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fuse(self)->Fuse(Self)`: 在遇到第一个 `None` 实例后终止的迭代器'
- en: '`inspect<T>(self, t: T)->Insepect<Self, T> where T: FnMut(&self::Item)->()`:
    Does something with each iterated element and passes the value on.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inspect<T>(self, t: T)->Insepect<Self, T> where T: FnMut(&self::Item)->()`:
    对每个迭代的元素执行一些操作并将值传递下去'
- en: '`by_ref(&mut self) -> &mut Self`: Borrows rather than consumes the iterator'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`by_ref(&mut self) -> &mut Self`: 从迭代器中借用而不是消耗它'
- en: '`collect<T>(self) -> T where T:FromIterator(Self::Item)`: Makes a collection
    from an iterator'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collect<T>(self) -> T where T:FromIterator(Self::Item)`: 从迭代器创建集合'
- en: '`partition<T, U>(self, u:U) -> (T,T) where T:Default + Extend<Self::Item>,
    U:FnMut(&Self::Item> -> bool`: Takes the iterator and creates two collections
    from it'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partition<T, U>(self, u:U) -> (T,T) where T:Default + Extend<Self::Item>,
    U:FnMut(&Self::Item> -> bool`: 从迭代器中创建两个集合'
- en: '`fold<T, U>(self, init:T, u:U)->T where U:FnMut(T, Self::Item) -> T`: The iterator
    adapter that applies a function to produce a single final result'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fold<T, U>(self, init:T, u:U)->T where U:FnMut(T, Self::Item) -> T`: 应用函数以产生单个最终结果的迭代器适配器'
- en: '`all<T>(&mut self, t:T) -> bool where T:FnMut(Self::Item) -> bool`: Tests whether
    all elements of the iterator match the predicate `T`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all<T>(&mut self, t:T) -> bool where T:FnMut(Self::Item) -> bool`: 测试迭代器中的所有元素是否匹配谓词
    `T`'
- en: '`any<T>(&mut self, t:T) -> bool where T:FnMut(Self::Item) -> bool`: Tests whether
    any elements of the iterator match the predicate `T`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`any<T>(&mut self, t:T) -> bool where T:FnMut(Self::Item) -> bool`: 测试迭代器中的任何元素是否匹配谓词
    `T`'
- en: '`find<T>(&mut self, predicate:T) -> Option<Self::Item> where T: FnMut(&Self::Item)
    -> bool`: Searches the iterator for a match to the predicate'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find<T>(&mut self, predicate:T) -> Option<Self::Item> where T: FnMut(&Self::Item)
    -> bool`: 在迭代器中搜索与谓词匹配的元素'
- en: '`position<T>(&mut self, predicate:T) -> Option<usize> where T:FnMut(Self::Item)
    -> bool`: Searches the iterator for a match to the predicate and return the index'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`position<T>(&mut self, predicate:T) -> Option<usize> where T:FnMut(Self::Item)
    -> bool`: 在迭代器中搜索与谓词匹配的元素并返回索引'
- en: '`rposition<T>(&mut self, predicate:T) -> Option<usize> where T:FnMut(Self::Item)
    -> bool, Self:ExtractSizeIterator + doubleEndedIterator`: As for position, except
    it searches from the right'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rposition<T>(&mut self, predicate:T) -> Option<usize> where T:FnMut(Self::Item)
    -> bool, Self:ExtractSizeIterator + doubleEndedIterator`: 与`position`类似，但从右侧搜索'
- en: '`max(self_ => Option<Self::Item>`: Returns the max element of the iterator'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max(self_ => Option<Self::Item>`: 返回迭代器的最大元素'
- en: '`min(self_ => Option<Self::Item>`: Returns the min element of the iterator'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min(self_ => Option<Self::Item>`: 返回迭代器的最小元素'
- en: '`rev(self) -> Rev<Self> where Self:DoubleEndedIterator`: Reverses the direction
    of the iterator'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rev(self) -> Rev<Self> where Self:DoubleEndedIterator`: 反转迭代器的方向'
- en: '`unzip<T, U, FromT, FromU>(self) -> (FromT, FromU) -> Where FromT: Default
    + Extend<T>, FromU: Default + Extend<U>, Self::Iterator<Item=(T,U)>`: Performs
    the reverse of ZIP (two collections from a single iterator)'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unzip<T, U, FromT, FromU>(self) -> (FromT, FromU) -> Where FromT: Default
    + Extend<T>, FromU: Default + Extend<U>, Self::Iterator<Item=(T,U)>`: 执行ZIP的逆操作（从单个迭代器获取两个集合）'
- en: '`cloned<''a, Y>(self) -> Cloned<Self> where Self:Iterator<Item = &''a T>, T:
    ''a + Clone`: Creates an iterator that clones all of its elements'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloned<''a, Y>(self) -> Cloned<Self> where Self:Iterator<Item = &''a T>, T:
    ''a + Clone`: 创建一个迭代器，克隆其所有元素'
- en: '`cycle(self) -> Cycle<Self> where Self:Clone`: Repeats the iterator endlessly'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cycle(self) -> Cycle<Self> where Self:Clone`: 无限重复迭代器'
- en: '`sum<T>(self) -> T where Y:Add<Self::Item, Output=T> + Zero`: Returns the sum
    of the iterator elements'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sum<T>(self) -> T where Y:Add<Self::Item, Output=T> + Zero`: 返回迭代器元素的累加和'
- en: '`Product<T>(self) -> T where T: Mul<Self::Item, Output = T> + One`: Multiplies
    the elements of the iterator and returns the value'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Product<T>(self) -> T where T: Mul<Self::Item, Output = T> + One`: 将迭代器的元素相乘并返回结果'
- en: '`impl DoubleEndedIterator for EscapeDefault`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl DoubleEndedIterator for EscapeDefault`'
- en: '`next_back(&mut self) -> Option<u8>`: Iterator able to yield a result from
    both ends'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next_back(&mut self) -> Option<u8>`: 能够从两端产生结果的迭代器'
- en: '`impl ExactSizeIterator for EscapeDefault`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl ExactSizeIterator for EscapeDefault`'
- en: '`Len(&self) -> usize`: Returns the number of times the iterator will iterate.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Len(&self) -> usize`: 返回迭代器迭代的次数'
- en: '**Traits**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**特质**'
- en: '[PRE0]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following are extension methods for ASCII subset operations on string slices:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对字符串切片进行ASCII子集操作的扩展方法：
- en: Associated type
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关联类型
- en: '`Owned:` Container for copied ASCII characters.'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Owned:` 复制ASCII字符的容器。'
- en: Required methods
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必要方法
- en: '`is_ascii(&self) -> bool`: Whether value is an ASCII value'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_ascii(&self) -> bool`: 值是否为ASCII值'
- en: '`to_ascii_uppercase(&self) -> Self::Owned`: Makes a copy of the string in ASCII
    uppercase'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to_ascii_uppercase(&self) -> Self::Owned`: 将字符串复制为ASCII大写形式'
- en: '`to_ascii_lowercase(&self) -> Self::Owned`: As for uppercase, but in lowercase'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to_ascii_lowercase(&self) -> Self::Owned`: 与大写类似，但为小写'
- en: '`eq_ignore_ascii_case(&self, other: &Self) -> bool`: Are two strings the same
    ignoring the case'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eq_ignore_ascii_case(&self, other: &Self) -> bool`: 两个字符串在不考虑大小写的情况下是否相同'
- en: std::borrow
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`std::borrow`'
- en: This module is used for working with borrowed data.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块用于处理借用数据。
- en: enum `Cow` (clone-on-write smarter pointer)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`enum `Cow`` (写时复制智能指针)'
- en: The `Cow` allows for immutable access to borrowed data (and can enclose this
    data) and permits cloning lazily when mutation or ownership is required. It is
    designed to work using the `Borrow` trait. It also implements `Deref`, which will
    allow access to non-mutating methods on the data `Cow` has enclosed. `to_mut`
    will provide a mutable reference to the owned value.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cow`允许对借用数据进行不可变访问（并且可以包含此数据），并在需要修改或拥有时允许懒惰地克隆。它设计为使用`Borrow`特质。它还实现了`Deref`，这将允许访问`Cow`包含的数据上的非修改方法。`to_mut`将提供对拥有值的可变引用。'
- en: '`Trait std::borrow::Borrow`: Data can be borrowed in a number of different
    ways: shared borrowing (`T` and `&T`), mutable borrowing (`&mut T`), and borrowed
    slices from the likes of `Vec<T> (&[T]`, and `&mut[T])`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Trait std::borrow::Borrow`: 数据可以通过多种方式借用：共享借用（`T`和`&T`）、可变借用（`&mut T`）以及从`Vec<T>`（`&[T]`和`&mut[T]`）等类似类型借用的切片。'
- en: 'The `Borrow` trait provides a convenient method to abstract over the given
    type. For example: `T: Borrow<U>` means that `&U` is borrowed from `&T`'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Borrow`特质提供了一个方便的方法来抽象给定类型。例如：`T: Borrow<U>`意味着从`&T`借用了`&U`'
- en: '`fn borrow(&self) -> &Borrowed`: Immutably borrows from an owned value'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn borrow(&self) -> &Borrowed`: 从拥有值不可变借用'
- en: '`Trait std::borrow::BorrowMut`: Used for mutably borrowing data'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Trait std::borrow::BorrowMut`: 用于可变借用数据'
- en: '`fn borrow_mut(&mut self) -> &mut Borrowed`: Mutably borrows from an owned
    value'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn borrow_mut(&mut self) -> &mut Borrowed`: 从拥有值可变借用'
- en: '`Trait std::borrow:ToOwned`: A generalization of `Clone` for borrowing data.
    `Clone` only works when going from `&T` to `T`. `ToOwned` generalizes `Clone`
    to construct owned data from any borrow of a given type.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Trait std::borrow:ToOwned`: `Clone` 的借用数据泛化。`Clone` 仅在从 `&T` 到 `T` 转换时工作。`ToOwned`
    将 `Clone` 泛化以从任何给定类型的任何借用中构建拥有数据。'
- en: '`fn to_owned(&self) -> Self::Owned`: Creates owned data from borrowed data'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn to_owned(&self) -> Self::Owned`: 从借用数据创建拥有数据'
- en: std::boxed
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: std::boxed
- en: This module is used for heap allocation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块用于堆分配。
- en: A very simple way to allocate memory on the heap, provide ownership, and drop
    when out of scope.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一种非常简单的方法来在堆上分配内存、提供所有权并在作用域之外释放。
- en: '`impl<T> Box<T>`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> Box<T>`'
- en: '`fn new(x:T) -> Box<T>`: Allocates memory on the heap and places `x` into it'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn new(x:T) -> Box<T>`: 在堆上分配内存并将 `x` 放入其中'
- en: '`impl <T> Box<T> where T: ?Sized`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl <T> Box<T> where T: ?Sized`'
- en: '`unsafe fn from_raw(raw: *mut T) -> Box<T>`: Constructs a box from a raw pointer.
    After creation, the pointer is owned by the new `Box`. It is unsafe for this very
    reason; the `Box` destructor will call the destructor of `T` and free the allocated
    memory. This may lead to double freeing that will cause a crash.'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unsafe fn from_raw(raw: *mut T) -> Box<T>`: 从原始指针构建 box。创建后，指针由新的 `Box` 拥有。这非常不安全；`Box`
    析构函数将调用 `T` 的析构函数并释放分配的内存。这可能导致双重释放，从而引发崩溃。'
- en: '`fn into_raw(b: Box<T> -> *mut T`: Consumes the box and returns the wrapped
    raw pointer.'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn into_raw(b: Box<T> -> *mut T`: 消耗 box 并返回包装的原始指针。'
- en: '`impl Box<Any + ''static>`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl Box<Any + ''static>`'
- en: '`fn downcast<T>(self) -> Result<Box<T>, Box<Any + ''static>> where T:Any`:
    Attempts to downcast the box to a concrete type.'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn downcast<T>(self) -> Result<Box<T>, Box<Any + ''static>> where T:Any`:
    尝试将 box 降级为具体类型。'
- en: '`impl Box<Any + ''static + Send>`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl Box<Any + ''static + Send>`'
- en: '`fn downcast<T>(self) -> Result<Box<T>, Box<Any + ‘static + Send>> where T:Any`: Attempts
    to downcast the box to a concrete type'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn downcast<T>(self) -> Result<Box<T>, Box<Any + ‘static + Send>> where T:Any`:
    尝试将 box 降级为具体类型'
- en: Methods
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: Trait Implementations
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 特征实现
- en: '`Impl <T> Default for Box<T> where T:Default`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Impl <T> Default for Box<T> where T:Default`'
- en: '`fn default() -> Box<T>`: Returns the default value for the type'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn default() -> Box<T>`: 返回类型的默认值'
- en: '`impl<T> Default for Box<[T]>`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> Default for Box<[T]>`'
- en: '`fn default() -> Box<T>`: Returns the default value for the type'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn default() -> Box<T>`: 返回类型的默认值'
- en: '`impl<T> Clone for Box<T> where T:Clone`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> Clone for Box<T> where T:Clone`'
- en: '`fn clone(&self) -> Box<T>`: Returns a new box with a clone of the box''s contents'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn clone(&self) -> Box<T>`: 返回一个包含 box 内容副本的新 box'
- en: '`fn clone_from(&mut self, source: &Box<T>)`: Copies *sources* contents into
    self without creating a new allocation'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn clone_from(&mut self, source: &Box<T>)`: 将 *sources* 的内容复制到 self 中而不创建新的分配'
- en: '`impl Clone for Box<str>`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl Clone for Box<str>`'
- en: '`fn clone(&self) -> Box<str>`: Returns a copy of the value'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn clone(&self) -> Box<str>`: 返回值的副本'
- en: '`fn clone_from(&mut self, source: &Self)`: Performs a copy-assignment from
    *source*'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn clone_from(&mut self, source: &Self)`: 从 *source* 执行复制赋值'
- en: '`impl<T> PartialEq<Box<T>> for Box<T> where T:PartialEq<T> + ?Sized`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> PartialEq<Box<T>> for Box<T> where T:PartialEq<T> + ?Sized`'
- en: '`fn eq(&self, other: &Box<T>) -> bool`: Test self and other to be equal. Used
    by `==`'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn eq(&self, other: &Box<T>) -> bool`: 测试 self 和 other 是否相等。由 `==` 使用'
- en: '`fn ne(&self, other: &Box<T>) ->`: Tests for inequality. Used by `!=`'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn ne(&self, other: &Box<T>) ->`: 测试不等式。由 `!=` 使用'
- en: '`impl<T> PartialOrd<Box<T>> for Box<T> where T:PartialOrd<T> + ?Sized`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> PartialOrd<Box<T>> for Box<T> where T:PartialOrd<T> + ?Sized`'
- en: '`fn partial_cmp(&self, other: &Box<T>) -> Option<Ordering>`: Returns an ordering
    between self and other values if it exists'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn partial_cmp(&self, other: &Box<T>) -> Option<Ordering>`: 如果存在，返回 self 和
    other 之间的排序'
- en: '`fn lt(&self, other: &Box<T>) -> bool`: Tests whether self is less than other.
    Used by `<`'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn lt(&self, other: &Box<T>) -> bool`: 测试 self 是否小于 other。由 `<` 使用'
- en: '`fn le(&self, other: &Box<T>) -> bool`: Tests whether self is less than or
    equal to other. Used by `<=`'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn le(&self, other: &Box<T>) -> bool`: 测试 self 是否小于或等于 other。由 `<=` 使用'
- en: '`fn ge(&self, other: &Box<T>) -> bool`: Tests whether self is greater than
    or equal to other. Used by `>=`'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn ge(&self, other: &Box<T>) -> bool`: 测试 self 是否大于或等于 other。由 `>=` 使用'
- en: '`Fn gt(&self, other: &Box<T>) -> bool`: Tests whether self is greater than
    other. Used by `>`'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn gt(&self, other: &Box<T>) -> bool`: 测试 self 是否大于 other。由 `>` 使用'
- en: '`impl <T> Ord for Box<T> where T:Ord + ?Sized`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl <T> Ord for Box<T> where T:Ord + ?Sized`'
- en: '`fn cmp(&self, other: &Box<T>) -> Ordering`: Returns an ordering between self
    and other'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn cmp(&self, other: &Box<T>) -> Ordering`: 返回 self 和 other 之间的排序'
- en: '`impl <T> Hash for Box<T> where T: Hash + ?Sized`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl <T> Hash for Box<T> where T: Hash + ?Sized`'
- en: '`fn hash<H>(&self, state: &mut H) where H: Hasher`: Feeds the value into the
    state and updates the hasher if required'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn hash<H>(&self, state: &mut H) where H: Hasher`: 将值输入到状态中，并在需要时更新哈希器'
- en: '`fn hash_slice<H>(data: &[Self], state &mut H) where H: Hasher`: Feeds the
    slice of this type into the state'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn hash_slice<H>(data: &[Self], state &mut H) where H: Hasher`: 将此类型的切片输入到状态中'
- en: '`impl<T> From<T> for Box<T>`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> From<T> for Box<T>`'
- en: '`fn from(t: T) -> Box<T>`: Performs a conversion'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn from(t: T) -> Box<T>`: 执行转换'
- en: '`impl<T> Display for Box<T> where T: Display + ?Sized`'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> Display for Box<T> where T: Display + ?Sized`'
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: 使用给定的格式化器格式化值'
- en: '`impl<T> Debug for Box<T> where T:Debug + ?Sized`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> Debug for Box<T> where T:Debug + ?Sized`'
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: 使用给定的格式化器格式化值'
- en: '`impl<T> Pointer for Box<T> where T: ?Sized`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> Pointer for Box<T> where T: ?Sized`'
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: 使用给定的格式化器格式化值'
- en: '`impl<T> Deref for Box<T> where T: ?Sized`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> Deref for Box<T> where T: ?Sized`'
- en: '`fn deref(&self) -> &T`: Dereference a value'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn deref(&self) -> &T`: 解引用一个值'
- en: '`impl<T> DerefMut for Box<T> where T: ?Sized`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> DerefMut for Box<T> where T: ?Sized`'
- en: '`fn deref_mut(&mut self) -> &mut T`: Mutably dereference a value'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn deref_mut(&mut self) -> &mut T`: 可变解引用一个值'
- en: '`impl<I> Iterator for Box<I> where I: Iterator + ?Sized`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<I> Iterator for Box<I> where I: Iterator + ?Sized`'
- en: '`fn next(&mut self) -> Option<I::Item>`: Advances the iterator and returns
    the next value'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn next(&mut self) -> Option<I::Item>`: 前进迭代器并返回下一个值'
- en: '`fn size_hint(&self) -> (usize, Option<usize>)`: Returns the bounds on the
    remaining length of the iterator'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn size_hint(&self) -> (usize, Option<usize>)`: 返回迭代器剩余长度的界限'
- en: '`fn count(self) -> usize`: Returns the number of iterations'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn count(self) -> usize`: 返回迭代次数'
- en: '`fn last(self) -> Option<Self::Item>`: Returns the last element'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn last(self) -> Option<Self::Item>`: 返回最后一个元素'
- en: '`fn nth(&mut self, n: usize) -> Option<Self::Item>`: Consumes *n* elements
    of the iterator and returns the next one after that'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn nth(&mut self, n: usize) -> Option<Self::Item>`: 消耗迭代器的*n*个元素，并返回之后的下一个元素'
- en: '`fn chain<U>(self, other: U) -> Chain<Self, U::Iterator> where U: IntoIterator
    <Item=Self::Item>`: Takes two iterators and creates a new one over both in sequence'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn chain<U>(self, other: U) -> Chain<Self, U::Iterator> where U: IntoIterator
    <Item=Self::Item>`: 取两个迭代器，并按顺序创建一个新的迭代器'
- en: '`fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter> where U: IntoIter`: Zips
    two iterators into a single pair'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter> where U: IntoIter`: 将两个迭代器合并成一个单一的对'
- en: '`fn map<B, F>(self, f: F) -> Map<Self, F> where F: FnMut(Self::Item) -> B`:
    Takes a closure and creates an iterator that calls that closure on each element'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn map<B, F>(self, f: F) -> Map<Self, F> where F: FnMut(Self::Item) -> B`:
    使用闭包创建一个迭代器，对每个元素调用该闭包'
- en: '`fn filter<P>(self, predicate: P) -> Filter<Self, P> where P: FnMut(&Self::Item)
    -> bool`: Creates an iterator that uses a closure to see if an element should
    be yielded'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn filter<P>(self, predicate: P) -> Filter<Self, P> where P: FnMut(&Self::Item)
    -> bool`: 使用闭包创建一个迭代器，以判断元素是否应该被产生'
- en: '`Fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> where F: FnMut(Self::Item)
    -> Option<B<`: Creates an iterator that filters and maps'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> where F: FnMut(Self::Item)
    -> Option<B<`: 创建一个过滤并映射的迭代器'
- en: '`fn enumerate(self) -> Enumerate<Self>`: Creates an iterator that gives the
    current iteration count and the next value'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn enumerate(self) -> Enumerate<Self>`: 创建一个迭代器，提供当前迭代计数和下一个值'
- en: '`fn peekable(self) -> Peekable<Self>`: Creates an iterator to peek at the next
    element of the iterator without consuming'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn peekable(self) -> Peekable<Self>`: 创建一个迭代器，可以查看迭代器的下一个元素而不消耗它'
- en: '`fn skip_while<P>(self, predicate: P)-> SkipWhile<Self, P> where P: FnMut(&Self::Item)
    -> bool`: Creates an iterator that skips elements based on the predicate'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn skip_while<P>(self, predicate: P)-> SkipWhile<Self, P> where P: FnMut(&Self::Item)
    -> bool`: 创建一个迭代器，根据谓词跳过元素'
- en: '`fn skip(self, n: usize) -> Skip<Self>`: Creates an iterator that skips the
    first *n* elements'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn skip(self, n: usize) -> Skip<Self>`: 创建一个迭代器，跳过前*n*个元素'
- en: '`fn take(self, n:usize) -> Take<Self>`: Creates an iterator that yields the
    first *n* elements'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn take(self, n:usize) -> Take<Self>`: 创建一个迭代器，产生前*n*个元素'
- en: '`fn take_while<P>(self, predicate: P) -> TakeWhile<Self. P> where P:FnMut(&Self::Item)
    -> bool`: Creates an iterator that yields elements based on the predicate'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> where P: FnMut(&Self::Item)
    -> bool`: 创建一个基于谓词产生元素的迭代器'
- en: '`fn scan<St, B, F>(self, init_state: St, f : F) -> Scan<Self, St, F> where
    F: FnMut(&mut St, Self::Item) -> Option<B>`: An iterator adaptor similar to `fold()`
    that holds the internal state and produces a new iterator'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn scan<St, B, F>(self, init_state: St, f: F) -> Scan<Self, St, F> where F:
    FnMut(&mut St, Self::Item) -> Option<B>`: 类似于`fold()`的迭代器适配器，持有内部状态并产生一个新的迭代器'
- en: '`fn flat_map<U, F>(self f: F) -> FlatMap<Self, U, F> where F: FnMut(Self::Item)
    -> U, U:IntoIterator`: Creates a flattened nested structure. Works like map.'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn flat_map<U, F>(self f: F) -> FlatMap<Self, U, F> where F: FnMut(&Self::Item)
    -> U, U: IntoIterator`: 创建一个扁平化的嵌套结构。类似于map。'
- en: '`fn fuse(self) -> Fuse<Self>`: Creates an iterator that ends after the first
    instance of `None`'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn fuse(self) -> Fuse<Self>`: 创建一个在第一个`None`实例后结束的迭代器'
- en: '`fn inspect<F>(self, f: F) -> Inspect<Self, F> where F:FnMut(&Self::Item) ->
    ()`: Does something with each element and passes the value on'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn inspect<F>(self, f: F) -> Inspect<Self, F> where F: FnMut(&Self::Item)
    -> ()`: 对每个元素执行一些操作并将值传递下去'
- en: '`fn by_ref(&mut self) -> &mut Self`: Borrow the iterator. Doesn’t consume it.'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn by_ref(&mut self) -> &mut Self`: 借用迭代器。不会消耗它。'
- en: '`fn collect<B>(self) -> B where B: FromIterator <Self::Item>`: Changes the
    iterator to a collection'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn collect<B>(self) -> B where B: FromIterator<Self::Item>`: 将迭代器转换为集合'
- en: '`fn partition<B, F>(self, f: F) -> (B, B) where B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool`: Consumes an iterator, creating two collections
    from it'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn partition<B, F>(self, f: F) -> (B, B) where B: Default + Extend<Self::Item>,
    F: FnMut(&Self::Item) -> bool`: 消耗迭代器，从中创建两个集合'
- en: '`fn fold<B, F>(self, init: B, f: F) -> B where F: FnMut(B, Self::Item) -> B`:
    An iterator adaptor that applies a function, producing a single, final value'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn fold<B, F>(self, init: B, f: F) -> B where F: FnMut(B, Self::Item) -> B`:
    应用函数的迭代器适配器，产生一个单一、最终值'
- en: '`fn all<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool`: Tests
    if every element of the iterator matches a predicate'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn all<F>(&mut self, f: F) -> bool where F: FnMut(&Self::Item) -> bool`: 测试迭代器中的每个元素是否匹配谓词'
- en: '`fn any<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool`: Tests
    if any element of the iterator matches a predicate'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn any<F>(&mut self, f: F) -> bool where F: FnMut(&Self::Item) -> bool`: 测试迭代器中的任何元素是否匹配谓词'
- en: '`fn find<P>(&mut self, predicate: P) -> Option<Self::Item> where P: FnMut(&Self::Item)
    -> bool`: Searches for an element of an iterator that satisfies a predicate'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn find<P>(&mut self, predicate: P) -> Option<Self::Item> where P: FnMut(&Self::Item)
    -> bool`: 搜索满足谓词的迭代器元素'
- en: '`fn position<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item)
    -> bool`: Searches for an element in an iterator, returning its index'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn position<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(&Self::Item)
    -> bool`: 在迭代器中搜索元素，返回其索引'
- en: '`fn rposition<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item)
    -> bool, Self: ExactSizeIterator + DoubleEndedIterator`: Searches for an element
    in an iterator from the right, returning its index'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn rposition<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(&Self::Item)
    -> bool, Self: ExactSizeIterator + DoubleEndedIterator`: 从右向迭代器中搜索元素，返回其索引'
- en: '`fn max(self) -> Option<Self::Item> where Self::Item: Ord`: Returns the maximum
    element of an iterator'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn max(self) -> Option<Self::Item> where Self::Item: Ord`: 返回迭代器的最大元素'
- en: '`fn min(self) -> Option<Self::Item> where Self::Item: Ord`: Returns the minimum
    element of an iterator'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn min(self) -> Option<Self::Item> where Self::Item: Ord`: 返回迭代器的最小元素'
- en: '`fn max_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item)
    -> B`: Returns the element that gives the maximum value from the specified function'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn max_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item)
    -> B`: 返回指定函数的最大值元素'
- en: '`fn min_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item)
    -> B`: Returns the element that gives the minimum value from the specified function'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn min_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item)
    -> B`: 返回指定函数的最小值元素'
- en: '`fn rev(self) -> Rev<Self> where Self: DoubleEndedIterator`: Reverses an iterator''s
    direction'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn rev(self) -> Rev<Self> where Self: DoubleEndedIterator`: 反转迭代器的方向'
- en: '`fn unzip <A, B, FromA, FromB> (self) -> (FromA, FromB) where FromA: Default
    + Extend<A>, FromB: Default + Extend<B>, Self: Iterator<Item=(A, B)>`: Converts
    an iterator of pairs into a pair of containers'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn unzip <A, B, FromA, FromB> (self) -> (FromA, FromB) where FromA: Default
    + Extend<A>, FromB: Default + Extend<B>, Self: Iterator<Item=(A, B)>`: 将对偶迭代器转换为两个容器'
- en: '`fn cloned<''a, T>(self) -> Cloned<Self> where Self: Iterator<Item=&''a T>,
    T: ''a + Clone`: Creates an iterator that clones all of its elements'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn cloned<''a, T>(self) -> Cloned<Self> where Self: Iterator<Item=&''a T>,
    T: ''a + Clone`: 创建一个迭代器，它会克隆其所有元素'
- en: '`fn cycle(self) -> Cycle<Self> where Self: Clone`: Repeats an iterator endlessly'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn cycle(self) -> Cycle<Self> where Self: Clone`: 无限重复迭代器'
- en: '`fn sum<S>(self) -> S where S: Sum<Self::Item>`: Sums the elements of an iterator'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn sum<S>(self) -> S where S: Sum<Self::Item>`: 迭代迭代器的元素并求和'
- en: '`fn product<P>(self) -> P where P: Product<Self::Item>`: Iterates over the
    entire iterator, multiplying all the elements'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn product<P>(self) -> P where P: Product<Self::Item>`: 迭代整个迭代器，将所有元素相乘'
- en: '`fn cmp<I>(self, other: I) -> Ordering where I: IntoIterator <Item=Self::Item>,
    Self::Item: Ord`: Compares the elements of this Iterator with those of another'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn cmp<I>(self, other: I) -> Ordering where I: IntoIterator <Item=Self::Item>,
    Self::Item: Ord`: 比较这个迭代器的元素与另一个迭代器的元素'
- en: '`fn partial_cmp<I>(self, other: I) -> Option<Ordering> where I: IntoIterator,
    Self::Item: PartialOrd<I::Item>`: Compares the elements of this Iterator with
    those of another'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn partial_cmp<I>(self, other: I) -> Option<Ordering> where I: IntoIterator,
    Self::Item: PartialOrd<I::Item>`: 比较这个迭代器的元素与另一个迭代器的元素'
- en: '`fn eq<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<I::Item>`:
    Determines if the elements of this Iterator are equal to those of another'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn eq<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<I::Item>`:
    判断这个迭代器的元素是否等于另一个迭代器的元素'
- en: '`fn ne<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<I::Item>`:
    Determines if the elements of this `Iterator` are unequal to those of another'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn ne<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<I::Item>`:
    判断这个 `Iterator` 的元素是否不等于另一个迭代器的元素'
- en: '`fn lt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    Determines if the elements of this Iterator are less than those of another'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn lt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    判断这个迭代器的元素是否小于另一个迭代器的元素'
- en: '`fn le<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    Determines if the elements of this Iterator are less than or equal to those of
    another'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn le<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    判断这个迭代器的元素是否小于或等于另一个迭代器的元素'
- en: '`fn gt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    Determines if the elements of this Iterator are greater than those of another'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn gt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    判断这个迭代器的元素是否大于另一个迭代器的元素'
- en: '`fn ge<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    Determines if the elements of this Iterator are greater than or equal to those
    of another'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn ge<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<I::Item>`:
    判断这个迭代器的元素是否大于或等于另一个迭代器的元素'
- en: '`impl<I> DoubleEndedIterator for Box<I> where I: DoubleEndedIterator + ?Sized`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<I> DoubleEndedIterator for Box<I> where I: DoubleEndedIterator + ?Sized`:
    实现 `DoubleEndedIterator` trait，使得 `Box<I>` 可以双向迭代'
- en: '`fn next_back(&mut self) -> Option<I::Item>`: Removes and returns an element
    from the end of the iterator'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn next_back(&mut self) -> Option<I::Item>`: 从迭代器的末尾移除并返回一个元素'
- en: '`impl <T> ExactSizeIterator for Box<I> where I: ExactSizeIterator + ?Sized`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl <T> ExactSizeIterator for Box<I> where I: ExactSizeIterator + ?Sized`:
    实现 `ExactSizeIterator` trait，使得 `Box<I>` 可以获取其确切大小'
- en: '`fn len(&self) -> usize`: Returns the exact number of times the iterator will
    iterate.'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn len(&self) -> usize`: 返回迭代器迭代的精确次数'
- en: '`impl<T> Clone for Box<[T]> where T:Clone`'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> Clone for Box<[T]> where T:Clone`: 实现 `Clone` trait，使得 `Box<[T]>`
    可以被克隆'
- en: '`fn clone(&self) -> Box<[T]>`: Returns a copy of the value'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn clone(&self) -> Box<[T]>`: 返回值的副本'
- en: '`fn clone_from(&mut self, source: &Self)`: Performs copy-assignment from source'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn clone_from(&mut self, source: &Self)`: 从源执行复制赋值'
- en: '`impl<T> Borrow<T> for Box<T> where T:?Sized`'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> Borrow<T> for Box<T> where T:?Sized`: 实现 `Borrow` trait，使得 `Box<T>`
    可以被借用'
- en: '`fn borrow(&self) -> &T`: Immutably borrows from an owned value'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn borrow(&self) -> &T`: 从拥有值中不可变借用'
- en: '`impl<T> BorrowMut<T> for Box<T> where T:?Sized`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> BorrowMut<T> for Box<T> where T:?Sized`: 实现 `BorrowMut` trait，使得 `Box<T>`
    可以被可变借用'
- en: '`fn borrow_mut(&mut self) -> &mut T`: Mutably borrows from an owned value'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn borrow_mut(&mut self) -> &mut T`: 从拥有值中可变借用'
- en: '`impl<T> AsRef<T> for Box<T> where T:?Sized`'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> AsRef<T> for Box<T> where T:?Sized`: 实现 `AsRef` trait，使得 `Box<T>`
    可以被转换为引用'
- en: '`fn as_ref(&self) -> &T`: Performs the conversion'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn as_ref(&self) -> &T`: 执行转换'
- en: '`impl<T> AsMut for Box<T> where T:?Sized`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<T> AsMut for Box<T> where T:?Sized`: 实现 `AsMut` trait，使得 `Box<T>` 可以被转换为可变引用'
- en: '`fn as_mut(&mut self) -> &mut T`: Performs the conversion'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn as_mut(&mut self) -> &mut T`: 执行转换'
- en: '`impl<’a, E: Error + ‘a> From<E> from Box<Error + ‘a>`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl<’a, E: Error + ‘a> From<E> from Box<Error + ‘a>`: 实现 `From<E>` trait，将
    `Box<Error + ‘a>` 从 `E` 类型转换而来'
- en: '`fn from(err: E) -> Box<Error + ''a>`: Performs the conversion'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn from(err: E) -> Box<Error + ''a>`: 执行转换'
- en: '`impl From<String> for Box<Error + Send + Sync>`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`impl From<String> for Box<Error + Send + Sync>`: 将 `String` 类型转换为 `Box<Error
    + Send + Sync>`'
- en: '`fn from(err: String) -> Box<Error + Send + Sync>`: Performs the conversion'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn from(err: String) -> Box<Error + Send + Sync>`: 执行转换'
- en: '`impl From<’a, ‘b> From<&’b str> for Box<Error + Send + Sync + ‘a>`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn from(err: &''b str) -> Box<Error + Send + Sync + ''a>`: Performs the conversion'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T: Error> Error for Box<T>`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn description(&self) -> &str`: Short description of the error'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cause(&self) -> Option<&Error>`: Lower-level cause of this error, if any'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<R: Read + ?Sized> Read for Box<R>`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read(&mut self, buf: &mut [u8]) -> Result<usize>`: Pulls some bytes from
    this source into the specified buffer, returning how many bytes were read'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize>`: Reads all
    bytes until EOF in this source, placing them into `buf`'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_to_string(&mut self, buf: &mut String) -> Result<usize>`: Reads all
    bytes until EOF in this source, placing them into `buf`'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_exact(&mut self, buf: &mut [u8]) -> Result<()>`: Reads the exact number
    of bytes required to fill `buf`'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn by_ref(&mut self) -> &mut Self where Self: Sized`: Creates a *by reference* adaptor
    for this instance of `Read`'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn bytes(self) -> Bytes<Self> where Self: Sized`: Transforms this `Read` instance
    to an Iterator over its bytes'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn chain<R: Read>(self, next: R) -> Chain<Self, R> where Self: Sized`: Creates
    an adaptor that will chain this stream with another'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn take(self, limit: u64) -> Take<Self> where Self: Sized`: Creates an adaptor
    that will read at most limit bytes from it'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl <W: Write + ?Sized> Write for Box<W>`'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn write(&mut self, buf: &[u8]) -> Result<usize>`: Writes a buffer into this
    object, returning how many bytes were written'
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn flush(&mut self) -> Result<()>`: Flushes this output stream, ensuring that
    all intermediately buffered contents reach their destination'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn write_all(&mut self, buf: &[u8]) -> Result<()>`: Attempts to write an entire
    buffer into this write'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn write_fmt(&mut self, fmt: Arguments) -> Result<()>`: Writes a formatted
    string into this writer, returning any error encountered'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn by_ref(&mut self) -> &mut Self where Self: Sized`: Creates a *by reference* adaptor
    for this instance of `Write`'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<S: Seek + ?Sized> Seek for Box<S>`'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn seek(&mut self, pos: SeekFrom) -> Result<u64>`: Seeks to an offset, in
    bytes, in a stream'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<B: BufRead + ?Sized> BufRead for Box<B>`'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fill_buf(&mut self) -> Result<&[u8]>`: Fills the internal buffer of this
    object, returning the buffer contents'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn consume(&mut self, amt: usize)`: Tells this buffer that amt bytes have
    been consumed from the buffer, so they should no longer be returned in calls to
    be read'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> Result<usize>`: Reads
    all bytes into `buf` until the delimiter byte is reached'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn read_line(&mut self, buf: &mut String) -> Result<usize>`: Reads all bytes
    until a newline (the 0 x A byte) is reached, and appends them to the provided
    buffer'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn split(self, byte: u8) -> Split<Self> where Self: Sized`: Returns an iterator
    over the contents of this reader split on the byte byte'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn lines(self) -> Lines<Self> where Self: Sized`: Returns an iterator over
    the lines of this reader'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: std::cell
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Used in conjunction with shared mutable containers:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: For details on using `Cells`, `RefCell`, and both interior and external references,
    see [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '`Std::cell::BorrowError`: Returned by `RefCell::try_borrow`'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Display for BorrowError`'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter.'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Debug for BorrowError`'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter.'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Error for BorrowError`'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn description(&self) -> &str`: A short description of the error'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cause(&self) -> Option<&Error>`: The lower-level cause of this error, if
    any'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::cell::BorrowMutError`: Returned by `RefCell::try_borrow_mut`'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Display for BorrowMutError`'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Debug for BorrowMutError`'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl Error for BorrowMutError`'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn description(&self) -> &str`: A short description of the error'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cause(&self) -> Option<&Error>`: The lower-level cause of this error, if
    any'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`std::cell::Cell`: A mutable memory location that admits only `Copy` data'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Methods**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<T> Cell<T> where T: Copy`'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn new(value: T) -> Cell<T>`: Creates a new Cell containing the given value'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn get(&self) -> T`: Returns a copy of the contained value'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn set(&self, value: T)`: Sets the contained value'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn as_ptr(&self) -> *mut T`: Returns a raw pointer to the underlying data
    in this cell'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn get_mut(&mut self) -> &mut T`: Returns a mutable reference to the underlying
    data'
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<T> PartialEq<Cell<T>> for Cell<T> where T: Copy + PartialEq<T>`'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn eq(&self, other: &Cell<T>) -> bool`: Tests for self and other values being
    equal, and is used by `==`'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ne(&self, other: &Rhs) -> bool`: Tests for `!=`'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Default for Cell<T> where T: Copy + Default`'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn default() -> Cell<T>`: Creates a `Cell<T>`, with the `Default` value for
    `T`'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Clone for Cell<T> where T: Copy`'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone(&self) -> Cell<T>`: Returns a copy of the value'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone_from(&mut self, source: &Self)`: Performs copy-assignment from source'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> From<T> for Cell<T> where T: Copy`'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn from(t: T) -> Cell<T>`: Performs the conversion'
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Ord for Cell<T> where T: Copy + Ord`'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cmp(&self, other: &Cell<T>) -> Ordering`: This method returns an `Ordering`
    between self and other'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Debug for Cell<T> where T: Copy + Debug`'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> PartialOrd<Cell<T>> for Cell<T> where T: Copy + PartialOrd<T>`'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn partial_cmp(&self, other: &Cell<T>) -> Option<Ordering>`: This method returns
    an ordering between self and other values if one exists'
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn lt(&self, other: &Cell<T>) -> bool`: This method tests less than (for self
    and other) and is used by the `<` operator'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn le(&self, other: &Cell<T>) -> bool`: This method tests less than or equal
    to (for self and other) and is used by the `<=` operator'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn gt(&self, other: &Cell<T>) -> bool`: This method tests greater than (for
    self and other) and is used by the `>` operator'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ge(&self, other: &Cell<T>) -> bool`: This method tests greater than or
    equal to (for self and other) and is used by the `>=` operator'
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Std::cell::Ref`: Wraps a borrowed reference to a value in a `RefCell` box'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Methods**'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<''b, T> Ref<''b, T> where T: ?Sized`'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone(orig: &Ref<''b, T>) -> Ref<''b, T>`: Copies a `Ref`. The `RefCell`
    is already immutably borrowed, so this cannot fail.'
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn map<U, F>(orig: Ref<''b, T>, f: F) -> Ref<''b, U>`'
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`where F: FnOnce(&T) -> &U, U: ?Sized`: Makes a new `Ref` for a component of
    the borrowed data. The `RefCell` is already immutably borrowed, so this cannot
    fail.'
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Trait implementation**'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<''b, T> Debug for Ref<''b, T> where T: Debug + ?Sized`'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<''b, T> Deref for Ref<''b, T> where T: ?Sized`'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn deref(&self) -> &T`: The method is called to dereference a value'
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Std::cell::RefCell`: A mutable memory location with dynamically checked borrow
    rules'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Methods**'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<T> RefCell<T>`'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn new(value: T) -> RefCell<T>`: Creates a new `RefCell` containing a value'
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn into_inner(self) -> T`: Consumes the `RefCell`, returning the wrapped value.'
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> RefCell<T> where T: ?Sized`'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn borrow(&self) -> Ref<T>`: Immutably borrows the wrapped value.'
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows
    can be taken out at the same time. Throws a panic if the value is currently mutably
    borrowed.
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`fn try_borrow(&self) -> Result<Ref<T>, BorrowError>`: Immutably borrows the
    wrapped value, returning an error if the value is currently mutably borrowed.
    The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows
    can be taken out at the same time.'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn borrow_mut(&self) -> RefMut<T>`: Mutably borrows the wrapped value. The
    borrow lasts until the returned `RefMut` exits scope. The value cannot be borrowed
    while this borrow is active (throws a panic).'
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn try_borrow_mut(&self) -> Result<RefMut<T>, BorrowMutError>`: Mutably borrows
    the wrapped value, returning an error if the value is currently borrowed. The
    borrow lasts until the returned `RefMut` exits scope. The value cannot be borrowed
    while this borrow is active.'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn as_ptr(&self) -> *mut T`:  Returns a raw pointer to the underlying data
    in this cell.'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn get_mut(&mut self) -> &mut T`: Returns a mutable reference to the underlying
    data.'
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait implementations**'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '`impl<T> PartialEq<RefCell<T>> for RefCell<T> where T: PartialEq<T> + ?Sized`'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn eq(&self, other: &RefCell<T>) -> bool`: Tests for self and other values
    being equal, and is used by `==`'
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ne(&self, other: &Rhs) -> bool`: Tests for `!=`'
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Default for RefCell<T> where T: Default`'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn default() -> RefCell<T>`: Creates a `RefCell<T>`, with the `Default` value
    for `T`'
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Clone for RefCell<T> where T: Clone`'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone(&self) -> RefCell<T>`: Returns a copy of the value'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn clone_from(&mut self, source: &Self)`: Performs copy-assignment from source'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> From<T> for RefCell<T>`'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn from(t: T) -> RefCell<T>`: Performs the conversion'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Ord for RefCell<T> where T: Ord + ?Sized`'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn cmp(&self, other: &RefCell<T>) -> Ordering`: Returns an `Ordering` between
    self and other'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> Debug for RefCell<T> where T: Debug + ?Sized`'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn fmt(&self, f: &mut Formatter) -> Result<(), Error>`: Formats the value
    using the given formatter'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`impl<T> PartialOrd<RefCell<T>> for RefCell<T> where T: PartialOrd<T> + ?Sized`'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn partial_cmp(&self, other: &RefCell<T>) -> Option<Ordering>`: Returns an
    ordering between self and other values if one exists'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn lt(&self, other: &RefCell<T>) -> bool`: Tests less than (for self and other)
    and is used by the `<` operator'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn le(&self, other: &RefCell<T>) -> bool`: Tests less than or equal to (for
    self and other) and is used by the `<=` operator'
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn gt(&self, other: &RefCell<T>) -> bool`: Tests greater than (for self and
    other) and is used by the `>` operator'
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fn ge(&self, other: &RefCell<T>) -> bool`: Tests greater than or equal to
    (for self and other) and is used by the `>=` operator'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The code examples are in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: std::char
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for the Structs, Traits, and Enum character types.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `DecodeUtf16`, `DecodeUtf16Error`, `EscapeDefault`, `EscapeUnicode`, `ToLowercase`,
    and `ToUpperCase`.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constants**: `Max` and `Replacement_Character`.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `decode_utf16`, `from_digit`, `from_u32`, and `from_u32_unchecked`.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::clone
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is for use with types that cannot be implicitly copied.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: More complex types (such as strings) are not implicitly copyable. These types
    have to be made explicitly copyable using the `Clone` trait and clonable using
    the `clone` method.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Trait `Clone`.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: std::cmp
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides the ability to order and compare data.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: This module defines both `PartialOrd` (overloads `<`. `<=`, `>`, and `>=`) and `PartialEq` traits
    (overloads `==` and `!=`) .
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Enum `Ordering`, traits `Eq` (equality comparisons), `Ord` (total
    order), `PartialEq` (partial equality relations), `PartialOrd` (values that can
    be compared for a sort-order) .'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: std::collections
  id: totrans-390
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This covers the vectors, maps, sets, and binary heaps.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: There are four main categories of collection, but for the majority of the time `Vec` and `HashMap` should
    be used.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: The collection types are
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: Sequences (`Vec`, `VecDeque`, `LinkedList` - if you're used to C#, these provide
    the functionality of `List<T>`)
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maps (`HashMap`, `BTreeMap`. For C# users, these equate roughly to `Dictionary<T,
    U>`, and `Map`)
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets (`HashSet`, `BTreeSet`)
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BinaryHeap
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which collection should be used depends on what you want to do. Each will have
    a performance impact depending on what you're doing, though usually it's only `HashMap` that
    will give a negative impact.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of use:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '`Vec`: Creates a collection of type `T` that can be resized; elements can be
    added to the end'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VecDeque`: Creates a collection of type `T`, but with elements insertable
    at both ends; needs a queue or double-ended queue (deque)'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LinkedList`: Used when you want a `Vec` or `VecDeque`, and to split and append
    lists'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HashMap`: Creates a cached association of keys with values'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BTreeMap: Use with key-pair values where in general you want the largest and
    smallest key-pair values'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BinaryHeap: Stores elements, but only processes the biggest or most important
    ones when you want them'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these collections deals with its own memory handling. This is important
    as collections are able to allocate more space as required (and within the limitations
    of the hardware capacity of the machine they are running on).
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following: I create a `Vec<T>` without setting a capacity. Let `T` be
    a structure. This is not an uncommon occurrence. I add a number of objects to
    the `Vec`, and each is then allocated on the heap. The heap expands, which is
    fine. I then delete a number of these objects. Rust then *repositions* the other
    members of the heap belonging to the `Vec`.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: If I allocated space using `with_capacity`, then we have a maximum allocation
    available, which further helps with memory handling. We can help memory allocation
    further by using `shrink_to_fit`, which reduces the size of our `Vec` to fit the
    size required.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '**Iterators**'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: 'Iterators are very useful and used in libraries. Primarily, an iterator is
    used in a for loop. Almost all collections provide three iterators: `iter`, `iter_mut`,
    and `into_iter`. Each of the iterator types performs a different function:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '`iter`: This provides an iterator of immutable references to all contents of
    the collection in the order that best suits the collection type.'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iter_mut`: This provides an iterator of mutable references in the same order
    as `iter`.'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`into_iter`: This transforms the collection into an iterator. Very useful when
    the collection isn''t needed, but its contents are. The `into_iter` iterator also
    includes the ability to extend a vector.'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structs**: `BTreeMap`, `BTreeSet`, `BinaryHeap`, `HashMap`, `HashSet`, `LinkedList`,
    and `VecDeque`.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: std::convert
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for the conversion between types.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: When writing a library, implement `From<T>` and `TryFrom<T>` instead of `Into<T>` and `TryInto<T>` as
    the `From` forms provide greater flexibility.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '**Implementations**: `As*` (reference-to-reference conversions), `Into` (consume
    the value in the conversion), `From` (useful for value and reference conversion), `TryFrom`,
    and `TryInto` (similar to `From` and `Into`, allows for failure)'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Traits `AsMut`, `AsRef`, `From`, and `Into`'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::default
  id: totrans-420
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This trait provides meaningful values for types.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: Default provides default values for various primitive types. If a complex type
    is used, you will need to implement `Default`.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Trait `Default`.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: std:env
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for dealing with process environment.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: Provides a number of functions to obtain values from the current operating systems.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '**Enum**: `VarError` (possible errors from the `env::var` method)'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structs**: `Args` (yields a `String` for each argument), `ArgOs` (yields
    an `OsString` for each argument), `JoinPathsError` (returns an error when the
    paths fail to join), `SplitPaths` (iterates over `PathBuf` for parsing an environment
    variable to platform-specific conventions), `Vars`, and `VarsOS` (iterates over
    a snapshot of the environment variables for a process)'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std:error
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for working with errors.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Trait `Error` (base functionality for all errors)'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: std::f32
  id: totrans-433
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used to deal with 32-bit floating point types.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: This module provides basic math constants: `Digits`, `Epsilon`, `Infinity`, `Mantissa_Digits`, `Max` (largest
    finite `f32` value), `Max_10_Exp`, `Max_Exp`, `Min` (smallest finite `f32` value), `Min_10_Exp`, `Min_Exp`, `Min_Positive` (smallest
    possible normalized `f32` value), `NAN`, `Neg_Infinity`, and `Radix`.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: std::f64
  id: totrans-436
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used to deal with 64-bit floating point types.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: This module provides basic math constants: `Digits`, `Epsilon`, `Infinity`, `Mantissa_Digits`, `Max` (largest
    finite `f64` value), `Max_10_Exp`, `Max_Exp`, `Min` (smallest finite `f64` value), `Min_10_Exp`, `Min_Exp`, `Min_Positive` (smallest
    possible normalized `f64` value), `NAN`, `Neg_Infinity`, and `Radix`.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: std:ffi
  id: totrans-439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FFI is Rust's method of interacting with non-Rust libraries. This trait provides
    a number of utilities for this purpose.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**: Structs `CStr`, `CString` (representation of
    a borrowed C string and an owned C-compatible string respectively), `FromBytesWithNullError` (error
    returned from `CStr::from_bytes_with_nul`), `IntoStringError` (error returned
    from `CString::into_string` to indicate a UTF8 error during a conversion), `NulError` (returns
    an error from `CString::new` indicating a null byte was found in the provided
    vector), `OsStr`, and `OsString` (slices into OS strings).'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: std::fmt
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for formatting and outputting strings.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: This module provides the `format!` macro for dealing with output. The macro
    is extremely powerful and very flexible, and provides a great deal of functionality.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Arguments` (represents a safely precompiled version of a format
    string and arguments), `DebugList`, `DebugMap`, `DebugSet`, `DebugStruct`, `DebugTuple` (helps
    with `fmt::Debug` implementations), `Error` (an error type returned from formatting
    a message into a stream), and `Formatter` (represents both where to emit formatting
    strings and how to format them).'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `Binary`, `Debug`, `Display`, `LowerExp`, `LowerHex`, `Octal`, `Pointer`, `UpperExp`, `UpperHex`,
    and `Write` (provides collection of methods that are required to format a message
    into a stream).'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `format` (takes a precompiled format string with arguments and
    returns a formatted string) and  `write` (takes an output stream, a precompiled
    format string and list of arguments. The arguments will be formatted according
    to the specified format string).'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::fs
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used when using the filesystem and manipulating files.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: This module provides a set of cross-platform methods to manipulate the filesystem
    the application is sitting on. If at all possible, avoid using the `remove_dir_all` function.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: Structs, Traits, and Enums
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `DirBuilder` (used to create directories), `DirEntry` (returned
    by the `ReadDir` iterator), File (opens a file on the filesystem), `FileType` (represents
    a type of file with accessors to each file type), `Metadata` (information about
    the file), `OpenOptions` (options and flags used to configure how a file is opened), `Permissions` (file
    permissions on a file), and `ReadDir` (an iterator over the entries in a directory).'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `canonicalize` (returns the canonical form of a path), `copy` (copies
    files), `create_dir`, `create_dir_all` (recursively creates a directory and all
    parent components if missing), `hard_link` (creates a hard link on the file system), `metadata` (gets
    the metadata for a given path and file), `read_dir` (returns an iterator over
    the entries within a directory), `read_link` (reads a symbolic link returning
    the file it points to), `remove_dir` (removes an empty directory), `remove_dir_all` (removes
    a directory on a path recursively—on some operating systems this can completely
    delete your hard drive, so be careful!), `remove_file` (deletes a file), `rename` (renames
    a given file or directory), `set_permissions` (sets permissions on a given file
    or directory), and `symlink_metadata` (queries the metadata for a file without
    following any symlinks).'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::hash
  id: totrans-455
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used to provide hashing support.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: This module ensures that the easiest way to create a hash for a given type is
    to use `#[derive(Hash)]`.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `BuildHasherDefault` (implements `BuildHasher` for all Hasher
    types that also implement `Default`) and `SipHasher` (implementation of `SipHash`)'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `BuildHasher`, `Hash`, and `Hasher`'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::i8
  id: totrans-461
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the 8-bit integer type.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: std::i16
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the 16-bit integer type.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: std::i32
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the 32-bit integer type.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: std::i64
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for working with the 64-bit integer type.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: std::io
  id: totrans-473
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides a number of facilities for core input/output.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: This module provides code `Read` and `Write` functionality for not only normal
    control, but also for various stream types (such as TCP and File). Access can
    be sequential or random. IO behavior also depends on the platform the application
    sits on, so testing is highly encouraged.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `BufReader` (adds buffering to any reader), `BufWriter` (buffers
    the writer output), `Bytes` (an iterator of values of a reader), `Chain` (chains
    two readers), `Cursor` (wraps another type and provides the Seek implementation), `Empty` (reader
    that is always at EOF), `Error` (error type for IO operations), `IntoInnerError` (error
    returned by `into_inner` that combines the error and buffered writer object, which
    may be recovered), `LineWriter` (wraps a writer and buffers into it), `Lines` (iterates
    over the lines of `BufRead`), `Repeat` (reader that continually returns a byte), `Sink` (writer
    that moves data to null), `Split` (an iterator over the contents of `BufRead` split
    at a point), `Stderr` (a handle for the process standard error stream), `StdErrLock` (locked
    ref. to `Stderr`), `Stdin` (standard input stream), `StdinLock` (locked ref. to `Stdin`), `Stdout` (global
    output stream), `StdoutLock` (locked ref. to `Stdout`), and `Take` (limits the
    bytes read from the reader).'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enums**: `ErrorKind` and `SeekFrom`.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `BufRead` (buffered input read), `Read` (reads bytes from source), `Seek` (provides
    cursor that can be moved within the stream), and `Write`.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `copy` (copies contents of reader to writer), `empty` (new handle
    to an empty reader), `repeat` (creates an instance of reader that repeats 1 byte
    forever), `sink` (an instance of the writer that consumes all data), `stderr`
    (a new handle to `stderr`), `stdin` (a new handle to `stdin`), and `stdout` (a
    new handle to `stdout`).'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::isize
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is for use with the pointer-sized integer type.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: std::iter
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for iteration.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Chain` (strings two iterators together), `Cloned` (clones the
    underlying iterator), `Cycle` (never-ending iterator), `Empty` (yields nothing), `Enumerate` (yields
    the current count and element while iterating), `Filter` (filters the elements
    of `iter` with predicate), `FilterMap` (iterator that uses a type for both filter
    and map from `iter`), `FlatMap` (maps each element to the iterator, yields the
    elements produced), `Fuse` (yields `None` continually once the underlying iterator
    first iterates `None`), `Inspect` (calls a function with a reference to each element
    before yielding it), `Map` (maps the values of `iter` with a type), `Once` (yields
    an element once), `Peekable` (allows `peek()` to be used), `Repeat` (repeats an
    element forever), `Rev` (double ended iterator with the read direction reversed), `Scan` (maintains
    state while iterating another iterator), `Skip` (skips *n* elements of `iter`), `SkipWhile` (rejects
    elements while predicate is true), `Take` (only iterates over the first *n* of `iter`), `TakeWhile` (only
    accepts elements to iterate over while the predicate is true), and `Zip` (iterates
    two iterators simultaneously).'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `DoubleEndedIterator` (yields the elements at both ends), `ExactSizeIterator` (exact
    length known), `Extend` (extends a collection with the contents of an iterator), `FromIterator` (converts
    from `Iterator`), `ToIterator` (converts into `Iterator`), and `Iterator` (interface
    for dealing with iterators).'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `empty` (new iterator that yields nothing), `once` (new iterator
    that yields an element once), and `repeat` (new iterator that continually repeats
    a single element).'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::marker
  id: totrans-490
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides primitive traits and markers to represent basic kinds of
    type.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: '**Struct**: `PhantomData` (allows the description of type `T`).'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `Copy` (types that can be copied), `Send` (types that can be transferred
    across threads), `Sized` (types with a constant size), and `Sync` (types that
    can be safely shared between threads).'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::mem
  id: totrans-495
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module performs memory handling functions.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: This module is used to query size and alignment types, initialization, and the
    manipulation of memory.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions**: `align_of` (returns alignment in memory of type), `align_of_val` (minimum
    alignment of type of value `val` points to), `drop` (disposes), `forget` (leaves
    a value to void, takes ownership but doesn''t run the destructor), `replace` (replaces
    the value at a `mut` location with a new one, returns the old value but doesn''t
    de-initialize or copy either one), `size_of` (returns size of type in bytes), `size_of_val` (returns
    the size of a value in bytes), `swap` (swaps the values of two mut locations;
    must be of the same type), `transmute` (unsafely transforms a value of one type
    into another), `transmute_copy` (interprets `src` as `&T`, then reads `src` without
    moving the contained value), `uninitialized` (bypasses Rust''s memory initialization
    requirement), and `zeroed` (creates a value initialized to zero).'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std:net
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides basic TCP/UDP communication primitives.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `AddrParseError` (error returned when parsing an IP or socket
    address), `Incoming` (infinite iterator over connections from `TcpListener`), `Ipv4Addr` (represents
    an IPv4 address), `Ipv6Addr` (represents an IPv6 address), `SocketAddrV4` (IPv4
    socket address), `SocketAddrV6` (IPv6 socket address), `TcpListener` (represents
    a socket server), `TcpStream` (represents a TCP stream between the local and remote
    sockets), and `UdpSocket` (UDP socket).'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enums**: `IpAddr` (either an IPv4 or IPv6 address), `Shutdown` (values passed
    to the shutdown method of `TcpStream`), and `SocketAddr` (socket address for networking
    applications).'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait**: `ToSocketAddrs` (object that can be converted to or resolved from
    one or more `SocketAddr` values).'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::num
  id: totrans-506
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for dealing with numbers.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: This module provides extra types that are useful for dealing with numbers.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums **'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `ParseFloatError` (error returned when parsing a `float`), `ParseIntError` (error
    returned when parsing an `int`), and `Wrapping` (intentionally-wrapped arithmetic
    on `T`).'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enum**: `FpCategory` (classification of floating point numbers).'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::os
  id: totrans-512
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module contains functions that provide abstracted access to the OS the
    application is running on.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: 'This module contains three modules: `linux` (Linux-specific), `raw` (raw OS-specific
    types for current platform), and `unix` (experimental extension).'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: std::panic
  id: totrans-515
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides support for panic within the standard library.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `AssertUnwindSafe` (checks whether a type is panic-safe), `Location` (information
    about the panic location), and `PanicInfo` (information about the panic).'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traits**: `RefUnwindSafe` (trait that represents types where the shared ref
    is considered `recovery` safe) and `UnwindSafe` (trait that represents panic-safe
    types in Rust).'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `catch_unwind` (invokes a closure, captures the cause of the
    unwind), `resume_unwind` (triggers a panic without invoking the panic), `set_hook` (registers
    a custom panic hook and replaces previous hooks), and `take_hook` (unregisters
    a current panic hook).'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::path
  id: totrans-521
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides abstracted access to the path in a cross-platform way for
    manipulation.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: Two types are provided, `PathBuf` and `Path`. These are wrappers around `OsString` and `OsStr` and
    allow direct work to be performed on strings according to the local platform path.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Components` (core iterator giving the parts of a path), `Display` (for
    safely printing paths with `format!()` and `{}`), `Iter` (iterator over the parts
    of a path), `Path` (slice of a path), `PathBuf` (owned mutable path), `PrefixComponent` (Windows-specific
    path prefix), and `StripPrefixError` (error returned from the `Path::strip_prefix` method
    indicating the prefix was not found in self).'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enums**: `Component` (single component of a path) and `Prefix` (path prefix
    [Windows only]).'
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function**: `is_separator` (determines whether the character is one of the
    permitted path separators).'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::process
  id: totrans-528
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for working with processes.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Child` (represents a running or exited child process), `ChildStderr` (handle
    to a child process stderr), `ChildStdin` (handle child process stdin), `ChildStdout` (handle
    for child process stdout), `Command` (acts as a process builder), `ExitStatus` (describes
    the result of a process after it is terminated), `Output` (output of finished
    process), and `Stdio` (describes what to do with the standard IO stream for a
    child process).'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function**: `exit` (terminates current process with exit code).'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::ptr
  id: totrans-533
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides access for handling raw, unsafe pointers.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: See [Chapter 5](part0106.html#352RK0-a5175cb437d742a9aed0ea574000ee2d), *Remember,
    Remember*, for more details.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions**: `copy` (copies `count * size_of<T>` from `src` to `dest`; can
    overlap), `copy_nonoverlapping` (same as `copy`, except cannot overlap), `drop_in_place` (executes
    destructor of the pointed-to value), `null` (new null raw pointer), `null_mut` (new
    null mutable raw pointer), `read` (reads value from `src` without moving it), `read_volatile` (volatile
    read of the value from `src` without moving it), `replace` (replaces value at `dest` with `src`,
    returning the old value), `swap` (swaps the values at two mutable locations of
    the same type), `write` (overwrites the memory location with the value without
    reading or dropping the old value), `write_bytes` (invokes `memset` on the specified
    pointer), and `write_volatile` (performs a volatile write of a memory location
    with a given value).'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: std::slice
  id: totrans-538
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides a dynamically-sized placement into a contiguous `[T]`.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: Slices are mutable (`&mut [T]`) or shared slices (`&[T]`) of memory represented
    as a pointer. They implement `IntoIter`, which duplicates the type `IntoIter` is
    being performed on.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Chunks` (iterates over a non-overlapping slice in chunks of `size_of<T>` elements
    at a time), `ChunksMut` (as for `Chunks` except are mutable), `Iter` (immutable
    iterator), `IterMut` (mutable iterator), `RSplitN` and `RSplitNMut` (iterate over
    sub-slices that match a predicate, limited to a given number of splits, and start
    from the end of the slice). `Split` and `SplitMut` (iterator over sub-slice separated
    by elements that match a predicate function or predicate respectively), and `SplitN` and `SplitNMut` (iterate
    over sub-slices that match predicate function), and `Windows` (iterates over overlapping
    sub-slice of length `size_of<T>`).'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `from_raw_parts` (forms a slice from a pointer and length) and `from_raw_parts_mut` (as `from_raw_parts` except
    the slice returned is mutable).'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::str
  id: totrans-544
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is used for Unicode string slices.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Bytes` (iterator for a strings bytes), `CharIndices` (iterator
    for a string''s characters and byte offsets), `Chars` (iterator for the char of
    a string), `EncodeUtf16` (external iterator for a string''s UTF16 code), `Lines` (created
    with `lines()`), `MatchIndices` (created with `match_indices()`), `Matches` (created
    with `matches()`), `ParseBoolError` (error returned when passing a `bool` from
    a string fail), `RMatchIndicies` (created with `rmatch_indicies()`), `RMatches` (created
    with `rmatches()`), `RSplit` (created with `rsplit()`), `RSplitN` (created with `rsplitn()`), `RSplitTerminator` (created
    with `rsplit_terminator()`), `Split` (created with `split()`), `SplitN` (created
    with `splitn()`), `SplitTerminator` (created with `split_terminator()`), `SplitWhitespace` (iterates
    over the non-whitespace substrings of a string), and `Utf8Error` (error that can
    occur when attempting to interpret a sequence of `u8` as a string)'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait**: `FromStr` (abstracts the idea of creating a new instance of a type
    from a string)'
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `from_utf8` (converts a slice of bytes to a string slice) and `from_utf8_unchecked` (as
    with `from_utf8` without checking the string contains valid UTF8)'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::string
  id: totrans-550
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides string handling with a UTF-8 encoded growable string.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: Contains the String type and a trait to convert to a String (`ToString`) as
    well as error types.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Drain` (draining iterator), `FromUtf16Error` (possible error
    value when converting from a UTF16 slice), and `FromUtf8Error` (as for `FromUtf16Error` except
    for UTF8), and `String` (UTF8-encoded growing string).'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enum**: `ParseError`.'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trait**: `ToString` (converts a value to a string).'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: std::sync
  id: totrans-557
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module provides thread synchronization functions.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: This is covered in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Arc` (atomic ref counted wrapper), `Barrier` (enables multiple
    threads to synchronize the beginning of some computation), `BarrierWaitResult` (result
    from a thread wait), `Condvar` (CONDitional VARiable), `Mutex` (mutual exclusion
    primitive), `MutexGuard` (scoped lock mutex; becomes unlocked when the structure
    goes out of scope), `Once` (sync primitive used to run a one-time global initialization), `PoisonError` (error
    that can be returned when a lock is required), `RwLock` (read/write lock), `RWLockReadGuard` (used
    to release shared read access to a lock when dropped), `RWWriteGuard` (used to
    release shared write access if a lock when dropped), `WaitTimeoutResult` (type
    used to determine whether a condition variable timed out or not), and `Weak` (weak
    pointer to `Arc`).'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enum**: `TryLockError` (errors that may occur when calling `try_lock`).'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the code examples in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: std::thread
  id: totrans-564
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the main threading module, providing native threads to your Rust application.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: Threading is covered in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Builder` (provides detailed control over new threads), `JoinHandle` (owned
    permission to join on a thread), `LocalKey` (key to local storage that owns the
    contents), and `Thread` (handle to thread).'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: `current` (get handle to the thread invocation), `panicking` (if
    the thread is unwinding due to a panic), `park` (blocks unless or until the token
    is available), `park_timeout` (blocks for a duration), and `sleep` (puts the current
    thread to sleep for a duration), `spawn` (spawns a new thread, returns a `JoinHandle`),
    and `yield_now` (gives up a timeslice to the OS scheduler).'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the code examples in [Chapter 11](part0265.html#7SN520-a5175cb437d742a9aed0ea574000ee2d), *Concurrency
    in Rust*.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: std::time
  id: totrans-571
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a module for handling time.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Duration` (represents a span of time), `Instant` (measurement
    of a monotonically increasing clock), `SystemTime` (measures the system clock),
    and `SystemTimeError` (error returned from `SystemTime.duration_since()`).'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: std::u8
  id: totrans-575
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the unsigned 8-bit integer type.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: std::u16
  id: totrans-578
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the unsigned 16-integer type.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: std::u32
  id: totrans-581
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the unsigned 32-bit integer type.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: std::u64
  id: totrans-584
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the unsigned 64-bit integer type.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: std::usize
  id: totrans-587
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the pointer-sized unsigned integer type.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: This module defines the `MAX` and `MIN` constants.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: std::vec
  id: totrans-590
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module defines the growable array type with heap-allocated contents.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: This is written as `Vec<T>`, and values are added to (or removed from) the end
    of the `vec` using `push` and `pull`, respectively.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs, Traits, and Enums**'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: '**Structs**: `Drain` (draining iterator for `Vec<T>`), `IntoIter` (iterator
    that moves out of a vector), and `Vec` (contiguous growable array type).'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-595
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered a sizable portion of the Rust standard library. Always check
    the official documentation online at [https://doc.rust-lang.org/std/](https://doc.rust-lang.org/std/)—it
    is of an exceptionally high quality and always up-to-date!
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: In the next and last chapter, we will take a look at using external libraries
    from Rust via its **Foreign Function Interface** (**FFI**).
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
