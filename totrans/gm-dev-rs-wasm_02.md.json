["```rs\nmkdir walk-the-dog\ncd walk-the-dog\nnpm init rust-webpack\n```", "```rs\nnpx: installed 17 in 1.941s\n 🦀 Rust + 🕸 WebAssembly + Webpack = ❤\nInstalled dependencies ✅\n```", "```rs\nnpm install\n```", "```rs\nℹ  Installing wasm-pack\nError: Rust compilation.\nat ChildProcess.<anonymous> (/walk-the-dog/node_modules/@wasm-tool/wasm-pack-plugin/plugin.js:221:16)\nat ChildProcess.emit (events.js:315:20)\nat maybeClose (internal/child_process.js:1048:16)\nat Socket.<anonymous> (internal/child_process.js:439:11)\nat Socket.emit (events.js:315:20)\nat Pipe.<anonymous> (net.js:673:12)\n```", "```rs\ncurl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n```", "```rs\nnpm run start\n```", "```rs\n# You must change these to your own details.\n[package]\nname = \"rust-webpack-template\"\ndescription = \"Walk the Dog - the game for the Rust Games with WebAssembly book\"\nversion = \"0.1.0\"\nauthors = [\"Eric Smith <paytonrules@gmail.com>\"]\ncategories = [\"wasm\"]\nreadme = \"README.md\"\nedition = \"2021\"\n```", "```rs\nwasm-bindgen = \"0.2.78\"\n...\n[dependencies.web-sys]\nversion = \"0.3.55\"\n...\n[dev-dependencies]\nwasm-bindgen-test = \"0.3.28\"\nfutures = \"0.3.18\"\njs-sys = \"0.3.55\"\nwasm-bindgen-futures = \"0.4.28\"\n```", "```rs\n[target.\"cfg(debug_assertions)\".dependencies]\nconsole_error_panic_hook = \"0.1.5\"\n```", "```rs\nconsole_error_panic_hook = \"0.1.7\"\n```", "```rs\n// This provides better error messages in debug mode.\n// It's disabled in release mode so it doesn't bloat \n   up the file size.\n    #[cfg(debug_assertions)]\n    console_error_panic_hook::set_once();\n```", "```rs\nuse wasm_bindgen::prelude::*;\nuse web_sys::console;\n```", "```rs\n#[wasm_bindgen(start)]\npub fn main_js() -> Result<(), JsValue> {\n```", "```rs\nconsole_error_panic_hook::set_once();\n// Your code goes here!\nconsole::log_1(&JsValue::from_str(\"Hello world!\"));\nOk(())\n```", "```rs\ncanvas = window.document.getElementById(\"canvas\")\ncontext = canvas.getContext(\"2d\")\ncontext.moveTo(300, 0)\ncontext.beginPath()\ncontext.lineTo(0, 600)\ncontext.lineTo(600, 600)\ncontext.lineTo(300, 0)\ncontext.closePath()\ncontext.stroke()\ncontext.fill()\n```", "```rs\nuse wasm_bindgen::JsCast;\n```", "```rs\nconsole_error_panic_hook::set_once();\nlet window = web_sys::window().unwrap();\nlet document = window.document().unwrap();\nlet canvas = document\n    .get_element_by_id(\"canvas\")\n    .unwrap()\n    .dyn_into::<web_sys::HtmlCanvasElement>()\n    .unwrap();\nlet context = canvas\n    .get_context(\"2d\")\n    .unwrap()\n    .unwrap()\n    .dyn_into::<web_sys::CanvasRenderingContext2d>()\n    .unwrap();\ncontext.move_to(300.0, 0.0); // top of triangle\ncontext.begin_path();\ncontext.line_to(0.0, 600.0); // bottom left of triangle\ncontext.line_to(600.0, 600.0); // bottom right of triangle\ncontext.line_to(300.0, 0.0); // back to top of triangle\ncontext.close_path();\ncontext.stroke();\ncontext.fill();\nOk(())\n```", "```rs\nerror[E0425]: cannot find function 'window' in crate 'web_sys'\n--> src/lib.rs:18:27\n|\n18 | let window = web_sys::window().unwrap();\n|                           ^^^^^^ not found in 'web_sys'\n```", "```rs\nlet window = web_sys::window().unwrap();\n```", "```rs\nfn draw_triangle(context: &web_sys::CanvasRenderingContext2d,     points: [(f64, f64); 3]) {\n        let [top, left, right] = points;\n        context.move_to(top.0, top.1);\n        context.begin_path();\n        context.line_to(left.0, left.1);\n        context.line_to(right.0, right.1);\n        context.line_to(top.0, top.1);\n        context.close_path();\n        context.stroke();\n}\n```", "```rs\nlet context = canvas\n    .get_context(\"2d\")\n    .unwrap()\n    .unwrap()\n    .dyn_into::<web_sys::CanvasRenderingContext2d>()\n    .unwrap();\ndraw_triangle(&context, [(300.0, 0.0), (0.0, 600.0), (600.0, 600.0)]);\n```", "```rs\ndraw_triangle(&context, [(300.0, 0.0), (150.00, 300.0), (450.0, 300.0)]);\n```", "```rs\ndraw_triangle(&context, [(150.0, 300.0), (0.0, 600.0), (300.0, 600.0)]);\ndraw_triangle(&context, [(450.0, 300.0), (300.0, 600.0), (600.0, 600.0)]);\n```", "```rs\nfn sierpinski(context: &web_sys::CanvasRenderingContext2d, points: [(f64, f64); 3], depth: u8) {\n    draw_triangle(&context, [(300.0, 0.0), (0.0, 600.0), \n     (600.0, 600.0)]);\n    draw_triangle(&context, [(300.0, 0.0), (150.00, 300.0), \n     (450.0, 300.0)]);\n    draw_triangle(&context, [(150.0, 300.0), (0.0, 600.0), \n     (300.0, 600.0)]);\n    draw_triangle(&context, [(450.0, 300.0), (300.0, \n     600.0), (600.0, 600.0)]);\n}\n```", "```rs\nsierpinski(&context, [(300.0, 0.0), (0.0, 600.0), (600.0, 600.0)], 2);\n```", "```rs\nfn sierpinski(context: &web_sys::CanvasRenderingContext2d, points: [(f64, f64); 3], depth: u8) {\n    draw_triangle(&context, points);\n    ...\n```", "```rs\n...\nlet depth = depth - 1;\nif depth > 0 {\n    draw_triangle(&context, [(300.0, 0.0), (150.00, 300.0), \n     (450.0, 300.0)]);\n    draw_triangle(&context, [(150.0, 300.0), (0.0, 600.0), \n     (300.0, 600.0)]);\n    draw_triangle(&context, [(450.0, 300.0), (300.0, \n     600.0), (600.0, 600.0)]);\n}\n```", "```rs\nif depth > 0 {\n    sierpinski(\n        &context,\n        [(300.0, 0.0), (150.00, 300.0), (450.0, 300.0)],\n        depth,\n    );\n    sierpinski(\n        &context,\n        [(150.0, 300.0), (0.0, 600.0), (300.0, 600.0)],\n        depth,\n    );\n    sierpinski(\n        &context,\n        [(450.0, 300.0), (300.0, 600.0), (600.0, 600.0)],\n        depth,\n    );\n    }\n```", "```rs\nlet [top, left, right] = points;\nif depth > 0 {\n    let left_middle = ((top.0 + left.0) / 2.0, (top.1 + \n     left.1) / 2.0);\n    let right_middle = ((top.0 + right.0) / 2.0, (top.1 + \n     right.1) / 2.0);\n    let bottom_middle = (top.0, right.1);\n    sierpinski(&context, [top, left_middle, right_middle], \n     depth);\n    sierpinski(&context, [left_middle, left, \n     bottom_middle], depth);\n    sierpinski(&context, [right_middle, bottom_middle, \n     right], depth);\n}\n```", "```rs\nfn midpoint(point_1: (f64, f64), point_2: (f64, f64)) -> (f64, f64) {\n    ((point_1.0 + point_2.0) / 2.0, (point_1.1 + point_2.1) \n    / 2.0)\n}\n```", "```rs\nif depth > 0 {\n    let left_middle = midpoint(top, left);\n    let right_middle = midpoint(top, right);\n    let bottom_middle = midpoint(left, right);\n    sierpinski(&context, [top, left_middle, right_middle], \n     depth);\n    sierpinski(&context, [left_middle, left, \n     bottom_middle], depth);\n    sierpinski(&context, [right_middle, bottom_middle, \n     right], depth);\n}\n```", "```rs\nsierpinski(&context, [(300.0, 0.0), (0.0, 600.0), (600.0, 600.0)], 5);\n```", "```rs\nconsole_error_panic_hook = \"0.1.7\"\nrand = \"0.8.4\"\n```", "```rs\nerror: target is not supported, for more information see: https://docs.rs/getrandom/#unsupported-targets\n   --> /usr/local/cargo/registry/src/github.com-\n   1ecc6299db9ec823/getrandom-0.2.2/src/lib.rs:213:9\n    |\n213 | /         compile_error!(\"target is not supported, for more information see: \\\n214 | |                         https://docs.rs/getrandom/#unsupported-targets\");\n```", "```rs\ngetrandom = { version = \"0.2.3\", features = [\"js\"] }\n```", "```rs\nfn draw_triangle(\n    context: &web_sys::CanvasRenderingContext2d,\n    points: [(f64, f64); 3],\n    color: (u8, u8, u8),\n) {\n```", "```rs\nfn sierpinski(\n    context: &web_sys::CanvasRenderingContext2d,\n    points: [(f64, f64); 3],\n    color: (u8, u8, u8),\n    depth: u8,\n) {\n    draw_triangle(&context, points, color);\n    let depth = depth - 1;\n    let [top, left, right] = points;\n    if depth > 0 {\n        let left_middle = midpoint(top, left);\n        let right_middle = midpoint(top, right);\n        let bottom_middle = midpoint(left, right);\n        sierpinski(&context, [top, left_middle, \n         right_middle], color, depth);\n        sierpinski(&context, [left_middle, left, \n         bottom_middle], color, depth);\n        sierpinski(&context, [right_middle, bottom_middle, \n         right], color, depth);\n    }\n}\n```", "```rs\nsierpinski(\n    &context,\n    [(300.0, 0.0), (0.0, 600.0), (600.0, 600.0)],\n    (0, 255, 0),\n    5,\n);\n```", "```rs\nlet mut rng = thread_rng();\nlet next_color = (\n    rng.gen_range(0..255),\n    rng.gen_range(0..255),\n    rng.gen_range(0..255),\n);\n...\nsierpinski(\n    &context,\n    top, left_middle, right_middle],\n    next_color,\n    depth,\n);\nsierpinski(\n    &context,\n    [left_middle, left, bottom_middle],\n    next_color,\n    depth,\n);\nsierpinski(\n    &context,\n    [right_middle, bottom_middle, right],\n    next_color,\n    depth,\n);\n```", "```rs\nlet color_str = format!(\"rgb({}, {}, {})\", color.0, color.1, color.2);\ncontext.set_fill_style(&wasm_bindgen::JsValue::from_str(&color_str));\n```"]