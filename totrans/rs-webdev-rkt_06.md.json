["```rs\n[package]\n```", "```rs\nedition = \"2018\"\n```", "```rs\nname = \"our_application\"\n```", "```rs\nversion = \"0.1.0\"\n```", "```rs\n[dependencies]\n```", "```rs\nrocket = {path = \"../../../rocket/core/lib/\", features = [\"uuid\"]}\n```", "```rs\nrocket_db_pools = {path = \"../../../rocket/contrib/db_pools/lib/\", features =[ \"sqlx_postgres\"]}\n```", "```rs\n#[macro_use]\n```", "```rs\nextern crate rocket;\n```", "```rs\nuse rocket::{Build, Rocket};\n```", "```rs\n#[launch]\n```", "```rs\nasync fn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build()\n```", "```rs\n}\n```", "```rs\nenum Status {\n```", "```rs\n    Inactive = 0,\n```", "```rs\n    Active = 1,\n```", "```rs\n}\n```", "```rs\n    sqlx = {version = \"0.5.9\", features = [\"postgres\", \"uuid\", \"runtime-tokio-rustls\", \"chrono\"]}\n    chrono = \"0.4\"\n    uuid = {version = \"0.8.2\", features = [\"v4\"]}\n    ```", "```rs\n    use chrono::{offset::Utc, DateTime};\n    use rocket_db_pools::sqlx::FromRow;\n    use uuid::Uuid;\n    #[derive(sqlx::Type, Debug)]\n    #[repr(i32)]\n    enum UserStatus {\n        Inactive = 0,\n        Active = 1,\n    }\n    #[derive(Debug, FromRow)]\n    struct User {\n        uuid: Uuid,\n        username: String,\n        email: String,\n        password_hash: String,\n        description: String,\n        status: UserStatus,\n        created_at: DateTime<Utc>,\n        updated_at: DateTime<Utc>,\n    }\n    ```", "```rs\n    [default]\n    [default.databases.main_connection]\n    url = \"postgres://username:password@localhost/rocket\"\n    ```", "```rs\n    CREATE TABLE IF NOT EXISTS users\n    (\n        uuid          UUID PRIMARY KEY,\n        username      VARCHAR NOT NULL UNIQUE,\n        email         VARCHAR NOT NULL UNIQUE,\n        password_hash VARCHAR NOT NULL,\n        description   TEXT,\n        status        INTEGER NOT NULL DEFAULT 0,\n        created_at    TIMESTAMPTZ NOT NULL DEFAULT \n        CURRENT_TIMESTAMP,\n        updated_at    TIMESTAMPTZ NOT NULL DEFAULT \n        CURRENT_TIMESTAMP\n    );\n    ```", "```rs\n    use rocket_db_pools::{sqlx::{FromRow, PgPool}, Database};\n    ...\n    #[derive(Database)]\n    #[database(\"main_connection\")]\n    struct DBConnection(PgPool);\n    async fn rocket() -> Rocket<Build> {\n        rocket::build().attach(DBConnection::init())\n    }\n    ```", "```rs\ntype HtmlResponse = Result<RawHtml<String>, Status>;\n```", "```rs\n#[get(\"/users/<_uuid>\", format = \"text/html\")]\n```", "```rs\nasync fn get_user(mut _db: Connection<DBConnection>, _uuid: &str) -> HtmlResponse {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\nuse rocket::form::{self, DataField, FromFormField, ValueField};\n```", "```rs\n...\n```", "```rs\n#[derive(Debug, FromRow)]\n```", "```rs\nstruct OurDateTime(DateTime<Utc>);\n```", "```rs\n#[rocket::async_trait]\n```", "```rs\nimpl<'r> FromFormField<'r> for OurDateTime {\n```", "```rs\nfn from_value(_: ValueField<'r>) -> form::Result<'r, \n```", "```rs\n    Self> {\n```", "```rs\n        todo!(\"will implement later\")\n```", "```rs\n    }\n```", "```rs\n    async fn from_data(_: DataField<'r, '_>) -> form::\n```", "```rs\n    Result<'r, Self> {\n```", "```rs\n        todo!(\"will implement later\")\n```", "```rs\n    }\n```", "```rs\n}\n```", "```rs\n#[derive(FromForm)]\n```", "```rs\nstruct Pagination {\n```", "```rs\n    cursor: OurDateTime,\n```", "```rs\n    limit: usize,\n```", "```rs\n}\n```", "```rs\n#[derive(sqlx::Type, Debug, FromFormField)]\n```", "```rs\n#[repr(i32)]\n```", "```rs\nenum UserStatus {\n```", "```rs\n    ...\n```", "```rs\n}\n```", "```rs\n#[derive(Debug, FromRow, FromForm)]\n```", "```rs\nstruct User {\n```", "```rs\n    ...\n```", "```rs\n    created_at: OurDateTime,\n```", "```rs\n    updated_at: OurDateTime,\n```", "```rs\n}\n```", "```rs\n#[get(\"/users?<_pagination>\", format = \"text/html\")]\n```", "```rs\nasync fn get_users(mut _db: Connection<DBConnection>, _pagination: Option<Pagination>) -> HtmlResponse {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\n#[get(\"/users/new\", format = \"text/html\")]\n```", "```rs\nasync fn new_user(mut _db: Connection<DBConnection>) -> HtmlResponse {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\nuse rocket::form::{self, DataField, Form, FromFormField, ValueField};\n```", "```rs\n...\n```", "```rs\n#[post(\"/users\", format = \"text/html\", data = \"<_user>\")]\n```", "```rs\nasync fn create_user(mut _db: Connection<DBConnection>, _user: Form<User>) -> HtmlResponse {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\n#[get(\"/users/edit/<_uuid>\", format = \"text/html\")]\n```", "```rs\nasync fn edit_user(mut _db: Connection<DBConnection>, _uuid: &str) -> HtmlResponse {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\n#[put(\"/users/<_uuid>\", format = \"text/html\", data = \"<_user>\")]\n```", "```rs\nasync fn put_user(mut _db: Connection<DBConnection>, _uuid: &str, _user: Form<User>) -> HtmlResponse {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\n#[patch(\"/users/<_uuid>\", format = \"text/html\", data = \"<_user>\")]\n```", "```rs\nasync fn patch_user(\n```", "```rs\n    mut _db: Connection<DBConnection>,\n```", "```rs\n    _uuid: &str,\n```", "```rs\n    _user: Form<User>,\n```", "```rs\n) -> HtmlResponse {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\n#[delete(\"/users/<_uuid>\", format = \"text/html\")]\n```", "```rs\nasync fn delete_user(mut _db: Connection<DBConnection>, _uuid: &str) -> HtmlResponse {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\n    #[derive(sqlx::Type, Debug, FromFormField)]\n    #[repr(i32)]\n    enum PostType {\n        Text = 0,\n        Photo = 1,\n        Video = 2,\n    }\n    #[derive(FromForm)]\n    struct Post {\n        uuid: Uuid,\n        user_uuid: Uuid,\n        post_type: PostType,\n        content: String,\n        created_at: OurDateTime,\n    }\n    ```", "```rs\n    trait DisplayPostContent {\n        fn raw_html() -> String;\n    }\n    struct TextPost(Post);\n    impl DisplayPostContent for TextPost {\n        fn raw_html() -> String {\n            todo!(\"will implement later\")\n        }\n    }\n    struct PhotoPost(Post);\n    impl DisplayPostContent for PhotoPost {\n        fn raw_html() -> String {\n            todo!(\"will implement later\")\n        }\n    }\n    struct VideoPost(Post);\n    impl DisplayPostContent for VideoPost {\n        fn raw_html() -> String {\n            todo!(\"will implement later\")\n        }\n    }\n    ```", "```rs\n    #[get(\"/users/<_user_uuid>/posts/<_uuid>\", format = \"text/html\")]\n    async fn get_post(mut _db: Connection<DBConnection>, _user_uuid: &str, _uuid: &str) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[get(\"/users/<_user_uuid>/posts?<_pagination>\", format = \"text/html\")]\n    async fn get_posts(\n        mut _db: Connection<DBConnection>,\n        _user_uuid: &str,\n        _pagination: Option<Pagination>,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[post(\"/users/<_user_uuid>/posts\", format = \"text/html\", data = \"<_upload>\")]\n    async fn create_post(\n        mut _db: Connection<DBConnection>,\n        _user_uuid: &str,\n        _upload: Form<Post>,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[delete(\"/users/<_user_uuid>/posts/<_uuid>\", format = \"text/html\")]\n    async fn delete_post(\n        mut _db: Connection<DBConnection>,\n        _user_uuid: &str,\n        _uuid: &str,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    ```", "```rs\nasync fn rocket() -> Rocket<Build> {\n```", "```rs\n   rocket::build().attach(DBConnection::init()).mount(\n```", "```rs\n        \"/\",\n```", "```rs\n        routes![\n```", "```rs\n            get_user,\n```", "```rs\n            get_users,\n```", "```rs\n            new_user,\n```", "```rs\n            create_user,\n```", "```rs\n            edit_user,\n```", "```rs\n            put_user,\n```", "```rs\n            patch_user,\n```", "```rs\n            delete_user,\n```", "```rs\n            get_post,\n```", "```rs\n            get_posts,\n```", "```rs\n            create_post,\n```", "```rs\n            delete_post,\n```", "```rs\n        ],\n```", "```rs\n    )\n```", "```rs\n}\n```", "```rs\nuse rocket::fs::{NamedFile, TempFile};\n```", "```rs\n...\n```", "```rs\n#[get(\"/<_filename>\")]\n```", "```rs\nasync fn assets(_filename: &str) -> NamedFile {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\nasync fn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build()\n```", "```rs\n        ...\n```", "```rs\n        .mount(\"/assets\", routes![assets])\n```", "```rs\n}\n```", "```rs\nuse rocket::request::Request;\n```", "```rs\n...\n```", "```rs\n#[catch(404)]\n```", "```rs\nfn not_found(_: &Request) -> RawHtml<String> {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\n#[catch(422)]\n```", "```rs\nfn unprocessable_entity(_: &Request) -> RawHtml<String> {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\n#[catch(500)]\n```", "```rs\nfn internal_server_error(_: &Request) -> RawHtml<String> {\n```", "```rs\n    todo!(\"will implement later\")\n```", "```rs\n}\n```", "```rs\nasync fn rocket() -> Rocket<Build> {\n```", "```rs\n    rocket::build()\n```", "```rs\n        ...\n```", "```rs\n        .register(\n```", "```rs\n            \"/\",\n```", "```rs\ncatchers![not_found, unprocessable_entity, \n```", "```rs\n            internal_server_error],\n```", "```rs\n        )\n```", "```rs\n}\n```", "```rs\n┌── Cargo.lock\n```", "```rs\n├── Cargo.toml\n```", "```rs\n├── src/\n```", "```rs\n│   ├── lib.rs\n```", "```rs\n│   ├── main.rs\n```", "```rs\n│   └── bin/\n```", "```rs\n│       ├── named-executable.rs\n```", "```rs\n│       ├── another-executable.rs\n```", "```rs\n│       └── multi-file-executable/\n```", "```rs\n│           ├── main.rs\n```", "```rs\n│           └── some_module.rs\n```", "```rs\n├── benches/\n```", "```rs\n│   ├── large-input.rs\n```", "```rs\n│   └── multi-file-bench/\n```", "```rs\n│       ├── main.rs\n```", "```rs\n│       └── bench_module.rs\n```", "```rs\n├── examples/\n```", "```rs\n│   ├── simple.rs\n```", "```rs\n│   └── multi-file-example/\n```", "```rs\n│       ├── main.rs\n```", "```rs\n│       └── ex_module.rs\n```", "```rs\n└── tests/\n```", "```rs\n    ├── some-integration-tests.rs\n```", "```rs\n    └── multi-file-test/\n```", "```rs\n        ├── main.rs\n```", "```rs\n        └── test_module.rs\n```", "```rs\n┌── Cargo.lock\n```", "```rs\n├── Cargo.toml\n```", "```rs\n└── src/\n```", "```rs\n    ├── lib.rs\n```", "```rs\n    ├── main.rs\n```", "```rs\n    ├── catchers\n```", "```rs\n    │   └── put catchers modules here\n```", "```rs\n    ├── fairings\n```", "```rs\n    │   └── put fairings modules here\n```", "```rs\n    ├── models\n```", "```rs\n    │   └── put requests, responses, and database related modules here\n```", "```rs\n    ├── routes\n```", "```rs\n    │   └── put route handling functions and modules here\n```", "```rs\n    ├── states\n```", "```rs\n    │   └── put states modules here\n```", "```rs\n    ├── traits\n```", "```rs\n    │   └── put our traits here\n```", "```rs\n    └── views\n```", "```rs\n        └── put our templates here\n```", "```rs\n    [package]\n    ...\n    [[bin]]\n    name = \"our_application\"\n    path = \"src/main.rs\"\n    [lib]\n    name = \"our_application\"\n    path = \"src/lib.rs\"\n    [dependencies]\n    ...\n    ```", "```rs\n    #[macro_use]\n    extern crate rocket;\n    pub mod catchers;\n    pub mod fairings;\n    pub mod models;\n    pub mod routes;\n    pub mod states;\n    pub mod traits;\n    ```", "```rs\n    pub mod db;\n    ```", "```rs\n    use rocket_db_pools::{sqlx::PgPool, Database};\n    #[derive(Database)]\n    #[database(\"main_connection\")]\n    pub struct DBConnection(PgPool);\n    ```", "```rs\n    pub trait DisplayPostContent {\n        fn raw_html() -> String;\n    }\n    ```", "```rs\n    pub mod our_date_time;\n    pub mod pagination;\n    pub mod photo_post;\n    pub mod post;\n    pub mod post_type;\n    pub mod text_post;\n    pub mod user;\n    pub mod user_status;\n    pub mod video_post;\n    ```", "```rs\n    use chrono::{offset::Utc, DateTime};\n    use rocket::form::{self, DataField, FromFormField, ValueField};\n    #[derive(Debug)]\n    pub struct OurDateTime(DateTime<Utc>);\n    #[rocket::async_trait]\n    impl<'r> FromFormField<'r> for OurDateTime {\n        fn from_value(_: ValueField<'r>) -> form::\n        Result<'r, Self> {\n            todo!(\"will implement later\")\n        }\n        async fn from_data(_: DataField<'r, '_>) -> \n        form::Result<'r, Self> {\n            todo!(\"will implement later\")\n        }\n    }\n    ```", "```rs\n    use super::our_date_time::OurDateTime;\n    #[derive(FromForm)]\n    pub struct Pagination {\n        pub next: OurDateTime,\n        pub limit: usize,\n    }\n    ```", "```rs\n    use rocket::form::FromFormField;\n    use rocket_db_pools::sqlx;\n    #[derive(sqlx::Type, Debug, FromFormField)]\n    #[repr(i32)]\n    pub enum PostType {\n        Text = 0,\n        Photo = 1,\n        Video = 2,\n    }\n    ```", "```rs\n    use super::our_date_time::OurDateTime;\n    use super::post_type::PostType;\n    use rocket::form::FromForm;\n    use uuid::Uuid;\n    #[derive(FromForm)]\n    pub struct Post {\n        pub uuid: Uuid,\n        pub user_uuid: Uuid,\n        pub post_type: PostType,\n        pub content: String,\n        pub created_at: OurDateTime,\n    }\n    ```", "```rs\nuse rocket::form::FromFormField;\nuse rocket_db_pools::sqlx;\n#[derive(sqlx::Type, Debug, FromFormField)]\n#[repr(i32)]\npub enum UserStatus {\n    Inactive = 0,\n    Active = 1,\n}\n```", "```rs\n    use super::our_date_time::OurDateTime;\n    use super::user_status::UserStatus;\n    use rocket::form::FromForm;\n    use rocket_db_pools::sqlx::FromRow;\n    use uuid::Uuid;\n    #[derive(Debug, FromRow, FromForm)]\n    pub struct User {\n        pub uuid: Uuid,\n        pub username: String,\n        pub email: String,\n        pub password_hash: String,\n        pub description: Option<String>,\n        pub status: UserStatus,\n        pub created_at: OurDateTime,\n        pub updated_at: OurDateTime,\n    }\n    ```", "```rs\nuse super::post::Post;\nuse crate::traits::DisplayPostContent;\npub struct PhotoPost(Post);\nimpl DisplayPostContent for PhotoPost {\n    fn raw_html() -> String {\n        todo!(\"will implement later\")\n    }\n}\nuse super::post::Post;\nuse crate::traits::DisplayPostContent;\npub struct TextPost(Post);\nimpl DisplayPostContent for TextPost {\n    fn raw_html() -> String {\n        todo!(\"will implement later\")\n    }\n}\nuse super::post::Post;\nuse crate::traits::DisplayPostContent;\npub struct VideoPost(Post);\nimpl DisplayPostContent for VideoPost {\n    fn raw_html() -> String {\n        todo!(\"will implement later\")\n    }\n}\n```", "```rs\nuse super::haha;\nmod a {\n    fn haha() {}\n    fn other_func() {\n        self::haha();\n    }\n}\n```", "```rs\ntrait A {\n  type Any;\n  fn any(&self) -> Self::Any;\n}\nstruct B;\nimpl A for B {\n  type Any = usize;\n  fn any(&self) -> self::Any {\n    100\n  }\n}\n```", "```rs\n    use rocket::fs::NamedFile;\n    use rocket::http::Status;\n    use rocket::response::content::RawHtml;\n    pub mod post;\n    pub mod user;\n    type HtmlResponse = Result<RawHtml<String>, Status>;\n    #[get(\"/<_filename>\")]\n    pub async fn assets(_filename: &str) -> NamedFile {\n        todo!(\"will implement later\")\n    }\n    ```", "```rs\n    use super::HtmlResponse;\n    use crate::fairings::db::DBConnection;\n    use crate::models::{pagination::Pagination, post::Post};\n    use rocket::form::Form;\n    use rocket_db_pools::Connection;\n    #[get(\"/users/<_user_uuid>/posts/<_uuid>\", format = \"text/html\")]\n    pub async fn get_post(\n        mut _db: Connection<DBConnection>,\n        _user_uuid: &str,\n        _uuid: &str,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[get(\"/users/<_user_uuid>/posts?<_pagination>\", format = \"text/html\")]\n    pub async fn get_posts(\n        mut _db: Connection<DBConnection>,\n        _user_uuid: &str,\n        _pagination: Option<Pagination>,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[post(\"/users/<_user_uuid>/posts\", format = \"text/html\", data = \"<_upload>\")]\n    pub async fn create_post(\n        mut _db: Connection<DBConnection>,\n        _user_uuid: &str,\n        _upload: Form<Post>,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[delete(\"/users/<_user_uuid>/posts/<_uuid>\", format = \"text/html\")]\n    pub async fn delete_post(\n        mut _db: Connection<DBConnection>,\n        _user_uuid: &str,\n        _uuid: &str,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    ```", "```rs\n    use super::HtmlResponse;\n    use crate::fairings::db::DBConnection;\n    use crate::models::{pagination::Pagination, user::User};\n    use rocket::form::Form;\n    use rocket_db_pools::Connection;\n    #[get(\"/users/<_uuid>\", format = \"text/html\")]\n    pub async fn get_user(mut _db: Connection<DBConnection>, _uuid: &str) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[get(\"/users?<_pagination>\", format = \"text/html\")]\n    pub async fn get_users(\n        mut _db: Connection<DBConnection>,\n        _pagination: Option<Pagination>,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[get(\"/users/new\", format = \"text/html\")]\n    pub async fn new_user(mut _db: Connection<DBConnection>) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[post(\"/users\", format = \"text/html\", data = \"<_user>\")]\n    pub async fn create_user(mut _db: Connection<DBConnection>, _user: Form<User>) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[get(\"/users/edit/<_uuid>\", format = \"text/html\")]\n    pub async fn edit_user(mut _db: Connection<DBConnection>, _uuid: &str) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[put(\"/users/<_uuid>\", format = \"text/html\", data = \"<_user>\")]\n    pub async fn put_user(\n        mut _db: Connection<DBConnection>,\n        _uuid: &str,\n        _user: Form<User>,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[patch(\"/users/<_uuid>\", format = \"text/html\", data = \"<_user>\")]\n    pub async fn patch_user(\n        mut _db: Connection<DBConnection>,\n        _uuid: &str,\n        _user: Form<User>,\n    ) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    #[delete(\"/users/<_uuid>\", format = \"text/html\")]\n    pub async fn delete_user(mut _db: Connection<DBConnection>, _uuid: &str) -> HtmlResponse {\n        todo!(\"will implement later\")\n    }\n    ```", "```rs\n    use rocket::request::Request;\n    use rocket::response::content::RawHtml;\n    #[catch(404)]\n    pub fn not_found(_: &Request) -> RawHtml<String> {\n        todo!(\"will implement later\")\n    }\n    #[catch(422)]\n    pub fn unprocessable_entity(_: &Request) -> RawHtml<String> {\n        todo!(\"will implement later\")\n    }\n    #[catch(500)]\n    pub fn internal_server_error(_: &Request) -> RawHtml<String> {\n        todo!(\"will implement later\")\n    }\n    ```", "```rs\n    #[macro_use]\n    extern crate rocket;\n    use our_application::catchers;\n    use our_application::fairings::db::DBConnection;\n    use our_application::routes::{self, post, user};\n    use rocket::{Build, Rocket};\n    use rocket_db_pools::Database;\n    #[launch]\n    async fn rocket() -> Rocket<Build> {\n        rocket::build()\n            .attach(DBConnection::init())\n            .mount(\n                \"/\",\n                routes![\n                    user::get_user,\n                    user::get_users,\n                    user::new_user,\n                    user::create_user,\n                    user::edit_user,\n                    user::put_user,\n                    user::patch_user,\n                    user::delete_user,\n                    post::get_post,\n                    post::get_posts,\n                    post::create_post,\n                    post::delete_post,\n                ],\n            )\n            .mount(\"/assets\", routes![routes::assets])\n            .register(\n                \"/\",\n                catchers![\n                    catchers::not_found,\n                    catchers::unprocessable_entity,\n                    catchers::internal_server_error\n                ],\n            )\n    }\n    ```"]