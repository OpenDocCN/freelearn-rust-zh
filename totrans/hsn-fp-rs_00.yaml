- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for your interest in functional programming in Rust. Rust is a very young
    programming language and is particularly new to the functional programming community.
    Despite its age, the language provides a wealth of tools that are both practical
    and sophisticated.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will introduce general functional programming principles and
    how they apply to Rust specifically. Our goal is to provide knowledge and a perspective
    on Rust that will outlast small changes to language features. The pace of development
    of Rust is so fast that during the course of writing the book we introduced new
    features as they became available and relevant. We want to equip the reader to
    produce code for this fast-moving environment such that they are prepared to best
    utilize new features as they are released.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for developers who are familiar with basic Rust features or are
    willing to reference other material as they read along. We will not fully explain
    every new symbol, library, or syntax form, but we do explain libraries that are
    considered more advanced or syntax that may be difficult to read. Similarly, some
    concepts that are only briefly explained in the introductory material will be
    explained in detail.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](9221248a-8815-4394-8042-b2b5bb10cd5e.xhtml), *Functional Programming –
    a Comparison*, introduces functional programming in Rust. Comparisons are drawn
    between functional style and other paradigms that are prevalent or influential
    to Rust. The chapter also serves as a brief outline of topics that will appear
    later in the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](bf10aff4-ca84-44a7-a982-b156c9cde41e.xhtml), *Functional Control
    Flow*, introduces Rust control flow structures while explaining how they are relevant
    to the functional style of programming. The expression-centric nature of functional
    programming and Rust is illustrated through examples. Limiting as it may be, the
    chapter also begins an ongoing project using only the procedural expression style
    of programming.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](a7c186b6-4fab-40d8-a684-bc0cc5695ab6.xhtml), *Functional Data Structures*,
    introduces the reader to the various, highly expressive  data types available
    in Rust. Notably, the enum type is introduced, which holds particular significance
    in functional programming. The project continues to grow to incorporate a variety
    of these data types.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](17b4796f-bd1b-4844-afe2-46653b0792f8.xhtml), *Generics and Polymorphism*,
    explains the concepts of parameterization of data (generics) and parameterization
    of control flow (polymorphism). Parameterization and its natural interaction with
    traits reduces the programmer''s burden, but the syntax can become overwhelming.
    Some approaches to reduce or mitigate parameter explosion are introduced. The
    ongoing project again grows to incorporate these features.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](1424cb34-bb60-4cd3-9490-559e041251ed.xhtml), *Code Organization
    and Application Architecture*, talks about some architectural concerns, recommendations,
    and best practices. Designing and managing the implementation of a software project
    is not formulaic. No project is the same, and few are highly similar, thus no
    engineering procedure can capture the nuances of software development. In this
    chapter, we provide the best tools available, and specifically, the best that
    functional programming has to offer.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](b2733e9a-c163-4204-9a6e-6b1a2b8af397.xhtml), *Mutability, Ownership,
    and Pure Functions*, digs into some of the more unique features in Rust. This
    chapter introduces the concepts of ownership and lifetimes, which are common stumbling
    blocks when learning Rust. The functional concepts of immutability and pure functions
    are also introduced to help untangle some of the spaghetti that a naive Rust programmer
    might generate when attempting to circumvent the rules of ownership in Rust.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](c696c1cd-80aa-4ffe-a4e5-c7d9bcdcc430.xhtml), *Design Patterns*,
    lists as many functional programming cheat codes that can fit into a single chapter.
    The concept of functors and monads are explained with examples and some casual
    definitions. The chapter also briefly introduces the style of functional reactive
    programming and uses it to build a quick and dirty web framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](3066190b-837d-4a1e-b919-2bd04e810c41.xhtml), *Implementing Concurrency*,
    explains how to do multiple things at the same time. Most of the chapter is spent
    clarifying the differences and relative strengths and weaknesses between subprocesses,
    forked processes, and threads. The Rust thread concurrency model is then assumed
    and more information is provided to clarify Rust-specific logic regarding threads.
    Toward the end of the chapter, the actor model of concurrency is introduced, which
    is a robust model of concurrency that can adapt to most situations and programming
    paradigms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](c9c0719e-d50d-462a-b6e5-e8c02a1ee67e.xhtml), *Performance, Debugging,
    and Metaprogramming*, wraps up the book with some miscellaneous tips for programming
    in Rust. The performance tips are not particularly functional, but rather concerned
    primarily with language-specific details, general advice, or relevant bits of
    computer science. Debugging introduces many tips on how to prevent bugs. Also,
    how to use an interactive debugger is explained through examples. Metaprogramming
    explains precisely how Rust macros and procedural macros work. This is a great
    feature of Rust, but is not documented well, so it might be scary to approach.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We assume familiarity with the concepts from the first 10 chapters of Rust documentation
    ([https://doc.rust-lang.org/book/](https://doc.rust-lang.org/book/)). Some of
    the material from these chapters is fairly advanced, so we will also explain that
    here when relevant. However, the knowledge of syntax and very basic features will
    be expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone the GitHub code repository and follow along. Tweak the examples and see
    what effects you can create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stay curious. Some of the keywords we mentioned could fill an entire book with
    unique content. Some of these topics presented are so pervasive that they have
    decent Wikipedia articles to explain and expand on the concepts. However, knowing
    the keyword is required to even know what to search for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packtpub.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Functional-Programming-in-Rust](https://github.com/PacktPublishing/Hands-On-Functional-Programming-in-Rust). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Let''s start by defining some of the type declarations for
    the `physics` module."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: Email `feedback@packtpub.com` and mention the book title
    in the subject of your message. If you have questions about any aspect of this
    book, please email us at `questions@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packtpub.com` with a
    link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packtpub.com](https://www.packtpub.com/).
  prefs: []
  type: TYPE_NORMAL
