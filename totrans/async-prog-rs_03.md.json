["```rs\nuse std::arch::asm;\n```", "```rs\n#[inline(never)]\nfn syscall(message: String) {\n    let msg_ptr = message.as_ptr();\n    let len = message.len();\n    unsafe {\n        asm!(\n            \"mov rax, 1\",\n            \"mov rdi, 1\",\n            \"syscall\",\n            in(\"rsi\") msg_ptr,\n            in(\"rdx\") len,\n            out(\"rax\") _,\n            out(\"rdi\") _,\n            lateout(\"rsi\") _,\n            lateout(\"rdx\") _\n        );\n    }\n}\n```", "```rs\nfn main() {\n    let message = \"Hello world from raw syscall!\\n\";\n    let message = String::from(message);\n    syscall(message);\n}\n```", "```rs\nHello world from raw syscall!\n```", "```rs\nuse std::arch::asm;\nfn main() {\n    let message = \"Hello world from raw syscall!\\n\"\n    let message = String::from(message);\n    syscall(message);\n}\n#[inline(never)]\nfn syscall(message: String) {\n    let ptr = message.as_ptr();\n    let len = message.len();\n    unsafe {\n        asm!(\n            \"mov x16, 4\",\n            \"mov x0, 1\",\n            \"svc 0\",\n            in(\"x1\") ptr,\n            in(\"x2\") len,\n            out(\"x16\") _,\n            out(\"x0\") _,\n            lateout(\"x1\") _,\n            lateout(\"x2\") _\n        );\n    }\n}\n```", "```rs\nHello world from raw syscall!\n```", "```rs\nuse std::io;\nfn main() {\n    let message = \"Hello world from syscall!\\n\";\n    let message = String::from(message);\n    syscall(message).unwrap();\n}\n```", "```rs\n#[cfg(target_family = \"unix\")]\n#[link(name = \"c\")]\nextern \"C\" {\n    fn write(fd: u32, buf: *const u8, count: usize) -> i32;\n}\nfn syscall(message: String) -> io::Result<()> {\n    let msg_ptr = message.as_ptr();\n    let len = message.len();\n    let res = unsafe { write(1, msg_ptr, len) };\n    if res == -1 {\n        return Err(io::Error::last_os_error());\n    }\n    Ok(())\n}\n```", "```rs\n#[link(name = \"c\")]\n```", "```rs\nextern \"C\" {\n fn write(fd: u32, buf: *const u8, count: usize);\n}\n```", "```rs\n#[cfg(target_family = \"unix\")]\nfn syscall(message: String) -> io::Result<()> {\n    let msg_ptr = message.as_ptr();\n    let len = message.len();\n    let res = unsafe { write(1, msg_ptr, len) };\n    if res == -1 {\n        return Err(io::Error::last_os_error());\n    }\n    Ok(())\n}\n```", "```rs\nHello world from syscall!\n```", "```rs\n#[link(name = \"kernel32\")]\nextern \"system\" {\n    fn GetStdHandle(nStdHandle: i32) -> i32;\n    fn WriteConsoleW(\n        hConsoleOutput: i32,\n        lpBuffer: *const u16,\n        numberOfCharsToWrite: u32,\n        lpNumberOfCharsWritten: *mut u32,\n        lpReserved: *const std::ffi::c_void,\n    ) -> i32;\n}\n```", "```rs\nfn syscall(message: String) -> io::Result<()> {\n    let msg: Vec<u16> = message.encode_utf16().collect();\n    let msg_ptr = msg.as_ptr();\n    let len = msg.len() as u32;\n    let mut output: u32 = 0;\n        let handle = unsafe { GetStdHandle(-11) };\n        if handle  == -1 {\n            return Err(io::Error::last_os_error())\n        }\n        let res = unsafe {\n            WriteConsoleW(\n                handle,\n                msg_ptr,\n                len,\n                &mut output,\n                std::ptr::null()\n            )};\n        if res  == 0 {\n            return Err(io::Error::last_os_error());\n        }\n    Ok(())\n}\n```", "```rs\nfn main() {\n println!(\"Hello world from the standard library\");\n}\n```"]