["```rs\nuse std::thread::{self, sleep};\nfn main() {\n    println!(\"So, we start the program here!\");\n    let t1 = thread::spawn(move || {\n        sleep(std::time::Duration::from_millis(200));\n        println!(\"The long running tasks finish last!\");\n    });\n    let t2 = thread::spawn(move || {\n        sleep(std::time::Duration::from_millis(100));\n        println!(\"We can chain callbacks...\");\n        let t3 = thread::spawn(move || {\n            sleep(std::time::Duration::from_millis(50));\n            println!(\"...like this!\");\n        });\n        t3.join().unwrap();\n    });\n    println!(\"The tasks run concurrently!\");\n    t1.join().unwrap();\n    t2.join().unwrap();\n}\n```", "```rs\nSo, we start the program here!\nThe tasks run concurrently!\nWe can chain callbacks...\n...like this!\nThe long-running tasks finish last!\n```", "```rs\nsetTimer(200, () => {\n  setTimer(100, () => {\n    setTimer(50, () => {\n      console.log(\"I'm the last one\");\n    });\n  });\n});\n```", "```rs\nfunction timer(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\ntimer(200)\n.then(() => timer(100))\n.then(() => timer(50))\n.then(() => console.log(\"I'm the last one\"));\n```", "```rs\nasync function run() {\n    await timer(200);\n    await timer(100);\n    await timer(50);\n    console.log(\"I'm the last one\");\n}\n```", "```rs\nasync fn run() -> () { … }\n```", "```rs\nFn run() -> impl Future<Output = ()>\n```"]