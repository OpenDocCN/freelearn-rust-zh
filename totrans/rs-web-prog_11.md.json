["```rs\nworker_processes  auto;\nerror_log  /var/log/nginx/error.log warn;\nevents {\n    worker_connections  512;\n}\nhttp {\n    server {\n        . . .\n    }\n    server {\n        . . .\n    }\n}\n```", "```rs\nserver {\n    listen 80;\n    return 301 https://$host$request_uri;\n}\n```", "```rs\nset $name 'Maxwell';\n```", "```rs\nserver {\n    listen 443 ssl http2;\n    ssl_certificate /etc/nginx/ssl/self.crt;\n    ssl_certificate_key /etc/nginx/ssl/self.key;\n    location /v1 {\n        proxy_pass http://rust_app:8000/v1;\n    }\n    location / {\n        proxy_pass http://front_end:4000/;\n    }\n}\n```", "```rs\nopenssl req -x509 -days 10 -nodes -newkey rsa:2048\n-keyout ./self.key -out ./self.crt\n```", "```rs\nnginx:\ncontainer_name: 'nginx-rust'\nimage: \"nginx:latest\"\nports:\n  - \"80:80\"\n  - 443:443\nlinks:\n  - rust_app\n  - front_end\nvolumes:\n  - ./nginx_config.conf:/etc/nginx/nginx.conf\n  - ./nginx_configs/ssl/self.crt:/etc/nginx/ssl/self.crt\n  - ./nginx_configs/ssl/self.key:/etc/nginx/ssl/self.key\n```", "```rs\nworker_processes  auto;\nerror_log  /var/log/nginx/error.log warn;\nevents {\n    worker_connections  512;\n}\nhttp {\n    server {\n        listen 80;\n        location /v1 {\n            proxy_pass http://rust_app:8000/v1;\n        }\n        location / {\n            proxy_pass http://front_end:4000/;\n        }\n    }\n}\n```", "```rs\nnginx:\n  container_name: 'nginx-rust'\n  image: \"nginx:latest\"\n  ports:\n    - \"80:80\"\n  links:\n    - rust_app\n    - front_end\n  volumes:\n    - ./nginx_config.conf:/etc/nginx/nginx.conf\n```", "```rs\nresource \"aws_instance\" \"production_server\" {\n    ami = \"ami-0fdbd8587b1cf431e\"\n    instance_type = \"t2.medium\"\n    count = 2\n    key_name = \"remotebuild\"\n    user_data = file(\"server_build.sh\")\n    tags = {\n      Name = \"to-do prod ${count.index}\"\n    }\n    # root disk\n    root_block_device {\n      volume_size = \"20\"\n      volume_type = \"gp2\"\n      delete_on_termination = true\n    }\n}\n```", "```rs\noutput \"ec2_global_ips\" {\n  value = [\"${aws_instance.production_server.*.public_ip}\"]\n}\noutput \"db_endpoint\" {\n  value = \"${aws_db_instance.main_db.*.endpoint}\"\n}\noutput \"public_dns\" {\n  value =\n      [\"${aws_instance.production_server.*.public_dns}\"]\n}\noutput \"instance_id\" {\n    value = [\"${aws_instance.production_server.*.id}\"]\n}\n```", "```rs\ndata \"aws_subnet_ids\" \"subnet\" {\n    vpc_id = aws_default_vpc.default.id\n}\ndata \"aws_acm_certificate\" \"issued_certificate\" {\n    domain   = \"*.freshcutswags.com\"\n    statuses = [\"ISSUED\"]\n}\ndata \"aws_acm_certificate\" \"raw_cert\" {\n    domain   = \"freshcutswags.com\"\n    statuses = [\"ISSUED\"]\n}\n```", "```rs\nresource \"aws_lb_target_group\" \"target-group\" {\n    health_check {\n        interval = 10\n        path = \"/\"\n        protocol = \"HTTP\"\n        timeout = 5\n        healthy_threshold = 5\n        unhealthy_threshold = 2\n    }\n    name = \"ToDoAppLbTg\"\n    port = 80\n    protocol = \"HTTP\"\n    target_type = \"instance\"\n    vpc_id   = aws_default_vpc.default.id\n}\n```", "```rs\nresource \"aws_lb_target_group_attachment\" \"ec2_attach\" {\n    count = length(aws_instance.production_server)\n    target_group_arn = aws_lb_target_group.target-group.arn\n    target_id =\n        aws_instance.production_server[count.index].id\n}\n```", "```rs\nresource \"aws_lb\" \"application-lb\" {\n    name = \"ToDoApplicationLb\"\n    internal = false\n    ip_address_type = \"ipv4\"\n    load_balancer_type = \"application\"\n    security_groups = [\"${aws_security_group.\n        alb-security-group.id}\"]\n        subnets = data.aws_subnet_ids.subnet.ids\n    tags = {\n        name = \"todo load balancer\"\n    }\n}\n```", "```rs\nresource \"aws_lb_listener\" \"http-listener\" {\n    load_balancer_arn = aws_lb.application-lb.arn\n    port = 80\n    protocol = \"HTTP\"\n    default_action {\n        type = \"redirect\"\n        redirect {\n            port        = \"443\"\n            protocol    = \"HTTPS\"\n            status_code = \"HTTP_301\"\n        }\n    }\n}\n```", "```rs\nresource \"aws_lb_listener\" \"https-listener\" {\n    load_balancer_arn = aws_lb.application-lb.arn\n    port = 443\n    protocol = \"HTTPS\"\n    certificate_arn = data.aws_acm_certificate.\n                      issued_certificate.arn\n    default_action {\n        target_group_arn = aws_lb_target_group.target-\n            group.arn\n        type = \"forward\"\n    }\n}\n```", "```rs\nresource \"aws_lb_listener_certificate\" \"extra_certificate\" {\n  listener_arn = \"${aws_lb_listener.https-listener.arn}\"\n  certificate_arn =\n      \"${data.aws_acm_certificate.raw_cert.arn}\"\n}\n```", "```rs\nresource \"aws_security_group\" \"alb-security-group\" {\n    name = \"to-do-LB\"\n    description = \"the security group for the\n                   application load balancer\"\n    ingress {\n        . . .\n    }\n    ingress {\n        . . .\n    }\n    egress {\n        . . .\n    }\n    tags = {\n        name: \"to-do-alb-sg\"\n    }\n}\n```", "```rs\ningress {\n    description = \"http access\"\n    from_port = 80\n    to_port = 80\n    protocol = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n}\n```", "```rs\ningress {\n    description = \"https access\"\n    from_port = 443\n    to_port = 443\n    protocol = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n}\n```", "```rs\negress {\n    from_port = 0\n    to_port = 0\n    protocol = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n}\n```", "```rs\nresource \"aws_security_group\" \"webserver-security-group\" {\n    name = \"to-do-App\"\n    description = \"the security group for the web server\"\n    ingress {\n        . . .\n    }\n    ingress {\n        . . .\n    }\n    egress {\n        from_port = 0\n        to_port = 0\n        protocol = \"-1\"\n        cidr_blocks = [\"0.0.0.0/0\"]\n    }\n    tags = {\n        name: \"to-do-webserver-sg\"\n    }\n}\n```", "```rs\ningress {\n    description = \"http access\"\n    from_port = 80\n    to_port = 80\n    protocol = \"tcp\"\n    security_groups = [\"${aws_security_group.\n                          alb-security-group.id}\"]\n}\n```", "```rs\ningress {\n    description = \"SSH access\"\n    from_port = 22\n    to_port = 22\n    protocol = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n}\n```", "```rs\nresource \"aws_network_interface_sg_attachment\"\n    \"sg_attachment_webserver\" {\n         count = length(aws_instance.production_server)\n             security_group_id = aws_security_group.\n                 webserver-security-group.id\n  network_interface_id = aws_instance.\n                         production_server[count.index].\n                         primary_network_interface_id\n}\n```", "```rs\nfor server_ip in data[\"ec2_global_ips\"][\"value\"][0]:\n    print(\"waiting for server to be built\")\n    time.sleep(5)\n    print(\"attempting to enter server\")\n    build_process = Popen(f\"cd {DIRECTORY_PATH} && sh\n        ./run_build.sh\n                            {server_ip} {args.u} {args.p}\",\n                            shell=True)\n    build_process.wait()\n```"]