- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is about Rust, a programming language that empowers you to build all
    kinds of software systems, ranging from low-level embedded software to dynamic
    web applications. Rust is fast, reliable, and safe. It offers performance and
    safety guarantees that reach or even surpass C and C++, while still being a modern
    language with a relatively low barrier of entry. Rust drive toward incremental
    improvements, combined with its active and friendly community, promises a great
    future for the language.
  prefs: []
  type: TYPE_NORMAL
- en: Rust is not a new language by design and doesn't try to reinvent the wheel.
    Rather, it's a language that has identified unique ideas, hidden away in research-prototype
    languages that never saw mass adoption. It brings those ideas together into a
    coherent composition and provides a practical language that lets you build safe
    software systems, while still being efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book targets both beginner and intermediate programmers familiar with other
    imperative languages, but new to Rust. It assumes that you are familiar with at
    least one imperative programming language, such as C, C++, or Python. Knowing
    about functional programming is not a requirement, but it's good to have a general
    idea about it. We make sure to explain any concept or idea that we introduce from
    these languages, though.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](d9f771cc-9948-4bb5-8ad7-bb6fcbcc62b1.xhtml), *Getting Started with
    Rust*, gives a brief history on Rust and the motivation behind its design, and
    covers basic language syntax. The chapter ends with an exercise covering all the
    language features.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](41099eaf-eb1e-4f75-bfdd-628152f59b58.xhtml), *Managing Projects
    with Cargo*, shows how Rust organizes large projects with its dedicated package
    manager. This serves as the basis for further chapters. It also covers editor
    integration with the Visual Studio Code editor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](16c1c837-f1f7-4268-ae8c-6e485a2fd747.xhtml), *Tests, Documentation
    and Benchmarks*, explores the built-in testing harness, writing unit tests, integration
    tests, and how to write documentation in Rust. We also cover the benchmarking
    facilities of Rust code. Later, as a final exercise, we build a complete crate
    with documentation and tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](93373ddb-63dc-4b4c-a42f-7a099818705c.xhtml), *Types, Generics,
    and Traits*, explores Rust''s expressive type system and goes on to explain various
    ways of using the type system by building a complex number library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](db2c2723-8ca0-43be-b135-afd847342146.xhtml), *Memory Management
    and Safety*, starts with the motivation for memory management and the various
    pitfalls in conventional low-level programming languages related to memory. It
    then moves toward explaining Rust''s unique compile-time memory management ideas.
    We also explain various smart pointer types in Rust.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](35bd7e4b-a6ae-400d-bc25-2c3b92b3b630.xhtml), *Error Handling*,
    starts with the motivation for error handling and explores different models of
    error handling in other languages. The chapter then examine Rust''s error-handling
    strategy and types, before exploring handling errors in non-recoverable situations.
    The chapter ends with a library implementing custom error types.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](63263043-9b5e-4711-b2e2-e44240a0e843.xhtml), *Advanced Concepts*,
    explores some of the concepts already introduced in previous chapters, in more
    detail. It provides details on the underlying model of some of the type system
    abstractions provided by Rust.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](8f3cb215-b8a0-4ed7-bce7-68570687fbd0.xhtml), *Concurrency*, explores
    Rust''s concurrency models and APIs in the standard libraries and teaches you
    how to build highly concurrent programs with no data races.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](7143ebcd-54cc-4e31-a2ad-07ce90268584.xhtml), *Metaprogramming with
    Macros*, examines how you can write code to generate code using the powerful and
    advanced macro construct of Rust, and outlines the language''s declarative and
    procedural macros by building both types of macros.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](9e9ce701-5f35-4351-b76b-a5f2bd541059.xhtml), *Unsafe Rust and
    Foreign Function Interfaces*, explores the unsafe mode of Rust and the APIs on
    offer for interoperating Rust with other languages. The examples includes both
    calling into Rust from other languages, such as Python, Node.js, and C, as well
    as covering how Rust can be called from other languages.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](cf9c3c2e-5cac-4a41-bf32-ecbf2ea74d6c.xhtml), *Logging*, explains
    why logging is an important practice in software development, answering why we
    need logging frameworks, and exploring the crates on offer in the Rust ecosystem
    that can be used to help integrate logging into the application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](33562886-4278-4ab1-aa0d-de533af4bb99.xhtml), *Network Programming
    in Rust Sync and Async I/O*, gives a brief introduction to network programming.
    After going through the basics, the chapter covers building a Redis server that
    can talk to the official Redis client. Lastly, the chapter explains how to use
    the standard library networking primitives and the Tokio and futures crates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](ea972b20-1dc0-46d2-a0b8-d4186b0fe2c7.xhtml), *Building Web Applications
    with Rust*, starts by exploring the HTTP protocol and builds a simple URL shortener
    server using the hyper crate, followed by building a URL shortener client using
    the reqwest crate. In the end, we explore actix-web, a high-performance Async
    web application framework to build a bookmarks API server.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](059e4aef-2091-490e-9358-2b8dd620c1f0.xhtml), *Interacting with
    Databases in Rust*, starts with the motivation on the need for database backend
    applications and moves toward exploring the available crates in the Rust ecosystem
    to interact with various database backends, such as SQLite and PostgreSQL. The
    chapter also explores a type-safe ORM crate called diesel. Later, it covers how
    to integrate our bookmarks API server, built in the previous chapter, to integrate
    database support using diesel.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](71a3ac32-2378-4fe8-a143-25f22f5aa240.xhtml), *Rust on the Web
    Using WebAssembly*, explains what WebAssembly is and how it can be used by developers.
    We then move on to exploring the available crates in the Rust ecosystem, and build
    a live markdown-editor web application using Rust and WebAssembly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](80838e60-3afc-4e3b-8ad4-493d7f9381af.xhtml), *Building Desktop
    Applications with Rust*, explains how to build desktop applications with Rust
    using the GTK framework. We''ll build a simple hacker-news desktop client.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](6fb4ee45-2b4d-4b88-a4a0-bf05aef98e47.xhtml), *Debugging*, explores
    debugging Rust code with GDB and also shows how to integrate GDB with Visual Studio
    Code editor.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To really grasp the content of this book, it is recommended that you write out
    the example code and try fiddling with code to get familiar with the Rust's error
    messages, so they can guide you toward writing correct programs.
  prefs: []
  type: TYPE_NORMAL
- en: There isn't any specific hardware requirements for this book, and any system
    with a minimum of 1 GB of RAM and a fairly recent Linux operating system would
    be fine. All code examples and projects in this book were developed on a Linux
    machine running Ubuntu 16.04\. Rust also offers first-class support for other
    OS platforms, including macOS, BSD, and recent versions of Windows, so all the
    code examples should compile and run fine on these platforms too.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Mastering-RUST-Second-Edition](https://github.com/PacktPublishing/Mastering-RUST-Second-Edition). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository. Feel free to raise an issue on GitHub if you find any problems when
    compiling the code examples.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "The project resides in a folder named `threads_demo` in the `Chapter08/`
    directory."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packt.com/submit-errata](http://www.packt.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
