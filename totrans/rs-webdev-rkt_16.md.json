["```rs\n    [profile.release]\n    codegen-units = 1\n    ```", "```rs\n[profile.release]\nlto = \"fat\"\n```", "```rs\n[profile.release]\nopt-level = 3\n```", "```rs\n[profile.release]\npanic = \"abort\"\n```", "```rs\nrustc --print target-cpus\n```", "```rs\nRUSTFLAGS='-C target-cpu=znver -C codegen-units=1' cargo build –release\n```", "```rs\n    sudo apachectl -k start\n    ```", "```rs\n    curl http://127.0.0.1:8080/\n    ```", "```rs\nLoadModule log_config_module libexec/apache2/mod_log_config.so\nLoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so\nLoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.so\nLoadModule ssl_module libexec/apache2/mod_ssl.so\nLoadModule xml2enc_module libexec/apache2/mod_xml2enc.so\nLoadModule proxy_html_module libexec/apache2/mod_proxy_html.so\nLoadModule proxy_module libexec/apache2/mod_proxy.so\nLoadModule proxy_connect_module libexec/apache2/mod_proxy_connect.so\nLoadModule proxy_http_module libexec/apache2/mod_proxy_http.so\n```", "```rs\n    Include /usr/local/etc/httpd/extra/httpd-vhosts.conf\n    Include /usr/local/etc/httpd/extra/httpd-ssl.conf\n    Include /usr/local/etc/httpd/extra/proxy-html.conf\n    ```", "```rs\n    127.0.0.1 ourapplication.example.net\n    ```", "```rs\n    openssl req -x509 -out ourapplication.example.com.crt -keyout ourapplication.example.com.key \\\n      -newkey rsa:2048 -nodes -sha256 \\\n    -subj '/CN=ourapplication.example.com' -extensions \n      EXT -config <( \\\n       printf \"[dn]\\nCN=ourapplication.example\n      .com\\n[req]\\ndistinguished_name = dn\\n[EXT]\\\n      nsubjectAltName=DNS:ourapplication.\n      example.com\\nkeyUsage=digitalSignature\\\n      nextendedKeyUsage=serverAuth\")\n    ```", "```rs\n    openssl rsa -in ourapplication.example.com.key -text > ourapplication.example.com.private.pem\n    openssl x509 -inform PEM -in ourapplication.example.com.crt > ourapplication.example.com.public.pem \n    ```", "```rs\n    <VirtualHost *:443>\n        ServerName ourapplication.example.com\n        SSLEngine On\n        SSLCertificateFile /usr/local/etc/httpd/\n        ourapplication.example.com.public.pem\n        SSLCertificateKeyFile /usr/local/etc/httpd/\n        ourapplication.example.com.private.pem\n        SSLProxyEngine On\n        ProxyRequests Off\n        ProxyVia Off\n        <Proxy *>\n             Require all granted\n        </Proxy>\n        ProxyPass \"/\" \"http://127.0.0.1:8000/\"\n        ProxyPassReverse \"/\" \"http://127.0.0.1:8000/\"\n    </VirtualHost>\n    ```", "```rs\n    sudo apachectl configtest\n    ```", "```rs\nFROM rust:alpine as prepare-stage\n```", "```rs\n    WORKDIR /app\n    ```", "```rs\n    cargo vendor\n    ```", "```rs\n[source.crates-io]\nreplace-with = \"vendored-sources\"\n[source.vendored-sources]\ndirectory = \"vendor\"\n```", "```rs\n    COPY src src\n    COPY Cargo.toml Cargo.toml\n    COPY .cargo .cargo\n    COPY vendor vendor\n    ```", "```rs\n    FROM prepare-stage as build-stage\n    RUN apk add --no-cache musl-dev\n    RUN cargo build --release\n    ```", "```rs\n    docker build .\n    ```", "```rs\n    FROM rust:alpine\n    EXPOSE 8000\n    ENV TZ=Asia/Tokyo \\\n        USER=staff\n    RUN addgroup -S $USER \\\n        && adduser -S -g $USER $USER\n    ```", "```rs\n    RUN apk update \\\n        && apk add --no-cache ca-certificates tzdata \\\n        && rm -rf /var/cache/apk/*\n    ```", "```rs\n    WORKDIR /app\n    ```", "```rs\n    [default.databases.main_connection]\n    url = \"postgres://username:passwordR@host.docker.internal:5432/rocket\"\n    [release]\n    address = \"0.0.0.0\"\n    ```", "```rs\n    COPY --from=build-stage /app/target/release/our_application our_application\n    COPY Rocket.toml Rocket.toml\n    COPY static static\n    COPY src/views src/views\n    ```", "```rs\n    RUN mkdir logs\n    ```", "```rs\n    RUN chown -R $USER:$USER /app\n    ```", "```rs\n    USER $USER\n    CMD [\"./our_application\"]\n    ```", "```rs\n    docker build -t our_application .\n    ```", "```rs\n    docker run --add-host host.docker.internal:host-gateway -dp 8000:8000 our_application\n    ```"]