["```rs\ncargo install welle\n```", "```rs\nwelle --num-requests 10000 http://localhost:8080\n```", "```rs\nTotal Requests: 10000\nConcurrency Count: 1\nTotal Completed Requests: 10000\nTotal Errored Requests: 0\nTotal 5XX Requests: 0\n\nTotal Time Taken: 6.170019816s\nAvg Time Taken: 617.001µs\nTotal Time In Flight: 5.47647967s\nAvg Time In Flight: 547.647µs\n\nPercentage of the requests served within a certain time:\n50%: 786.541µs\n66%: 891.163µs\n75%: 947.87µs\n80%: 982.323µs\n90%: 1.052751ms\n95%: 1.107814ms\n99%: 1.210104ms\n100%: 2.676919ms\n```", "```rs\ncargo install drill\n```", "```rs\n---\n\nthreads: 4\nbase: 'http://localhost:8080'\niterations: 5\nrampup: 2\n\nplan:\n  - name: Index Page\n    request:\n      url: /\n```", "```rs\ndrill --benchmark benchmark.yml --stats\n```", "```rs\nThreads 4\nIterations 5\nRampup 2\nBase URL http://localhost:8080\n\nIndex Page                http://localhost:8080/ 200 OK 7ms\nIndex Page                http://localhost:8080/ 200 OK 8ms\n...\nIndex Page                http://localhost:8080/ 200 OK 1ms\n\nConcurrency Level 4\nTime taken for tests 0.2 seconds\nTotal requests 20\nSuccessful requests 20\nFailed requests 0\nRequests per second 126.01 [#/sec]\nMedian time per request 1ms\nAverage time per request 3ms\nSample standard deviation 3ms\n```", "```rs\n[dependencies]\nactix = \"0.7\"\nactix-web = \"0.7\"\naskama = \"0.6\"\nchrono = \"0.4\"\nenv_logger = \"0.5\"\nfutures = \"0.1\"\n\n[build-dependencies]\naskama = \"0.6\"\n```", "```rs\nfn now() -> String {\n    Utc::now().to_string()\n}\n```", "```rs\n#[derive(Template)]\n#[template(path = \"index.html\")]\nstruct IndexTemplate {\n    time: String,\n}\n```", "```rs\n#[derive(Clone)]\nstruct State {\n    last_minute: Arc<Mutex<String>>,\n}\n```", "```rs\nfn index(req: &HttpRequest<State>) -> HttpResponse {\n    let last_minute = req.state().last_minute.lock().unwrap();\n    let template = IndexTemplate { time: last_minute.to_owned() };\n    let body = template.render().unwrap();\n    HttpResponse::Ok().body(body)\n}\n```", "```rs\nfn main() {\n    let sys = actix::System::new(\"fast-service\");\n\n    let value = now();\n    let last_minute = Arc::new(Mutex::new(value));\n\n    let last_minute_ref = last_minute.clone();\n    thread::spawn(move || {\n        loop {\n            {\n                let mut last_minute = last_minute_ref.lock().unwrap();\n                *last_minute = now();\n            }\n            thread::sleep(Duration::from_secs(3));\n        }\n    });\n\n    let state = State {\n        last_minute,\n    };\n    server::new(move || {\n        App::with_state(state.clone())\n            .middleware(middleware::Logger::default())\n            .resource(\"/\", |r| r.f(index))\n    })\n    .bind(\"127.0.0.1:8080\")\n    .unwrap()\n    .start();\n    let _ = sys.run();\n}\n```", "```rs\ncargo run\n```", "```rs\nwelle --concurrent-requests 10 --num-requests 100000 http://localhost:8080\n```", "```rs\nTotal Requests: 100000\nConcurrency Count: 10\nTotal Completed Requests: 100000\nTotal Errored Requests: 0\nTotal 5XX Requests: 0\n\nTotal Time Taken: 29.883248121s\nAvg Time Taken: 298.832µs\nTotal Time In Flight: 287.14008722s\nAvg Time In Flight: 2.8714ms\n\nPercentage of the requests served within a certain time:\n50%: 3.347297ms\n66%: 4.487828ms\n75%: 5.456439ms\n80%: 6.15643ms\n90%: 8.40495ms\n95%: 10.27307ms\n99%: 14.99426ms\n100%: 144.630208ms\n```", "```rs\ncargo run --release\n```", "```rs\nTotal Requests: 100000\nConcurrency Count: 10\nTotal Completed Requests: 100000\nTotal Errored Requests: 0\nTotal 5XX Requests: 0\n\nTotal Time Taken: 8.010280915s\nAvg Time Taken: 80.102µs\nTotal Time In Flight: 63.961189338s\nAvg Time In Flight: 639.611µs\n\nPercentage of the requests served within a certain time:\n50%: 806.717µs\n66%: 983.35µs\n75%: 1.118933ms\n80%: 1.215726ms\n90%: 1.557405ms\n95%: 1.972497ms\n99%: 3.500056ms\n100%: 37.844721ms\n```", "```rs\n[features]\ndefault = []\ncache = []\nrwlock = []\nborrow = []\nfast = [\"cache\", \"rwlock\", \"borrow\"]\n```", "```rs\n#[derive(Clone)]\nstruct State {\n    // last_minute: Arc<Mutex<String>>,\n    last_minute: Arc<RwLock<String>>,\n}\n```", "```rs\n// let last_minute = Arc::new(Mutex::new(value));\nlet last_minute = Arc::new(RwLock::new(value));\n```", "```rs\n// let mut last_minute = last_minute_ref.lock().unwrap();\nlet mut last_minute = last_minute_ref.write().unwrap();\n```", "```rs\n// let last_minute = req.state().last_minute.lock().unwrap();\nlet last_minute = req.state().last_minute.read().unwrap();\n```", "```rs\nstruct IndexTemplate<'a> {\n    // time: String,\n    time: &'a str,\n}\n```", "```rs\n// let template = IndexTemplate { time: last_minute.to_owned() };\nlet template = IndexTemplate { time: &last_minute };\n```", "```rs\ncached: Arc<RwLock<Option<String>>>\n```", "```rs\nlet cached = Arc::new(RwLock::new(None));\nlet state = State {\n    last_minute,\n    cached,\n};\n```", "```rs\nlet cached = req.state().cached.read().unwrap();\nif let Some(ref body) = *cached {\n    return HttpResponse::Ok().body(body.to_owned());\n}\n```", "```rs\nlet mut cached = req.state().cached.write().unwrap();\n*cached = Some(body.clone());\n```", "```rs\ncargo run --release --features rwlock,borrow\n```", "```rs\nTotal Requests: 100000\nConcurrency Count: 10\nTotal Completed Requests: 100000\nTotal Errored Requests: 0\nTotal 5XX Requests: 0\n\nTotal Time Taken: 7.94342667s\nAvg Time Taken: 79.434µs\nTotal Time In Flight: 64.120106299s\nAvg Time In Flight: 641.201µs\n\nPercentage of the requests served within a certain time:\n50%: 791.554µs\n66%: 976.074µs\n75%: 1.120545ms\n80%: 1.225029ms\n90%: 1.585564ms\n95%: 2.049917ms\n99%: 3.749288ms\n100%: 13.867011ms\n```", "```rs\ncargo run --release --features fast\n```", "```rs\nTotal Requests: 100000\nConcurrency Count: 10\nTotal Completed Requests: 100000\nTotal Errored Requests: 0\nTotal 5XX Requests: 0\n\nTotal Time Taken: 7.820692644s\nAvg Time Taken: 78.206µs\nTotal Time In Flight: 62.359549787s\nAvg Time In Flight: 623.595µs\n\nPercentage of the requests served within a certain time:\n50%: 787.329µs\n66%: 963.956µs\n75%: 1.099572ms\n80%: 1.199914ms\n90%: 1.530326ms\n95%: 1.939557ms\n99%: 3.410659ms\n100%: 10.272402ms\n```", "```rs\n[profile.release]\nlto = true\n```", "```rs\n[profile.release]\npanic = \"abort\"\n```", "```rs\nstrip <path_to_your_binary>\n```", "```rs\n#![feature(test)]\nextern crate test;\nuse test::Bencher;\n\n#[bench]\nfn bench_clone(b: &mut Bencher) {\n    let data = \"data\".to_string();\n    b.iter(move || {\n        let _data = data.clone();\n    });\n}\n\n#[bench]\nfn bench_ref(b: &mut Bencher) {\n    let data = \"data\".to_string();\n    b.iter(move || {\n        let _data = &data;\n    });\n}\n```", "```rs\ncargo bench\n```", "```rs\nrunning 2 tests\ntest bench_clone ... bench:          32 ns/iter (+/- 9)\ntest bench_ref   ... bench:           0 ns/iter (+/- 0)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 2 measured; 0 filtered out\n```", "```rs\n[dependencies]\nflame = { version = \"0.2\", optional = true }\n\n[features]\ndefault = []\nflame_it = [\"flame\"]\n```", "```rs\nuse std::fs::File;\n\npub fn main() {\n    {\n        let _req_span = flame::start_guard(\"incoming request\");\n        {\n            let _db_span = flame::start_guard(\"database query\");\n            let _resp_span = flame::start_guard(\"generating response\");\n        }\n    }\n\n    flame::dump_html(&mut File::create(\"out.html\").unwrap()).unwrap();\n    flame::dump_json(&mut File::create(\"out.json\").unwrap()).unwrap();\n    flame::dump_stdout();\n}\n```", "```rs\ncargo run --features flame_it\n```", "```rs\nTHREAD: 140431102022912\n| incoming request: 0.033606ms\n  | database query: 0.016583ms\n    | generating response: 0.008326ms\n    + 0.008257ms\n  + 0.017023ms\n```"]