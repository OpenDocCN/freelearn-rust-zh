["```rs\nfor x in 0..10 \n{ \n    println!(\"{},\", x); \n} \n```", "```rs\nfor x in (0..10).rev() \n{ \n    println!(\"{},\", x); \n}  \n```", "```rs\nfor var in sequence\n{ \n    // do something \n}   \n```", "```rs\nforeach(var t in conditionsequence) \n     // do something  \n```", "```rs\nfor(i, j) in (10..20).enumerate() \n{ \n     println!(\"loop has executed {} times. j = {}\", i, j); \n} \n```", "```rs\n// 04/enumerate/src/main.rs\nfn main()  \n{ \n    let my_array: [i32; 7] = [1i32,3,5,7,9,11,13]; \n    let mut value = 0i32; \n    for(_, line) in my_array.iter().enumerate() \n    { \n       value += line; \n    } \n    println!(\"{}\", value); \n} \n```", "```rs\nfor(_, line) in my_array.iter().enumerate() \n    { \n       value += *line; \n    } \n```", "```rs\n// 04/arrayloop/src/main.rs\nfn main()  \n{ \n    let my_array = vec![1i32,3,5,7,9,11,13]; \n    let mut value = 0i32; \n\n    for(_,line) in my_array.iter().enumerate() \n    { \n       value += *line; \n    } \n    println!(\"{}\", value); \n} \n\n```", "```rs\nloop \n{ \n    println!(\"Hello\"); \n} \n```", "```rs\nwhile (condition) \n{ \n    // do something \n} \n```", "```rs\nfn main() { \n    let mut done = 0u32; \n    while done != 32 \n    { \n        println!(\"done = {}\", done); \n        done += 1; \n    } \n} \n```", "```rs\n// 04/terminate-loop-1/src/main.rs\nfn main()  \n{ \n    let my_array = vec![0.6f32, 0.4, 0.2, 0.8, 1.3, 1.1, 1.7, 1.9]; \n    let mut counter: usize = 0; \n    let mut result = 0f32; \n    let mut quit = false; \n\n    while quit != true \n    { \n        if my_array[counter] > 1.5 \n        { \n            quit = true; \n        } \n        else \n        { \n            result += my_array[counter]; \n            counter += 1; \n        } \n    } \n     println!(\"{}\", result); \n} \n```", "```rs\n// 04/terminate-loop-2/src/main.rs\nfn main()  \n{ \n    let my_array = vec![0.6f32, 0.4, 0.2, 0.8, 1.3, 1.1, 1.7, 1.9]; \n    let mut result = 0f32; \n\n    for(_, value) in my_array.iter().enumerate() \n    { \n       if *value > 1.5 \n       { \n           break; \n       } \n       else \n       { \n           result += *value; \n       } \n    } \n    println!(\"{}\", result); \n} \n```", "```rs\n// 04/looplabels/src/main.rs\nfn main()  \n{ \n    'outer_loop: for x in 0..10  \n    { \n        'inner_loop: for y in 0..10  \n        { \n            if x % 2 == 0 { continue 'outer_loop; }  \n            if y % 2 == 0 { continue 'inner_loop; } \n            println!(\"x: {}, y: {}\", x, y); \n        } \n    } \n} \n```", "```rs\n// 04/looplabels-2/src/main.rs\nfn main()  \n{ \n    let my_array = vec![0.6f32, 0.4, 0.2, 0.8, 1.3, 1.1, 1.7, 1.9, 1.3, 0.1, 1.6, 0.6, 0.9, 1.1, 1.31, 1.49, 1.5, 0.7]; \n    let my_time = vec![0.2f32, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8]; \n\n    'time_loop: for(_, time_value) in my_time.iter().enumerate() \n    { \n       'data_loop: for(_, value) in my_array.iter().enumerate() \n       { \n           if *value < 1.5 \n           { \n               continue 'data_loop; \n           } \n           if *time_value % 5f32 == 0f32 \n           { \n               continue 'time_loop; \n           } \n           println!(\"Data point = {} at time {}s\", *value, *time_value); \n       } \n    } \n} \n```", "```rs\n'time_loop: for(time_enum, time_value) in my_time.iter().enumerate() \n    { \n       'data_loop: for(_, value) in my_array.iter().enumerate() \n       { \n           if *value < 1.5 \n           { \n               continue 'data_loop; \n           } \n           if time_enum % 5 == 0 \n           { \n               continue 'time_loop; \n           } \n           println!(\"Data point = {} at time {}s\", *value, *time_value); \n       } \n    } \n\n```", "```rs\nData point = 1.7 at time 0.4s \nData point = 1.9 at time 0.4s \nData point = 1.6 at time 0.4s \nData point = 1.5 at time 0.4s \nData point = 1.7 at time 0.6s \nData point = 1.9 at time 0.6s \nData point = 1.6 at time 0.6s \nData point = 1.5 at time 0.6s \n```", "```rs\n// 04/looplabels-3/src/main.rs\nfn main()  \n{ \n    let my_array = vec![0.6f32, 0.4, 0.2, 0.8, 1.3, 1.1, 1.7, 1.9, 1.3, 0.1, 1.6, 0.6, 0.9, 1.1, 1.31, 1.49, 1.5, 0.7]; \n    let my_time = vec![0.2f32, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8]; \n    let mut my_new_array = vec![]; \n    let mut my_new_time = vec![]; \n\n    'time_loop: for(t, _) in my_time.iter().enumerate() \n    { \n       'data_loop: for(v, value) in my_array.iter().enumerate() \n       { \n           if *value < 1.5 \n           { \n               continue 'data_loop; \n           } \n           else \n           { \n               if t % 5 != 0 \n               { \n                    my_new_array.push(*value); \n                    my_new_time.push(my_time[v]); \n               }        \n           } \n\n           if v == my_array.len() \n           { \n               break; \n           } \n       } \n    } \n\n    for(m, my_data) in my_new_array.iter().enumerate() \n    { \n        println!(\"Data = {} at time {}\", *my_data, my_new_time[m]); \n    } \n} \n\n```", "```rs\nData = 1.7 at time 1.4 \nData = 1.9 at time 1.6 \nData = 1.6 at time 2.2 \nData = 1.5 at time 3.4 \nData = 1.7 at time 1.4 \n```", "```rs\n// 04/dataloop/src/main.rs\nfn main()  \n{ \n    let my_array = vec![0.6f32, 0.4, 0.2, 0.8, 1.3, 1.1, 1.7, 1.9, 1.3, 0.1, 1.6, 0.6, 0.9, 1.1, 1.31, 1.49, 1.5, 0.7]; \n    let my_time = vec![0.2f32, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6]; \n    let mut my_new_array = vec![]; \n    let mut my_new_time = vec![]; \n    let mut done = false; \n\n    'time_loop: for(t, _) in my_time.iter().enumerate() \n    { \n       'data_loop: for(v, value) in my_array.iter().enumerate() \n       {  \n           if v == my_array.len() - 1 \n           { \n               done = true; \n           } \n\n           if *value < 1.5 \n           { \n               continue 'data_loop; \n           } \n           else \n           { \n                if t % 5 != 0 \n                { \n                    my_new_array.push(*value); \n                    my_new_time.push(my_time[v]); \n                } \n                else \n                { \n                    continue 'time_loop; \n                } \n           } \n       } \n       if done {break;} \n    } \n\n    for(m, my_data) in my_new_array.iter().enumerate() \n    { \n        println!(\"Data = {} at time {}\", *my_data, my_new_time[m]); \n    } \n} \n```", "```rs\nfloat my_function(i32:a: i32) \n{ \n    // do something with a \n    if (a != 32) \n    { \n        my_function(a); \n    } \n    else \n    { \n        return a; \n    } \n} \n\n```", "```rs\n// 04/recurse-1/src/main.rs\nfn recurse(n: i32)  \n{ \n     let v = match n % 2  \n     { \n         0 => n / 2, \n         _ => 3 * n + 1 \n     }; \n     println!(\"{}\", v); \n\n     if v != 1  \n     {  \n         recurse(v)  \n     } \n} \n\nfn main()  \n{  \n     recurse(25)  \n} \n\n```", "```rs\nlet v = match n % 2  \n     { \n         0 => n / 2, \n         _ => 3 * n + 1 \n     }; \n```", "```rs\nlet mut v = 0i32; \nif n % 2 == 0 \n{ \n     v = n / 2; \n} \nelse \n{ \n     v = 3 * n + 1; \n} \n```", "```rs\nfn main()  \n{  \n     recurse(25)  \n} \n```", "```rs\n// 04/semicolon_block/src/main.rs\nfn main()  \n{ \n    let x = 5u32; \n\n    let y =  \n    { \n        let x_squared = x * x; \n        let x_cube = x_squared * x; \n        x_cube + x_squared + x \n    }; \n\n    let z =  \n    { \n        2 * x; \n    }; \n\n    println!(\"x is {:?}\", x); \n    println!(\"y is {:?}\", y); \n    println!(\"z is {:?}\", z); \n} \n```", "```rs\nlet y =  \n    { \n        let x_squared = x * x; \n        let x_cube = x_squared * x; \n        x_cube + x_squared + x // no semi-colon \n    }; \n```", "```rs\n    let z =  \n    { \n        2 * x; \n    }; \n```"]