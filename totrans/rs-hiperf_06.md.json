["```rs\n//! This library gives a function to calculate Fibonacci numbers.\n\n/// Gives the Fibonacci sequence number for the given index.\npub fn fibonacci(n: u32) -> u32 {\n    if n == 0 || n == 1 {\n        n\n    } else {\n        fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\n/// Tests module.\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    /// Tests that the code gives the correct results.\n    #[test]\n    fn it_fibonacci() {\n        assert_eq!(fibonacci(0), 0);\n        assert_eq!(fibonacci(1), 1);\n        assert_eq!(fibonacci(2), 1);\n        assert_eq!(fibonacci(10), 55);\n        assert_eq!(fibonacci(20), 6_765);\n    }\n}\n```", "```rs\n/// Benchmarks module\n#[cfg(test)]\nmod benches {\n    extern crate test;\n    use super::*;\n    use self::test::Bencher;\n\n    /// Benchmark the 0th sequence number.\n    #[bench]\n    fn bench_fibonacci_0(b: &mut Bencher) {\n        b.iter(|| (0..1).map(fibonacci).collect::<Vec<u32>>())\n    }\n\n    /// Benchmark the 1st sequence number.\n    #[bench]\n    fn bench_fibonacci_1(b: &mut Bencher) {\n        b.iter(|| (0..2).map(fibonacci).collect::<Vec<u32>>())\n    }\n\n    /// Benchmark the 2nd sequence number.\n    #[bench]\n    fn bench_fibonacci_2(b: &mut Bencher) {\n        b.iter(|| (0..3).map(fibonacci).collect::<Vec<u32>>())\n    }\n\n    /// Benchmark the 10th sequence number.\n    #[bench]\n    fn bench_fibonacci_10(b: &mut Bencher) {\n        b.iter(|| (0..11).map(fibonacci).collect::<Vec<u32>>())\n    }\n\n    /// Benchmark the 20th sequence number.\n    #[bench]\n    fn bench_fibonacci_20(b: &mut Bencher) {\n        b.iter(|| (0..21).map(fibonacci).collect::<Vec<u32>>())\n    }\n}\n```", "```rs\npub fn fibonacci(n: u32) -> u32 {\n    if n == 0 || n == 1 {\n        n\n    } else {\n        let mut previous = 1;\n        let mut current = 1;\n        for _ in 2..n {\n            let new_current = previous + current;\n            previous = current;\n            current = new_current;\n        }\n        current\n    }\n}\n```", "```rs\n[lib]\nname = \"test_bench\"\npath = \"src/lib.rs\"\nbench = false\n\n[[bench]]\nname = \"example\"\nharness = false\n\n[dev-dependencies]\nbencher = \"0.1.4\"\n```", "```rs\n//! Benchmarks\n\n#[macro_use]\nextern crate bencher;\nextern crate test_bench;\nuse test_bench::*;\nuse self::bencher::Bencher;\n\n/// Benchmark the 0th sequence number.\nfn bench_fibonacci_0(b: &mut Bencher) {\n    b.iter(|| (0..1).map(fibonacci).collect::<Vec<u32>>())\n}\n\n/// Benchmark the 1st sequence number.\nfn bench_fibonacci_1(b: &mut Bencher) {\n    b.iter(|| (0..2).map(fibonacci).collect::<Vec<u32>>())\n}\n\n/// Benchmark the 2nd sequence number.\nfn bench_fibonacci_2(b: &mut Bencher) {\n    b.iter(|| (0..3).map(fibonacci).collect::<Vec<u32>>())\n}\n\n/// Benchmark the 10th sequence number.\nfn bench_fibonacci_10(b: &mut Bencher) {\n    b.iter(|| (0..11).map(fibonacci).collect::<Vec<u32>>())\n}\n\n/// Benchmark the 20th sequence number.\nfn bench_fibonacci_20(b: &mut Bencher) {\n    b.iter(|| (0..21).map(fibonacci).collect::<Vec<u32>>())\n}\n\nbenchmark_group!(\n    benches,\n    bench_fibonacci_0,\n    bench_fibonacci_1,\n    bench_fibonacci_2,\n    bench_fibonacci_10,\n    bench_fibonacci_20\n);\nbenchmark_main!(benches);\n```", "```rs\nlanguage: rust\ndist: trusty # Use a little more updated system\nos:\n  - linux # Build for Linux\n  - osx # Build also for MacOS X\n\n# Run builds for all the supported trains\nrust:\n  - nightly\n  - beta\n  - stable\n  - 1.16.0 # Minimum supported version\n\n# Load travis-cargo\nbefore_script:\n  - export PATH=$PATH:~/.cargo/bin\n\n# The main build\nscript:\n  - cargo build\n  - cargo package\n  - cargo test\n\nafter_success:\n  # Benchmarks\n  - ./travis-after-success.sh\n```", "```rs\n#!/usr/bin/env bash\n\nset -e\nset -x\n\nif [ \"${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH}\" != \"master\" ] && [ \"$TRAVIS_RUST_VERSION\" == \"nightly\" ]; then\n    REMOTE_URL=\"$(git config --get remote.origin.url)\"\n\n    # Clone the repository fresh...\n    cd ${TRAVIS_BUILD_DIR}/..\n    git clone ${REMOTE_URL} \"${TRAVIS_REPO_SLUG}-bench\"\n    cd \"${TRAVIS_REPO_SLUG}-bench\"\n\n    # Bench the pull request base or master\n    if [ -n \"$TRAVIS_PULL_REQUEST_BRANCH\" ]; then\n      git checkout -f \"$TRAVIS_BRANCH\"\n    else # this is a push build\n      git checkout -f master\n    fi\n    cargo bench --verbose | tee previous-benchmark\n    # Bench the current commit that was pushed\n    git checkout -f \"${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH}\"\n    cargo bench --verbose | tee current-benchmark\n\n    cargo install --force cargo-benchcmp\n    cargo benchcmp previous-benchmark current-benchmark\n   fi\n```", "```rs\n[dev-dependencies]\ncriterion = \"0.1.1\"\n\n[[bench]]\nname = \"example\"\nharness = false\n```", "```rs\n//! Example benchmark.\n\n#[macro_use]\nextern crate criterion;\nextern crate test_bench;\n\nuse criterion::Criterion;\nuse test_bench::fibonacci;\n\nfn criterion_benchmark(c: &mut Criterion) {\n    Criterion::default().bench_function(\"fib 20\", |b| b.iter(|| fibonacci(20)));\n}\n\ncriterion_group!(benches, criterion_benchmark);\ncriterion_main!(benches);\n```"]