["```rs\nsudo dnf install -y gcc\n```", "```rs\ngcc -version  \n```", "```rs\nrustc --version  \n```", "```rs\nmkdir firstproject cd firstproject touch Cargo.toml mkdir src cd src touch main.rs\n```", "```rs\nmd firstproject cd firstproject md src echo $null >> Cargo.toml cd src echo $null >> main.rs\n```", "```rs\ncargo new demo_app_name -bin \n```", "```rs\ncargo new app_name/mylib  \n```", "```rs\ncd app_name \ncargo build app_name  \n```", "```rs\ncargo run\n```", "```rs\ncargo build; cargo run  \n```", "```rs\ncargo clean  \n```", "```rs\nfn main() \n{ \n   print_multiply(4, 5); \n} \n\n/// A simple function example \n/// \n/// # Examples \n/// \n/// ```", "```rs \n\nfn print_multiply(x: i32, y: i32) \n{ \n   println!(\"x * y = {}\", x * y); \n} \n```", "```rs\ncargo doc\nrustdoc src/main.rs  \n```", "```rs\nfn main() { \n    println!(\"Tests have not been compiled, use rustc --test instead (or cargo test)\"); \n} \n\n#[test] \nfn multiply_test() \n{ \n   if 2 * 3 == 5 \n   { \n      println!(\"The multiply worked\"); \n   } \n} \n```", "```rs\n#[test] \nfn multiply() \n{ \n   assert_eq!(5, 2 * 3); \n} \nassert_eq! (assert equal) macro. The first argument is the answer expected, and the second argument is what is being tested. If *2 * 3 = 5*, then the assertion is true and passes the unit test.\n```", "```rs\ncargo <command> <opts>  \n```", "```rs\nfetch\n```", "```rs\ngenerate-lockfile\n```", "```rs\ngit-checkout\n```", "```rs\ncargo git-checkout -url=URL        \n```", "```rs\nlocate-project\n```", "```rs\nlogin\n```", "```rs\ncargo login -host=HOST   token        \n```", "```rs\nowner\n```", "```rs\npackage\n```", "```rs\npkgid\n```", "```rs\npublish\n```", "```rs\nread-manifest\n```", "```rs\nrustc\n```", "```rs\nsearch\n```", "```rs\nupdate\n```", "```rs\nverify-project\n```", "```rs\nversion\n```", "```rs\nyank\n```"]