["```rs\nrand = \"0.6\"\n```", "```rs\nuse rand::prelude::*;\nfn main() {\n    let mut rng = thread_rng();\n    let mut numbers = vec![];\n    for _ in 0..10 {\n        numbers.push(rng.gen_range(100_f32, 400_f32));\n    }\n    println!(\"{:?} \", numbers)\n}\n```", "```rs\nuse rand::prelude::*;\nfn main() {\n    let mut rng = thread_rng();\n    let mut numbers = vec![];\n    for _ in 0..10 {\n        numbers.push(rng.gen_range(100_i32, 401_i32));\n    }\n    println!(\"{:?} \", numbers)\n}\n```", "```rs\nlazy_static = \"1.2\"\n```", "```rs\nuse lazy_static::lazy_static;\nlazy_static! {\n    static ref SQUARES_FROM_1_TO_200: Vec<u32> = {\n        let mut v = vec![];\n        for i in 1.. {\n            let ii = i * i;\n            if ii > 200 { break; }\n            v.push(ii);\n        }\n        v\n    };\n}\nfn main() {\n    println!(\"{:?}\", *SQUARES_FROM_1_TO_200);\n}\n```", "```rs\nlog = \"0.4\"\nenv_logger = \"0.6\"\n```", "```rs\n#[macro_use]\nextern crate log;\nfn main() {\n    env_logger::init();\n    warn!(\"Warning message\");\n    info!(\"Information message\");\n}\n```", "```rs\nstructopt = \"0.2\"\n```", "```rs\nuse structopt::StructOpt;\n#[derive(StructOpt, Debug)]\nstruct Opt {\n    #[structopt(short = \"l\", long = \"level\")]\n    level: u32,\n}\n\nfn main() {\n    let options = Opt::from_args();\n    if options.level < 1 || options.level > 20 {\n        println!(\"Invalid level (1 to 20 is expected): {}\", options.level);\n    } else {\n        println!(\"Level is {}\", options.level);\n    }\n}\n```", "```rs\nredis = \"0.16\"\n```", "```rs\nuse redis::Commands;\n\nfn main() -> redis::RedisResult<()> {\n    let id = std::env::args().nth(1).unwrap();\n\n    let client = redis::Client::open(\"redis://localhost/\")?;\n    let mut conn = client.get_connection()?;\n\n    if let Ok(value) = conn.get::<_, String>(&id) {\n        println!(\"Value of '{}' is '{}'.\", id, value);\n    } else {\n        println!(\"Id '{}' not found.\", id);\n    }\n    Ok(())\n}\n```", "```rs\n{%if person%}Id: {{person.id}}\\\n{%else%}No person\\\n{%endif%}\n```"]