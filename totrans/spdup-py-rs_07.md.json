["```rs\n├── Cargo.toml\n```", "```rs\n├── MANIFEST.in\n```", "```rs\n├── README.md\n```", "```rs\n├── flitton_oasis_risk_modelling\n```", "```rs\n│   ├── __init__.py\n```", "```rs\n│   ├── footprint.csv\n```", "```rs\n│   └── vulnerability.csv\n```", "```rs\n├── src\n```", "```rs\n│   ├── lib.rs\n```", "```rs\n│   ├── main.rs\n```", "```rs\n│   ├── footprint\n```", "```rs\n│   │   ├── mod.rs\n```", "```rs\n│   │   ├── processes.rs\n```", "```rs\n│   │   └── structs.rs\n```", "```rs\n│   └── vulnerabilities\n```", "```rs\n│       ├── mod.rs\n```", "```rs\n│       ├── processes.rs\n```", "```rs\n│       └── structs.rs\n```", "```rs\n[package]\n```", "```rs\nname = \"flitton_oasis_risk_modelling\"\n```", "```rs\nversion = \"0.1.0\"\n```", "```rs\nauthors = [\"Maxwell Flitton <maxwellflitton@gmail.com>\"]\n```", "```rs\nedition = \"2018\"\n```", "```rs\n[dependencies]\n```", "```rs\ncsv = \"1.1\"\n```", "```rs\nserde = { version = \"1\", features = [\"derive\"] }\n```", "```rs\n[lib]\n```", "```rs\nname = \"flitton_oasis_risk_modelling\"\n```", "```rs\ncrate-type=[\"rlib\", \"cdylib\"]\n```", "```rs\n[dependencies.pyo3]\n```", "```rs\nversion = \"0.13.2\"\n```", "```rs\nfeatures = [\"extension-module\"]\n```", "```rs\nuse serde::Deserialize;\n```", "```rs\n#[derive(Debug, Deserialize, Clone)]\n```", "```rs\npub struct FootPrint {\n```", "```rs\n    pub event_id: i32,\n```", "```rs\n    pub areaperil_id: i32,\n```", "```rs\n    pub intensity_bin_id: i32,\n```", "```rs\n    pub probability: f32\n```", "```rs\n}\n```", "```rs\n    use std::error::Error;\n    use std::fs::File;\n    use csv;\n    use super::structs::FootPrint;\n    ```", "```rs\n    pub fn read_footprint(mut base_path: String) -> \\\n      Result<Vec<FootPrint>, Box<dyn Error>> {\n        base_path.push_str(\"/footprint.csv\");\n        let file = File::open(base_path.as_str())?;\n        let mut rdr = csv::Reader::from_reader(file);\n        let mut buffer = Vec::new();\n\n        for result in rdr.deserialize() {\n            let record: FootPrint = result?;\n            buffer.push(record);\n        }\n        Ok(buffer)\n    }\n    ```", "```rs\n    pub fn merge_footprint_with_events(event_ids: \\\n      Vec<i32>, \n          footprints: Vec<FootPrint>) -> Vec<FootPrint> {\n        let mut buffer = Vec::new();\n        for event_id in event_ids {\n            for footprint in &footprints {\n                if footprint.event_id == event_id {\n                    buffer.push(footprint.clone());\n                }\n            }\n        }\n        return buffer\n    }\n    ```", "```rs\n    pub mod structs;\n    pub mod processes;\n    use structs::FootPrint;\n    use processes::{merge_footprint_with_events, \\\n      read_footprint};\n    ```", "```rs\n    pub fn merge_event_ids_with_footprint(event_ids: \\\n      Vec<i32>, \n           base_path: String) -> Vec<FootPrint> {\n        let foot_prints = \\\n          read_footprint(base_path).unwrap();\n        return merge_footprint_with_events(event_ids, \\\n          foot_prints)\n    }\n    ```", "```rs\n    use serde::Deserialize;\n    ```", "```rs\n    #[derive(Debug, Deserialize, Clone)]\n    pub struct Vulnerability {\n        pub vulnerability_id: i32,\n        pub intensity_bin_id: i32,\n        pub damage_bin_id: i32,\n        pub probability: f32\n    }\n    ```", "```rs\n    #[derive(Debug, Deserialize, Clone)]\n    pub struct VulnerabilityFootPrint {\n        pub vulnerability_id: i32,\n        pub intensity_bin_id: i32,\n        pub damage_bin_id: i32,\n        pub damage_probability: f32,\n        pub event_id: i32,\n        pub areaperil_id: i32,\n        pub footprint_probability: f32,\n        pub total_probability: f32\n    }\n    ```", "```rs\n    use std::error::Error;\n    use std::fs::File;\n    use csv;\n    use crate::footprint::structs::FootPrint;\n    use super::structs::{Vulnerability, \\\n      VulnerabilityFootPrint};\n    ```", "```rs\n    pub fn read_vulnerabilities(mut base_path: String) \\\n      -> Result<Vec<Vulnerability>, Box<dyn Error>> {\n        base_path.push_str(\"/vulnerability.csv\");\n        let file = File::open(base_path.as_str())?;\n        let mut rdr = csv::Reader::from_reader(file);\n        let mut buffer = Vec::new();\n\n        for result in rdr.deserialize() {\n            let record: Vulnerability = result?;\n            buffer.push(record);\n        }\n        Ok(buffer)\n    }\n    ```", "```rs\n    pub fn merge_footprint_with_vulnerabilities(\n      vulnerabilities: Vec<Vulnerability>, \n      footprints: Vec<FootPrint>) -> \\\n        Vec<VulnerabilityFootPrint> {\n        let mut buffer = Vec::new();\n        for vulnerability in &vulnerabilities {\n            for footprint in &footprints {\n                if footprint.intensity_bin_id == \\\n                  vulnerability\n                    .intensity_bin_id {\n                    . . .\n                }\n            }\n        }\n        return buffer\n    }\n    ```", "```rs\n    buffer.push(VulnerabilityFootPrint{\n        vulnerability_id: vulnerability.vulnerability_id,\n        intensity_bin_id: vulnerability.intensity_bin_id,\n        damage_bin_id: vulnerability.damage_bin_id,\n        damage_probability: vulnerability.probability,\n        event_id: footprint.event_id,\n        areaperil_id: footprint.areaperil_id,\n        footprint_probability: footprint.probability,\n        total_probability: footprint.probability * \\\n          vulnerability.probability\n                    });\n    ```", "```rs\n    pub mod structs;\n    pub mod processes;\n    use structs::VulnerabilityFootPrint;\n    use processes::{merge_footprint_with_vulnerabilities \\\n        ,read_vulnerabilities};\n    use crate::footprint::structs::FootPrint;\n    ```", "```rs\n    pub fn merge_vulnerabilities_with_footprint( \\\n      footprint: Vec<FootPrint>, mut base_path: String) \\\n        -> Vec<VulnerabilityFootPrint> {\n        let vulnerabilities = read_vulnerabilities( \\\n          base_path).unwrap();\n        return merge_footprint_with_vulnerabilities( \\\n          vulnerabilities, footprint)\n    }\n    ```", "```rs\n    use pyo3::prelude::*;\n    use pyo3::wrap_pyfunction;\n    use pyo3::types::PyDict;\n    mod footprint;\n    mod vulnerabilities;\n    use footprint::merge_event_ids_with_footprint;\n    use vulnerabilities::merge_vulnerabilities_with_footprint;\n    use vulnerabilities::structs::VulnerabilityFootPrint; \n    ```", "```rs\n    #[pyfunction]\n    fn get_model<'a>(event_ids: Vec<i32>, \\\n        mut base_path: String, py: Python) -> Vec<&PyDict> {\n        let footprints = merge_event_ids_with_footprint( \\\n          event_ids, base_path.clone());\n        let model = merge_vulnerabilities_with_footprint \\\n          (footprints, base_path);\n       let mut buffer = Vec::new();\n\n       for i in model {\n           . . .\n       }\n       return buffer\n    }\n    ```", "```rs\n        let placeholder = PyDict::new(py);\n        placeholder.set_item(\"vulnerability_id\", \\\n          i.vulnerability_id);\n        placeholder.set_item(\"intensity_bin_id\", \\\n          i.intensity_bin_id);\n        placeholder.set_item(\"damage_bin_id\", \\\n          i.damage_bin_id);\n        placeholder.set_item(\"damage_probability\",\\ \n          i.damage_probability);\n        placeholder.set_item(\"event_id\", \\\n          i.event_id);\n        placeholder.set_item(\"areaperil_id\",\\ \n          i.areaperil_id);\n        placeholder.set_item(\"footprint_probability\", \\\n          i.footprint_probability);\n        placeholder.set_item(\"total_probability\", \\\n          i.total_probability);\n           buffer.push(placeholder);\n    ```", "```rs\n    #[pymodule]\n    fn flitton_oasis_risk_modelling(_py: Python, \\\n        m: &PyModule) -> PyResult<()> {\n        m.add_wrapped(wrap_pyfunction!(get_model));\n        Ok(())\n    }\n    ```", "```rs\nimport os \n```", "```rs\nfrom .flitton_oasis_risk_modelling import *\n```", "```rs\ndef construct_model(event_ids):\n```", "```rs\n    dir_path = os.path.dirname(os.path.realpath(__file__))\n```", "```rs\n    return get_model(event_ids, str(dir_path))\n```", "```rs\nrecursive-include flitton_oasis_risk_modelling/*.csv\n```", "```rs\n    #!/usr/bin/env python\n    from setuptools import dist\n    dist.Distribution().fetch_build_eggs([ \\\n      'setuptools_rust'])\n    from setuptools import setup\n    from setuptools_rust import Binding, RustExtension\n    ```", "```rs\n    setup(\n        name=\"flitton-oasis-risk-modelling\",\n        version=\"0.1\",\n        rust_extensions=[RustExtension(\n        \".flitton_oasis_risk_modelling.flitton_oasis \\\n          _risk_modelling\",\n           path=\"Cargo.toml\", binding=Binding.PyO3)],\n        packages=[\"flitton_oasis_risk_modelling\"],\n        include_package_data=True,\n        package_data={'': ['*.csv']},\n        zip_safe=False,\n    )\n    ```", "```rs\n    [target.x86_64-apple-darwin]\n    rustflags = [\n        \"-C\", \"link-arg=-undefined\",\n        \"-C\", \"link-arg=dynamic_lookup\",\n    ]\n    [target.aarch64-apple-darwin]\n    rustflags = [\n        \"-C\", \"link-arg=-undefined\",\n        \"-C\", \"link-arg=dynamic_lookup\",\n    ]\n    ```", "```rs\n>>> from flitton_oasis_risk_modelling import \n```", "```rs\n  construct_model\n```", "```rs\n>>> construct_model([1, 2])\n```", "```rs\n[{'vulnerability_id': 1, 'intensity_bin_id': 1, \n```", "```rs\n'damage_bin_id': 1, 'damage_probability': 0.44999998807907104, \n```", "```rs\n'event_id': 1, 'areaperil_id': 10, \n```", "```rs\n'footprint_probability': 0.4699999988079071, \n```", "```rs\n'total_probability': 0.21149998903274536}, \n```", "```rs\n{'vulnerability_id': 1, 'intensity_bin_id': 1, \n```", "```rs\n'damage_bin_id': 1, 'damage_probability': \n```", "```rs\n0.44999998807907104, \n```", "```rs\n'event_id': 2, 'areaperil_id': 20, \n```", "```rs\n'footprint_probability': 0.30000001192092896, \n```", "```rs\n'total_probability': 0.13500000536441803}, \n```", "```rs\n{'vulnerability_id': 1, 'intensity_bin_id': 2, \n```", "```rs\n'damage_bin_id': 2, 'damage_probability': \n```", "```rs\n0.6499999761581421, \n```", "```rs\n'event_id': 1, 'areaperil_id': 10, \n```", "```rs\n'footprint_probability': 0.5299999713897705, \n```", "```rs\n'total_probability': 0.34449997544288635}, \n```", "```rs\n{'vulnerability_id': 1, 'intensity_bin_id': 2, \n```", "```rs\n'damage_bin_id': 2, \n```", "```rs\n'damage_probability': 0.6499999761581421, 'event_id': 2, \n```", "```rs\n'areaperil_id': 20, 'footprint_probability': \n```", "```rs\n0.699999988079071, \n```", "```rs\n'total_probability': 0.45499998331069946},\n```", "```rs\n. . .\n```", "```rs\nimport random\n```", "```rs\nimport time\n```", "```rs\nimport matplotlib.pyplot as plt\n```", "```rs\nimport pandas as pd\n```", "```rs\nfrom flitton_oasis_risk_modelling import construct_model\n```", "```rs\n    def python_construct_model(event_ids):\n        vulnerabilities = \\\n          pd.read_csv(\"./vulnerability.csv\")\n        foot_print = pd.read_csv(\"./footprint.csv\")\n        event_ids = pd.DataFrame(event_ids)\n    ```", "```rs\n        model = pd.merge(\n            event_ids, foot_print, how=\"inner\", \\\n              on=\"event_id\"\n        )\n        model.rename(\n            columns={\"probability\": \\\n              \"footprint_probability\"},\n            inplace=True\n        )\n    ```", "```rs\n        model = pd.merge(\n            model, vulnerabilities,\n            how=\"inner\", on=\"intensity_bin_id\"\n        )\n        model.rename(\n            columns={\"probability\": \\\n              \"vulnerability_probability\"},\n            inplace=True\n        )\n        model[\"total_prob\"] = \\\n          model[\"footprint_probability\"] * \\\n            model[\"vulnerability_probability\"]\n        return model\n    ```", "```rs\ndef generate_event_ids_for_python(number_of_events):\n```", "```rs\n    return [{\"event_id\": random.randint(1, 4)} for _\n```", "```rs\n            in range(0, number_of_events)]\n```", "```rs\ndef generate_event_ids_for_rust(number_of_events):\n```", "```rs\n    return [random.randint(1, 4) for _\n```", "```rs\n            in range(0, number_of_events)]\n```", "```rs\n    if __name__ == \"__main__\":\n        x = []\n        python_y = []\n        rust_y = []\n    ```", "```rs\n        for i in range(10, 3000, 10):\n            x.append(i)\n    ```", "```rs\n            python_event_ids = \\\n              generate_event_ids_for_python(\n                number_of_events=i\n            )\n            python_start = time.time()\n            python_construct_model(event_ids= \\\n              python_event_ids)\n            python_finish = time.time()\n            python_y.append(python_finish - python_start)\n    ```", "```rs\n            rust_event_ids = generate_event_ids_for_rust(\n                number_of_events=i\n            )\n            rust_start = time.time()\n            construct_model(rust_event_ids)\n            rust_finish = time.time()\n            rust_y.append(rust_finish - rust_start)\n    ```", "```rs\n        plt.plot(x, python_y)\n        plt.plot(x, rust_y)\n        plt.show()\n    ```"]