["```rs\n$ curl https://sh.rustup.rs --sSf | sh\n```", "```rs\n$ rustc –version\nrustc 1.58.1 (db9d1b20b 2022-01-20)\n```", "```rs\n$ rustup default nightly\n```", "```rs\n$ rustup update\n```", "```rs\n$ rustc --version\nrustc 1.55.0 (c8dfcfe04 2021-09-06)\n```", "```rs\n    $ touch hello_world.rs\n    ```", "```rs\n    fn main() {    \n    println!(\"Hello World!\");\n    }\n    ```", "```rs\n    $ rustc hello.rs\n    ```", "```rs\n    $ ./hello\n    Hello World!\n    ```", "```rs\n    $ rustc --target wasm32-unknown-emscripten\n      hello_world.rs -o hello_world.html\n    ```", "```rs\n    $ python -m http.server\n    ```", "```rs\n$ cargo new --lib fib_wasm\nCreated library `fib_wasm` package\n```", "```rs\n#[no_mangle]\nfn add(x: i32, y:i32) -> i32 {    x + y}\n```", "```rs\n[package]\nname = \"fib_wasm\"\nversion = \"0.1.0\"\nauthors = [\"Sendil Kumar\"]\nedition = \"2018\"\n```", "```rs\n[package]\nname = \"fib_wasm\"\nversion = \"0.1.0\"\nauthors = [\"Sendil Kumar\"]\nedition = \"2018\"\n[lib]\ncrate-type = [\"cdylib\"]\n```", "```rs\n$ cargo build --target wasm32-unknown-unknown\n```", "```rs\n$ touch index.html\n```", "```rs\n<script> \n(async () => {     \nconst bytes = await fetch(\"target/wasm32-unknown-\n  unknown/debug/fib_wasm.wasm\");     \nconst response = await bytes.arrayBuffer();     \nconst result = await WebAssembly.instantiate(response, {});\n  console.log(result.instance.exports.add(10,3)); \n})();\n</script>\n```", "```rs\n    #[no_mangle]\n    fn fibonacci(num: i32) -> i32 {    \n    match num {        \n    0 => 0,        \n    1 => 1,        \n    _ => fibonacci(num-1) + fibonacci(num-2),    \n    }\n    }\n    ```", "```rs\n    <script>\n     (async () => {     \n    const bytes = await fetch(\"target/wasm32-unknown-\n      unknown/debug/fib_wasm.wasm\");     \n    const response = await bytes.arrayBuffer();     \n    const result = await WebAssembly.instantiate(response,\n      {});  \n         result.instance.exports.fibonacci(20); \n    })();\n    </script>\n    ```", "```rs\n$ cargo install wasm-bindgen-cli\n```", "```rs\n$ wasm-bindgen  --help\nGenerating JS bindings for a wasm file\nUsage:\n    wasm-bindgen [options] <input>\n    wasm-bindgen -h | --help\n    wasm-bindgen -V | --version\nOptions:\n    -h --help                 Show this screen.\n    --out-dir DIR             Output directory\n    --out-name VAR            Set a custom output filename \n      (Without extension. Defaults to crate name)\n    --target TARGET           What type of output to generate, \n      valid\n      values are [web, bundler, nodejs, no-modules],\n        and the default is [bundler]\n    --no-modules-global VAR   Name of the global variable to \n      initialize\n    --browser                 Hint that JS should only be \n      compatible with a browser\n    --typescript              Output a TypeScript definition \n      file (on by default)\n    --no-typescript           Don't emit a *.d.ts file\n    --debug                   Include otherwise-extraneous \n      debug checks in output\n    --no-demangle             Don't demangle Rust symbol names\n    --keep-debug              Keep debug sections in wasm files\n    --remove-name-section     Remove the debugging `name` \n      section of the file\n    --remove-producers-section   Remove the telemetry \n      `producers` section\n    --encode-into MODE        Whether or not to use \n      TextEncoder#encodeInto,\n      valid values are [test,z always, never]\n    --nodejs                  Deprecated, use `--target nodejs`\n    --web                     Deprecated, use `--target web`\n    --no-modules              Deprecated, use `--target \n      no-modules`\n    -V --version              Print the version number of \n     wasm-bindgen\n```", "```rs\n     $ cargo new --lib hello_world\n    Created library `hello_world` package\n    ```", "```rs\n    [package]\n    name = \"hello_world\"\n    version = \"0.1.0\"\n    authors = [\"Sendil Kumar\"]\n    edition = \"2018\"\n    [lib]\n    crate-type = [\"cdylib\"]\n    [dependencies]\n    wasm-bindgen = \"0.2.38\"\n    ```", "```rs\n    use wasm_bindgen::prelude::*;\n    #[wasm_bindgen]\n    pub fn hello() -> String {\n    \"Hello World\".to_string()\n    }\n    ```", "```rs\n$ cargo build --target=wasm32-unknown-unknown\n```", "```rs\n$ wasm-bindgen target/wasm32-unknown-\n  unknown/debug/hello_world.wasm --out-dir .\n```", "```rs\n$ ls -lrta\n-rw-r--r-- 1 sendilkumar staff 1769 hello_world.js\n-rw-r--r-- 1 sendilkumar staff 88 hello_world.d.ts\n-rw-r--r-- 1 sendilkumar staff 227 hello_world_bg.d.ts\n-rw-r--r-- 1 sendilkumar staff 67132 hello_world_bg.wasm \n```", "```rs\nimport * as wasm from './hello_world_bg.wasm';\n```", "```rs\nconst lTextDecoder = typeof TextDecoder === 'undefined' ?\n  require('util').TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder('utf-8');\n```", "```rs\nfunction getUint8Memory() { ... }\nfunction getUint32Memory() { ... }\n```", "```rs\nfunction getStringFromWasm(ptr, len) { ....  }\n```", "```rs\nexport function hello() {\n    const retptr = globalArgumentPtr();\n    wasm.hello_world(retptr);\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n    const realRet = getStringFromWasm(rustptr,\n      rustlen).slice();\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n    return realRet;\n}\n```", "```rs\ncargo expand --target=wasm32-unknown-unknown > expanded.rs\n```", "```rs\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n    entry: './index.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'bundle.js',\n    },\n    plugins: [\n        new HtmlWebpackPlugin(),\n    ],\n    mode: 'development'\n};\n```", "```rs\n{\n    \"scripts\": {\n        \"build\": \"webpack\",\n        \"serve\": \"webpack-dev-server\"\n    },\n    \"devDependencies\": {\n        \"html-webpack-plugin\": \"^3.2.0\",\n        \"webpack\": \"^4.29.4\",\n        \"webpack-cli\": \"^3.1.1\",\n        \"webpack-dev-server\": \"^3.1.0\"\n    }\n}\n```", "```rs\nimport(\"./hello_world\").then(module => {\n    console.log(module.hello_world());\n});\n```", "```rs\n$ npm install\n```", "```rs\n$ npm run serve\n```"]