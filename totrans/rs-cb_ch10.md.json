["```rs\n cargo new --bin sample_rest_api && cd sample_rest_api \n\n```", "```rs\n cargo build\n\n```", "```rs\n        //-- #########################\n        //-- Task: Creating a simple REST API\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 28 April 17\n        //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate nickel;\n\n        use nickel::{Nickel, JsonBody, HttpRouter, Request,\n        Response, MiddlewareResult, MediaType};\n\n```", "```rs\n        fn main() {\n\n         let mut server = Nickel::new();\n         let mut router = Nickel::router();\n\n```", "```rs\n        router.get(\"/users\", middleware! { |request, response|\n\n        format!(\"Hello from GET /users\")\n\n        });\n\n```", "```rs\n        router.post(\"/users/new\", middleware! { |request,\n        response|\n\n        format!(\"Hello from POST /users/new\")\n\n        });\n\n```", "```rs\n        router.delete(\"/users/:id\", middleware! { |request,\n        response|\n\n        format!(\"Hello from DELETE /users/:id\")\n\n        });\n\n```", "```rs\n        server.utilize(router);\n\n        server.listen(\"127.0.0.1:9000\");\n        }\n\n```", "```rs\n cargo run\n\n```", "```rs\n cargo new --bin sample_post && cd sample_post\n\n```", "```rs\n cargo build\n\n```", "```rs\n sudo apt-key adv --keyserver\n      hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n\n echo \"deb http://repo.mongodb.org/apt/ubuntu\n      \"$(lsb_release -sc)\"/mongodb-org/3.0 multiverse\" | sudo\n      tee /etc/apt/sources.list.d/mongodb-org-3.0.list\n\n sudo apt-get update\n\n sudo apt-get install -y mongodb-org\n\n service mongod status\n\n```", "```rs\n        //-- #########################\n        //-- Task: Perform POST action\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 28 April 17\n        //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate nickel;\n        extern crate rustc_serialize;\n\n        #[macro_use(bson, doc)]\n        extern crate bson;\n        extern crate mongodb;\n\n        // Nickel\n        use nickel::{Nickel, JsonBody, HttpRouter, MediaType};\n        use nickel::status::StatusCode::{self};\n\n        // MongoDB\n        use mongodb::{Client, ThreadedClient};\n        use mongodb::db::ThreadedDatabase;\n        use mongodb::error::Result as MongoResult;\n\n        // bson\n        use bson::{Bson, Document};\n        use bson::oid::ObjectId;\n\n        // rustc_serialize\n        use rustc_serialize::json::{Json, ToJson};\n\n```", "```rs\n        #[derive(RustcDecodable, RustcEncodable)]\n        struct User {\n         firstname: String,\n         lastname: String,\n         email: String\n        }\n\n```", "```rs\n        fn main() {\n\n         let mut server = Nickel::new();\n         let mut router = Nickel::router();\n\n```", "```rs\n         router.get(\"/users\", middleware! { |request, response|\n\n         format!(\"Hello from GET /users\")\n\n         });\n\n```", "```rs\n        router.post(\"/users/new\", middleware! { |request,\n        response|\n\n        // Accept a JSON string that corresponds to the User\n        struct\n        let user = request.json_as::<User>().unwrap();\n\n        let firstname = user.firstname.to_string();\n        let lastname = user.lastname.to_string();\n        let email = user.email.to_string();\n\n        // Connect to the database\n        let client = Client::connect(\"localhost\", 27017)\n        .ok().expect(\"Error establishing connection.\");\n\n        // The users collection\n        let coll = client.db(\"rust-\n        cookbook\").collection(\"users\");\n\n        // Insert one user\n        match coll.insert_one(doc! {\n        \"firstname\" => firstname,\n        \"lastname\" => lastname,\n        \"email\" => email\n        }, None) {\n        Ok(_) => (StatusCode::Ok, \"Item saved!\"),\n        Err(e) => return response.send(format!(\"{}\", e))\n        }\n\n        });\n\n```", "```rs\n        router.delete(\"/users/:id\", middleware! { |request,\n        response|\n\n        format!(\"Hello from DELETE /users/:id\")\n\n        });\n\n```", "```rs\n        server.utilize(router);\n\n        server.listen(\"127.0.0.1:9000\");\n        }\n\n```", "```rs\n cargo run\n\n```", "```rs\n cargo new --bin sample_get && cd sample_get\n\n```", "```rs\n cargo build\n\n```", "```rs\n        sudo apt-key adv --keyserver\n        hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n\n        echo \"deb http://repo.mongodb.org/apt/ubuntu\n        \"$(lsb_release -sc)\"/mongodb-org/3.0 multiverse\" | sudo\n        tee /etc/apt/sources.list.d/mongodb-org-3.0.list\n\n        sudo apt-get update\n\n        sudo apt-get install -y mongodb-org\n\n        service mongod status\n\n```", "```rs\n        //-- #########################\n        //-- Task: Perform GET action\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 28 April 17\n        //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate nickel;\n        extern crate rustc_serialize;\n\n        #[macro_use(bson, doc)]\n        extern crate bson;\n        extern crate mongodb;\n\n        // Nickel\n        use nickel::{Nickel, JsonBody, HttpRouter, MediaType};\n        use nickel::status::StatusCode::{self};\n\n        // MongoDB\n        use mongodb::{Client, ThreadedClient};\n        use mongodb::db::ThreadedDatabase;\n        use mongodb::error::Result as MongoResult;\n\n        // bson\n        use bson::{Bson, Document};\n        use bson::oid::ObjectId;\n\n        // rustc_serialize\n        use rustc_serialize::json::{Json, ToJson};\n\n```", "```rs\n        #[derive(RustcDecodable, RustcEncodable)]\n        struct User {\n          firstname: String,\n          lastname: String,\n          email: String\n        }\n\n```", "```rs\n        fn main() {\n\n          let mut server = Nickel::new();\n          let mut router = Nickel::router();\n\n```", "```rs\n        router.get(\"/users\", middleware! { |request, response|\n\n        // Connect to the database\n        let client = Client::connect(\"localhost\", 27017)\n        .ok().expect(\"Error establishing connection.\");\n\n        // The users collection\n        let coll = client.db(\"rust-\n        cookbook\").collection(\"users\");\n\n        // Create cursor that finds all documents\n        let mut cursor = coll.find(None, None).unwrap();\n\n        // Opening for the JSON string to be returned\n        let mut data_result = \"{\\\"data\\\":[\".to_owned();\n\n        for (i, result) in cursor.enumerate() {\n\n        if let Ok(item) = result {\n          if let Some(&Bson::String(ref firstname)) =\n          item.get(\"firstname\") {\n\n            let string_data = if i == 0 {\n            format!(\"{},\", firstname)\n            } else {\n              format!(\"{},\", firstname)\n            };\n          data_result.push_str(&string_data);\n        }\n\n        }\n        }\n\n        // Close the JSON string\n        data_result.push_str(\"]}\");\n\n        // Send back the result\n        format!(\"{}\", data_result)\n\n        });\n\n```", "```rs\n        router.post(\"/users/new\", middleware! { |request,\n        response|\n\n        // Accept a JSON string that corresponds to the User\n        struct\n        let user = request.json_as::<User>().unwrap();\n\n        let firstname = user.firstname.to_string();\n        let lastname = user.lastname.to_string();\n        let email = user.email.to_string();\n\n        // Connect to the database\n        let client = Client::connect(\"localhost\", 27017)\n        .ok().expect(\"Error establishing connection.\");\n\n        // The users collection\n        let coll = client.db(\"rust\n        -cookbook\").collection(\"users\");\n\n        // Insert one user\n        match coll.insert_one(doc! {\n        \"firstname\" => firstname,\n        \"lastname\" => lastname,\n        \"email\" => email\n        }, None) {\n        Ok(_) => (StatusCode::Ok, \"Item saved!\"),\n        Err(e) => return response.send(format!(\"{}\", e))\n        }\n\n        });\n\n```", "```rs\n        router.delete(\"/users/:id\", middleware! { |request,\n        response|\n\n        format!(\"Hello from DELETE /users/:id\")\n\n        });\n\n```", "```rs\n        server.utilize(router);\n\n        server.listen(\"127.0.0.1:9000\");\n        }\n\n```", "```rs\n cargo run\n\n```", "```rs\n cargo new --bin sample_app && cd sample_app\n\n```", "```rs\n cargo build\n\n```", "```rs\n        sudo apt-key adv --keyserver\n        hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n\n        echo \"deb http://repo.mongodb.org/apt/ubuntu\n        \"$(lsb_release -sc)\"/mongodb-org/3.0 multiverse\" | sudo\n        tee /etc/apt/sources.list.d/mongodb-org-3.0.list\n\n        sudo apt-get update\n\n        sudo apt-get install -y mongodb-org\n\n        service mongod status\n\n```", "```rs\n    //-- #########################\n    //-- Task: Perform DELETE action\n    //-- Author: Vigneshwer.D\n    //-- Version: 1.0.0\n    //-- Date: 28 April 17\n    //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate nickel;\n        extern crate rustc_serialize;\n\n        #[macro_use(bson, doc)]\n        extern crate bson;\n        extern crate mongodb;\n\n        // Nickel\n        use nickel::{Nickel, JsonBody, HttpRouter, MediaType};\n        use nickel::status::StatusCode::{self};\n\n        // MongoDB\n        use mongodb::{Client, ThreadedClient};\n        use mongodb::db::ThreadedDatabase;\n        use mongodb::error::Result as MongoResult;\n\n        // bson\n        use bson::{Bson, Document};\n        use bson::oid::ObjectId;\n\n        // rustc_serialize\n        use rustc_serialize::json::{Json, ToJson};\n\n```", "```rs\n        #[derive(RustcDecodable, RustcEncodable)]\n        struct User {\n         firstname: String,\n         lastname: String,\n         email: String\n        }\n\n```", "```rs\n        fn main() {\n\n          let mut server = Nickel::new();\n          let mut router = Nickel::router();\n\n```", "```rs\n        router.get(\"/users\", middleware! { |request, response|\n\n        // Connect to the database\n        let client = Client::connect(\"localhost\", 27017)\n        .ok().expect(\"Error establishing connection.\");\n\n        // The users collection\n        let coll = client.db(\"rust-\n        cookbook\").collection(\"users\");\n\n        // Create cursor that finds all documents\n        let mut cursor = coll.find(None, None).unwrap();\n\n        // Opening for the JSON string to be returned\n        let mut data_result = \"{\\\"data\\\":[\".to_owned();\n\n        for (i, result) in cursor.enumerate() {\n\n        if let Ok(item) = result {\n        if let Some(&Bson::String(ref firstname)) =\n        item.get(\"firstname\") {\n\n        let string_data = if i == 0 {\n        format!(\"{},\", firstname)\n        } else {\n        format!(\"{},\", firstname)\n        };\n        data_result.push_str(&string_data);\n        }\n\n        }\n        }\n\n        // Close the JSON string\n        data_result.push_str(\"]}\");\n\n        // Send back the result\n        format!(\"{}\", data_result)\n\n        });\n\n```", "```rs\n        router.post(\"/users/new\", middleware! { |request,\n        response|\n\n        // Accept a JSON string that corresponds to the User\n        struct\n        let user = request.json_as::<User>().unwrap();\n\n        let firstname = user.firstname.to_string();\n        let lastname = user.lastname.to_string();\n        let email = user.email.to_string();\n\n        // Connect to the database\n        let client = Client::connect(\"localhost\", 27017)\n        .ok().expect(\"Error establishing connection.\");\n\n        // The users collection\n        let coll = client.db(\"rust\n        -cookbook\").collection(\"users\");\n\n        // Insert one user\n        match coll.insert_one(doc! {\n        \"firstname\" => firstname,\n        \"lastname\" => lastname,\n        \"email\" => email\n        }, None) {\n        Ok(_) => (StatusCode::Ok, \"Item saved!\"),\n        Err(e) => return response.send(format!(\"{}\", e))\n        }\n\n        });\n\n```", "```rs\n        router.delete(\"/users/:id\", middleware! { |request,\n        response|\n\n        let client = Client::connect(\"localhost\", 27017)\n        .ok().expect(\"Failed to initialize standalone\n        client.\");\n\n        // The users collection\n        let coll = client.db(\"rust\n        -cookbook\").collection(\"users\");\n\n        // Get the objectId from the request params\n        let object_id = request.param(\"id\").unwrap();\n\n        // Match the user id to an bson ObjectId\n        let id = match ObjectId::with_string(object_id) {\n        Ok(oid) => oid,\n        Err(e) => return response.send(format!(\"{}\", e))\n        };\n\n        match coll.delete_one(doc! {\"_id\" => id}, None) {\n        Ok(_) => (StatusCode::Ok, \"Item deleted!\"),\n        Err(e) => return response.send(format!(\"{}\", e))\n        }\n\n        });\n\n```", "```rs\n        server.utilize(router);\n\n        server.listen(\"127.0.0.1:9000\");\n        }\n\n```", "```rs\n cargo run\n\n```"]