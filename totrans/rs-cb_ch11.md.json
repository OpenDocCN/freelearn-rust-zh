["```rs\n rustc --version\n\n```", "```rs\n curl https://sh.rustup.rs -sSf | sh\n\n```", "```rs\n rustup update stable\n\n```", "```rs\n rustup self update\n\n```", "```rs\n rustup install nightly\n\n```", "```rs\n rustup run nightly rustc --version\n\n```", "```rs\n rustup default nightly\n\n```", "```rs\n      rustup update\n\n```", "```rs\n rustup install nightly\n\n```", "```rs\n rustup default nightly\n\n```", "```rs\n cargo new --bin sample_rust_project\n\n cd sample_rust_project \n\n cargo install rustfmt-nightly\n\n```", "```rs\n        //-- #########################\n            //-- Task: Testing cargo fmt features\n            //-- Author: Vigneshwer.D\n          //-- Version: 1.0.0\n           //-- Date: 04 May 17\n          //-- ######################### \n\n```", "```rs\n        fn main() {\n          println!(\"Hello, world!\");\n        } \n\n```", "```rs\n cargo fmt\n\n```", "```rs\ncargo install --path \n\n```", "```rs\nrustfmt main.rs\n\nrustfmt --write-mode=overwrite main.rs\n\n```", "```rs\n rustup default nightly\n\n```", "```rs\n        [dependencies]\n        clippy = {version = \"*\", optional = true}\n\n        [features]\n        default = []\n\n```", "```rs\n cargo install clippy\n\n```", "```rs\n        [dependencies]\n        clippy = \"*\"\n\n```", "```rs\n cargo new --bin sample_rust_project\n\n```", "```rs\n        //-- #########################\n        //-- Task: Testing rust-clippy tool\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 28 April 17\n        //-- #########################\n\n```", "```rs\n        fn main(){\n        let x = Some(1u8);\n        match x {\n          Some(y) => println!(\"{:?}\", y),\n          _ => ()\n        }\n        }\n\n```", "```rs\n      #![cfg_attr(feature=\"clippy\", feature(plugin))]\n\n      #![cfg_attr(feature=\"clippy\", plugin(clippy))]\n\n```", "```rs\n cargo clippy\n\n```", "```rs\n        #![feature(plugin)]\n        #![plugin(clippy)]\n\n```", "```rs\n sudo apt install git curl freeglut3-dev autoconf libx11-dev \\\n libfreetype6-dev libgl1-mesa-dri libglib2.0-dev xorg-dev \\\n gperf g++ build-essential cmake virtualenv python-pip \\\n libssl1.0-dev libbz2-dev libosmesa6-dev libxmu6 libxmu-dev \\\n libglu1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev\n\n```", "```rs\n git clone https://github.com/servo/servo\n\n```", "```rs\n cd servo\n ./mach build --dev\n\n```", "```rs\n ./mach run tests/html/about-mozilla.html\n\n```", "```rs\n ./mach build --release\n ./mach run --release tests/html/about-mozilla.html\n\n```", "```rs\n ./mach run [url] \n ex: ./mach run https://www.google.com\n\n```", "```rs\n cargo new --bin sample_rand && cd sample_rand\n\n```", "```rs\n cargo install cargo-edit\n\n```", "```rs\n cargo add rand\n\n```", "```rs\n cargo run\n\n```", "```rs\n        //-- #########################\n        //-- Task: To generate a random number between the range of 0 to 10\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 04 May 17\n        //-- ######################### \n\n```", "```rs\n        extern crate rand;\n        use rand::Rng;\n        fn main() {\n          let mut rng = rand::thread_rng();\n          println!(\"{}\", rng.gen_range(0, 10));\n        }\n\n```", "```rs\n cargo run\n\n```", "```rs\n cargo new --bin sample_file && cd sample_file\n\n```", "```rs\n cargo add error-chain\n\n```", "```rs\n cargo run\n\n```", "```rs\n        //-- #########################\n        //-- Task: File system experiments\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 04 May 17\n        //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate error_chain;\n        use std::fs::File;\n        use std::io::{Write, BufReader, BufRead};\n        error_chain! {\n          foreign_links {\n            Io(std::io::Error);\n          }\n        }\n\n```", "```rs\n        fn run() -> Result<()> {\n          let path = \"lines.txt\";\n          let mut output = File::create(path)?;\n          write!(output, \"Rust\\nis\\nFun\")?;\n          let input = File::open(path)?;\n          let buffered = BufReader::new(input);\n          for line in buffered.lines() {\n            println!(\"{}\", line?);\n          }\n          Ok(())\n        }\n        quick_main!(run);\n\n```", "```rs\n cargo run\n\n```", "```rs\n cargo new --bin sample_json && cd sample_json\n\n```", "```rs\n cargo add error-chain serde_json\n\n```", "```rs\n cargo run\n\n```", "```rs\n        //-- #########################\n        //-- Task: Encoding experiments\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 04 May 17\n        //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate error_chain;\n        error_chain! {\n          foreign_links {\n            Json(serde_json::Error);\n          }\n        }\n\n```", "```rs\n        #[macro_use]\n        extern crate serde_json;\n        use serde_json::Value;\n        fn run() -> Result<()> {\n          let j = r#\"{\n            \"userid\": 103609,\n            \"verified\": true,\n            \"access_privileges\": [\n              \"user\",\n              \"admin\"\n            ]\n          }\"#;\n          let parsed: Value = serde_json::from_str(j)?;\n          let expected = json!({\n            \"userid\": 103609,\n            \"verified\": true,\n            \"access_privileges\": [\n              \"user\",\n              \"admin\"\n            ]\n          });\n          assert_eq!(parsed, expected);\n          Ok(())\n        }\n        quick_main!(run);\n\n```", "```rs\n cargo run\n\n```", "```rs\n cargo new --bin sample_url && cd sample_url\n\n```", "```rs\n cargo add error-chain url\n\n```", "```rs\n cargo run\n\n```", "```rs\n        //-- #########################\n        //-- Task: Url experiments\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 04 May 17\n        //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate error_chain;\n        error_chain! {\n          foreign_links {\n            UrlParse(url::ParseError);\n          }\n        }\n\n```", "```rs\n        extern crate url;\n        use url::Url;\n        fn run() -> Result<()> {\n          let s = \"https://github.com/rust-lang/rust/issues?labels=E-easy&state=open\";\n          let parsed = Url::parse(s)?;\n          println!(\"The path part of the URL is: {}\", parsed.path());\n          Ok(())\n        }\n        quick_main!(run);\n\n```", "```rs\n cargo run\n\n```", "```rs\n cargo new --bin sample_decom && cd sample_decom\n\n```", "```rs\n cargo add error-chain tar flate2\n\n```", "```rs\n cargo run\n\n```", "```rs\n        touch sample_file1.txt && tar -cvzf archieve.tar.gz\n        sample_file1.txt && rm sample_file1.txt  \n\n```", "```rs\n        //-- #########################\n        //-- Task: tar experiments\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 04 May 17\n        //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate error_chain;\n        error_chain! {\n          foreign_links {\n            Io(std::io::Error);\n          }\n        }\n\n```", "```rs\n        extern crate flate2;\n        extern crate tar;\n        use std::fs::File;\n        use flate2::read::GzDecoder;\n        use tar::Archive;\n        fn run() -> Result<()> {\n          let path = \"archive.tar.gz\";\n          // Open a compressed tarball\n          let tar_gz = File::open(path)?;\n          // Decompress it\n          let tar = GzDecoder::new(tar_gz)?;\n          // Load the archive from the tarball\n          let mut archive = Archive::new(tar);\n          // Unpack the archive inside curent working directory\n          archive.unpack(\".\")?;\n          Ok(())\n        }\n        quick_main!(run);\n\n```", "```rs\n cargo run\n\n```", "```rs\n cargo new --bin sample_com && cd sample_com\n\n```", "```rs\n cargo add error-chain tar flate2\n\n```", "```rs\n cargo run\n\n```", "```rs\n        //-- #########################\n        //-- Task: tar experiments\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 04 May 17\n        //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate error_chain;\n        error_chain! {\n          foreign_links {\n            Io(std::io::Error);\n          }\n        }\n\n```", "```rs\n        extern crate tar;\n        extern crate flate2;\n        use std::fs::File;\n        use flate2::Compression;\n        use flate2::write::GzEncoder;\n        fn run() -> Result<()> {\n          let tar_gz = File::create(\"archive.tar.gz\")?;\n          let enc = GzEncoder::new(tar_gz, Compression::Default);\n          let mut tar = tar::Builder::new(enc);\n          tar.append_dir_all(\"./backup\", \"../sample_com\")?;\n          Ok(())\n        }\n        quick_main!(run);\n\n```", "```rs\n cargo run\n\n```", "```rs\n cargo new --bin sample_ext && cd sample_ext\n\n```", "```rs\n cargo add error-chain glob\n\n```", "```rs\n cargo run\n\n```", "```rs\n        //-- #########################\n        //-- Task: glob experiments\n        //-- Author: Vigneshwer.D\n        //-- Version: 1.0.0\n        //-- Date: 04 May 17\n        //-- ######################### \n\n```", "```rs\n        #[macro_use]\n        extern crate error_chain;\n        error_chain! {\n          foreign_links {\n            Glob(glob::GlobError);\n            Pattern(glob::PatternError);\n          }\n        }\n\n```", "```rs\n        extern crate glob;\n        use glob::glob;\n        fn run() -> Result<()> {\n          for entry in glob(\"**/*.png\")? {\n            println!(\"{}\", entry?.display());\n          }\n          Ok(())\n        }\n        quick_main!(run);\n\n```", "```rs\n cargo run\n\n```"]