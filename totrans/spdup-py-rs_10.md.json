["```rs\ngit+https://github.com/maxwellflitton/flitton-fib-rs@main\n```", "```rs\npip install -r git_repos.txt\n```", "```rs\nsrc\n```", "```rs\n├── fib_calcs\n```", "```rs\n│   ├── __init__.py\n```", "```rs\n│   ├── enums.py\n```", "```rs\n│   └── fib_calculation.py\n```", "```rs\nfrom enum import Enum\n```", "```rs\nclass CalculationMethod(Enum):\n```", "```rs\n    PYTHON = \"python\"\n```", "```rs\n    RUST = \"rust\"\n```", "```rs\n    import time\n    from flitton_fib_rs.flitton_fib_rs import \\\n      fibonacci_number\n    from fib_calcs.enums import CalculationMethod\n    from fib_calcs.fib_calculation import FibCalculation\n    ```", "```rs\n    def _time_process(processor, input_number):\n        start = time.time()\n        calc = processor(input_number)\n        finish = time.time()\n        time_taken = finish - start\n        return calc, time_taken\n    ```", "```rs\n    def _process_method(input_method):\n        calc_enum = CalculationMethod._value2member_map_.\n                    get(input_method)\n        if calc_enum is None:\n            raise ValueError(\n                f\"{input_method} is not supported, \"\n                f\"please choose from \"\n         f\"{CalculationMethod._value2member_map_.keys()}\")\n        return calc_enum\n    ```", "```rs\n    def calc_fib_num(input_number, method):\n        if isinstance(method, str):\n            method = _process_method(input_method=method)\n        if method == CalculationMethod.PYTHON:\n            calc, time_taken = _time_process(\n                processor=FibCalculation,\n                input_number=input_number\n            )\n            return calc.fib_number, time_taken\n        elif method == CalculationMethod.RUST:\n            calc, time_taken = _time_process(\n                processor=fibonacci_number,\n                input_number=input_number\n            )\n            return calc, time_taken\n    ```", "```rs\nfrom fib_calcs import calc_fib_num\n```", "```rs\nfrom fib_calcs.enums import CalculationMethod\n```", "```rs\n@app.route(\"/calculate/<int:number>\")\n```", "```rs\ndef calculate(number):\n```", "```rs\n    fib_calc = dal.session.query(FibEntry).filter_by(\n```", "```rs\n      input_number=number).one_or_none()\n```", "```rs\n    if fib_calc is None:\n```", "```rs\n        if number < 50:\n```", "```rs\n            fib_number, time_taken = calc_fib_num(\n```", "```rs\n                input_number=number,\n```", "```rs\n                method=CalculationMethod.PYTHON\n```", "```rs\n            )\n```", "```rs\n            . . .\n```", "```rs\n            return f\"you entered {number} \" \\\n```", "```rs\n                   f\"which has a Fibonacci number of \" \\\n```", "```rs\n                   f\"{fib_number} which took {time_taken}\"\n```", "```rs\n    . . .\n```", "```rs\n@app.route(\"/rust/calculate/<int:number>\")\n```", "```rs\ndef rust_calculate(number):\n```", "```rs\n    . . .\n```", "```rs\n    if fib_calc is None:\n```", "```rs\n        if number < 50:\n```", "```rs\n            fib_number, time_taken = calc_fib_num(\n```", "```rs\n                input_number=number,\n```", "```rs\n                method=CalculationMethod.RUST\n```", "```rs\n            )\n```", "```rs\n            . . .\n```", "```rs\nfrom config import GlobalParams\n```", "```rs\nfrom fib_calcs import calc_fib_num\n```", "```rs\ndef create_calculate_fib(input_celery):\n```", "```rs\n    @input_celery.task()\n```", "```rs\n    def calculate_fib(number):\n```", "```rs\n        params = GlobalParams()\n```", "```rs\n        fib_number, _ = calc_fib_num(input_number=number,\n```", "```rs\n                                     method=params.get(\n```", "```rs\n                                     \"CELERY_METHOD\", \n```", "```rs\n                                     \"rust\"))\n```", "```rs\n        fib_entry = FibEntry(input_number=number,\n```", "```rs\n            calculated_number=fib_number)\n```", "```rs\n        dal.session.add(fib_entry)\n```", "```rs\n        dal.session.commit()\n```", "```rs\n    return calculate_fib\n```", "```rs\n. . .\n```", "```rs\nRUN apt-get update -y\n```", "```rs\nRUN apt-get install -y python3-dev python-dev gcc\n```", "```rs\n# setup rust\n```", "```rs\nRUN curl https://sh.rustup.rs -sSf | bash -s -- -y –profile \n```", "```rs\n  minimal –no-modify-path\n```", "```rs\n# Add .cargo/bin to PATH\n```", "```rs\nENV PATH=\"/root/.cargo/bin:${PATH}\"\n```", "```rs\n. . .\n```", "```rs\n. . .\n```", "```rs\n# Install the dependencies\n```", "```rs\nRUN pip install --upgrade pip setuptools wheel\n```", "```rs\nRUN pip install -r requirements.txt\n```", "```rs\nRUN pip install -r git_repos.txt\n```", "```rs\n. . .\n```", "```rs\ndocker build . -t flask-fib\n```", "```rs\nStep 1/14 : FROM python:3.6.13-stretch\n```", "```rs\n ---> b45d914a4516\n```", "```rs\nStep 2/14 : WORKDIR /app\n```", "```rs\n ---> Using cache\n```", "```rs\n ---> b0331f8a005d\n```", "```rs\nStep 3/14 : ADD . /app\n```", "```rs\n ---> Using cache\n```", "```rs\nCollecting git+https://github.com/maxwellflitton/flitton-\n```", "```rs\nfib-rs@main\n```", "```rs\nRunning command git clone -q \n```", "```rs\nhttps://github.com/maxwellflitton/\n```", "```rs\nflitton-fib-rs /tmp/pip-req-build-ctmjnoq0\n```", "```rs\nCloning https://github.com/maxwellflitton/flitton-fib-rs \n```", "```rs\n(to revision main) to /tmp/pip-req-build-ctmjnoq0\n```", "```rs\nfatal: could not read Username for 'https://github.com': \n```", "```rs\nNo such device or address\n```", "```rs\n#!/usr/bin/env bash\n```", "```rs\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\n```", "```rs\ncd $SCRIPTPATH\n```", "```rs\ngit clone https://github.com/maxwellflitton/flitton-fib-\n```", "```rs\n  rs.git\n```", "```rs\nrm -rf ./flitton-fib-rs/.git\n```", "```rs\ndocker build . --no-cache -t flask-fib\n```", "```rs\nrm -rf ./flitton-fib-rs\n```", "```rs\nRUN pip install ./flitton-fib-rs\n```", "```rs\nRUN rm -rf ./flitton-fib-rs\n```", "```rs\nsh build_image.sh\n```", "```rs\n. . .\n```", "```rs\ngit clone –branch $1 \n```", "```rs\n  https://github.com/maxwellflitton/flitton-fib-rs.git\n```", "```rs\ncd flitton-fib-rs\n```", "```rs\ncd ..\n```", "```rs\nrm -rf ./flitton-fib-rs/.git\n```", "```rs\n. . .\n```", "```rs\n├── Cargo.toml\n```", "```rs\n├── diesel.toml\n```", "```rs\n├── rust_db_cloning\n```", "```rs\n│   └── __init__.py\n```", "```rs\n├── setup.py\n```", "```rs\n├── src\n```", "```rs\n│   ├── database.rs\n```", "```rs\n│   ├── lib.rs\n```", "```rs\n│   ├── models.rs\n```", "```rs\n│   └── schema.rs\n```", "```rs\n├── .env\n```", "```rs\n#!/usr/bin/env python\n```", "```rs\nfrom setuptools import dist\n```", "```rs\ndist.Distribution().fetch_build_eggs(['setuptools_rust'])\n```", "```rs\nfrom setuptools import setup\n```", "```rs\nfrom setuptools_rust import Binding, RustExtension\n```", "```rs\nsetup(\n```", "```rs\n    name=\"rust-database-cloning\",\n```", "```rs\n    version=\"0.1\",\n```", "```rs\n    rust_extensions=[RustExtension(\n```", "```rs\n        \".rust_db_cloning.rust_db_cloning\",\n```", "```rs\n        path=\"Cargo.toml\", binding=Binding.PyO3)],\n```", "```rs\n    packages=[\"rust_db_cloning\"],\n```", "```rs\n    zip_safe=False,\n```", "```rs\n)\n```", "```rs\nfrom .rust_db_cloning import *\n```", "```rs\n[package]\n```", "```rs\nname = \"rust_db_cloning\"\n```", "```rs\nversion = \"0.1.0\"\n```", "```rs\nauthors = [\"maxwellflitton\"]\n```", "```rs\nedition = \"2018\"\n```", "```rs\n[dependencies]\n```", "```rs\ndiesel = { version = \"1.4.4\", features = [\"postgres\"] }\n```", "```rs\ndotenv = \"0.15.0\"\n```", "```rs\n[lib]\n```", "```rs\nname = \"rust_db_cloning\"\n```", "```rs\ncrate-type = [\"cdylib\"]\n```", "```rs\n[dependencies.pyo3]\n```", "```rs\nversion = \"0.13.2\"\n```", "```rs\nfeatures = [\"extension-module\"]\n```", "```rs\nDATABASE_URL=postgresql://user:password@localhost:5432/fib\n```", "```rs\n[print_schema]\n```", "```rs\nfile = \"src/schema.rs\"\n```", "```rs\nrustup toolchain install nightly\n```", "```rs\nrustup default nightly\n```", "```rs\ncargo install diesel_cli --no-default-features \n```", "```rs\n--features postgres\n```", "```rs\ndiesel print-schema > src/schema.rs\n```", "```rs\ntable! {\n```", "```rs\n    alembic_version (version_num) {\n```", "```rs\n        version_num -> Varchar,\n```", "```rs\n    }\n```", "```rs\n}\n```", "```rs\ntable! {\n```", "```rs\n    fib_entries (id) {\n```", "```rs\n        id -> Int4,\n```", "```rs\n        input_number -> Nullable<Int4>,\n```", "```rs\n        calculated_number -> Nullable<Int4>,\n```", "```rs\n    }\n```", "```rs\n}\n```", "```rs\nallow_tables_to_appear_in_same_query!(\n```", "```rs\n    alembic_version,\n```", "```rs\n    fib_entries,\n```", "```rs\n);\n```", "```rs\ndiesel_ext > src/models.rs\n```", "```rs\n#![allow(unused)]\n```", "```rs\n#![allow(clippy::all)]\n```", "```rs\n#[derive(Queryable, Debug, Identifiable)]\n```", "```rs\n#[primary_key(version_num)]\n```", "```rs\npub struct AlembicVersion {\n```", "```rs\n    pub version_num: String,\n```", "```rs\n}\n```", "```rs\n#[derive(Queryable, Debug)]\n```", "```rs\npub struct FibEntry {\n```", "```rs\n    pub id: i32,\n```", "```rs\n    pub input_number: Option<i32>,\n```", "```rs\n    pub calculated_number: Option<i32>,\n```", "```rs\n}\n```", "```rs\nuse crate::schema::fib_entries;\n```", "```rs\nuse crate::schema::alembic_version;\n```", "```rs\n#[derive(Queryable, Debug, Identifiable)]\n```", "```rs\n#[primary_key(version_num)]\n```", "```rs\n#[table_name=\"alembic_version\"]\n```", "```rs\npub struct AlembicVersion {\n```", "```rs\n    pub version_num: String,\n```", "```rs\n}\n```", "```rs\n#[derive(Queryable, Debug, Identifiable)]\n```", "```rs\n#[table_name=\"fib_entries\"]\n```", "```rs\npub struct FibEntry {\n```", "```rs\n    pub id: i32,\n```", "```rs\n    pub input_number: Option<i32>,\n```", "```rs\n    pub calculated_number: Option<i32>,\n```", "```rs\n}\n```", "```rs\nuse diesel::prelude::*;\n```", "```rs\nuse diesel::pg::PgConnection;\n```", "```rs\npub fn establish_connection(url: String) -> PgConnection {\n```", "```rs\n    PgConnection::establish(&url)\n```", "```rs\n      .expect(&format!(\"Error connecting to {}\", url))\n```", "```rs\n}\n```", "```rs\n#[macro_use] extern crate diesel;\n```", "```rs\nextern crate dotenv;\n```", "```rs\nuse diesel::prelude::*;\n```", "```rs\nuse pyo3::prelude::*;\n```", "```rs\nuse pyo3::wrap_pyfunction;\n```", "```rs\nuse pyo3::types::PyDict;\n```", "```rs\nmod database;\n```", "```rs\nmod schema;\n```", "```rs\nmod models;\n```", "```rs\nuse database::establish_connection;\n```", "```rs\nuse models::FibEntry;\n```", "```rs\nuse schema::fib_entries;\n```", "```rs\n#[pyfunction]\n```", "```rs\nfn get_fib_entries(url: String, py: Python) -> Vec<&PyDict> \n```", "```rs\n{\n```", "```rs\n   let connection = establish_connection(url);  \n```", "```rs\n   let fibs = fib_entries::table\n```", "```rs\n       .order(fib_entries::columns::input_number.asc())\n```", "```rs\n       .load::<FibEntry>(&connection)\n```", "```rs\n       .unwrap();\n```", "```rs\n   let mut buffer = Vec::new();\n```", "```rs\n   for i in fibs {\n```", "```rs\n       let placeholder = PyDict::new(py);\n```", "```rs\n       placeholder.set_item(\"input number\", \n```", "```rs\n         i.input_number.unwrap());\n```", "```rs\n       placeholder.set_item(\"fib number\", \n```", "```rs\n          i.calculated_number.unwrap());\n```", "```rs\n       buffer.push(placeholder);\n```", "```rs\n   }\n```", "```rs\n}\n```", "```rs\n#[pymodule]\n```", "```rs\nfn rust_db_cloning(py: Python, m: &PyModule) \n```", "```rs\n    -> PyResult<()> {\n```", "```rs\n    m.add_wrapped(wrap_pyfunction!(get_fib_enteries));\n```", "```rs\n    Ok(())\n```", "```rs\n}\n```", "```rs\nfrom rust_db_cloning import get_fib_entries\n```", "```rs\n@app.route(\"/get\")\n```", "```rs\ndef get():\n```", "```rs\n    return str(get_fib_entries(dal.url))\n```", "```rs\n. . .\n```", "```rs\ngit clone https://github.com/maxwellflitton/\n```", "```rs\nflitton-fib-rs.git\n```", "```rs\ngit clone https://github.com/maxwellflitton/\n```", "```rs\nrust-db-cloning.git\n```", "```rs\nrm -rf ./flitton-fib-rs/.git\n```", "```rs\nrm -rf ./rust-db-cloning/.git\n```", "```rs\ndocker build . --no-cache -t flask-fib\n```", "```rs\nrm -rf ./flitton-fib-rs\n```", "```rs\nrm -rf ./rust-db-cloning\n```", "```rs\n. . .\n```", "```rs\nRUN pip install ./flitton-fib-rs\n```", "```rs\nRUN rm -rf ./flitton-fib-rs\n```", "```rs\nRUN rustup toolchain install nightly\n```", "```rs\nRUN rustup default nightly\n```", "```rs\nRUN pip install ./rust-db-cloning\n```", "```rs\nRUN rm -rf ./rust-db-cloning\n```", "```rs\n. . .\n```"]