["```rs\n[dependencies]\nhyper = \"0.12\"\nrand = \"0.5\"\n```", "```rs\nuse hyper::{Body, Response, Server};\nuse hyper::rt::Future;\nuse hyper::service::service_fn_ok;\n```", "```rs\nfn main() {\n    let addr = ([127, 0, 0, 1], 8080).into();\n    let builder = Server::bind(&addr);\n    let server = builder.serve(|| {\n        service_fn_ok(|_| {\n            let random_byte = rand::random::<u8>();\n            Response::new(Body::from(random_byte.to_string()))\n        })\n    });\n    let server = server.map_err(drop);\n    hyper::rt::run(server);\n}\n```", "```rs\n[dependencies]\nlog = \"0.4\"\npretty_env_logger = \"0.2\"\nhyper = \"0.12\"\nrand = \"0.5\"\n```", "```rs\nuse hyper::{Body, Response, Server};\nuse hyper::rt::Future;\nuse hyper::service::service_fn_ok;\nuse log::{debug, info, trace};\n```", "```rs\ndebug!(\"Trying to bind server to address: {}\", addr);\n```", "```rs\nlog!(Level::Error, \"Error information: {}\", error);\n```", "```rs\nif log_enabled!(Debug) {\n    let data = get_data_which_requires_resources();\n    debug!(\"expensive data: {}\", data);\n}\n```", "```rs\nfn main() {\n     logger::init();\n     info!(\"Rand Microservice - v0.1.0\");\n     trace!(\"Starting...\");\n     let addr = ([127, 0, 0, 1], 8080).into();\n     debug!(\"Trying to bind server to address: {}\", addr);\n     let builder = Server::bind(&addr);\n     trace!(\"Creating service handler...\");\n     let server = builder.serve(|| {\n         service_fn_ok(|req| {\n             trace!(\"Incoming request is: {:?}\", req);\n             let random_byte = rand::random::<u8>();\n             debug!(\"Generated value is: {}\", random_byte);\n             Response::new(Body::from(random_byte.to_string()))\n         })\n     });\n     info!(\"Used address: {}\", server.local_addr());\n     let server = server.map_err(drop);\n     debug!(\"Run!\");\n     hyper::rt::run(server);\n }\n```", "```rs\nRUST_LOG=trace cargo run\n```", "```rs\n RUST_LOG=random_service=trace,warn cargo run\n```", "```rs\nRUST_LOG_STYLE=auto cargo run\n```", "```rs\nlet env = env_logger::Env::new()\n    .filter(\"OWN_LOG_VAR\")\n    .write_style(\"OWN_LOG_STYLE_VAR\");\nenv_logger::init_from_env(env);\n```", "```rs\nuse std::env;\n```", "```rs\nlet addr = ([127, 0, 0, 1], 8080).into();\n```", "```rs\nlet addr = env::var(\"ADDRESS\")\n    .unwrap_or_else(|_| \"127.0.0.1:8080\".into())\n    .parse()\n    .expect(\"can't parse ADDRESS variable\");\n```", "```rs\ndotenv = \"0.13\"\n```", "```rs\nuse dotenv::dotenv;\nuse std::env;\n```", "```rs\nRUST_LOG=debug\nRUST_BACKTRACE=1\nADDRESS=0.0.0.0:1234\n```", "```rs\nfor arg in env::args() {\n    // Interpret the arg here\n}\n```", "```rs\nclap = \"2.32\"\n```", "```rs\nuse clap::{crate_authors, crate_description, crate_name, crate_version, Arg, App};\n```", "```rs\nlet matches = App::new(crate_name!())\n         .version(crate_version!())\n         .author(crate_authors!())\n         .about(crate_description!())\n         .arg(Arg::with_name(\"address\")\n              .short(\"a\")\n              .long(\"address\")\n              .value_name(\"ADDRESS\")\n              .help(\"Sets an address\")\n              .takes_value(true))\n         .arg(Arg::with_name(\"config\")\n              .short(\"c\")\n              .long(\"config\")\n              .value_name(\"FILE\")\n              .help(\"Sets a custom config file\")\n              .takes_value(true))\n        .get_matches();\n```", "```rs\nlet addr = matches.value_of(\"address\")\n    .map(|s| s.to_owned())\n    .or(env::var(\"ADDRESS\").ok())\n    .unwrap_or_else(|| \"127.0.0.1:8080\".into())\n    .parse()\n    .expect(\"can't parse ADDRESS variable\");\n```", "```rs\n$ ./target/debug/random-service-with-args --help\nrandom-service-with-env 0.1.0\nYour Name\nRust Microservice\n\nUSAGE:\n random-service-with-env [OPTIONS]\n\nFLAGS:\n -h, --help       Prints help information\n -V, --version    Prints version information\n\nOPTIONS:\n -a, --address <ADDRESS>    Sets an address\n -c, --config <FILE>        Sets a custom config file\n```", "```rs\n$ cargo run -- --help\n```", "```rs\n$ cargo run -- --address 0.0.0.0:2345\n```", "```rs\n    Finished dev [unoptimized + debuginfo] target(s) in 0.10s                                                                                             Running `target/debug/random-service-with-args --address '0.0.0.0:2345'`\n INFO 2018-07-26T04:23:52Z: random_service_with_env: Rand Microservice - v0.1.0\nDEBUG 2018-07-26T04:23:52Z: random_service_with_env: Trying to bind server to address: 0.0.0.0:2345\n INFO 2018-07-26T04:23:52Z: random_service_with_env: Used address: 0.0.0.0:2345\nDEBUG 2018-07-26T04:23:52Z: random_service_with_env: Run!\nDEBUG 2018-07-26T04:23:52Z: tokio_reactor::background: starting background reactor\n```", "```rs\nlet matches = App::new(\"Server with keys\")\n    .setting(AppSettings::SubcommandRequiredElseHelp)\n    .subcommand(SubCommand::with_name(\"run\")\n        .about(\"run the server\")\n        .arg(Arg::with_name(\"address\")\n            .short(\"a\")\n            .long(\"address\")\n            .takes_value(true)\n            .help(\"address of the server\"))\n    .subcommand(SubCommand::with_name(\"key\")\n        .about(\"generates a secret key for cookies\")))\n    .get_matches();\n```", "```rs\n$ cargo run -- run --address 0.0.0.0:2345\n```", "```rs\nserde = \"1.0\"\nserde_derive = \"1.0\"\ntoml = \"0.4\"\n```", "```rs\nuse clap::{crate_authors, crate_description, crate_name, crate_version, Arg, App};\nuse dotenv::dotenv;\nuse hyper::{Body, Response, Server};\nuse hyper::rt::Future;\nuse hyper::service::service_fn_ok;\nuse log::{debug, info, trace, warn};\nuse serde_derive::Deserialize;\nuse std::env;\nuse std::io::{self, Read};\nuse std::fs::File;\nuse std::net::SocketAddr;\n```", "```rs\n#[derive(Deserialize)]\nstruct Config {\n    address: SocketAddr,\n}\n```", "```rs\nlet config = File::open(\"microservice.toml\")\n    .and_then(|mut file| {\n        let mut buffer = String::new();\n        file.read_to_string(&mut buffer)?;\n        Ok(buffer)\n    })\n    .and_then(|buffer| {\n        toml::from_str::<Config>(&buffer)\n            .map_err(|err| io::Error::new(io::ErrorKind::Other, err))\n    })\n    .map_err(|err| {\n        warn!(\"Can't read config file: {}\", err);\n    })\n    .ok();\n```", "```rs\nlet addr = matches.value_of(\"address\")\n    .map(|s| s.to_owned())\n    .or(env::var(\"ADDRESS\").ok())\n    .and_then(|addr| addr.parse().ok())\n    .or(config.map(|config| config.address))\n    .or_else(|| Some(([127, 0, 0, 1], 8080).into()))\n    .unwrap();\n```", "```rs\naddress = \"0.0.0.0:9876\"\n```"]