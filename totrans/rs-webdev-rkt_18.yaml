- en: '*Chapter 15*: Improving the Rocket Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have finished the simple application, in this final chapter, we
    will explore the improvements we can make to the Rocket application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn about adding various technologies such as logging,
    tracing, and monitoring to bring the Rocket application up to the standard of
    modern web development. We will explore techniques to scale the Rocket application.
  prefs: []
  type: TYPE_NORMAL
- en: We will also explore other web frameworks for the Rust language. One web framework
    might not be the best tool for everything, so by knowing about other web frameworks,
    we can broaden our knowledge of the Rust web ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover these main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Extending the Rocket application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling the Rocket application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring alternative Rust web frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter are very simple: the Rust compiler,
    the Cargo command line, and a web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Rust-Web-Development-with-Rocket/tree/main/Chapter15](https://github.com/PacktPublishing/Rust-Web-Development-with-Rocket/tree/main/Chapter15).
  prefs: []
  type: TYPE_NORMAL
- en: Extending the Rocket application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have successfully created a simple Rocket application from scratch, starting
    with a basic Rocket concept such as routing. There are a lot of things that can
    be done to improve the application. In this section, we are going to discuss some
    of the libraries we can use to add functionality and improvements to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Adding logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good web application in a modern setup usually requires logging and monitoring
    systems to obtain information about the system itself. Previously, we learned
    how to add logging to the Rocket application. The logging system writes to `stdout`
    and to a file. We can improve the logging system by using a distributed logging
    system in which the application sends the log to another server to create an ongoing
    record of application events.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a Rocket fairing that sends log events to a third-party logging
    server such as Logstash, Fluentd, or Datadog. The logs can then be extracted,
    transformed, aggregated, filtered, and searched for further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a crate that can be used to send a log to Fluentd is at [https://github.com/tkrs/poston](https://github.com/tkrs/poston).
    Using a `poston` crate, we can create a worker pool to send data periodically
    to a Fluentd server.
  prefs: []
  type: TYPE_NORMAL
- en: Expanding logging to tracing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After setting logging for the Rocket application, we can improve the logging
    functionality further with the tracing concept. Where logging is usually concerned
    with recording an individual event, tracing is concerned with the workflow of
    an application. There are several terminologies that are commonly used, including
    **log**, **event**, **span**, and **trace**.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **log** is a single piece of information used by programmers to capture data,
    while an **event** is the structured form of a log. For example, let''s say we
    have a log using the **Common Log Format** ([https://en.wikipedia.org/wiki/Common_Log_Format](https://en.wikipedia.org/wiki/Common_Log_Format))
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can convert the log into an event as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A **span** is a type of log, but instead of information from a single point
    in time, a span covers a duration. And, finally, a **trace** is a collection of
    spans that can be used to create a workflow of application parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a Rocket application with a fairing named `Trace`, we can implement
    tracing by using the `Trace` fairing and following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a struct that implements a Rocket request guard, for example, `RequestID`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a request arrives, the `Trace` fairing assigns `request_id` (an instance
    of `RequestID`) to the `Request` instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Trace` fairing then creates a log with the `request_id` and `start_time`
    information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A route handling function then retrieves `request_id` as a parameter because
    the struct implements the Rocket request guard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the route handling function, the first thing we want the application
    to do is to create a log with `request_id` and the `function_start_time` information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can add various logs inside the function to record the timing; for example,
    before we send a query to the database, we create a log with `request_id` and
    time information. Later, we can create a log again when we receive the response
    from the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can then add a log again before the function returns with the `request_id`
    and time to mark the end of the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in the `Trace` fairing, we create a log again with `request_id` and
    `end_time`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By transforming and analyzing the logs, we can construct the logs with the same
    `request_id` into spans. Finally, we can construct the trees of the spans into
    a trace that records the timing of each event of a request in the Rocket request-response
    life cycle. By using tracing information, we can determine which parts of the
    application can be improved further.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of crates that we can use to do the tracing, for example,
    [https://docs.rs/tracing/latest/tracing/](https://docs.rs/tracing/latest/tracing/)
    and [https://docs.rs/tracing-log/latest/tracing_log/](https://docs.rs/tracing-log/latest/tracing_log/),
    which bridge the Rust logging functionality to the tracing functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Setting monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where logging and tracing are used to obtain information for the Rocket application,
    then monitoring is the process to obtain information for the system to evaluate
    the system's capabilities itself. For example, we collect our server CPU usage
    for the Rocket application.
  prefs: []
  type: TYPE_NORMAL
- en: For monitoring, we can use tools such as Prometheus with Grafana as the visualizer,
    Datadog, or other third-party applications. We usually install an agent, an application
    that collects and sends various system information to a distributed monitoring
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Even though there's no direct connection to the Rocket application, usually,
    a monitoring system also collects information about the application itself. For
    example, in a containerized environment, there are liveness and readiness concepts
    that make sure a container is ready to receive its intended function.
  prefs: []
  type: TYPE_NORMAL
- en: We can set a route in the Rocket application that returns a `200` HTTP status
    code, or a route that pings the database and returns a `200` HTTP status code.
    We can then tell the monitoring system to periodically check the response from
    the Rocket application. If there's a response, it means the application still
    works correctly, but if there's no response, it means there's something wrong
    with the Rocket application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a mailing and alerting system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, we need mailing functionality in a web application. For example,
    when a user registers on a website, the system then sends an email for verification.
    There are a couple of libraries to send an email for Rust. An example is the Lettre
    crate ([https://crates.io/crates/lettre](https://crates.io/crates/lettre)). Let's
    take a look at the sample code for sending an email.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Cargo.toml`, add the following dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the application, for example in `src/lib.rs`, we can add the following function
    to send an email:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: One more thing we can add to the application is an alerting system for when
    something goes wrong. We can use a third-party notification system or use the
    mailing system to send a notification if something goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at several ways to improve the Rocket application, let's
    scale our application.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling the Rocket application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After developing the Rocket application and deploying it to a production environment,
    the application might need to be scaled up due to increasing usage. There are
    a couple of ways to scale the web application, and they can be categorized into
    two categories: vertical scaling and horizontal scaling.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vertical scaling** means increasing the resources for a single node. For
    example, we replace the CPU of the computer that runs the Rocket application with
    a CPU with higher speed. Another example of vertical scaling is increasing the
    amount of RAM in the computer that runs the Rocket application.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Horizontal scaling** is scaling the application by adding more nodes or more
    computers to handle the workload. An example of horizontal scaling is running
    two servers and setting up a Rocket web server on each server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have the following system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 15.1 – Simple Rocket application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.1_B16825.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.1 – Simple Rocket application
  prefs: []
  type: TYPE_NORMAL
- en: 'We can first move the database to another server as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Separating the database'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.2_B16825.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.2 – Separating the database
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can add a load balancer as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Adding a load balancer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.3_B16825.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.3 – Adding a load balancer
  prefs: []
  type: TYPE_NORMAL
- en: The load balancer can be a hardware load balancer, an IaaS (Infrastructure as
    a service) load balancer such as AWS Load Balancer, a Kubernetes load balancer,
    or a software load balancer such as HAProxy or NGINX.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we add the load balancer, we can then add other machines, each with their
    own Rocket server instance, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Scaling the Rocket application horizontally'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.4_B16825.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.4 – Scaling the Rocket application horizontally
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of things we need to take care of if we want to load balance
    the Rocket server, for example, make sure `"secret_key"` in `Rocket.toml` is the
    same for all the Rocket server instances. Another thing we can do is make sure
    our session libraries and cookies are not storing the content on the memory of
    each instance, but on shared storage, such as a database.
  prefs: []
  type: TYPE_NORMAL
- en: Yet another idea to improve Rocket application scaling is hosting static files
    or assets on their own server. The static files server can be a general-purpose
    web server such as an Apache HTTP Server or NGINX or a service such as AWS S3
    or Azure Storage. One thing we need to take care of is that when generating a
    Rocket response, we need to set the static assets into the correct server. For
    example, instead of setting the HTML CSS to `"./mini-default.css"`, we have to
    set `"`[https://static.example.com/mini-default.css](https://static.example.com/mini-default.css)`"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A diagram of the static server along with the load balancer can be seen in
    the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Adding a static files server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.5_B16825.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.5 – Adding a static files server
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also add a **content delivery network** (**CDN**) to distribute the
    load on the system, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Adding a CDN'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.6_B16825.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.6 – Adding a CDN
  prefs: []
  type: TYPE_NORMAL
- en: The CDN can be from the IaaS, such as AWS CloudFront or GCP Cloud CDN, or a
    third-party CDN provider such as Fastly, Akamai, or Cloudflare. These CDNs provide
    servers in various geographical locations and can provide caching and a faster
    network connection to make our application faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'After basic scaling, the system can be scaled further, such as by adding database
    replications or clusters, or adding caching systems such as Redis or Redis cache
    clusters. An example of such a system is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Adding a database cluster and cache cluster'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.7_B16825.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.7 – Adding a database cluster and cache cluster
  prefs: []
  type: TYPE_NORMAL
- en: An important part of scaling the system is identifying which part's specification
    can be improved or which part can be isolated into its own server, for example,
    increasing the CPU of the computer that runs the Rocket server or moving the database
    into its own server and then later scaling the database itself from a single server
    into a database cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned the basic techniques of scaling a Rocket application,
    let's discuss some other software that's similar to the Rocket web framework in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring alternative Rust web frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rocket is a good web framework for the Rust programming language, but sometimes,
    we require other tools to build a web application. In this section, we are going
    to explore some alternatives to the Rocket web framework. The alternative frameworks
    are Actix Web, Tide, and Warp. Let's check the web frameworks one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Actix Web
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One good alternative to Rocket is Actix Web ([https://actix.rs/](https://actix.rs/)).
    Just like Rocket, Actix Web is a web framework. Originally, it was created on
    top of the Actix crate, an actor framework. These days, the functionality from
    Actix is not used anymore as Rust's futures and `async`/`await` ecosystem is maturing.
  prefs: []
  type: TYPE_NORMAL
- en: Just like Rocket, Actix Web includes concepts such as routing, request extractor,
    form handler, response handler, and a middleware system. Actix Web also provides
    conveniences such as a static file handler, a database connection, templating,
    and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a code sample for Actix Web to see the similarities with
    Rocket.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Cargo.toml`, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And, in `src/main.rs`, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Try running the application and opening `http://127.0.0.1:8080/hello_world`
    or `http://127.0.0.1:8080/users/world` to see the result.
  prefs: []
  type: TYPE_NORMAL
- en: Tide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another Rust web framework alternative is Tide ([https://github.com/http-rs/tide](https://github.com/http-rs/tide)).
    Unlike Rocket or Actix Web, this framework provides only basic functions, such
    as request type, result type, sessions, and middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a code sample for Tide to see the similarities with Rocket.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Cargo.toml`, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'And, in `src/main.rs`, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Try running the application by running `cargo run` on the command line and opening
    `http://127.0.0.1:8080/hello_world` in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Warp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another Rust web framework alternative is Warp ([https://github.com/seanmonstar/warp](https://github.com/seanmonstar/warp)).
    This framework provides various functionalities on top of its filter function.
    By using the filter, it can perform path routing, extract parameters and headers,
    deserialize query strings, and parse various request bodies such as forms, multipart
    form data, and JSON. Warp also supports serving static files, directories, WebSocket,
    logging, middleware, and a basic compression system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example application using Warp. In the `Cargo.toml`
    file, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'And, in the `src/main.rs` file, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Again, like the Tide and Warp examples, try opening `http://127.0.0.1:8080/hello_world`
    in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we have learned how to improve and scale a Rocket application.
    We can use various tools to improve Rocket applications, such as adding logging,
    tracing, monitoring, and mailers. We also learned a little bit about principles
    for scaling Rocket applications.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned about alternative Rust web frameworks such as Actix Web,
    Tide, 13 and Warp.
  prefs: []
  type: TYPE_NORMAL
- en: We started this book by learning how to create and build Rust application, and
    tools for working with Rust such as Cargo. We then learned the basics of Rocket
    applications such as the life cycle of requests and how to configure a Rocket
    application.
  prefs: []
  type: TYPE_NORMAL
- en: We then continued by learning about more concepts such as Rocket routes, and
    route parts such as HTTP method, path, format, and data. To handle a route, we
    have to create a function that receives the request object and returns the response
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing the basics of Rocket, we learned more about Rocket components such
    as state, connecting a database with Rocket, and fairings.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we learned how to organize Rust modules to create more complex applications.
    We then designed an application and implemented the routes to manage entities
    such as user and post. To manage entities, we learned how to write queries to
    the database to add, get, modify, or delete items.
  prefs: []
  type: TYPE_NORMAL
- en: We then discussed more advanced topics such as Rust error handling and its implementation
    in a Rocket application. Continuing the more advanced topics, we also learned
    about Rocket functionalities such as serving static assets and using templates
    to generate a response. We also discussed how to use forms and how to protect
    forms from malicious attackers using CSRF.
  prefs: []
  type: TYPE_NORMAL
- en: After learning how to handle form data, we learned about the Rust generic and
    how to apply the Rust generic in a Rocket application to render `Post` with the
    same trait. To handle the variants of `Post`, we learned more about advanced Rust
    programming, including lifetime and memory safety. We also learned more about
    `async` programming and multithreading when we implemented processing of the variants
    of `Post`.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use Rocket as a modern web framework, we also learned how to allow
    a Rocket application to handle APIs and JSON, protect the application using authentication
    and authorization, and learned how to use JWT to secure an API.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure our Rocket application worked as intended, we then learned how
    to test Rust and Rocket applications. After making sure the application worked
    as intended, we learned how to deploy the application in different ways, such
    as putting the Rocket application behind a general-purpose web server and using
    Docker to build and serve the Rocket application.
  prefs: []
  type: TYPE_NORMAL
- en: To complement the backend application, we learned how to use Rust to create
    a WebAssembly application in the frontend. And finally, we learned more about
    how to scale Rocket applications, as well as how to find alternatives to the Rocket
    web framework.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned all the foundations for building Rust and Rocket applications,
    we can implement Rust and Rocket web framework skills in production-grade web
    applications. To expand upon your knowledge from this book, you can learn more
    from the Rust or Rocket websites and forums. Don't hesitate to experiment and
    make great applications using the Rust language and Rocket web framework.
  prefs: []
  type: TYPE_NORMAL
