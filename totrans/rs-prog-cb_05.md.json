["```rs\n#[cfg(test)]\nmod tests {\n\n    #[test]\n    #[should_panic]\n    fn test_regular_panic() {\n        panic!();\n    }\n}\n```", "```rs\n    #[test]\n    #[should_panic]\n    fn test_unwrap() {\n        // panics if \"None\"\n        None::<i32>.unwrap();\n    }\n```", "```rs\n    #[test]\n    #[should_panic(expected = \"Unwrap with a message\")]\n    fn test_expect() {\n        None::<i32>.expect(\"Unwrap with a message\");\n    }\n```", "```rs\n    #[test]\n    #[should_panic(expected = \"Everything is lost!\")]\n    fn test_panic_message() {\n        panic!(\"Everything is lost!\");\n    }\n\n    #[test]\n    #[should_panic(expected = \"String formatting also works\")]\n    fn test_panic_format() {\n        panic!(\"{} formatting also works.\", \"String\");\n    }\n```", "```rs\n    #[test]\n    #[should_panic]\n    fn test_panic_return_value() {\n        panic!(42);\n    }\n```", "```rs\n    #[test]\n    #[should_panic]\n    fn test_assert() {\n        assert!(1 == 2);\n    }\n\n    #[test]\n    #[should_panic]\n    fn test_assert_eq() {\n        assert_eq!(1, 2);\n    }\n\n    #[test]\n    #[should_panic]\n    fn test_assert_neq() {\n        assert_ne!(1, 1);\n    }\n```", "```rs\n$ cargo test\n Compiling panicking-responsibly v0.1.0 (Rust- Cookbook/Chapter05\n /panicking-responsibly)\nFinished dev [unoptimized + debuginfo] target(s) in 0.29s\nRunning target/debug/deps/panicking_responsibly-6ec385e96e6ee9cd\n\nrunning 9 tests\ntest tests::test_assert ... ok\ntest tests::test_assert_eq ... ok\ntest tests::test_assert_neq ... ok\ntest tests::test_panic_format ... ok\ntest tests::test_expect ... ok\ntest tests::test_panic_message ... ok\ntest tests::test_panic_return_value ... ok\ntest tests::test_regular_panic ... ok\ntest tests::test_unwrap ... ok\n\ntest result: ok. 9 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests panicking-responsibly\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```", "```rs\nuse std::fmt;\nuse std::io;\nuse std::error::Error;\n```", "```rs\n#[derive(Debug)]\npub struct InvalidDeviceIdError(usize);\n#[derive(Debug)]\npub struct DeviceNotPresentError(usize);\n#[derive(Debug)]\npub struct UnexpectedDeviceStateError {}\n```", "```rs\n\n#[derive(Debug)]\npub enum ErrorWrapper {\n    Io(io::Error),\n    Db(InvalidDeviceIdError),\n    Device(DeviceNotPresentError), \n    Agent(UnexpectedDeviceStateError)\n}\n```", "```rs\nimpl Error for ErrorWrapper {\n    fn description(&self) -> &str {\n        match *self {\n            ErrorWrapper::Io(ref e) => e.description(),\n            ErrorWrapper::Db(_) | ErrorWrapper::Device(_) => \"No \n             device present with this id, check formatting.\",\n            _ => \"Unexpected error. Sorry for the inconvenience.\"\n        }\n    }\n}\n```", "```rs\nimpl fmt::Display for ErrorWrapper {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        match *self {\n            ErrorWrapper::Io(ref e) => write!(f, \"{} [{}]\", e, \n                self.description()), \n            ErrorWrapper::Db(ref e) => write!(f, \"Device with id \\\"\n             {}\\\" not found [{}]\", e.0, self.description()),\n            ErrorWrapper::Device(ref e) => write!(f, \"Device with\n             id\\\"{}\\\" is currently unavailable [{}]\", e.0,         \n             self.description()),\n            ErrorWrapper::Agent(_) => write!(f, \"Unexpected device \n             state [{}]\", self.description())\n        }\n    }\n}\n```", "```rs\nfn main() {\n    println!(\"{}\",     \n    ErrorWrapper::Io(io::Error::from(io::ErrorKind::InvalidData)));\n    println!(\"{}\", ErrorWrapper::Db(InvalidDeviceIdError(42)));\n    println!(\"{}\", ErrorWrapper::Device\n     (DeviceNotPresentError(42)));\n    println!(\"{}\", ErrorWrapper::Agent(UnexpectedDeviceStateError \n{}));\n}\n```", "```rs\n$ cargo run\n Compiling multiple-errors v0.1.0 (Rust-Cookbook/Chapter05\n /multiple-errors)\n Finished dev [unoptimized + debuginfo] target(s) in 0.34s\n Running `target/debug/multiple-errors`\ninvalid data [invalid data]\nDevice with id \"42\" not found [No device present with this id, check formatting.]\nDevice with id \"42\" is currently unavailable [No device present with this id, check formatting.]\nUnexpected device state [Unexpected error. Sorry for the inconvenience.]\n```", "```rs\n/// \n/// Finds a needle in a haystack, returns -1 on error \n/// \npub fn bad_practice_find(needle: &str, haystack: &str) -> i32 {\n    haystack.find(needle).map(|p| p as i32).unwrap_or(-1)\n}\n```", "```rs\n/// \n/// Finds a needle in a haystack, returns None on error \n/// \npub fn better_find(needle: &str, haystack: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```", "```rs\n#[derive(Debug, PartialEq)]\npub enum FindError {\n    EmptyNeedle,\n    EmptyHaystack,\n    NotFound,\n}\n\n/// \n/// Finds a needle in a haystack, returns a proper Result \n/// \npub fn best_find(needle: &str, haystack: &str) -> Result<usize, FindError> {\n    if needle.len() <= 0 {\n        Err(FindError::EmptyNeedle)\n    } else if haystack.len() <= 0 {\n        Err(FindError::EmptyHaystack)\n    } else {\n        haystack.find(needle).map_or(Err(FindError::NotFound), |n| \n    Ok(n))\n    }\n}\n```", "```rs\n    use super::*;\n\n    #[test]\n    fn test_bad_practice() {\n        assert_eq!(bad_practice_find(\"a\", \"hello world\"), -1);\n        assert_eq!(bad_practice_find(\"e\", \"hello world\"), 1);\n        assert_eq!(bad_practice_find(\"\", \"hello world\"), 0);\n        assert_eq!(bad_practice_find(\"a\", \"\"), -1);\n    }\n```", "```rs\n    #[test]\n    fn test_better_practice() {\n        assert_eq!(better_find(\"a\", \"hello world\"), None);\n        assert_eq!(better_find(\"e\", \"hello world\"), Some(1));\n        assert_eq!(better_find(\"\", \"hello world\"), Some(0)); \n        assert_eq!(better_find(\"a\", \"\"), None); \n    }\n\n    #[test]\n    fn test_best_practice() {\n        assert_eq!(best_find(\"a\", \"hello world\"), \n        Err(FindError::NotFound));\n        assert_eq!(best_find(\"e\", \"hello world\"), Ok(1));\n        assert_eq!(best_find(\"\", \"hello world\"), \n        Err(FindError::EmptyNeedle));\n        assert_eq!(best_find(\"e\", \"\"), \n        Err(FindError::EmptyHaystack)); \n    }\n```", "```rs\n$ cargo test\nCompiling exceptional-results v0.1.0 (Rust-Cookbook/Chapter05\n /exceptional-results)\nFinished dev [unoptimized + debuginfo] target(s) in 0.53s\nRunning target/debug/deps/exceptional_results-97ca0d7b67ae4b8b\n\nrunning 3 tests\ntest tests::test_best_practice ... ok\ntest tests::test_bad_practice ... ok\ntest tests::test_better_practice ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests exceptional-results\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```", "```rs\n    #[test]\n    fn positive_results() {\n       // code goes here\n    }\n```", "```rs\n        let ok: Result<i32, f32> = Ok(42);\n\n        assert_eq!(ok.and_then(|r| Ok(r + 1)), Ok(43));\n        assert_eq!(ok.map(|r| r + 1), Ok(43));\n```", "```rs\n        // Boolean operations with Results. Take a close look at \n        // what's returned\n        assert_eq!(ok.and(Ok(43)), Ok(43));\n        let err: Result<i32, f32> = Err(-42.0);\n        assert_eq!(ok.and(err), err);\n        assert_eq!(ok.or(err), ok);\n```", "```rs\n    #[test]\n    fn negative_results() {\n        // code goes here\n    }\n```", "```rs\n        let err: Result<i32, f32> = Err(-42.0);\n        let ok: Result<i32, f32> = Ok(-41);\n\n        assert_eq!(err.or_else(|r| Ok(r as i32 + 1)), ok);\n        assert_eq!(err.map(|r| r + 1), Err(-42.0));\n        assert_eq!(err.map_err(|r| r + 1.0), Err(-41.0));\n```", "```rs\n        let err2: Result<i32, f32> = Err(43.0);\n        let ok: Result<i32, f32> = Ok(42);\n        assert_eq!(err.and(err2), err);\n        assert_eq!(err.and(ok), err);\n        assert_eq!(err.or(ok), ok);\n```", "```rs\n$ cargo test\n Compiling seamless-errors v0.1.0 (Rust-Cookbook/Chapter05\n  /seamless-errors)\n Finished dev [unoptimized + debuginfo] target(s) in 0.37s\n Running target/debug/deps/seamless_errors-7a2931598a808519\n\nrunning 2 tests\ntest tests::positive_results ... ok\ntest tests::negative_results ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests seamless-errors\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```", "```rs\nuse std::fmt;\nuse std::error::Error;\n\n#[derive(Debug)]\npub struct MyError {\n    code: usize,\n}\n```", "```rs\nimpl Error for MyError {\n    fn description(&self) -> &str {\n        \"Occurs when someone makes a mistake\"\n }\n}\n```", "```rs\nimpl fmt::Display for MyError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n       write!(f, \"Error code {:#X}\", self.code) \n    }\n}\n```", "```rs\nfn main() {\n    println!(\"Display: {}\", MyError{ code: 1535 });\n    println!(\"Debug: {:?}\", MyError{ code: 42 });\n    println!(\"Description: {:?}\", (MyError{ code: 42 \n    }).description());\n}\n```", "```rs\n$ cargo run\nCompiling custom-errors v0.1.0 (Rust-Cookbook/Chapter05/custom-errors)\n Finished dev [unoptimized + debuginfo] target(s) in 0.23s\n Running `target/debug/custom-errors`\nDisplay: Error code 0x5FF\nDebug: MyError { code: 42 }\nDescription: \"Occurs when someone makes a mistake\"\n```", "```rs\nuse std::fs;\nuse std::io;\n\nfn print_file_contents_qm(filename: &str) -> Result<(), io::Error> {\n    let contents = fs::read_to_string(filename)?;\n    println!(\"File contents, external fn: {:?}\", contents);\n    Ok(())\n}\n```", "```rs\nfn main() -> Result<(), std::io::Error> {\n    println!(\"Ok: {:?}\", print_file_contents_qm(\"testfile.txt\"));\n    println!(\"Err: {:?}\", print_file_contents_qm(\"not-a-file\"));\n\n    let contents = fs::read_to_string(\"testfile.txt\")?;\n    println!(\"File contents, main fn: {:?}\", contents);\n    Ok(())\n}\n```", "```rs\n$ cargo run\n Compiling resilient-programming v0.1.0 (Rust-Cookbook/Chapter05\n  /resilient-programming)\n Finished dev [unoptimized + debuginfo] target(s) in 0.21s\n Running `target/debug/resilient-programming`\nFile contents, external fn: \"Hello World!\"\nOk: Ok(())\nErr: Err(Os { code: 2, kind: NotFound, message: \"No such file or directory\" })\nFile contents, main fn: \"Hello World!\"\n```", "```rs\n[dependencies]\nquick-error = \"1.2\"\n```", "```rs\n#[macro_use] extern crate quick_error;\n\nuse std::convert::From;\nuse std::io;\n```", "```rs\nquick_error! {\n    #[derive(Debug)]\n    pub enum ErrorWrapper {\n        InvalidDeviceIdError(device_id: usize) {\n            from(device_id: usize) -> (device_id)\n            description(\"No device present with this id, check \n            formatting.\")\n        }\n\n        DeviceNotPresentError(device_id: usize) {\n            display(\"Device with id \\\"{}\\\" not found\", device_id)\n        }\n\n        UnexpectedDeviceStateError {}\n\n        Io(err: io::Error) {\n            from(kind: io::ErrorKind) -> (io::Error::from(kind))\n            description(err.description())\n            display(\"I/O Error: {}\", err)\n        } \n    }\n}\n```", "```rs\nfn main() {\n    println!(\"(IOError) {}\", \n    ErrorWrapper::from(io::ErrorKind::InvalidData));\n    println!(\"(InvalidDeviceIdError) {}\", \n    ErrorWrapper::InvalidDeviceIdError(42));\n    println!(\"(DeviceNotPresentError) {}\", \n    ErrorWrapper::DeviceNotPresentError(42));\n    println!(\"(UnexpectedDeviceStateError) {}\", \n    ErrorWrapper::UnexpectedDeviceStateError {});\n}\n```", "```rs\n$ cargo run\n Compiling external-crates v0.1.0 (Rust-Cookbook/Chapter05\n  /external-crates)\n Finished dev [unoptimized + debuginfo] target(s) in 0.27s\n  Running `target/debug/external-crates`\n(IOError) I/O Error: invalid data\n(InvalidDeviceIdError) No device present with this id, check formatting.\n(DeviceNotPresentError) Device with id \"42\" not found\n(UnexpectedDeviceStateError) UnexpectedDeviceStateError\n```", "```rs\n    #[derive(Debug, Eq, PartialEq, Copy, Clone)]\n    struct MyError;\n\n    #[test]\n    fn transposing() {\n        // code will follow\n    }\n```", "```rs\n        let this: Result<Option<i32>, MyError> = Ok(Some(42));\n        let other: Option<Result<i32, MyError>> = Some(Ok(42));\n        assert_eq!(this, other.transpose());\n```", "```rs\n        let this: Result<Option<i32>, MyError> = Err(MyError);\n        let other: Option<Result<i32, MyError>> = Some(Err(MyError));\n        assert_eq!(this, other.transpose());\n```", "```rs\nassert_eq!(None::<Result<i32, MyError>>.transpose(), Ok(None::\n <i32>));\n```", "```rs\n    #[test]\n    fn conversion() {\n        // more to follow\n    }\n```", "```rs\n        let opt = Some(42);\n        assert_eq!(opt.ok_or(MyError), Ok(42));\n\n        let res: Result<i32, MyError> = Ok(42);\n        assert_eq!(res.ok(), opt);\n        assert_eq!(res.err(), None);\n```", "```rs\n        let opt: Option<i32> = None;\n        assert_eq!(opt.ok_or(MyError), Err(MyError));\n\n        let res: Result<i32, MyError> = Err(MyError);\n        assert_eq!(res.ok(), None);\n        assert_eq!(res.err(), Some(MyError));\n```", "```rs\n$ cargo test\nCompiling options-results v0.1.0 (Rust-Cookbook/Chapter05/options-results)\n Finished dev [unoptimized + debuginfo] target(s) in 0.44s\n Running target/debug/deps/options_results-111cad5a9a9f6792\n\nrunning 2 tests\ntest tests::conversion ... ok\ntest tests::transposing ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests options-results\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```"]