["```rs\n├── Cargo.toml\n├── README.md\n├── .dockerignore\n├── .gitignore\n├── .github\n│   . . .\n├── builds\n│   . . .\n├── database\n│   . . .\n├── docker-compose.yml\n├── scripts\n│   . . .\n├── src\n│   . . .\n└── tests\n    . . .\n```", "```rs\n/target/\nCargo.lock\n# These are backup files generated by rustfmt\n**/*.rs.bk\n# jetbrains\n.idea\n# mac\n.DS_Store\n```", "```rs\n./tests\n./target\n./scripts\n./database\n.github\n```", "```rs\ncp -r web_app/src ./clean_web_app/src\n```", "```rs\n[package]\nname = \"clean_app\"\nversion = \"0.1.0\"\nedition = \"2021\"\n```", "```rs\ncargo test\n```", "```rs\nrunning 9 tests\ntest to_do::structs::base::base_tests::new ... ok\ntest to_do::structs::done::done_tests::new ... ok\ntest to_do::structs::pending::pending_tests::new ... ok\ntest jwt::jwt_tests::get_key ... ok\ntest jwt::jwt_tests::decode_incorrect_token ... ok\ntest jwt::jwt_tests::encode_decode ... ok\ntest jwt::jwt_tests::test_no_token_request ... ok\ntest jwt::jwt_tests::test_false_token_request ... ok\ntest jwt::jwt_tests::test_passing_token_request ... ok\n```", "```rs\n--> src/database.rs:12:12\n   |\n12 | use crate::config::Config;\n   |            ^^^^^^ could not find `config` in the crate root\nerror[E0432]: unresolved import `crate::config`\n --> src/jwt.rs:9:12\n  |\n9 | use crate::config::Config;\n  |            ^^^^^^ could not find `config` in the crate root\nerror[E0432]: unresolved import `crate::config`\n --> src/counter.rs:4:12\n  |\n4 | use crate::config::Config;\n  |            ^^^^^^ could not find `config` in the crate root\n```", "```rs\n...\nuse crate::config::Config;\n...\nlet config = Config::new();\nlet redis_url = config.map.get(\"REDIS_URL\")\n                          .unwrap().as_str()\n                          .unwrap().to_owned();\n...\n```", "```rs\n...\nuse std::env;\n...\nlet redis_url = env::var(\"REDIS_URL\").unwrap();\n...\n```", "```rs\nlet minutes = env::var(\"EXPIRE_MINUTES\").unwrap()\n                                        .parse::<i64>()\n                                        .unwrap();\n```", "```rs\nrunning 9 tests\ntest jwt::jwt_tests::encode_decode ... FAILED\ntest jwt::jwt_tests::get_key ... FAILED\ntest jwt::jwt_tests::decode_incorrect_token ... FAILED\ntest to_do::structs::pending::pending_tests::new ... ok\ntest to_do::structs::base::base_tests::new ... ok\ntest to_do::structs::done::done_tests::new ... ok\ntest jwt::jwt_tests::test_passing_token_request ... FAILED\ntest jwt::jwt_tests::test_no_token_request ... ok\ntest jwt::jwt_tests::test_false_token_request ... FAILED\n```", "```rs\n---- jwt::jwt_tests::encode_decode stdout ----\nthread 'jwt::jwt_tests::encode_decode' panicked at\n'called `Result::unwrap()` on an `Err` value: NotPresent',\nsrc/jwt.rs:52:50\n```", "```rs\n#!/usr/bin/env bash\n# navigate to directory\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\ncd $SCRIPTPATH\ncd ..\nexport SECRET_KEY=\"secret\"\nexport EXPIRE_MINUTES=60\ncargo test\n```", "```rs\n#!/usr/bin/env bash\n# navigate to directory\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\ncd $SCRIPTPATH\ncd ..\nexport SECRET_KEY=\"secret\"\nexport EXPIRE_MINUTES=60\nexport DB_URL=\"postgres://username:password@localhost:5433/to_do\"\nexport REDIS_URL=\"redis://127.0.0.1/\"\ncargo run\n```", "```rs\nversion: \"3.7\"\nservices:\n  postgres:\n    container_name: 'to-do-postgres'\n    image: 'postgres:11.2'\n    restart: always\n    ports:\n      - '5433:5432'\n    environment:\n      - 'POSTGRES_USER=username'\n      - 'POSTGRES_DB=to_do'\n      - 'POSTGRES_PASSWORD=password'\n  redis:\n      container_name: 'to-do-redis'\n      image: 'redis:5.0.5'\n      ports:\n        - '6379:6379'\n```", "```rs\nwget -O - https://raw.githubusercontent.com/yellow-bird-consult\n/build_tools/develop/scripts/install.sh | bash\n```", "```rs\nyb db init\n```", "```rs\nbash ~/yb_tools/database.sh db init\n```", "```rs\n├── database_management\n│   └── 1\n│       ├── down.sql\n│       └── up.sql\n```", "```rs\ncp -r database_management/1 database_management/2\n```", "```rs\nCREATE TABLE to_do (\n  id SERIAL PRIMARY KEY,\n  title VARCHAR NOT NULL,\n  status VARCHAR NOT NULL,\n  date timestamp NOT NULL DEFAULT NOW()\n)\n```", "```rs\nDROP TABLE to_do\n```", "```rs\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR NOT NULL,\n    email VARCHAR NOT NULL,\n    password VARCHAR NOT NULL,\n    unique_id VARCHAR NOT NULL,\n    UNIQUE (email),\n    UNIQUE (username)\n);\nINSERT INTO users (username, email, password, unique_id)\nVALUES ('placeholder', 'placeholder email',\n'placeholder password', 'placeholder unique id');\nALTER TABLE to_do ADD user_id integer default 1\nCONSTRAINT user_id REFERENCES users NOT NULL;\n```", "```rs\nALTER TABLE to_do DROP COLUMN user_id;\nDROP TABLE users\n```", "```rs\nDB_URL=\"postgres://username:password@localhost:5433/to_do\"\n```", "```rs\n# with alias\nyb db get\n# without alias\nbash ~/yb_tools/database.sh db get\n```", "```rs\n# with alias\nyb db rollup\n# without alias\nbash ~/yb_tools/database.sh db rollup\n```", "```rs\npm.test(\"response is created\", function () {\n    pm.response.to.have.status(201);\n});\n```", "```rs\nvar result = pm.response.json()\npm.test(\"response is ok\", function () {\n    pm.response.to.have.status(200);\n});\npm.test(\"response returns token\", function () {\n    pm.collectionVariables.set(\"login_token\", result[\"token\"]);\n})\n```", "```rs\ndocker container ls\n```", "```rs\nCONTAINER ID   IMAGE                 . . .\n0ae94ab0bbc5   nginx:latest          . . .\n6b49526250e3   deployment_rust_app.  . . .\n9f4dcdc8a455   redis:5.0.5           . . .\n```", "```rs\ndocker exec -it 6b49526250e3 /bin/bash\n```", "```rs\nldd web_app\n```", "```rs\nlinux-vdso.so.1 (0x0000ffffb8a9d000)\nlibpq.so.5 => /usr/lib/aarch64-linux-gnu/libpq.so.5\nlibgcc_s.so.1 => /lib/aarch64-linux-gnu/libgcc_s.so.1\nlibpthread.so.0 => /lib/aarch64-linux-gnu/libpthread.so.0\nlibm.so.6 => /lib/aarch64-linux-gnu/libm.so.6\n. . .\n```", "```rs\nFROM rust:1.62.1 as build\nRUN apt-get update\nRUN apt-get install libpq5 -y\nWORKDIR /app\nCOPY . .\nARG ENV=\"PRODUCTION\"\nRUN echo \"$ENV\"\n```", "```rs\nRUN if [ \"$ENV\" = \"PRODUCTION\" ] ; then cargo build --release ; \\\nelse cargo build ; fi\nRUN if [ \"$ENV\" = \"PRODUCTION\" ] ; then echo \"no need to copy\" ; \\\nelse mkdir /app/target/release/ && cp /app/target/debug/clean_app \\\n/app/target/release/clean_app ; fi\n```", "```rs\nFROM gcr.io/distroless/cc-debian10\n```", "```rs\nCOPY --chown=1001:1001 --from=build \\\n/usr/lib/aarch64-linux-gnu/libpq.so.5 \\\n/lib/aarch64-linux-gnu/libpq.so.5\n. . .\nCOPY --chown=1001:1001 --from=build \\\n/lib/aarch64-linux-gnu/libcom_err.so.2 \\\n/lib/aarch64-linux-gnu/libcom_err.so.2\n```", "```rs\nCOPY --from=build /app/target/release/clean_app \\\n/usr/local/bin/clean_app\nEXPOSE 8000\nENTRYPOINT [\"clean_app\"]\n```", "```rs\ndocker build . -t clean_app\n```", "```rs\n#!/usr/bin/env bash\n# navigate to directory\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\ncd $SCRIPTPATH\nif [ \"$(uname -m)\" = \"arm64\" ]\nthen\n    cp ../builds/aarch64_build ../Dockerfile\nelse\n    cp ../builds/x86_64_build ../Dockerfile\nfi\n```", "```rs\ncd ../tests\n# build the images and network\ndocker-compose build --no-cache\ndocker-compose up -d\n# wait until rust server is running\nsleep 5\n```", "```rs\n# run the api tests\nnewman run to_do_items.postman_collection.json\n# destroy the container and image\ndocker-compose down\ndocker image rm test_server\ndocker image rm init_test_db\ndocker image rm test_postgres\nrm ../Dockerfile\n```", "```rs\nversion: \"3.7\"\nservices:\n    test_server:\n      . . .\n    test_postgres:\n      . . .\n    test_redis:\n      . . .\n    init_test_db:\n        . . .\n```", "```rs\ntest_server:\n  container_name: test_server\n  image: test_auth_server\n  build:\n    context: ../\n    args:\n      ENV: \"NOT_PRODUCTION\"\n  restart: always\n  environment:\n    - 'DB_URL=postgres://username:password@test_postgres:54\n          32/to_do'\n    - 'SECRET_KEY=secret'\n    - 'EXPIRE_MINUTES=60'\n    - 'REDIS_URL=redis://test_redis/'\n  depends_on:\n      test_redis:\n        condition: service_started\n  ports:\n    - \"8000:8000\"\n  expose:\n    - 8000\n```", "```rs\ntest_postgres:\n  container_name: 'test_postgres'\n  image: 'postgres'\n  restart: always\n  ports:\n    - '5433:5432'\n  environment:\n    - 'POSTGRES_USER=username'\n    - 'POSTGRES_DB=to_do'\n    - 'POSTGRES_PASSWORD=password'\ntest_redis:\n  container_name: 'test_redis'\n  image: 'redis:5.0.5'\n  ports:\n    - '6379:6379'\n```", "```rs\ninit_test_db:\n    container_name: init_test_db\n    image: init_test_db\n    build:\n      context: ../database\n    environment:\n      - 'DB_URL=postgres://username:password@test_postgres:\n            5432/to_do'\n    depends_on:\n        test_postgres:\n          condition: service_started\n    restart: on-failure\n```", "```rs\nFROM postgres\nRUN apt-get update \\\n  && apt-get install -y wget \\\n  && wget -O - https://raw.githubusercontent.com/\\\n  yellow-bird-consult/build_tools/develop/scripts/\\\n  install.sh | bash \\\n  && cp ~/yb_tools/database.sh ./database.sh\n```", "```rs\nWORKDIR .\nADD . .\nCMD [\"bash\", \"./database.sh\", \"db\", \"rollup\"]\n```", "```rs\n.env\n```", "```rs\nname: run tests\non: [pull_request]\njobs:\n  run-unit-tests:\n    . . .\n  run-integration-test:\n    . . .\n```", "```rs\nrun-unit-tests:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n      - name: run the unit test\n        run: |\n          export SECRET_KEY=\"secret\"\n          export EXPIRE_MINUTES=60\n          cargo test\n```", "```rs\nrun-integration-test:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@v2\n      - name: create environment build and run newman\n        run: |\n          cd tests\n          cp ../builds/server_build ../Dockerfile\n          docker-compose build --no-cache\n          docker-compose up -d\n          sleep 5\n      - uses: actions/checkout@master\n      - uses: matt-ball/newman-action@master\n        with:\n          collection:\n              ./tests/cerberus.postman_collection.json\n```"]