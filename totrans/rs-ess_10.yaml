- en: Appendix A. Exploring Further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rust is a very rich language. In this book, we did not discuss each and every
    concept of Rust, and also not in every detail. Here, we will talk about what has
    been left out and where the reader can find more information or details about
    the topics.
  prefs: []
  type: TYPE_NORMAL
- en: Stability of Rust and the standard library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Rust 1.0 production version comes with a commitment for stability; if your
    code compiles on Rust stable 1.0, it will compile with Rust stable 1.x with no
    or minimal changes.
  prefs: []
  type: TYPE_NORMAL
- en: The development of Rust follows a train model with three release channels (nightly,
    beta, and stable), and every six weeks a new stable release will take place. Production
    users will prefer to stick with the stable branch. Every six weeks, a new beta
    version is published; this excludes all unstable code, so you know that if you
    are using beta or stable, your code will continue to compile. Simultaneously,
    the existing beta branch is promoted to be a stable release. The nightly channel
    is what you use if you want the latest changes and additions; it includes unstable
    features and libraries that may still change in backwards incompatible ways.
  prefs: []
  type: TYPE_NORMAL
- en: The vast majority of functionality in the standard library is now stable. For
    in-depth information, refer to the documentation at [http://doc.rust-lang.org/std/](http://doc.rust-lang.org/std/).
  prefs: []
  type: TYPE_NORMAL
- en: The ecosystem of crates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a general tendency to move less-used or more experimental **Application
    Programming Interfaces** (**APIs**) out of the language and the standard library
    and into their own crates. An ever-growing ecosystem of crates for Rust is at
    your disposal at [https://crates.io/](https://crates.io/), with over 2,000 crates
    in stock at the time of writing (May 2015).
  prefs: []
  type: TYPE_NORMAL
- en: At *Awesome Rust* ([https://github.com/kud1ing/awesome-rust](https://github.com/kud1ing/awesome-rust)),
    you can find a curated list of Rust projects. This site only contains useful and
    stable projects and indicates whether they compile in the latest Rust version.
    In addition, it is worth to search *Rust Kit* ([http://rustkit.io/](http://rustkit.io/)),
    as well as the Rust-CI repository at [http://www.rust-ci.org/projects/](http://www.rust-ci.org/projects/).
  prefs: []
  type: TYPE_NORMAL
- en: In general, it is advisable that you search for crates that are already available
    whenever you embark on a project that requires specific functionality. There is
    a good chance that a crate that conforms to your needs already exists, or perhaps,
    you can find some usable starting code upon which you can build what you exactly
    need.
  prefs: []
  type: TYPE_NORMAL
- en: Other resources for learning Rust
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book has nearly covered all the topics of the so-called Book ([http://doc.rust-lang.org/book/](http://doc.rust-lang.org/book/)),
    and sometimes, it even went beyond. Nevertheless, the Book on the Rust website
    can still be a good resource to find the latest information, together with the
    fine collection of Rust code examples at [http://rustbyexample.com/](http://rustbyexample.com/),
    which can be reached through the `More examples` link on Rust's homepage. For
    the most complete, in-depth information, refer to the reference at [http://doc.rust-lang.org/reference.html](http://doc.rust-lang.org/reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: Asking questions or following and commenting on the discussions on Reddit ([https://www.reddit.com/r/rust](https://www.reddit.com/r/rust))
    and Stack Overflow ([https://stackoverflow.com/questions/tagged/rust](https://stackoverflow.com/questions/tagged/rust))
    can also help you. Last but not the least, when you have an urgent Rust question,
    you can chat with the friendly experts on the IRC channel at [https://client01.chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust](https://client01.chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust).
  prefs: []
  type: TYPE_NORMAL
- en: A resource with coding guidelines on Rust can be found at [http://doc.rust-lang.org/nightly/style/](http://doc.rust-lang.org/nightly/style/).
  prefs: []
  type: TYPE_NORMAL
- en: '*24 days of Rust* is a highly recommended article series by Zbigniew Siciarz
    on a multitude of advanced Rust subjects; you can take a look at the index at
    [https://siciarz.net/24-days-of-rust-conclusion/](https://siciarz.net/24-days-of-rust-conclusion/).'
  prefs: []
  type: TYPE_NORMAL
- en: Files and databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The standard library offers the `std::io::fs` module for filesystem manipulation:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have to work with **comma separated values** (**CSV**) files, use one
    of the available crates, such as `simple_csv`, `csv`, or `xsv`. The articles at
    [https://siciarz.net/24-days-of-rust-csv/](https://siciarz.net/24-days-of-rust-csv/)
    can get you started.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For working with **JSON** files, use a crate such as `rustc-serialize` or `json_macros`;
    start with reading the information at [https://siciarz.net/24-days-of-rust-working-json/](https://siciarz.net/24-days-of-rust-working-json/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the **XML** format, there are plenty of possibilities, such as the `rust-xml`
    and the `xml-rs` crates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For databases, there are crates available for working with the following technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: SQLite3 (the `rust-sqlite` crate)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostgreSQL** (the `postgres` and `r2d2_postgres` crates); get started using
    it with [https://siciarz.net/24-days-of-rust-postgres/](https://siciarz.net/24-days-of-rust-postgres/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL** (the `mysql` crate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **MongoDB**, there is the `mongo` crate, built by the MongoDB developers;
    for more information on this, go to [http://blog.mongodb.org/post/56426792420/introducing-the-mongodb-driver-for-the-rust](http://blog.mongodb.org/post/56426792420/introducing-the-mongodb-driver-for-the-rust)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Redis**, there are the `redis`, `redis-rs`, or `rust-redis` crates; see
    [https://siciarz.net/24-days-of-rust-redis/](https://siciarz.net/24-days-of-rust-redis/)
    for a quick start
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are interested in **object relational mapper** (**ORM**) frameworks,
    look at the deuterium crate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphics and games
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Its high performance and low-level capabilities make Rust an ideal choice in
    the field of graphics and games. Searching for graphics reveals bindings for OpenGL
    (with packages `gl-rs`, `glfw-sys`), Core Graphics (with packages `gfx`, `gdk`),
    and others.
  prefs: []
  type: TYPE_NORMAL
- en: On the game front, there are game engines for Piston and chipmunk 2D and bindings
    for SDL1, SDL2, and Allegro5\. A crate for a simple 3D game engine is `kiss3d`.
    A number of physics (`ncollide`) and math (`nalgebra` and `cgmath-rs`) crates
    exist that can be of use here.
  prefs: []
  type: TYPE_NORMAL
- en: Web development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A general overview of the status in this domain can be found at [http://arewewebyet.com/](http://arewewebyet.com/).
    The most advanced and stable crate for developing HTTP applications at this moment
    is hyper. It is fast and contains both an HTTP client and a server to build complex
    web applications. To get started with it, read the introductory article at [https://siciarz.net/24-days-of-rust-hyper/](https://siciarz.net/24-days-of-rust-hyper/).
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP client libraries built on top of hyper are `rust-request` and `rest_client`.
    A new Rust HTTP Toolkit project is emerging under the name teepee ([http://teepee.rs/](http://teepee.rs/)).
    It looks promising, but it was in its infancy at the time of writing this book.
  prefs: []
  type: TYPE_NORMAL
- en: For web frameworks, the best usable project is iron. If you only need a light
    micro web framework, rustful could be your choice. If you need a **Representational
    State Transfer** (**REST**) framework, go for rustless. Another useful web framework,
    which is still under active development, is nickel ([http://nickel.rs/](http://nickel.rs/)).
  prefs: []
  type: TYPE_NORMAL
- en: And of course, you must not ignore the new servo browser that is emerging!
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, crates exist for a lot of other categories such as functional and
    embedded programming ([http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/](http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/)),
    data structures, image processing (the `image` crate), audio, compression, encoding
    and encryption (`rust-crypto` and `crypto`), regular expressions, parsing, hashing,
    tooling, testing, template engines, and so on. You can take a look at the Rust-CI
    repository or the Awesome Rust compilation; you can refer to the links in the
    *The ecosystem of crates* section to get an idea of what is available. Zinc ([http://zinc.rs/](http://zinc.rs/))
    is an example of a project that uses Rust to write a code stack for processors
    (at the moment, for ARM).
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of our Rust journey in this book. We hope you enjoyed
    it as much as we enjoyed writing it. You now have a firm foundation to start developing
    using Rust. We also hope that this quick overview has shown you why Rust is a
    rising star in the software development world, and that you will use it in your
    projects. Join the Rust community and start using your coding talents. Perhaps
    we'll meet again in the Rust(un)iverse.
  prefs: []
  type: TYPE_NORMAL
