- en: Appendix A. Exploring Further
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A.进一步探索
- en: Rust is a very rich language. In this book, we did not discuss each and every
    concept of Rust, and also not in every detail. Here, we will talk about what has
    been left out and where the reader can find more information or details about
    the topics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Rust是一种非常丰富的语言。在这本书中，我们没有讨论Rust的每一个概念，也没有在每一个细节上讨论。在这里，我们将讨论我们省略了什么，以及读者可以在哪里找到更多关于这些主题的信息或细节。
- en: Stability of Rust and the standard library
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rust和标准库的稳定性
- en: The Rust 1.0 production version comes with a commitment for stability; if your
    code compiles on Rust stable 1.0, it will compile with Rust stable 1.x with no
    or minimal changes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 1.0生产版本承诺提供稳定性；如果您的代码在Rust稳定版1.0上编译，它将在Rust稳定版1.x上编译，无需或仅需最小更改。
- en: The development of Rust follows a train model with three release channels (nightly,
    beta, and stable), and every six weeks a new stable release will take place. Production
    users will prefer to stick with the stable branch. Every six weeks, a new beta
    version is published; this excludes all unstable code, so you know that if you
    are using beta or stable, your code will continue to compile. Simultaneously,
    the existing beta branch is promoted to be a stable release. The nightly channel
    is what you use if you want the latest changes and additions; it includes unstable
    features and libraries that may still change in backwards incompatible ways.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Rust的开发遵循一个具有三个发布渠道（夜间、beta和稳定）的列车模型，并且每六周将发布一个新的稳定版本。生产用户将更倾向于坚持使用稳定分支。每六周，将发布一个新的beta版本；这排除了所有不稳定代码，因此您知道，如果您正在使用beta或稳定版本，您的代码将继续编译。同时，现有的beta分支将被提升为稳定发布。如果您想要最新的更改和新增功能，则使用夜间渠道；它包括可能以向后不兼容的方式更改的不稳定特性和库。
- en: The vast majority of functionality in the standard library is now stable. For
    in-depth information, refer to the documentation at [http://doc.rust-lang.org/std/](http://doc.rust-lang.org/std/).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库中的绝大多数功能现在都已稳定。如需深入了解，请参阅[http://doc.rust-lang.org/std/](http://doc.rust-lang.org/std/)上的文档。
- en: The ecosystem of crates
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Crates的生态系统
- en: There is a general tendency to move less-used or more experimental **Application
    Programming Interfaces** (**APIs**) out of the language and the standard library
    and into their own crates. An ever-growing ecosystem of crates for Rust is at
    your disposal at [https://crates.io/](https://crates.io/), with over 2,000 crates
    in stock at the time of writing (May 2015).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通常有一个趋势是将较少使用或更实验性的**应用程序编程接口**（**APIs**）从语言和标准库中移出，放入它们自己的crates中。Rust的crates生态系统不断增长，您可以在[https://crates.io/](https://crates.io/)找到，截至撰写本文时（2015年5月）已有超过2,000个crates。
- en: At *Awesome Rust* ([https://github.com/kud1ing/awesome-rust](https://github.com/kud1ing/awesome-rust)),
    you can find a curated list of Rust projects. This site only contains useful and
    stable projects and indicates whether they compile in the latest Rust version.
    In addition, it is worth to search *Rust Kit* ([http://rustkit.io/](http://rustkit.io/)),
    as well as the Rust-CI repository at [http://www.rust-ci.org/projects/](http://www.rust-ci.org/projects/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Awesome Rust* ([https://github.com/kud1ing/awesome-rust](https://github.com/kud1ing/awesome-rust))，您可以找到经过精选的Rust项目列表。该网站仅包含有用且稳定的项目，并指出它们是否在最新的Rust版本中编译。此外，值得搜索*Rust
    Kit* ([http://rustkit.io/](http://rustkit.io/))，以及位于[http://www.rust-ci.org/projects/](http://www.rust-ci.org/projects/)的Rust-CI仓库。
- en: In general, it is advisable that you search for crates that are already available
    whenever you embark on a project that requires specific functionality. There is
    a good chance that a crate that conforms to your needs already exists, or perhaps,
    you can find some usable starting code upon which you can build what you exactly
    need.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当您开始一个需要特定功能的项目时，建议您搜索已经可用的crates。很可能已经存在一个符合您需求的crates，或者您可能可以找到一些可用的起始代码，您可以在其基础上构建您确切需要的东西。
- en: Other resources for learning Rust
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他学习Rust的资源
- en: This book has nearly covered all the topics of the so-called Book ([http://doc.rust-lang.org/book/](http://doc.rust-lang.org/book/)),
    and sometimes, it even went beyond. Nevertheless, the Book on the Rust website
    can still be a good resource to find the latest information, together with the
    fine collection of Rust code examples at [http://rustbyexample.com/](http://rustbyexample.com/),
    which can be reached through the `More examples` link on Rust's homepage. For
    the most complete, in-depth information, refer to the reference at [http://doc.rust-lang.org/reference.html](http://doc.rust-lang.org/reference.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书几乎涵盖了所谓的“书” ([http://doc.rust-lang.org/book/](http://doc.rust-lang.org/book/))
    中的所有主题，有时甚至超越了它。尽管如此，Rust 网站上的“书”仍然是一个寻找最新信息的良好资源，同时还有 Rust 代码示例的优秀集合，可以在 Rust
    主页上的“更多示例”链接找到，也可以通过 [http://rustbyexample.com/](http://rustbyexample.com/) 访问。对于最完整、最深入的信息，请参考
    [http://doc.rust-lang.org/reference.html](http://doc.rust-lang.org/reference.html)
    上的参考。
- en: Asking questions or following and commenting on the discussions on Reddit ([https://www.reddit.com/r/rust](https://www.reddit.com/r/rust))
    and Stack Overflow ([https://stackoverflow.com/questions/tagged/rust](https://stackoverflow.com/questions/tagged/rust))
    can also help you. Last but not the least, when you have an urgent Rust question,
    you can chat with the friendly experts on the IRC channel at [https://client01.chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust](https://client01.chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Reddit ([https://www.reddit.com/r/rust](https://www.reddit.com/r/rust)) 和
    Stack Overflow ([https://stackoverflow.com/questions/tagged/rust](https://stackoverflow.com/questions/tagged/rust))
    上提问或关注并评论讨论也可以帮助你。最后但同样重要的是，当你有紧急的 Rust 问题需要解决时，你可以在 [https://client01.chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust](https://client01.chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust)
    的 IRC 频道与友好的专家聊天。
- en: A resource with coding guidelines on Rust can be found at [http://doc.rust-lang.org/nightly/style/](http://doc.rust-lang.org/nightly/style/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [http://doc.rust-lang.org/nightly/style/](http://doc.rust-lang.org/nightly/style/)
    找到关于 Rust 的编码指南资源。
- en: '*24 days of Rust* is a highly recommended article series by Zbigniew Siciarz
    on a multitude of advanced Rust subjects; you can take a look at the index at
    [https://siciarz.net/24-days-of-rust-conclusion/](https://siciarz.net/24-days-of-rust-conclusion/).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*24天Rust学习* 是 Zbigniew Siciarz 推荐的一系列关于 Rust 高级主题的精彩文章；你可以在 [https://siciarz.net/24-days-of-rust-conclusion/](https://siciarz.net/24-days-of-rust-conclusion/)
    查看索引。'
- en: Files and databases
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件和数据库
- en: 'The standard library offers the `std::io::fs` module for filesystem manipulation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库提供了 `std::io::fs` 模块用于文件系统操作：
- en: If you have to work with **comma separated values** (**CSV**) files, use one
    of the available crates, such as `simple_csv`, `csv`, or `xsv`. The articles at
    [https://siciarz.net/24-days-of-rust-csv/](https://siciarz.net/24-days-of-rust-csv/)
    can get you started.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你必须处理 **逗号分隔值**（**CSV**）文件，可以使用可用的 crate，例如 `simple_csv`、`csv` 或 `xsv`。在 [https://siciarz.net/24-days-of-rust-csv/](https://siciarz.net/24-days-of-rust-csv/)
    的文章可以帮你入门。
- en: For working with **JSON** files, use a crate such as `rustc-serialize` or `json_macros`;
    start with reading the information at [https://siciarz.net/24-days-of-rust-working-json/](https://siciarz.net/24-days-of-rust-working-json/).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于处理 **JSON** 文件，可以使用 `rustc-serialize` 或 `json_macros` 这样的 crate；开始时可以阅读 [https://siciarz.net/24-days-of-rust-working-json/](https://siciarz.net/24-days-of-rust-working-json/)
    上的信息。
- en: For the **XML** format, there are plenty of possibilities, such as the `rust-xml`
    and the `xml-rs` crates.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 **XML** 格式，有许多可能性，例如 `rust-xml` 和 `xml-rs` crate。
- en: 'For databases, there are crates available for working with the following technologies:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库，有可用于以下技术的 crate：
- en: SQLite3 (the `rust-sqlite` crate)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite3（`rust-sqlite` crate）
- en: '**PostgreSQL** (the `postgres` and `r2d2_postgres` crates); get started using
    it with [https://siciarz.net/24-days-of-rust-postgres/](https://siciarz.net/24-days-of-rust-postgres/)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL**（`postgres` 和 `r2d2_postgres` crate）；你可以通过 [https://siciarz.net/24-days-of-rust-postgres/](https://siciarz.net/24-days-of-rust-postgres/)
    开始使用它。'
- en: '**MySQL** (the `mysql` crate)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL**（`mysql` crate）'
- en: For **MongoDB**, there is the `mongo` crate, built by the MongoDB developers;
    for more information on this, go to [http://blog.mongodb.org/post/56426792420/introducing-the-mongodb-driver-for-the-rust](http://blog.mongodb.org/post/56426792420/introducing-the-mongodb-driver-for-the-rust)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 **MongoDB**，有由 MongoDB 开发者构建的 `mongo` crate；更多关于这个的信息，请访问 [http://blog.mongodb.org/post/56426792420/introducing-the-mongodb-driver-for-the-rust](http://blog.mongodb.org/post/56426792420/introducing-the-mongodb-driver-for-the-rust)。
- en: For **Redis**, there are the `redis`, `redis-rs`, or `rust-redis` crates; see
    [https://siciarz.net/24-days-of-rust-redis/](https://siciarz.net/24-days-of-rust-redis/)
    for a quick start
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**Redis**，有`redis`、`redis-rs`或`rust-redis`的crate；查看[https://siciarz.net/24-days-of-rust-redis/](https://siciarz.net/24-days-of-rust-redis/)以获取快速入门信息。
- en: If you are interested in **object relational mapper** (**ORM**) frameworks,
    look at the deuterium crate
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你感兴趣的是**对象关系映射器**（**ORM**）框架，请查看deuterium crate。
- en: Graphics and games
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形和游戏
- en: Its high performance and low-level capabilities make Rust an ideal choice in
    the field of graphics and games. Searching for graphics reveals bindings for OpenGL
    (with packages `gl-rs`, `glfw-sys`), Core Graphics (with packages `gfx`, `gdk`),
    and others.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它的高性能和底层能力使Rust成为图形和游戏领域的理想选择。搜索图形会揭示OpenGL（带有`gl-rs`、`glfw-sys`包）、Core Graphics（带有`gfx`、`gdk`包）和其他的绑定。
- en: On the game front, there are game engines for Piston and chipmunk 2D and bindings
    for SDL1, SDL2, and Allegro5\. A crate for a simple 3D game engine is `kiss3d`.
    A number of physics (`ncollide`) and math (`nalgebra` and `cgmath-rs`) crates
    exist that can be of use here.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏方面，有Piston和chipmunk 2D的游戏引擎以及SDL1、SDL2和Allegro5的绑定。一个简单3D游戏引擎的crate是`kiss3d`。存在许多物理（`ncollide`）和数学（`nalgebra`和`cgmath-rs`）crate，这些crate在这里可能很有用。
- en: Web development
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web开发
- en: A general overview of the status in this domain can be found at [http://arewewebyet.com/](http://arewewebyet.com/).
    The most advanced and stable crate for developing HTTP applications at this moment
    is hyper. It is fast and contains both an HTTP client and a server to build complex
    web applications. To get started with it, read the introductory article at [https://siciarz.net/24-days-of-rust-hyper/](https://siciarz.net/24-days-of-rust-hyper/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[http://arewewebyet.com/](http://arewewebyet.com/)找到该领域的总体状况概述。目前，用于开发HTTP应用程序的最先进和稳定的crate是hyper。它速度快，包含HTTP客户端和服务器，可以构建复杂的Web应用程序。要开始使用它，请阅读入门文章[https://siciarz.net/24-days-of-rust-hyper/](https://siciarz.net/24-days-of-rust-hyper/)。
- en: The HTTP client libraries built on top of hyper are `rust-request` and `rest_client`.
    A new Rust HTTP Toolkit project is emerging under the name teepee ([http://teepee.rs/](http://teepee.rs/)).
    It looks promising, but it was in its infancy at the time of writing this book.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 基于hyper构建的HTTP客户端库有`rust-request`和`rest_client`。一个新的名为teepee的Rust HTTP Toolkit项目正在兴起（[http://teepee.rs/](http://teepee.rs/））。它看起来很有前途，但在撰写本书时还处于起步阶段。
- en: For web frameworks, the best usable project is iron. If you only need a light
    micro web framework, rustful could be your choice. If you need a **Representational
    State Transfer** (**REST**) framework, go for rustless. Another useful web framework,
    which is still under active development, is nickel ([http://nickel.rs/](http://nickel.rs/)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web框架，最佳可用的项目是iron。如果你只需要一个轻量级的微Web框架，rustful可能是你的选择。如果你需要一个**表示状态转移**（**REST**）框架，选择rustless。另一个有用的Web框架，目前仍在积极开发中，是nickel（[http://nickel.rs/](http://nickel.rs/））。
- en: And of course, you must not ignore the new servo browser that is emerging!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你绝对不能忽视新兴的新servo浏览器！
- en: Furthermore, crates exist for a lot of other categories such as functional and
    embedded programming ([http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/](http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/)),
    data structures, image processing (the `image` crate), audio, compression, encoding
    and encryption (`rust-crypto` and `crypto`), regular expressions, parsing, hashing,
    tooling, testing, template engines, and so on. You can take a look at the Rust-CI
    repository or the Awesome Rust compilation; you can refer to the links in the
    *The ecosystem of crates* section to get an idea of what is available. Zinc ([http://zinc.rs/](http://zinc.rs/))
    is an example of a project that uses Rust to write a code stack for processors
    (at the moment, for ARM).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还存在许多其他类别的crate，如函数式编程和嵌入式编程（[http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/](http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/））、数据结构、图像处理（`image`
    crate）、音频、压缩、编码和加密（`rust-crypto`和`crypto`）、正则表达式、解析、哈希、工具、测试、模板引擎等等。你可以查看Rust-CI仓库或Awesome
    Rust汇编；你可以参考*crate生态系统*部分中的链接，以了解可用的内容。Zinc（[http://zinc.rs/](http://zinc.rs/））是一个使用Rust编写处理器代码栈的项目示例（目前为ARM）。
- en: This brings us to the end of our Rust journey in this book. We hope you enjoyed
    it as much as we enjoyed writing it. You now have a firm foundation to start developing
    using Rust. We also hope that this quick overview has shown you why Rust is a
    rising star in the software development world, and that you will use it in your
    projects. Join the Rust community and start using your coding talents. Perhaps
    we'll meet again in the Rust(un)iverse.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书中关于 Rust 的旅程就此结束。我们希望您享受阅读它如同我们享受撰写它一样。您现在有了坚实的基础，可以开始使用 Rust 进行开发了。我们也希望这个简要概述向您展示了为什么
    Rust 是软件开发界的一颗新星，并且您会在您的项目中使用它。加入 Rust 社区，开始发挥您的编程才能。也许我们会在 Rust（非）宇宙中再次相遇。
