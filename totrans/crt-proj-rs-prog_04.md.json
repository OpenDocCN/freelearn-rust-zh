["```rs\n let mut tera_engine = tera::Tera::default();\n```", "```rs\n tera_engine.add_raw_template(\n     \"id_template\", \"Identifier: {{id}}.\").unwrap();\n```", "```rs\nlet mut numeric_id = tera::Context::new();\nnumeric_id.insert(\"id\", &7362);\n```", "```rs\nprintln!(\"id_template with numeric_id: [{}]\",\n    tera_engine.render(\"id_template\", &numeric_id).unwrap());\n```", "```rs\nid_template with numeric_id: [Identifier: 7362.]\n```", "```rs\nlet mut textual_id = tera::Context::new();\ntextual_id.insert(\"id\", &\"ABCD\");\nprintln!(\n    \"id_template with textual_id: [{}]\",\n    tera_engine.render(\"id_template\", &textual_id).unwrap()\n);\n```", "```rs\nid_template with textual_id: [Identifier: ABCD.]\n```", "```rs\ntera_engine\n    .add_raw_template(\"person_id_template\", \"Person id: {{person.id}}\")\n    .unwrap();\n```", "```rs\n#[derive(serde_derive::Serialize)]\nstruct Person {\n    id: u32,\n    name: String,\n}\n```", "```rs\none_person.insert(\n    \"person\",\n    &Person {\n        id: 534,\n        name: \"Mary\".to_string(),\n    },\n);\n```", "```rs\nperson_id_template with one_person: [Person id: 534]\n```", "```rs\ntera_engine\n    .add_raw_template(\n        \"possible_person_id_template\",\n        \"{%if person%}Id: {{person.id}}\\\n         {%else%}No person\\\n         {%endif%}\",\n    )\n    .unwrap();\n```", "```rs\npossible_person_id_template with one_person: [Id: 534]\npossible_person_id_template with empty context: [No person]\n```", "```rs\ntera_engine\n    .add_raw_template(\n        \"multiple_person_id_template\",\n        \"{%for p in persons%}\\\n         Id: {{p.id}};\\n\\\n         {%endfor%}\",\n    )\n    .unwrap();\n```", "```rs\nlet mut three_persons = tera::Context::new();\nthree_persons.insert(\n    \"persons\",\n    &vec![\n        Person {\n            id: 534,\n            name: \"Mary\".to_string(),\n        },\n        Person {\n            id: 298,\n            name: \"Joe\".to_string(),\n        },\n        Person {\n            id: 820,\n            name: \"Ann\".to_string(),\n        },\n    ],\n);\n```", "```rs\nmultiple_person_id_template with three_persons: [Id: 534;\nId: 298;\nId: 820;\n]\n```", "```rs\ntera_engine\n    .add_template_file(\"templates/templ_id.txt\", Some(\"id_file_template\"))\n    .unwrap();\n```", "```rs\nprintln!(\n    \"id_file_template with numeric_id: [{}]\",\n    tera_engine\n        .render(\"id_file_template\", numeric_id.clone())\n        .unwrap()\n);\n```", "```rs\nid_file_template with numeric_id: [This file contains one id: 7362.]\n```", "```rs\ntera_engine\n    .add_template_file(\"templates/templ_id.txt\", None)\n    .unwrap();\n\nprintln!(\n    \"templates/templ_id.txt with numeric_id: [{}]\",\n    tera_engine\n        .render(\"templates/templ_id.txt\", numeric_id)\n        .unwrap()\n);\n```", "```rs\nlazy_static::lazy_static! {\n    pub static ref TERA: tera::Tera =\n        tera::Tera::new(\"templates/**/*\").unwrap();\n}\n```", "```rs\n{% include \"footer.txt\" %}\n```", "```rs\nlet server_address = \"127.0.0.1:8080\";\nprintln!(\"Listening at address {}\", server_address);\nlet db_conn = web::Data::new(Mutex::new(AppState {\n    db: db_access::DbConnection::new(),\n}));\nHttpServer::new(move || {\n    App::new()\n        .register_data(db_conn.clone())\n        .service(\n            web::resource(\"/\")\n                .route(web::get().to(get_main)),\n        )\n})\n.bind(server_address)?\n.run()\n```", "```rs\nlet context = tera::Context::new();\nHttpResponse::Ok()\n    .content_type(\"text/html\")\n    .body(TERA.render(\"main.html\", context).unwrap())\n```", "```rs\n.body(\"<!DOCTYPE html><html><body><p>Hello</p></body></html>\")\n```", "```rs\n.body(include_str!(\"main.html\"))\n```", "```rs\nTERA.render(\"main.html\", context).unwrap()\n```", "```rs\n <script>\n {% include \"main.js\" %}\n </script>\n```", "```rs\n<body id=\"body\" onload=\"getPage('/page/persons')\">\n```", "```rs\nfunction getPage(uri) {\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n        if (this.readyState == 4 && this.status == 200) {\n            document.getElementById('body')\n                .innerHTML = xhttp.responseText;\n        }\n    };\n    xhttp.open('GET', uri, true);\n    xhttp.send();\n}\n```", "```rs\n <input id=\"name_portion\" type=\"text\" value=\"{{partial_name}}\"/>\n```", "```rs\n<button onclick=\"getPage('/page/persons?partial_name='\n    + getElementById('name_portion').value)\">Filter</button>\n```", "```rs\n{% if persons %}\n...\n{% else %}\n    <p>No persons.</p>\n{% endif %}\n```", "```rs\n{% for p in persons %}\n    <tr>\n        <td>{{p.id}}</td>\n        <td>{{p.name}}</td>\n    </tr>\n{% endfor %}\n```", "```rs\n.service(\n    web::resource(\"/page/persons\")\n        .route(web::get().to(get_page_persons)),\n)\n.service(\n    web::resource(\"/favicon.ico\")\n        .route(web::get().to(get_favicon)),\n)\n.default_service(web::route().to(invalid_resource))\n```", "```rs\n#[derive(Deserialize)]\npub struct Filter {\n    partial_name: Option<String>,\n}\n```", "```rs\nlet partial_name = &query.partial_name.clone().unwrap_or_else(|| \"\".to_string());\nlet db_conn = &state.lock().unwrap().db;\nlet person_list = db_conn.get_persons_by_partial_name(&partial_name);\nlet mut context = tera::Context::new();\ncontext.insert(\"partial_name\", &partial_name);\ncontext.insert(\"persons\", &person_list.collect::<Vec<_>>());\nHttpResponse::Ok()\n    .content_type(\"text/html\")\n    .body(TERA.render(\"persons.html\", context).unwrap())\n```", "```rs\nHttpResponse::Ok()\n    .content_type(\"image/x-icon\")\n    .body(include_bytes!(\"favicon.ico\") as &[u8])\n```", "```rs\nHttpResponse::NotFound()\n    .content_type(\"text/html\")\n    .body(\"<h2>Invalid request.</h2>\")\n```", "```rs\n<div>\n    <label>Id:</label>\n    <input id=\"person_id\" type=\"number\">\n    <button onclick=\"getPage(\n        '/page/edit_person/' + getElementById('person_id').value)\"\n        >Find</button>\n</div>\n```", "```rs\n<div>\n    <button onclick=\"delete_selected_persons()\">Delete Selected Persons</button>\n    <button onclick=\"getPage('/page/new_person')\">Add New Person</button>\n</div>\n```", "```rs\n<td><input name=\"selector\" id=\"{{p.id}}\" type=\"checkbox\"/></td>\n<td><button onclick=\"getPage('/page/edit_person/{{p.id}}')\">Edit</button></td>\n```", "```rs\n<h1>Person data</h1>\n<div>\n    <label>Id:</label>\n    <input id=\"person_id\" type=\"number\" value=\"{{ person_id }}\" disabled>\n</div>\n<div>\n    <label>Name:</label>\n    <input id=\"person_name\" type=\"text\" value=\"{{ person_name }}\"/>\n</div>\n```", "```rs\n{% if inserting %}\n    <button onclick=\"savePerson('POST')\">Insert</button>\n{% else %}\n    <button onclick=\"savePerson('PUT')\">Update</button>\n{% endif %}\n<button onclick=\"getPage('/page/persons')\">Cancel</button>\n```", "```rs\n.service(\n    web::resource(\"/persons\")\n        .route(web::delete().to(delete_persons)),\n)\n.service(\n    web::resource(\"/page/new_person\")\n        .route(web::get().to(get_page_new_person)),\n)\n.service(\n    web::resource(\"/page/edit_person/{id}\")\n        .route(web::get().to(get_page_edit_person)),\n)\n.service(\n    web::resource(\"/one_person\")\n        .route(web::post().to(insert_person))\n        .route(web::put().to(update_person)),\n)\n```", "```rs\nlet id = &path.0;\nlet db_conn = &state.lock().unwrap().db;\nlet mut context = tera::Context::new();\nif let Ok(id_n) = id.parse::<u32>() {\n    if let Some(person) = db_conn.get_person_by_id(id_n) {\n```", "```rs\ncontext.insert(\"person_id\", &id);\ncontext.insert(\"person_name\", &person.name);\ncontext.insert(\"inserting\", &false);\n```", "```rs\nreturn HttpResponse::Ok()\n    .content_type(\"text/html\")\n    .body(TERA.render(\"one_person.html\", context).unwrap());\n```", "```rs\ncontext.insert(\"id_error\", &\"Person id not found\");\ncontext.insert(\"partial_name\", &\"\");\nlet person_list = db_conn.get_persons_by_partial_name(&\"\");\ncontext.insert(\"persons\", &person_list.collect::<Vec<_>>());\nHttpResponse::Ok()\n    .content_type(\"text/html\")\n    .body(TERA.render(\"persons.html\", context).unwrap())\n```", "```rs\n state: web::Data<Mutex<AppState>>,\n query: web::Query<ToUpdate>,\n```", "```rs\n#[derive(Deserialize)]\nstruct ToUpdate {\n    id: Option<u32>,\n    name: Option<String>,\n}\n```", "```rs\nlet db_conn = &mut state.lock().unwrap().db;\nlet mut updated_count = 0;\nlet id = query.id.unwrap_or(0);\n```", "```rs\nlet name = query.name.clone().unwrap_or_else(|| \"\".to_string()).clone();\nupdated_count += if db_conn.update_person(Person { id, name }) {\n    1\n} else {\n    0\n};\nupdated_count.to_string()\n```", "```rs\n\n<h1>Login to Persons</h1>\n<div>\n    <span>Current user:</span>\n    <span id=\"current_user\" class=\"current-user\"></span>\n</div>\n<hr/>\n<label class=\"error\">{{error_message}}</label>\n<div>\n    <label>User name:</label>\n    <input id=\"username\" type=\"text\">\n</div>\n<div>\n    <label>Password:</label>\n    <input id=\"password\" type=\"password\">\n</div>\n<button onclick=\"login()\">Log in</button>\n```", "```rs\n<div>\n    <span>Current user: </span>\n    <span id=\"current_user\" class=\"current-user\"></span>\n    <button onclick=\"getPage('/page/login')\">Change User</button>\n</div>\n<hr/>\n```", "```rs\n{% if not can_write %}disabled{% endif %}\n```", "```rs\n{% if not can_write %}readonly{% endif %}\n```", "```rs\nxhttp.setRequestHeader(\"Authorization\",\n    \"Basic \" + btoa(username + \":\" + password));\n```", "```rs\nvar cur_user = document.getElementById('current_user');\nif (cur_user)\n    cur_user.innerHTML = username ? username : '---';\n```", "```rs\nusername = document.getElementById('username').value;\npassword = document.getElementById('password').value;\ngetPage('/page/persons');\n```", "```rs\n#[derive(Serialize, Clone, Debug)]\npub struct User {\n    pub username: String,\n    pub password: String,\n    pub privileges: Vec<DbPrivilege>,\n}\n```", "```rs\n#[derive(Serialize, Clone, Copy, PartialEq, Debug)]\npub enum DbPrivilege { CanRead, CanWrite }\n```", "```rs\npub fn get_user_by_username(&self, username: &str) -> Option<&User> {\n    if let Some(u) = self.users.iter().find(|u| u.username == username) {\n        Some(u)\n    }\n    else { None }\n}\n```", "```rs\n.service(\n    web::resource(\"/page/login\")\n        .route(web::get().to(get_page_login)),\n)\n\n```", "```rs\nmatch check_credentials(auth, &state, DbPrivilege::CanWrite) {\n    Ok(_) => {\n        ... manipulate data ...\n        HttpResponse::Ok()\n            .content_type(\"text/plain\")\n            .body(result)\n        },\n    Err(msg) => get_page_login_with_message(&msg)\n}\n```", "```rs\nmatch check_credentials(auth, &state, DbPrivilege::CanRead) {\n    Ok(privileges) => {\n        ... get path arguments, query arguments, body ...\n        ... get data from the database ...\n        let mut context = tera::Context::new();\n        context.insert(\"can_write\",\n            &privileges.contains(&DbPrivilege::CanWrite));\n        ... insert some other variables in the context ...\n        return HttpResponse::Ok()\n            .content_type(\"text/html\")\n            .body(TERA.render(\"<template_name>.html\", context).unwrap());\n    },\n    Err(msg) => get_page_login_with_message(&msg)\n}\n```", "```rs\nif let Some(user) = db_conn.get_user_by_username(auth.user_id()) {\n    if auth.password().is_some() && &user.password == auth.password().unwrap() {\n```"]