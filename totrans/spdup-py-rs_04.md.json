["```rs\n     /target/\n    ```", "```rs\n    [package]\n    name = \"flitton_fib_rs\"\n    version = \"0.1.0\"\n    authors = [\"Maxwell Flitton \n      <maxwellflitton@gmail.com>\"]\n    edition = \"2018\"\n    ```", "```rs\n    [dependencies]\n    [dependencies.pyo3]\n    version = \"0.13.2\"\n    features = [\"extension-module\"]\n    ```", "```rs\n    [lib]\n    name = \"flitton_fib_rs\"\n    crate-type = [\"cdylib\"]\n    ```", "```rs\n    [target.x86_64-apple-darwin]\n    rustflags = [\n        \"-C\", \"link-arg=-undefined\",\n        \"-C\", \"link-arg=dynamic_lookup\",\n    ]\n    [target.aarch64-apple-darwin]\n    rustflags = [\n        \"-C\", \"link-arg=-undefined\",\n        \"-C\", \"link-arg=dynamic_lookup\",\n    ]\n    ```", "```rs\n#!/usr/bin/env python\n```", "```rs\nfrom setuptools import dist\n```", "```rs\ndist.Distribution().fetch_build_eggs(['setuptools_rust'])\n```", "```rs\nfrom setuptools import setup\n```", "```rs\nfrom setuptools_rust import Binding, RustExtension\n```", "```rs\nsetup(\n```", "```rs\n    name=\"flitton-fib-rs\",\n```", "```rs\n    version=\"0.1\",\n```", "```rs\n    rust_extensions=[RustExtension(\n```", "```rs\n        \".flitton_fib_rs.flitton_fib_rs\",\n```", "```rs\n        path=\"Cargo.toml\", binding=Binding.PyO3)],\n```", "```rs\n    packages=[\"flitton_fib_rs\"],\n```", "```rs\n    classifiers=[\n```", "```rs\n            \"License :: OSI Approved :: MIT License\",\n```", "```rs\n            \"Development Status :: 3 - Alpha\",\n```", "```rs\n            \"Intended Audience :: Developers\",\n```", "```rs\n            \"Programming Language :: Python\",\n```", "```rs\n            \"Programming Language :: Rust\",\n```", "```rs\n            \"Operating System :: POSIX\",\n```", "```rs\n            \"Operating System :: MacOS :: MacOS X\",\n```", "```rs\n        ],\n```", "```rs\n    zip_safe=False,\n```", "```rs\n)\n```", "```rs\n    use pyo3::prelude::*;\n    use pyo3::wrap_pyfunction;\n    ```", "```rs\n    #[pyfunction]\n    fn say_hello() {\n        println!(\"saying hello from Rust!\");\n    }\n    ```", "```rs\n    #[pymodule]\n    fn flitton_fib_rs(_py: Python, m: &PyModule) -> \\\n      PyResult<()> {\n        m.add_wrapped(wrap_pyfunction!(say_hello));\n        Ok(())\n    }\n    ```", "```rs\n    from .flitton_fib_rs import *\n    ```", "```rs\npip install git+https://github.com/maxwellflitton/flitton-\n```", "```rs\n  fib-rs@main\n```", "```rs\nCollecting git+https://github.com/maxwellflitton\n```", "```rs\n/flitton-fib-rs@main\n```", "```rs\nCloning https://github.com/maxwellflitton/\n```", "```rs\nflitton-fib-rs (to revision main) to /private\n```", "```rs\n/var/folders/8n/\n```", "```rs\n7295fgp11dncqv9n0sk6j_cw0000gn/T/pip-req-build-kcmv4ldt\n```", "```rs\nRunning command git clone -q https:\n```", "```rs\n//github.com/maxwellflitton/flitton-fib-rs \n```", "```rs\n/private/var/folders/8n\n```", "```rs\n/7295fgp11dncqv9n0sk6j_cw0000gn/T/pip-req-build-kcmv4ldt\n```", "```rs\nInstalling collected packages: flitton-fib-rs\n```", "```rs\n  Running setup.py install for flitton-fib-rs ... done\n```", "```rs\nSuccessfully installed flitton-fib-rs-0.1\n```", "```rs\n├── flitton_fib_rs\n```", "```rs\n│   ├── __init__.py\n```", "```rs\n│   └── flitton_fib_rs.cpython-38-darwin.so\n```", "```rs\n>>> from flitton_fib_rs import say_hello\n```", "```rs\n>>> say_hello()\n```", "```rs\nsaying hello from Rust!\n```", "```rs\n├── Cargo.toml\n```", "```rs\n├── README.md\n```", "```rs\n├── flitton_fib_rs\n```", "```rs\n│   ├── __init__.py\n```", "```rs\n├── setup.py\n```", "```rs\n├── src\n```", "```rs\n│   ├── fib_calcs\n```", "```rs\n│   │   ├── fib_number.rs\n```", "```rs\n│   │   ├── fib_numbers.rs\n```", "```rs\n│   │   └── mod.rs\n```", "```rs\n│   ├── lib.rs\n```", "```rs\n    use pyo3::prelude::pyfunction;\n    #[pyfunction]\n    pub fn fibonacci_number(n: i32) -> u64 {\n        if n < 0 {\n             panic!(\"{} is negative!\", n);\n        }\n         match n {\n              0     => panic!(\"zero is not a right \\\n                       argument to fibonacci_number!\"),\n              1 | 2 => 1,\n              _     => fibonacci_number(n - 1) + \n                       fibonacci_number(n - 2)\n        }\n    }\n    ```", "```rs\n    use std::vec::Vec;\n    use pyo3::prelude::pyfunction;\n    use super::fib_number::fibonacci_number;\n    #[pyfunction]\n    pub fn fibonacci_numbers(numbers: Vec<i32>) -> \\\n      Vec<u64> {\n        let mut vec: Vec<u64> = Vec::new();\n        for n in numbers.iter() {\n            vec.push(fibonacci_number(*n));\n        }\n        return vec\n    }\n    ```", "```rs\n    pub mod fib_number;\n    pub mod fib_numbers;\n    ```", "```rs\n    mod fib_calcs;\n    use fib_calcs::fib_number::__pyo3_get_function \\\n      _fibonacci_number;\n    use fib_calcs::fib_numbers::__pyo3_get_function \\\n      _fibonacci_numbers;\n    pub mod fib_numbers;\n    ```", "```rs\n    #[pymodule]\n    fn flitton_fib_rs(_py: Python, m: &PyModule) -> \\\n      PyResult<()> {\n        m.add_wrapped(wrap_pyfunction!(say_hello));\n        m.add_wrapped(wrap_pyfunction!(fibonacci_number));\n        m.add_wrapped(wrap_pyfunction!(fibonacci_numbers);\n        Ok(())\n    }\n    ```", "```rs\n    >>> from flitton_fib_rs import fibonacci_number, \n    fibonacci_numbers\n    >>> fibonacci_number(20)\n    6765\n    >>> fibonacci_numbers([20, 21, 22])\n    [6765, 10946, 17711]\n    >>>\n    ```", "```rs\n    import argparse\n    from .flitton_fib_rs import fibonacci_number\n    def fib_number_command() -> None:\n        parser = argparse.ArgumentParser(\n            description='Calculate Fibonacci numbers')\n        parser.add_argument('--number', action='store', \\\n          type=int, required=True,help=\"Fibonacci \\\n            number to becalculated\")\n        args = parser.parse_args()\n        print(f\"Your Fibonacci number is: \"\n              f\"{fibonacci_number(n=args.number)}\")\n    }\n    ```", "```rs\n    entry_points={\n        'console_scripts': [\n            'fib-number = flitton_fib_rs.'\n            'fib_number_command:'\n            'fib_number_command',\n        ],\n    },\n    ```", "```rs\n    fib-number --number 20\n    ```", "```rs\n    Your Fibonacci number is: 6765\n    ```", "```rs\n    class Singleton(type):\n        _instances = {}\n        def __call__(cls, *args, **kwargs):\n            if cls not in cls._instances:\n                cls._instances[cls] = super(Singleton, \\\n                  cls).__call__(*args, **kwargs)\n            return cls._instances[cls]\n    ```", "```rs\n    from .singleton import Singleton\n    class Counter(metaclass=Singleton):\n        def __init__(self, initial_value: int = 0) -> \\\n          None:\n            self._value: int = initial_value\n        def increase_count(self) -> None:\n            self._value += 1\n        @property\n        def value(self) -> int:\n            return self._value\n    ```", "```rs\n    from typing import Union, List, Optional\n    from .flitton_fib_rs import fibonacci_number, \\\n        fibonacci_numbers\n    from .counter import Counter\n    ```", "```rs\n    class FlittonFibNumberAdapter:\n        def __init__(self,\n            number_input: Union[int, List[int]]) -> None:\n            self.input: Union[int, List[int]] = \\\n              number_input\n            self.success: bool = False\n            self.result: Optional[Union[int, List[int]]] \\\n              = None\n            self.error_message: Optional[str] = None\n            self._counter: Counter = Counter()\n            self._process_input()\n    ```", "```rs\n        def _define_success(self) -> None:\n            self.success = True\n            self._counter.increase_count()\n    ```", "```rs\n        def _process_input(self) -> None:\n            if isinstance(self.input, int):\n                self.result = fibonacci_number( \\\n                    n=self.input)\n                self._define_success()\n            elif isinstance(self.input, list):\n                self.result = fibonacci_numbers( \\\n                    numbers=self.input)\n                self._define_success()\n            else:\n                self.error_message = \"input needs to be \\\n                  a list of ints or an int\"\n    ```", "```rs\n        @property\n        def count(self) -> int:\n            return self._counter.value\n    ```", "```rs\n    from .fib_number_adapter import \\\n      FlittonFibNumberAdapter\n    ```", "```rs\n>>> from flitton_fib_rs import FlittonFibNumberAdapter\n```", "```rs\n>>> test = FlittonFibNumberAdapter(10)\n```", "```rs\n>>> test_two = FlittonFibNumberAdapter(15)\n```", "```rs\n>>> test_two.count\n```", "```rs\n2\n```", "```rs\n>>> test.count\n```", "```rs\n2\n```", "```rs\n>>> test_two.success\n```", "```rs\nTrue\n```", "```rs\n>>> test_two.result\n```", "```rs\n610\n```", "```rs\n    >>> test_three = FlittonFibNumberAdapter(\n                                   \"should fail\"\n                                 )\n    >>> test_three.count\n    2\n    >>> test_three.result\n    >>> test_three.success\n    False\n    >>> test_three.error_message\n    'input needs to be a list of ints or an int'\n    >>>\n    ```", "```rs\n    3, as they are all pointing to the same Counter instance and there was one failure out of the four. \n    ```", "```rs\n    >>> test.count\n    3\n    >>> test_two.count\n    3\n    >>> test_three.count\n    3\n    >>> test_four.count\n    3\n    ```", "```rs\n    #[cfg(test)]\n    mod fibonacci_number_tests {\n          use super::fibonacci_number;\n    }\n    ```", "```rs\n         #[test]\n         fn test_one() {\n              assert_eq!(fibonacci_number(1), 1);\n         }\n         #[test]\n         fn test_two() {\n              assert_eq!(fibonacci_number(2), 1);\n         }\n         #[test]\n         fn test_three() {\n               assert_eq!(fibonacci_number(3), 2);\n         }\n         #[test]\n         fn test_twenty() {\n               assert_eq!(fibonacci_number(20), 6765);\n         }\n    ```", "```rs\n          #[test]\n          #[should_panic]\n          fn test_0() {\n              fibonacci_number(0);\n          }\n          #[test]\n          #[should_panic]\n          fn test_negative() {\n              fibonacci_number(-20);\n          }\n    ```", "```rs\n    #[cfg(test)]\n    mod fibonacci_numbers_tests {\n          use super::fibonacci_numbers;\n          #[test]\n          fn test_run() {\n          let outcome = fibonacci_numbers([1, 2, 3, \\\n            4].to_vec());\n            assert_eq!(outcome, [1, 1, 2, 3]);\n          }\n    }\n    ```", "```rs\n    cargo test\n    ```", "```rs\n    running 7 tests\n    test fib_calcs::fib_number::fibonacci_number_tests::test_th\n    ree ... ok\n    test fib_calcs::fib_numbers::fibonacci_numbers_tests::test_\n    run ... ok\n    test fib_calcs::fib_number::fibonacci_number_tests::\n    test_two ... ok\n    test fib_calcs::fib_number::fibonacci_number_tests::test_on\n    e ... ok\n    test fib_calcs::fib_number::fibonacci_number_tests::\n    test_twenty ... ok\n    test fib_calcs::fib_number::fibonacci_number_tests::\n    test_negative ... ok\n    test fib_calcs::fib_number::fibonacci_number_tests::\n    test_0 ... ok\n    test result: ok. 7 passed; 0 failed; 0 ignored; 0 \n    measured; 0 \n    filtered out; finished in 0.00s\n         Running target/debug/deps/flitton_fib_rs-\n    07e3ba4b0bc8cc1e\n    running 0 tests\n    test result: ok. 0 passed; 0 failed; 0 ignored; 0 \n    measured; 0 \n    filtered out; finished in 0.00s\n       Doc-tests flitton_fib_rs\n    running 0 tests\n    test result: ok. 0 passed; 0 failed; 0 ignored; 0 \n    measured; 0 \n    filtered out; finished in 0.00s\n    ```", "```rs\n    pip install numba\n    ```", "```rs\n    from time import time\n    from flitton_fib_rs.flitton_fib_rs import \\\n      fibonacci_number\n    from numba import jit\n    ```", "```rs\n    def python_fib_number(number: int) -> int:\n        if number < 0:\n            raise ValueError(\n                \"Fibonacci has to be equal or above zero\"\n            )\n        elif number in [1, 2]:\n            return 1\n        else:\n            return numba_fib_number(number - 1) + \\\n                   numba_fib_number(number - 2)\n    ```", "```rs\n    @jit(nopython=True)\n    def numba_fib_number(number: int) -> int:\n        if number < 0:\n            raise ValueError(\"Fibonacci has to be equal \\\n              or above zero\")\n        elif number in [1, 2]:\n            return 1\n        else:\n            return numba_fib_number(number - 1) + \\\n                   numba_fib_number(number - 2)\n    ```", "```rs\n    t0 = time()\n    for i in range(0, 30):\n        numba_fib_number(35)\n    t1 = time()\n    print(f\"the time taken for numba is: {t1-t0}\")\n    t0 = time()\n    for i in range(0, 30):\n        numba_fib_number(35)\n    t1 = time()\n    print(f\"the time taken for numba is: {t1 - t0}\")\n    ```", "```rs\n    the time taken for numba is: 2.6187334060668945\n    the time taken for numba is: 2.4959869384765625\n    ```", "```rs\n    t0 = time()\n    for i in range(0, 30):\n        python_fib_number(35)\n    t1 = time()\n    print(f\"the time taken for python is: {t1 - t0}\")\n    ```", "```rs\n    the time taken for python is: 2.889884853363037\n    ```", "```rs\n    t0 = time()\n    for i in range(0, 30):\n        fibonacci_number(35)\n    t1 = time()\n    print(f\"the time taken for rust is: {t1 - t0}\")\n    ```", "```rs\n    the time taken for rust is: 0.9373788833618164\n    ```"]