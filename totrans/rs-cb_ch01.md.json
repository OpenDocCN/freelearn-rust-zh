["```rs\n curl https://sh.rustup.rs -sSf | sh\n\n```", "```rs\n curl -sf https://static.rust-lang.org/rustup.sh | sudo sh\n\n```", "```rs\nrustup self uninstall\n\n```", "```rs\nrustc --version\n\n```", "```rs\n rustup.sh prefix=my/install/dir\n\n```", "```rs\n rustup.sh save\n\n```", "```rs\n rustup.sh channel=nightly\n\n```", "```rs\n rustup.sh --channel=nightly date=2015-04-09\n\n```", "```rs\n rustup.sh --revision=1.0.0-beta\n\n```", "```rs\nrm -rf /home/viki/.rustup\n\n```", "```rs\n mkdir /home/viki/rust_cookbook\n\n```", "```rs\n cd /home/viki/rust_cookbook\n\n```", "```rs\n        fn main() {\n          println!(\"Welcome to Rust Cookbook\");\n        }\n\n```", "```rs\n        // Primitive libraries in rust\n        use std::{i8,i16,i32,i64,u8,u16,u32,u64,f32,f64,isize,usize};\n        use std::io::stdin;\n\n```", "```rs\n        fn main() {\n          println!(\"Understanding assignment\");\n          // Compiler will automatically figure out the data type if\n          not mentioned\n          // Cannot change the value\n          let num =10;\n          println!(\"Num is {}\", num);\n        }\n\n```", "```rs\n        fn main(){\n          let age: i32 =40;\n          println!(\"Age is {}\", age);\n          // Prints the max and min value of 32bit integer\n          println!(\"Max i32 {}\",i32::MAX);\n          println!(\"Max i32 {}\",i32::MIN);\n        }\n\n```", "```rs\n        // Another way of variable assigning\n        let(f_name,l_name)=(\"viki\",\"d\");\n        println!(\"First name {0} and last name {1}\",f_name,l_name);\n\n```", "```rs\n        fn main(){\n\n          //Setting boolean and character types\n          let bool_val: bool = true;\n          let x_char: char = 'a';\n\n          // Printing the character\n          println!(\"x char is {}\", x_char);\n          println!(\"Bool value is {}\", bool_val);\n        }\n\n```", "```rs\n        fn main(){\n\n          // Prints the first 2 numbers after the decimal points\n          println!(\"{:.2}\",1.2345 );\n          println!(\"================\");\n\n          // print the binary hex and octal format\n          println!(\"B: {:b} H: {:x} O: {:o}\",10,10,10 );\n          println!(\"================\");\n\n          // Shifts\n          println!(\"{ten:>ws$}\",ten=10, ws=5 );\n          println!(\"{ten:>0ws$}\",ten=10, ws=5 );\n        }\n\n```", "```rs\n        fn main(){\n          // Arithmetic Operations\n          println!(\"5 + 4 = {}\", 5+4 );\n          println!(\"5 - 4 = {}\", 5-4 );\n          println!(\"5 * 4 = {}\", 5*4 );\n          println!(\"5 / 4 = {}\", 5/4 );\n          println!(\"5 % 4 = {}\", 5%4 );\n\n          // Assigning data types and mathematical Operations\n          let neg_4 = -4i32;\n          println!(\"abs(-4) = {}\", neg_4.abs() );\n          println!(\"abs(-4) = {}\", neg_4.pow(2) );\n          println!(\"round(1.2345) = {}\", 1.2354f64.round() );\n          println!(\"ceil(1.2345) = {}\", 1.2345f64.ceil() );\n          print!(\"sin 3.14 = {}\", 3.14f64.sin() );\n        }\n\n```", "```rs\n        fn main(){\n          let mut sample_var = 10;\n          println!(“Value of the sample variable is {}”,sample_var);\n          let sample_var = 20;\n          println!(“New Value of the sample variable is {}”,sample_var);\n        }\n\n```", "```rs\n        fn main() {\n          // declaring a random string\n          let rand_string = \"I love Rust cookbook <3\";\n\n          // printing the length of the string\n          println!(\"length of the string is {}\",rand_string.len() );\n\n```", "```rs\n        // Splits in string\n        let (first,second) = rand_string.split_at(7);\n        println!(\"First part : {0} Second part : {1}\",first,second);\n\n```", "```rs\n        // Count using iterator count\n        let count = rand_string.chars().count();\n        print!(\"count {}\",count );\n\n```", "```rs\n        println!(\"__________________________\");\n        // printing all chars\n        let mut chars = rand_string.chars();\n        let mut indiv_chars = chars.next();\n        loop {\n          // Its like switch in c++\n          match indiv_chars {\n            Some(x) => println!(\"{}\",x ),\n            None => break\n          }\n          indiv_chars = chars.next();\n        }\n\n```", "```rs\n        println!(\"__________________________\");\n        // iterate over whitespace\n        let mut iter = rand_string.split_whitespace();\n        let mut indiv_word = iter.next();\n        loop {\n          // Its like switch in c++\n          match indiv_word {\n            Some(x) => println!(\"{}\",x ),\n            None => break\n          }\n          indiv_word = iter.next();\n        }\n\n```", "```rs\n        println!(\"__________________________\");\n        // iterate over next line\n        let rand_string2 = \"I love \\n everything about \\n Rust <3\";\n        let mut iter_line = rand_string2.lines();\n        let mut indiv_sent = iter_line.next();\n        loop {\n          // Its like switch in c++\n          match indiv_sent {\n            Some(x) => println!(\"{}\",x ),\n            None => break\n          }\n          indiv_sent = iter_line.next();\n        }\n        }\n\n```", "```rs\n        fn main() {\n          // Defining an array\n          let rand_array = [1,2,3];\n          println!(\"random array {:?}\",rand_array );\n\n          // indexing starts with 0\n          println!(\"random array 1st element {}\",rand_array[0] );\n          println!(\"random array length {}\",rand_array.len() );\n\n          // last two elements\n          println!(\"random array {:?}\",&rand_array[1..3] );\n        }\n\n```", "```rs\n        fn main() {\n          // declaring a vector\n          let mut vec1 = vec![1,2,3,4,5];\n\n```", "```rs\n        // printing element 3 in vector\n        println!(\"Item 3 : {}\", vec1[2]);\n\n```", "```rs\n        // iterating in a vector\n        for i in &vec1 {\n          println!(\"{}\",i )\n        }\n\n```", "```rs\n        // push an element to vector\n        vec1.push(6);\n        println!(\"vector after push {:?}\", vec1 );\n\n        // pop an element from vector\n        vec1.pop();\n        println!(\"vector after pop {:?}\", vec1 );\n        }\n\n```", "```rs\n        use std::{i8};\n        fn main() {\n\n          // Declaring a tuple\n          let rand_tuple = (\"Rust\", 2017);\n          let rand_tuple2 : (&str, i8) = (\"Viki\",4);\n\n          // tuple operations\n          println!(\" Name : {}\", rand_tuple2.0);\n          println!(\" Lucky no : {}\", rand_tuple2.1);\n        }\n\n```", "```rs\n        // Libraries in rust\n        use std::io;\n        use std::{i32};\n\n```", "```rs\n        // Main Functions\n        fn main() {\n          // Request for entering number 1\n          println!(\"Enter First number ? \");\n          let mut input1 = String::new();\n          io::stdin().read_line(&mut input1).expect(\"Failed to read\n          line\");\n\n          // Request for entering number 2\n          println!(\"Enter second number ? \");\n          let mut input2 = String::new();\n          io::stdin().read_line(&mut input2).expect(\"Failed to read\n          line\");\n\n          // Converting string to integer\n          let aint: i32 = input1.trim().parse().ok().expect(\"Program\n          only\n          processes numbers, Enter number\");\n          let bint: i32 = input2.trim().parse().ok().expect(\"Program\n          only\n          processes numbers, Enter number\");\n\n          // Output of basic operations\n          println!(\"sum is: {}\", aint + bint);\n          println!(\"difference is: {}\", aint - bint);\n          println!(\"Multiply is: {}\", aint * bint);\n          println!(\"division is: {}\", aint / bint);\n        }\n\n```"]