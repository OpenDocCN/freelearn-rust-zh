- en: Advanced Web Development in Rust
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be covering the following recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving user data in MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching user data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting user data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a RESTful API web service using open source
    crates in the Rust language. The simple RESTful API in Rust will connect to a
    MongoDB service, which provides an end-to-end API solution.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at how to perform `GET`, `POST`, and `DELETE` requests on user
    data from an endpoint. The crates, `nickel.rs` and the MongoDB Rust driver, make
    it possible to create these actions in the Rust language.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn the steps through which we can install all the
    dependencies, such as nickel crate, to set up, and create the API, in our Rust
    project. You will also learn the commands required to set up the basic REST API
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to install the following nickel and MongoDB crates before we can
    go ahead and create the REST API. Follow the steps given to download and set up
    nickel and the other crate for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: We will require the Rust compiler and any text editor to develop the Rust code
    snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Rust project using the `cargo` command-line tool, and enter the newly
    created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/512cf565-9e68-4877-aa0a-64698c75276e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Cargo.toml` file in your favorite text editor and make the modifications
    shown in the following screenshot. Here, we are using the nickel crate, which
    is entered in the dependencies field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07c90ba1-3f49-47fe-a0df-be9e652b8cad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the crate in your project with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following screenshot as output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0215c6f6-5481-463f-8310-889598705abf.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.rs` file in the `src` directory in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the code header with the relevant information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the installed nickel crate by using the `extern` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function in which we declare the `server` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `GET` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `POST` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `DELETE` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare the port at which the services will be started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and start the server with the following command from the root
    directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output on the successful execution of our code in
    the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ea86c97-3340-497f-b701-95a8a6726b5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We make a `GET` request to `http://127.0.0.1:9000/users`, which returns `Hello
    from GET /users` from the web service created using the nickel web application
    framework, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35e4d971-4dd5-42a5-a1d9-f78b8d5135f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We make a `POST` request to `http://127.0.0.1:9000/users/new`, which returns
    `Hello from POST /users/new` from the web service created using the nickel web
    application framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7fdfd28-1166-41c7-938b-4656f766c718.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We make a `DELETE` request to `http://127.0.0.1:9000/users/:id`, which returns
    `Hello from DELETE /users/:id` from the web service created using the nickel web
    application framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69efb63b-b7dd-4289-9065-1bf0008e2397.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we created the basic skeleton of our REST API service, where
    we have all our endpoints set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our API will have three endpoints, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/users`: Here, we will hit out the `GET` request, which retrieves the `firstname`
    field of all the users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/users/new`: The `POST` request to this endpoint creates and saves a new user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/users/:id`: The `DELETE` method will delete a user based on the record''s
    `ObjectId`, which is the unique ID obtained from the MongoDB database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will activate all these endpoints in the following recipes with their exact
    behavior, but currently, these will only display a sample message when the user
    hits the endpoint with the corresponding requests.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the top, we're referencing the external nickel crate using the `extern`
    keyword and loading all of its macros with `#[macro_use]`. The nickel is the application
    object and the surface that holds all the public APIs; it's a struct, which implements
    all the fundamental methods for performing all the web application tasks. The
    other crates, such as bson, rustc-serialize, and MongoDB, which we downloaded
    initially using the `cargo` tool, will be used in the following recipes to activate
    the functionalities in the endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: In the `main` function, we first assign the `server` instances to a mutable
    variable and create a new nickel application object using `Nickel::new()`, which
    creates an instance of the nickel with default error handling. Similarly, we create
    a mutable router instance and assign it to `Nickel::router()`, which will take
    care of handling the different endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'We set up our endpoint routing using different methods, such as `get()`, `post()`,
    and `delete()`, of the `router` instance and provide a simple message in the `format!`
    macro to be displayed when these endpoints are accessed. The messages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/users`: The `GET` request will get `Hello from GET /users`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/users/new`: The `POST` request will get `Hello from POST /users/new`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/users/:id`: The `DELETE` request will get `Hello from DELETE /users/:id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `middleware!` macro is provided by `nickel.rs` and reduces the amount of
    boilerplate code needed for each route. Double-pipe characters represent the closure
    in Rust, and this is where our `request` and `response` parameters are placed.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `server.utilize` method, we add the endpoints to the `server` instance
    and register the handler that will be invoked among other handlers before each
    request, by passing the `router` instance. The `server.listen` method listens
    to the API requests on `127.0.0.1:9000`, where it binds and listens for connections
    on the given host and port.
  prefs: []
  type: TYPE_NORMAL
- en: Saving user data in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will go a step ahead and rewrite the logic for the `POST`
    request, which will take the user data and save it in the MongoDB database, for
    which we will use the MongoDB Rust driver for interacting with the DB.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to install the following nickel and MongoDB crates before we can
    go ahead and create the REST API. Follow these steps to download and set up nickel
    and the MongoDB service in the project:'
  prefs: []
  type: TYPE_NORMAL
- en: We will require the Rust compiler and any text editor to develop the Rust code
    snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Rust project using the `cargo` command-line tool and enter the newly
    created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01b6b8eb-786b-48dc-9e44-7a905ee6bdbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Cargo.toml` file in your favorite text editor and make the modification
    as shown in the following screenshot. Here, we are using the nickel crate, which
    is entered in the dependencies field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/06847d30-c762-41a9-bc0a-5e07beda174c.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Install the crate in your project with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up the MongoDB service in your Linux system by following these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the mentioned steps to implement this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.rs` file in the `src` directory in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the code header with the relevant information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Import all the required installed nickel and other supporting crates by using
    the `extern` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a `struct` named `User`, which is encodable and decodable and which
    models our user data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function, where we''ll declare the `server` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `GET` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `POST` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `DELETE` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare the port at which the services will be started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and start the server with the following command from the root
    directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following screenshot as output on the successful execution
    of our code in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf635a8e-3e72-44a2-9218-d2626d197c96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We submit a `POST` request to `http://127.0.0.1:9000/users/new` with a body,
    as shown in the following screenshot containing the user data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4cf43a29-ef65-46e0-aeeb-81425af34c00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On a successful API call, the web service built using the nickel web application
    framework returns a message `Item saved!`, which is an indication of the data
    being saved in the MongoDB configuration mentioned in the code. Take a look at
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca61d191-4f47-4164-a379-4da0c297ce8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to validate whether the `POST` request was successful, we can verify
    the record from the MongoDB database, where we can select the `rust-cookbook`
    database and the `users` collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5bbc9da-a7e7-463c-bef6-2a88eb31573c.png)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we focused on getting the user data and saving it to the database.
    We activated `POST` requests to the `/users/new` endpoint for creating and saving
    a new user.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the top, we referenced the external nickel crate using the `extern`
    keyword and loaded all of its macros with `#[macro_use]`. The nickel is the application
    object and surface that holds all the public APIs; it's a struct, which implements
    all the fundamental methods for performing all the web application tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the `main` function, we first assign `server` mutable instances to a mutable
    variable and create a new nickel application object with `Nickel::new()`, which
    creates an instance of nickel with default error handling. Similarly, we create
    a mutable router instance and assign it to `Nickel::router()`, which will take
    care of handling the different endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: The MongoDB Rust driver provides a nice interface for interacting with databases,
    collections, and cursors, with which we can establish a database connection for
    creating, reading, updating, and deleting user data in our application.
  prefs: []
  type: TYPE_NORMAL
- en: We will be getting the `POST /users/new` route working, for which we will be
    using the different crates that we downloaded initially, which are the units of
    `rustc_serialize`, `bson`, and `MongoDB`.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we create a complex data structure, which is a `User` struct that is
    encodable and decodable and that represents our user data fields.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to send a JSON string input from the user end and convert the input
    data to the `User` struct by creating some variables that can hold the data. The
    `unwrap` method is one of the several ways that Rust provides for assigning a
    value. The unwrapped data from the user input is saved to variables `firstname`,
    `lastname`, and `email`. The next step is to establish a connection with the MongoDB
    service so that we can store the data that we just parsed from the input string.
    We achieve this with `Client::connect("localhost", 27017)`, where `27017` is the
    port in which the MongoDB service is running. The `coll` variable connected the
    particular collection in the database with `client.db("rust-cookbook").collection("users")`,
    where `rust-cookbook` is the database and `users` is the collection.
  prefs: []
  type: TYPE_NORMAL
- en: We can see the `match` statement at work when we use `coll.insert_doc` to insert
    the user data. In the `Ok` condition, we respond with a success message, which
    is `Item saved`, and in the `Err` condition, we respond with an error.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `server.utilize` method, we add the endpoints to the server instance
    and register the handler, which will be invoked among other handlers before each
    request by passing the `router` instance. The `server.listen` method listens to
    the API requests on `127.0.0.1:9000`, where it binds and listens for connections
    on the given host and port.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching user data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn the steps with which we can install all the dependencies,
    such as the nickel crate, to set up and create the API, and the MongoDB Rust driver
    to interact with the database in our Rust project. You will also learn the commands
    with which you can get all the specific data required from the database. The `GET`
    request will fetch the `firstname` field's data, which was previously saved in
    the database, using the `POST` method.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to install the following nickel and MongoDB crates before we can
    go ahead and create the REST API. Follow these steps to download and set up nickel
    and the MongoDB service in the project:'
  prefs: []
  type: TYPE_NORMAL
- en: We will require the Rust compiler and any text editor to develop the Rust code
    snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Rust project using the `cargo` command-line tool and enter the newly
    created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/d1503520-ddaa-491c-a637-27e8aaeb213e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Cargo.toml` file in your favorite text editor and make the modification
    as shown in the following screenshot. Here, we are using the nickel crate, which
    is entered in the dependencies field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99e1c63b-fde4-4890-a2ef-09d179b9b594.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Install the crate in your project with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up the MongoDB service in your system by following these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the mentioned steps to implement this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.rs` file in the `src` directory in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the code header with the relevant information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Import all the required installed nickel and other supporting crates by using
    the `extern` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a `struct` named `User`, which is encodable and decodable and which
    models our user data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function in which we declare the `server` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `GET` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `POST` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `DELETE` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare the port at which the services will be started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and start the server with the following command from the root
    directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output on the successful execution of our code in
    the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/435cb018-6bac-4547-816d-7c604fcd9ee5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We submit a `GET` request to `http://127.0.0.1:9000/users`, as shown in the
    following screenshot, which fetches the user data on a successful API call, which
    returns `{"data":[VIKI,]}` from the web service created using the nickel web application
    framework. The data is fetched from the MongoDB records from the previous recipe
    where we store this data in the `rust-cookbook` database, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93f02bc5-2d39-489f-b11e-f67253cc5b83.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we focused on getting previously-saved user data from the database.
    We activated `GET` requests to the `/users` endpoint for getting the data.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the top, we referenced the external nickel crate using the `extern`
    keyword and loaded all of its macros with `#[macro_use]`. The nickel is the application
    object and surface that holds all the public APIs. It's a struct that implements
    all the fundamental methods for performing all the web application tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the `main` function, we first assign `server` mutable instances to a mutable
    variable and create a new nickel application object with `Nickel::new()`, which
    creates an instance of nickel with default error handling. Similarly, we create
    a mutable router instance and assign it to `Nickel::router()`, which will take
    care of handling the different endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: We will be getting the `GET/users` route working, for which we will be using
    the different crates that we downloaded initially, which are the units of `rustc_serialize`,
    `bson`, and `MongoDB`.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we create a complex data structure, which is a `User` struct that is
    encodable and decodable and that represents our user data fields.
  prefs: []
  type: TYPE_NORMAL
- en: We first establish a connection with the MongoDB service so that we can store
    our data, which we just parsed from the input string. We achieve this with `Client::connect("localhost",
    27017)`, where `27017` is the port in which the MongoDB service is running, and
    the `coll` variable connected the particular collection in the database with `client.db("rust-cookbook").collection("users")`,
    where `rust-cookbook` is the database and `users` is the collection. Then, we
    have to read through all the values in the collection, for which we create `cursor`,
    a mutable instance that uses the `find` method to get all the documents in the
    `users` collection. We create a `data_result` instance, which is a JSON string
    that will be returned to the user after getting all the data from the collections.
    We then iterate over `result` with a `for` loop, where we collect the `i` index
    and the `Bson` form document with the cursor's `enumerate` method. We convert
    the value returned, which is of the `Option<Result<Document>` type. We stringify
    the `firstname` field of the `item` instance using `Bson`, and push the results
    to the `data_result` string. In the end, we close it off the post, which we send
    back to the user in the `format!` macro.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `server.utilize` method, we add the endpoints to the server instance
    and register the handler that will be invoked among other handlers before each
    request by passing the `router` instance. The `server.listen` method listens to
    the API requests on `127.0.0.1:9000`, where it binds and listens for connections
    on the given host and port.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting user data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn the steps with which you can install all the
    dependencies, such as nickel crate, to set up and create the API, and the MongoDB
    Rust driver to interact with the database in our Rust project. You will also learn
    the commands with which you can get all the specific data required from the database.
    The `GET` request will fetch the `firstname` field's data, which was previously
    saved in the database by the `POST` method, and then, we will delete the fetched
    object, which makes this process an end-to-end REST API service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to install the following nickel and MongoDB crates before we can
    go ahead and create the REST API. Follow these steps to download and set up nickel
    and the MongoDB service in the project:'
  prefs: []
  type: TYPE_NORMAL
- en: We will require the Rust compiler and any text editor to develop the Rust code
    snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Rust project using the `cargo` command-line tool, and enter the newly
    created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/723686d2-1ecf-45c9-978f-0409eda3e6bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Cargo.toml` file in your favorite text editor and make the modification
    as shown in the following screenshot. Here, we are using the nickel crate, which
    is entered in the dependencies field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31b734ce-ea56-4c61-878e-4425763a5893.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the crate in your project with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up the MongoDB service in your system by following these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.rs` file in the `src` directory in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the code header with the relevant information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Import all the required installed nickel and other supporting crates by using
    the `extern` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a `struct` named `User`, which is encodable and decodable and which
    models our user data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function in which we declare the `server` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `GET` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `POST` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `DELETE` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare the port at which the services will be started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and start the server with the following command from the root
    directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following screenshot as output on the successful execution
    of our code in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c5e52e3c-98e7-45c8-9297-f02833c4b741.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We find the `ObjectID` of the user data saved, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb54cf04-3237-4e29-a361-7f265f221be6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We submit a `DELETE` request to `http://127.0.0.1:9000/objectID`, as shown
    in the following screenshot, which deletes the user data on successful API calls,
    which returns `Item deleted!` from the web service created using the nickel web
    application framework, which deleted the data in MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e1511b0-0a04-4a3e-9b24-144983103d11.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we focused on deleting the user data that was saved in the database.
    We activated `DELETE` requests to the `/users/:id` endpoint for deleting the previous
    records by the object ID.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the top, we referenced the external nickel crate using the `extern`
    keyword and loaded all of its macros with `#[macro_use]`. The nickel is the application
    object and surface that holds all public APIs. It's a struct, which implements
    all the fundamental methods for performing all the web application tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the `main` function, we first assign `server` mutable instances to a mutable
    variable and create a new nickel application object with `Nickel::new()`, which
    creates an instance of nickel with default error handling. Similarly, we create
    a mutable router instance and assign it to `Nickel::router()`, which will take
    care of handling the different endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: We will be getting the `DELETE /users/:id` route working, for which we will
    be using the different crates that we downloaded initially, which are the units
    of `rustc_serialize`, `bson`, and `MongoDB`.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we create a complex data structure, which is a `User` struct that is
    encodable and decodable and that represents our user data fields.
  prefs: []
  type: TYPE_NORMAL
- en: This is the final step for this end-to-end API, where we allow the `users` collection
    elements to be deleted by their `objectId`. We can do this with the MongoDB Rust
    driver's `delete_one` method.
  prefs: []
  type: TYPE_NORMAL
- en: We first establish a connection with the MongoDB service so that we can store
    our data, which we just parsed from the input string. We achieve this with `Client::connect("localhost",
    27017)`, where `27017` is the port in which the MongoDB service is running, and
    the `coll` variable connected the particular collection in the database with `client.db("rust-cookbook").collection("users")`,
    where `rust-cookbook` is the database and `users` is the collection.
  prefs: []
  type: TYPE_NORMAL
- en: We get the `objectId` from the request parameters and assign it to `object_id`
    with `request.param("id").unwrap()`. Then, we use the `ObjectId::with_string`
    helper to decode the string representation of the `objectId`, after which it can
    be used in the `delete_one` method to remove the document for that user. With
    the `DELETE /users/:id` route in place, we should be able to remove `users` from
    the database when we make a request to it and include `objectId` as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `server.utilize` method, we add the endpoints to the server instance
    and register the handler that will be invoked among other handlers before each
    request, by passing the `router` instance. The `server.listen` method listens
    to the API requests on `127.0.0.1:9000`, where it binds and listens for connections
    on the given host and port.
  prefs: []
  type: TYPE_NORMAL
- en: Consider posting multiple data entries using the `POST` web service to store
    data values in the MongoDB with different `ObjectID`, and delete them using the
    service developed in this recipe to better understand the delete web service working.
  prefs: []
  type: TYPE_NORMAL
