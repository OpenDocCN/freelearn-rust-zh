["```rs\n$ cargo install acme-client\n```", "```rs\n[package]\nauthors = [\"Foo <foo@bar.com>\"]\nname = \"rocket-blog\"\nversion = \"0.1.0\"\n\n[dependencies]\nrocket = { version=\"0.3.5\", features = [\"tls\"] }\nrocket_codegen = \"0.3.5\"\nrocket_contrib = \"0.3.5\"\ndiesel = { version = \"0.16.0\", features = [\"sqlite\"] }\ndiesel_codegen = { version = \"0.16.0\", features = [\"sqlite\"] }\ndotenv = \"0.10.1\"\nserde = \"1.0.21\"\nserde_json = \"1.0.6\"\nserde_derive = \"1.0.21\"\nlazy_static = \"0.2.11\"\nr2d2 = \"0.7.4\"\nr2d2-diesel = \"0.16.0\"\n```", "```rs\n$ cat Rocket.toml\n[global]\naddress = \"0.0.0.0\"\n```", "```rs\n$ DATABASE_URL=./db.sql cargo run\n```", "```rs\n$ acme-client -vvvvv sign --dns -D my.domain.io -P /var/www -o domain.crt\nINFO:acme_client: Registering account\nDEBUG:acme_client: User successfully registered\nINFO:acme_client: Sending identifier authorization request for foo.datasine.com\nPlease create a TXT record for _acme-challenge.my.domain.io: MFfatN9I3UFQk2WP_f1uRWi4rLnr4qMVaI\nPress enter to continue\n\nINFO:acme_client: Triggering dns-01 validation\nDEBUG:acme_client: Status is pending, trying again...\nINFO:acme_client: Signing certificate\nDEBUG:acme_client: Certificate successfully signed\n```", "```rs\n$ dig _acme-challenge.my.domain.io TXT\n\n; <<>> DiG 9.9.7-P3 <<>> _acme-challenge.my.domain.io TXT\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 49153\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 8192\n;; QUESTION SECTION:\n;_acme-challenge.my.domain.io. IN TXT\n\n;; ANSWER SECTION:\n_acme-challenge.my.domain.io. 60 IN TXT \"MFfatN9I3UFQk2WP_f1uRWi4rLnr4qMVaI\"\n\n;; Query time: 213 msec\n;; SERVER: 192.168.0.1#53(192.168.0.1)\n;; WHEN: Fri Jan 05 18:04:01 GMT 2018\n;; MSG SIZE rcvd: 117\n```", "```rs\n$ openssl x509 -in domain.crt -subject -issuer -noout\nsubject= /CN=my.domain.io\nissuer= /C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3\n```", "```rs\n$ curl -sS -D - https://my.domain.io:8000/posts\nHTTP/1.1 200 OK\nContent-Type: application/json\nServer: Rocket\nContent-Length: 992\nDate: Fri, 05 Jan 2018 18:37:58 GMT\n\n[{\"id\":1,\"title\":\"test\",\"body\":\"test body\",\"pinned\":true},{\"id\":2,\"title\":\"Hello Rust!\",\"body\":\"Rust is awesome!!\",\"pinned\":true},{\"id\":3,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":4,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":5,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":6,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":7,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":8,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":9,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":10,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":11,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":12,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":13,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true}]\n```", "```rs\n$ cargo new --bin rustls-client\n```", "```rs\n[package]\nname = \"rustls-client\"\nversion = \"0.1.0\"\nauthors = [\"Foo <foo@bar.com>\"]\n\n[dependencies]\nrustls = \"0.12.0\"\nwebpki = \"0.18.0-alpha\"\nwebpki-roots = \"0.14.0\"\n```", "```rs\n// ch8/rustls-client/src/main.rs\n\nuse std::sync::Arc;\n\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\n\nextern crate rustls;\nextern crate webpki;\nextern crate webpki_roots;\n\nfn main() {\n    let mut tls = rustls::ClientConfig::new();\n    tls.root_store.add_server_trust_anchors\n    (&webpki_roots::TLS_SERVER_ROOTS);\n\n    let name = webpki::DNSNameRef::try_from_ascii_str(\"my.domain.io\")\n    .expect(\"Could not resolve name\");\n    let mut sess = rustls::ClientSession::new(&Arc::new(tls), name);\n    let mut conn = TcpStream::connect(\"my.domain.io:8000\").unwrap();\n    let mut stream = rustls::Stream::new(&mut sess, &mut conn);\n    stream.write(concat!(\"GET /posts HTTP/1.1\\r\\n\",\n                      \"Connection: close\\r\\n\",\n                      \"\\r\\n\")\n              .as_bytes())\n        .expect(\"Could not write request\");\n    let mut plaintext = Vec::new();\n    stream.read_to_end(&mut plaintext).expect(\"Could not read\");\n    println!(\"{}\", String::from_utf8(plaintext)\n    .expect(\"Could not print output\"));\n}\n```", "```rs\nHTTP/1.1 200 OK\nContent-Type: application/json\nServer: Rocket\nContent-Length: 992\nDate: Fri, 05 Jan 2018 18:37:58 GMT\n\n[{\"id\":1,\"title\":\"test\",\"body\":\"test body\",\"pinned\":true},{\"id\":2,\"title\":\"Hello Rust!\",\"body\":\"Rust is awesome!!\",\"pinned\":true},{\"id\":3,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":4,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":5,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":6,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":7,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":8,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":9,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":10,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":11,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":12,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true},{\"id\":13,\"title\":\"Testing this\",\"body\":\"Try to write something\",\"pinned\":true}]\n```", "```rs\n$ cargo new --bin openssl-example\n```", "```rs\n[package]\nname = \"openssl-example\"\nversion = \"0.1.0\"\nauthors = [\"Foo <foo@bar.com>\"]\n\n[dependencies]\nopenssl = { git = \"https://github.com/sfackler/rust-openssl\" }\n```", "```rs\n// ch8/openssl-example/src/main.rs\n\nextern crate openssl;\n\nuse std::env;\nuse std::fs::File;\nuse std::io::Write;\n\nuse openssl::x509::{X509, X509Name};\nuse openssl::nid::Nid;\nuse openssl::pkey::{PKey, Private};\nuse openssl::rsa::Rsa;\nuse openssl::error::ErrorStack;\nuse openssl::asn1::Asn1Time;\nuse openssl::bn::{BigNum, MsbOption};\nuse openssl::hash::MessageDigest;\n\nfn create_cert() -> Result<(X509, PKey<Private>), ErrorStack> {\n    let mut cert_builder = X509::builder()?;\n    cert_builder.set_version(2)?;\n\n    let serial_number = {\n        let mut serial = BigNum::new()?;\n        serial.rand(160, MsbOption::MAYBE_ZERO, false)?;\n        serial.to_asn1_integer()?\n    };\n    cert_builder.set_serial_number(&serial_number)?;\n\n    let mut name = X509Name::builder()?;\n    name.append_entry_by_text(\"C\", \"UK\")?;\n    name.append_entry_by_text(\"CN\", \"Our common name\")?;\n    let cert_name = name.build();\n    cert_builder.set_issuer_name(&cert_name)?;\n\n    let not_before = Asn1Time::days_from_now(0)?;\n    cert_builder.set_not_before(&not_before)?;\n\n    let not_after = Asn1Time::days_from_now(365)?;\n    cert_builder.set_not_after(&not_after)?;\n\n    cert_builder.set_subject_name(&cert_name)?;\n\n    let private_key = PKey::from_rsa(Rsa::generate(3072)?)?;\n    cert_builder.set_pubkey(&private_key)?;\n\n    cert_builder.sign(&private_key, MessageDigest::sha512())?;\n    let cert = cert_builder.build();\n\n    Ok((cert, private_key))\n}\n\nfn main() {\n    if let Some(arg) = env::args().nth(1) {\n        let (cert, _key) = create_cert().expect(\"could not create\n        cert\");\n        let cert_data = cert.to_pem().expect(\"could not convert cert\n        to pem\");\n\n        let mut cert_file = File::create(arg)\n        .expect(\"could not create cert file\");\n        cert_file\n            .write_all(&cert_data)\n            .expect(\"failed to write cert\");\n\n        let subject = cert.subject_name();\n        let cn = subject\n            .entries_by_nid(Nid::COMMONNAME)\n            .next()\n            .expect(\"failed to get subject\");\n        println!(\"{}\",String::from_utf8(cn.data()\n        .as_slice().to_vec()).unwrap()\n        );\n    } else {\n        eprintln!(\"Expected at least one argument\");\n        std::process::exit(1);\n    }\n}\n```", "```rs\n$ cargo run bar.crt\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/openssl-example bar.crt`\nOur common name\n$ ls -la bar.crt\n-rw-r--r--+ 1 Abhishek staff 1399 19 Feb 22:02 bar.crt\n```", "```rs\n$ cargo new --bin tokio-tls-example\n```", "```rs\n[package]\nname = \"tokio-tls-example\"\nversion = \"0.1.0\"\nauthors = [\"Foo <foo@bar.com>\"]\n\n[dependencies]\nhyper = \"0.11.7\"\nfutures = \"0.1.17\"\nnet2 = \"0.2.31\"\ntokio-core = \"0.1.10\"\nnum_cpus = \"1.0\"\nnative-tls = \"*\"\ntokio-service = \"*\"\ntokio-proto = \"*\"\ntokio-tls = { version = \"0.1\", features = [\"tokio-proto\"] }\n```", "```rs\n$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365\n```", "```rs\n$ openssl pkcs12 -export -out cert.pfx -inkey key.pem -in cert.pem\n```", "```rs\n// ch8/tokio-tls-example/src/main.rs\n\nextern crate futures;\nextern crate hyper;\nextern crate native_tls;\nextern crate tokio_proto;\nextern crate tokio_service;\nextern crate tokio_tls;\n\nuse std::io;\nuse std::{thread, time};\nuse futures::future::{ok, Future};\nuse hyper::server::Http;\nuse hyper::header::ContentLength;\nuse hyper::{Request, Response, StatusCode};\nuse native_tls::{Pkcs12, TlsAcceptor};\nuse tokio_proto::TcpServer;\nuse tokio_service::Service;\nuse tokio_tls::proto;\n\nfn heavy_work() -> String {\n    let duration = time::Duration::from_millis(100);\n    thread::sleep(duration);\n    \"done\".to_string()\n}\n\nstruct SlowMo;\n\nimpl Service for SlowMo {\n    type Request = Request;\n    type Response = Response;\n    type Error = io::Error;\n    type Future = Box<Future<Item = Response, Error = io::Error>>;\n\n    fn call(&self, req: Request) -> Self::Future {\n        let b = heavy_work().into_bytes();\n        println!(\"Request: {:?}\", req);\n        Box::new(ok(Response::new()\n            .with_status(StatusCode::Ok)\n            .with_header(ContentLength(b.len() as u64))\n            .with_body(b)))\n    }\n}\n\nfn main() {\n    let raw_cert = include_bytes!(\"../cert.pfx\");\n    let cert = Pkcs12::from_der(raw_cert, \"foobar\").unwrap();\n    let acceptor = TlsAcceptor::builder(cert).unwrap().build().unwrap();\n    let proto = proto::Server::new(Http::new(), acceptor);\n    let addr = \"0.0.0.0:9999\".parse().unwrap();\n    let srv = TcpServer::new(proto, addr);\n    println!(\"Listening on {}\", addr);\n    srv.serve(|| Ok(SlowMo));\n}\n```", "```rs\n$ curl -k https://localhost:9999\ndone\n```", "```rs\n$ cargo run\n   Compiling rustls-example v0.1.0 (file:///src/ch8/rustls-example)\n    Finished dev [unoptimized + debuginfo] target(s) in 3.14 secs\n     Running `target/debug/rustls-example`\nListening on 0.0.0.0:9999\nRequest: Request { method: Get, uri: \"/\", version: Http11, remote_addr: None, headers: {\"Host\": \"localhost:9999\", \"User-Agent\": \"curl/7.57.0\", \"Accept\": \"*/*\"} }\n^C\n```", "```rs\n$ openssl s_client -connect 127.0.0.1:9999\nCONNECTED(00000003)\ndepth=0 C = UK, ST = Scotland, O = Internet Widgits Pty Ltd\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 C = UK, ST = Scotland, O = Internet Widgits Pty Ltd\nverify return:1\n---\nCertificate chain\n 0 s:/C=UK/ST=Scotland/O=Internet Widgits Pty Ltd\n   i:/C=UK/ST=Scotland/O=Internet Widgits Pty Ltd\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\nsubject=/C=UK/ST=Scotland/O=Internet Widgits Pty Ltd\nissuer=/C=UK/ST=Scotland/O=Internet Widgits Pty Ltd\n---\nNo client certificate CA names sent\nPeer signing digest: SHA256\nServer Temp Key: ECDH, P-256, 256 bits\n---\nSSL handshake has read 2128 bytes and written 433 bytes\n---\nNew, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES256-GCM-SHA384\nServer public key is 4096 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nSSL-Session:\n    Protocol : TLSv1.2\n    Cipher : ECDHE-RSA-AES256-GCM-SHA384\n    Session-ID: 9FAB89D29DB02891EF52C825AC23E3A658FDCE228A1A7E4FD97652AC3A5E24F3\n    Session-ID-ctx:\n    Master-Key: 940EF0C4FA1A929133C2D273739C8042FAF1BD5057E793ED1D7A0F0187F0236EF9E43D236DF8C17D663D7B77F1B4CEDD\n    Key-Arg : None\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    Start Time: 1515350045\n    Timeout : 300 (sec)\n    Verify return code: 18 (self signed certificate)\n---\nGET / HTTP/1.1\nhost: foobar\n\nHTTP/1.1 200 OK\nContent-Length: 4\nDate: Sun, 07 Jan 2018 18:34:52 GMT\n\ndone\n```", "```rs\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/tokio-tls-example`\nListening on 0.0.0.0:9999\nRequest: Request { method: Get, uri: \"/\", version: Http11, remote_addr: None, headers: {\"Host\": \"foobar\"} }\n```", "```rs\n$ cargo new key-exchange\n```", "```rs\n[package]\nname = \"key-exchange\"\nversion = \"0.1.0\"\nauthors = [\"Foo <foo@bar.com>\"]\n\n[dependencies]\nring = \"0.12.1\"\nuntrusted = \"0.5.1\"\n```", "```rs\n// ch8/key-exchange/examples/client.rs\n\nextern crate ring;\nextern crate untrusted;\n\nuse std::net::TcpStream;\nuse std::io::{BufRead, BufReader, Write};\n\nuse ring::{agreement, rand};\nuse untrusted::Input;\n\nfn main() {\n    let mut stream = TcpStream::connect(\"127.0.0.1:8888\")\n    .expect(\"Could not connect to server\");\n\n    let rng = rand::SystemRandom::new();\n\n    // Generate the client's private key\n    let client_private_key =\n    agreement::EphemeralPrivateKey::generate(&agreement::X25519, &rng)\n                            .expect(\"Failed to generate key\");\n    let mut client_public_key = [0u8; agreement::PUBLIC_KEY_MAX_LEN];\n    let client_public_key = &mut\n    client_public_key[..client_private_key.public_key_len()];\n\n    // Generate the client's public key\n    client_private_key.compute_public_key\n    (client_public_key).expect(\"Failed to\n    generate key\");\n\n    // Send client's public key to server\n    stream.write(client_public_key)\n    .expect(\"Failed to write to server\");\n\n    let mut buffer: Vec<u8> = Vec::new();\n    let mut reader = BufReader::new(&stream);\n\n    // Read server's public key\n    reader.read_until(b'\\n', &mut buffer)\n    .expect(\"Could not read into buffer\");\n    let peer_public_key = Input::from(&buffer);\n\n    println!(\"Received: {:?}\", peer_public_key);\n\n    // Generate shared secret key\n    let res = agreement::agree_ephemeral\n    (client_private_key, &agreement::X25519,\n    peer_public_key,\n    ring::error::Unspecified,\n    |key_material| {\n        let mut key = Vec::new();\n        key.extend_from_slice(key_material);\n        Ok(key)\n    });\n\n    println!(\"{:?}\", res.unwrap());\n}\n```", "```rs\n// ch8/key-exchange/src/examples/server.rs\n\nextern crate ring;\nextern crate untrusted;\n\nuse std::net::{TcpListener, TcpStream};\nuse std::thread;\nuse std::io::{Read, Write};\n\nuse ring::{agreement, rand};\nuse untrusted::Input;\nuse ring::error::Unspecified;\n\nfn handle_client(mut stream: TcpStream) -> Result<(), Unspecified> {\n    let rng = rand::SystemRandom::new();\n\n    // Generate server's private key\n    let server_private_key =\n    agreement::EphemeralPrivateKey::generate\n    (&agreement::X25519, &rng)?;\n    let mut server_public_key = [0u8; agreement::PUBLIC_KEY_MAX_LEN];\n    let server_public_key = &mut\n    server_public_key[..server_private_key.public_key_len()];\n\n    // Generate server's public key\n    server_private_key.compute_public_key(server_public_key)?;\n\n    let mut peer_public_key_buf = [0u8; 32];\n\n    // Read client's public key\n    stream.read(&mut peer_public_key_buf).expect(\"Failed to read\");\n    let peer_public_key = Input::from(&peer_public_key_buf);\n\n    println!(\"Received: {:?}\", peer_public_key);\n\n    // Send server's public key\n    stream.write(&server_public_key)\n    .expect(\"Failed to send server public key\");\n\n    // Generate shared secret key\n    let res = agreement::agree_ephemeral(server_private_key,\n                                        &agreement::X25519,\n                                        peer_public_key,\n                                        ring::error::Unspecified,\n                                        |key_material| {\n        let mut key = Vec::new();\n        key.extend_from_slice(key_material);\n        Ok(key)\n    });\n\n    println!(\"{:?}\", res.unwrap());\n\n    Ok(())\n}\n\nfn main() {\n    let listener = TcpListener::bind(\"0.0.0.0:8888\").expect(\"Could not bind\");\n    for stream in listener.incoming() {\n        match stream {\n            Err(e) => { eprintln!(\"failed: {}\", e) }\n            Ok(stream) => {\n                thread::spawn(move || {\n                    handle_client(stream)\n                    .unwrap_or_else(|error| eprintln!(\n                    \"{:?}\", error));\n                });\n            }\n        }\n    }\n}\n```", "```rs\n$ cargo run --example server\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/examples/server`\nReceived: Input { value: Slice { bytes: [60, 110, 82, 192, 131, 173, 255, 92, 134, 0, 185, 186, 87, 178, 51, 71, 136, 201, 15, 179, 204, 137, 125, 32, 87, 94, 227, 209, 47, 243, 75, 73] } }\nGenerated: [184, 9, 123, 15, 139, 191, 170, 9, 133, 143, 81, 45, 254, 15, 234, 12, 223, 57, 131, 145, 127, 231, 93, 101, 92, 251, 163, 179, 219, 24, 81, 111]\n```", "```rs\n$ cargo run --example client\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/examples/client`\nReceived: Input { value: Slice { bytes: [83, 44, 93, 28, 132, 238, 70, 152, 163, 73, 185, 146, 142, 5, 172, 255, 219, 52, 51, 151, 99, 134, 35, 98, 154, 192, 210, 137, 141, 167, 60, 67] } }\nGenerated: [184, 9, 123, 15, 139, 191, 170, 9, 133, 143, 81, 45, 254, 15, 234, 12, 223, 57, 131, 145, 127, 231, 93, 101, 92, 251, 163, 179, 219, 24, 81, 111]\n```"]