- en: '*Chapter 12*: Testing Your Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensuring that a program runs correctly is an important part of programming.
    In this chapter, we are going to learn about testing the Rust application. We
    are going to implement a simple unit test for a function, and a functional test
    for creating a user in our application.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to learn a simple technique to debug and find where a problem occurs
    in our code.
  prefs: []
  type: TYPE_NORMAL
- en: After learning the information in this chapter, you will be able to create a
    unit test and functional test for Rust and Rocket applications to ensure the applications
    work as expected. You will also learn how to use a debugger such as `gdb` or `lldb`
    to debug Rust programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover these main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Rust program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the Rocket application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the Rust application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to do a test and debug, so we need a debugger.
    Please install `gdb`, the GNU Debugger ([https://www.sourceware.org/gdb/download/](https://www.sourceware.org/gdb/download/)),
    for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for this chapter at [https://github.com/PacktPublishing/Rust-Web-Development-with-Rocket/tree/main/Chapter12](https://github.com/PacktPublishing/Rust-Web-Development-with-Rocket/tree/main/Chapter12).
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Rust program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One important part of programming is testing the application. There are many
    kinds of tests, such as unit tests (to test a single function or method), functional
    tests (to test the function of an application), and integration testing (to test
    various units and functions as a single combined entity). Various tests should
    be conducted in order to make the application as correct as intended.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Rust standard library, there are three macros to use in testing: `assert!`,
    `assert_eq!`, and `assert_ne!`. The `assert!` macro accepts one or more parameters.
    The first parameter is any statement that evaluates to Boolean, and the rest is
    for debugging if the result is not what is expected.'
  prefs: []
  type: TYPE_NORMAL
- en: The `assert_eq!` macro compares equality between the first parameter and second
    parameter, and the rest is for debugging if the result is not what is expected.
    The `assert_ne!` macro is the opposite of `assert_eq!`; this macro tests the inequality
    between the first and the second parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see those macros in action. We want to test the `raw_html()` method
    of the `TextPost` model in `src/models/text_post.rs`. We want to ensure that the
    result of the method is the string we want to have. Follow these steps to test
    the method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/models/text_post.rs`, add the following `use` declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same `src/models/text_post.rs` file, we want to have a function for
    testing. To make a function a test function, annotate the function with the `#[test]`
    attribute. Add the function declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the function, initialize a `TextPost` instance as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `assert!` macro to ensure the resulting string is what we want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file and run the test by running `cargo test` on the Terminal. As
    we made a mistake in our test code, `"<p>hel1lo</p>"`, the test should fail, as
    in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fix `"<p>hel1lo</p>"` by replacing it with `"<p>hello</p>"`. Save the file
    and run the test again. The test should work fine now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to use the `assert_eq!` and `assert_ne!` macros. The `assert_eq!` macro
    is used to check that the first parameter is equal to the second parameter. The
    `assert_ne!` macro is used to make sure that the first parameter is not equal
    to the second parameter. Add the macros in the `test_raw_html()` function to see
    them in action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the test again; it should pass. But, if we look at the test output, there
    are warnings, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'One of the conventions for unit testing is to create a test module and mark
    the module as a test so it will not be compiled. In `src/models/text_post.rs`,
    add a new module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `src/models/text_post.rs`, remove these unused `use` declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Vice versa, add the required `use` declarations in `src/models/text_post.rs`
    in the `tests` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move the `test_raw_html()` function into the `tests` module. Run `cargo test`
    again in the Terminal. The tests should pass with no warnings, as in the following
    example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have learned how to perform unit tests in Rust, we can continue
    by testing the application with functional testing in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Rocket application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides putting the test in the `src` directory, we can create a test in Rust
    files in the `tests` directory inside the root directory of the application. When
    we run `cargo test`, the command line will look into the `tests` directory and
    run any test found there. People usually use tests in the `src` directory for
    unit testing and write functional tests in the `tests` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The Rocket framework provides a `rocket::local` module, which contains modules,
    structs, and methods to send requests to the local Rocket application. The main
    purpose of sending a non-networked request to the local Rocket application is
    to inspect the response and ensure that the response is what we expected, mainly
    for testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try implementing integration testing for our application by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the root directory of the application, add a new directory named `tests`.
    Inside the `tests` directory, create a file named `functional_tests.rs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `tests/functional_tests.rs`, add a new test function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, save and run `cargo test` from the command line. The tests should
    pass, and the `cargo test` output should show that it was running the test inside
    the `tests` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s continue with testing the Rocket application. Create a test function
    named `test_rocket`, but since the application is `async`, we need a different
    test annotation, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are going to put the Rocket instance in the `rocket::local::asynchronous::Client`
    instance. Later, we can use the `Client` instance to send a request and verify
    the response. But, one problem is that the Rocket initialization is in `src/main.rs`,
    not in the `our_application` library. We can work around this problem by moving
    the Rocket initialization from `src/main.rs` to `src/lib.rs`. Move the code from
    `src/main.rs` to `src/lib.rs` under the `pub mod` declaration, then change any
    `use our_application::` to `use crate::`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, rename the `rocket()` function to `setup_rocket()`. Also, add `pub`
    in front of the function and remove `#[launch]` from the top of the `setup_rocket()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want a method to get the database URL, so implement the `get_database_url`
    method for `Config` in `src/lib.rs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In `src/main.rs`, change the application to use `setup_rocket()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Going back to `tests/functional_test.rs`, add the `our_application` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, initialize a Rocket instance in `test_rocket()` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to get a database connection to truncate the database table to ensure
    a clean state for the testing. Add the required `use` declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following lines inside the `test_rocket()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to truncate the content of the `users` table. We want a method for
    `User` to remove all data, but the method should only be available for tests.
    Let''s add a trait to extend the `User` model. Add the `use` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `ModelCleaner` trait and implement `ModelCleaner` for `User` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Continuing in the `test_rocket()` function, append the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `tests/functional_tests.rs` file, add the `use` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a `Client` instance inside the `test_rocket()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Right now, the number of users in the database is `0`. We want to make a test
    by getting `"/users"` and parsing the HTML. One crate to parse HTML is `scraper`.
    Because we only want to use the `scraper` crate for testing, add a new part in
    `Cargo.toml` called `[dev-dependencies]`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Going back to `tests/functional_test.rs`, we want to get the `"/users"` response.
    Add the `use` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, append the following lines inside the `test_rocket()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to verify that the response body does not contain any users. If we
    look at the `src/views/users/index.html.tera` template, we see there''s a `mark`
    HTML tag for each user. Let''s use `scraper` to verify the response by adding
    the `use` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, append the following lines inside the `test_rocket()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to create a `post` request to create a new user, but one problem is
    that the application will do an token authenticity check, so we need to get the
    value from the `"/users/new"` page first. Append the following lines to get the
    token from the response body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `authenticity_token` to send the `post` request. Add the `use` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, append the following lines to the `test_rocket()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally check the `"/users"` page again; you should see one user. Append the
    following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Try running the test again. Sometimes the test works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'But, sometimes, the test doesn''t work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Why did the test fail? We will learn how to debug the Rust program in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the Rust application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned about writing functional tests, but sometimes,
    the test fails. We want to know why the test failed. There are two possible places
    where the error might occur. One is in the user creation process, and the other
    is in finding users after creating the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to debug is by logging where the error might occur. If we log all the
    possible errors in the user creation process (for example, in `src/routes/user.rs`
    in the `create_user()` function), we will find out that the authenticity token
    verification sometimes produces an error. An example of logging the error is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If we continue logging the `verify()` method and continue tracing the source
    of the problem, we will eventually find out that the `from_request()` method of
    the token is not producing the correct result. We can fix the problem by changing
    the `from_request()` method in `src/fairings/csrf.rs` with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, logging the code and finding the problem is not efficient. We can
    also use a debugger such as `gdb` (GNU Debugger) or `lldb` to debug Rust programs.
    `gdb` can be used on the Linux operating system, and `lldb` (Debugger of LLVM
    Project) can be used on macOS and Linux operating systems. Please install one
    of those debuggers if you want to use a debugger for the Rust programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rust provides `rust-gdb` (a wrapper to `gdb`) and `rust-lldb` (a wrapper to
    `lldb`). Those programs should be installed with the Rust compiler. Let''s see
    an example of how to use `rust-gdb` by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, build the application by using the `cargo build` command on the Terminal.
    Since we are not building the release version, debugging symbols should be in
    the resulting binary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the location of the generated binary in the source directory target directory;
    for example, if the source code for the application is in `/workspace/rocketbook/Chapter12/03RocketTesting/`,
    we can find the generated binary in `/workspace/rocketbook/Chapter12/03RocketTesting/target/debug/our_application`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `rust-gdb` on the Terminal just like you would run `gdb`. Here is an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You''ll see a `gdb` prompt as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the breakpoint of the application, as in this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You''ll see a prompt to set a breakpoint on the `our_application` library as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reply with `y` and notice `Breakpoint 1` set as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application by writing the `r` command and pressing the *Enter* key
    on the `gdb` prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The application should run and because it hit the breakpoint, the execution
    stopped. We can use the `gdb` prompt again to inspect final_rocket, as in the
    following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Try printing some variables in the debugger prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can see the result printed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'To quit from `gdb`, just type `quit` on prompt and confirm quitting the debugger
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are many more functionalities in these debuggers, such as setting multiple
    breakpoints and stepping through the breakpoints. You can find more information
    about `gdb` at [https://www.sourceware.org/gdb/](https://www.sourceware.org/gdb/),
    and about `lldb` at [https://lldb.llvm.org/](https://lldb.llvm.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also debuggers for IDEs or code editors, for example, users of Visual
    Studio Code can use CodeLLDB ([https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb))
    to conveniently click on the line and mark the breakpoints from the editor and
    inspect the variables through a dedicated panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – CodeLLDB inspecting our application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.1_B16825.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – CodeLLDB inspecting our application
  prefs: []
  type: TYPE_NORMAL
- en: In any case, using a debugger is an indispensable tool for programming. Learning
    to use debuggers properly can help in working with the Rust programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about testing the Rust program and Rocket application.
    We learned about using macros such as `assert!` to do the testing. We also learned
    the difference between unit testing and functional testing.
  prefs: []
  type: TYPE_NORMAL
- en: We created a functional test and learned about modules to do functional testing
    on a Rocket application. Finally, we learned a little bit about the technique
    to debug a Rust application to help fix it.
  prefs: []
  type: TYPE_NORMAL
- en: Testing and debugging are important parts of programming, as these techniques
    can improve the correctness of the application.
  prefs: []
  type: TYPE_NORMAL
- en: After all the development is done, in the next chapter, we are going to learn
    several ways to set the Rocket application available to serve real-world users.
  prefs: []
  type: TYPE_NORMAL
