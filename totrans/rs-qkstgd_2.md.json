["```rs\nfn main() {\n     println!(\"Hello, world!\");\n }\n```", "```rs\npub mod module_a {\n    pub fn a_thing() {\n         println!(\"This is a thing\");\n    }\n\n    pub fn a_second_thing() {\n         a_thing();\n         println!(\"This is another thing\");\n    }\n}\n```", "```rs\npub mod module_b;\n```", "```rs\npub fn a_thing() {\n    println!(\"This is a module_b thing\");\n}\n\npub fn a_second_thing() {\n    a_thing();\n    println!(\"This is another module_b thing\");\n}\n```", "```rs\nif 3 > 4 {\n    println!(\"Uh-oh. Three is greater than four.\");\n}\nelse if 3 == 4 {\n    println!(\"There seems to be something wrong with math.\");\n}\nelse {\n    println!(\"Three is not greater than or equal to four.\");\n};\n```", "```rs\nwhile i < 3 {\n    i = i + 1;\n    println!(\"While loop {}\", i);\n}\n```", "```rs\nfor num in 3..7 {\n    println!(\"for loop {}\", num);\n}\n```", "```rs\nfor word in [\"Hello\", \"world\", \"of\", \"loops\"].iter() {\n    println!(\"{}\", word);\n}\n```", "```rs\nfor i in 0..5 {\n    x = x + i;\n}\n```", "```rs\nlet addr = \"127.0.0.1:12345\".parse()?;\nlet tcp = TcpListener::bind(&addr)?;\n```", "```rs\npub struct Constrained {\n    pub min: i32,\n    pub max: i32,\n    current: i32,\n}\n```", "```rs\ncons.min = 5;\n```", "```rs\nlet change_no: Constrained;\nlet mut change_yes: Constrained;\n```", "```rs\npub fn set(&mut self, value: i32) {\n    self.current = value;\n}\n```", "```rs\nsome_function(2 + 2, false)\n```", "```rs\npub fn get(&self) -> i32 {\n    if self.current < self.min {\n        return self.min;\n    }\n    else if self.current > self.max {\n        return self.max;\n    }\n    else {\n        return self.current;\n    };\n}\n```", "```rs\npub fn alternate_get(&self) -> i32 {\n    if self.current < self.min {\n        self.min\n    }\n    else if self.current > self.max {\n        self.max\n    }\n    else {\n        self.current\n    }\n}\n```", "```rs\nfn can_fail(x: bool) -> Result<i32, &'static str> {\n    if x {\n        return Ok(5);\n    }\n    else {\n        return Err(\"x is false\");\n    };\n}\n```", "```rs\nlet mut cons: Constrained = new_constrained(0, 10, 5)?; \n```", "```rs\nlet mut cons: Constrained = new_constrained(0, 10, 5).expect(\"Something went very wrong\");\n```", "```rs\nimpl Constrained {\n    pub fn set(&mut self, value: i32) {\n        self.current = value;\n    }\n\n    pub fn get(&self) -> i32 {\n        if self.current < self.min {\n            return self.min;\n        }\n        else if self.current > self.max {\n            return self.max;\n        }\n        else {\n            return self.current;\n        };\n    }\n}\n```"]