["```rs\n$ mkdir -p my-workspace\n$ cd my-workspace\n```", "```rs\n$ cargo new a-project\n     Created binary (application) `a-project` package\n```", "```rs\n$ cargo new a-lib --lib\n     Created library `a-lib` package\n```", "```rs\nuse a_lib::stringify;\nuse rand::prelude::*;\n\nfn main() {\n    println!(\"{{ \\\"values\\\": {}, \\\"sensor\\\": {} }}\", stringify(&vec![random::<f64>(); 6]), stringify(&\"temperature\"));\n}\n```", "```rs\nuse std::fmt::Debug;\n\npub fn stringify<T: Debug>(v: &T) -> String {\n    format!(\"{:#?}\", v)\n}\n\n#[cfg(test)]\nmod tests {\n    use rand::prelude::*;\n    use super::stringify;\n\n    #[test]\n    fn test_numbers() { \n        let a_nr: f64 = random();\n        assert_eq!(stringify(&a_nr), format!(\"{:#?}\", a_nr));\n        assert_eq!(stringify(&1i32), \"1\");\n        assert_eq!(stringify(&1usize), \"1\");\n        assert_eq!(stringify(&1u32), \"1\");\n        assert_eq!(stringify(&1i64), \"1\");\n    }\n\n    #[test]\n    fn test_sequences() {\n        assert_eq!(stringify(&vec![0, 1, 2]), \"[\\n 0,\\n 1,\\n \n        2,\\n]\");\n        assert_eq!(\n            stringify(&(1, 2, 3, 4)),\n            \"(\\n 1,\\n 2,\\n 3,\\n 4,\\n)\"\n        );\n    }\n}\n```", "```rs\n$ cat a-project/Cargo.toml \n[package]\nname = \"a-project\"\nversion = \"0.1.0\"\nauthors = [\"<git user email address>\"]\nedition = \"2018\"\n\n[dependencies]\na-lib = { path = \"../a-lib\" }\nrand = \"0.5\"\n\n$ cat a-lib/Cargo.toml \n[package]\nname = \"a-lib\"\nversion = \"0.1.0\"\nauthors = [\"<git user email address>\"]\nedition = \"2018\"\n\n[dev-dependencies]\nrand = \"*\"\n```", "```rs\n[workspace]\n\nmembers = [ \"a-lib\", \"a-project\" ]\n```", "```rs\n$ cargo test\n   Compiling a-project v0.1.0 (my-workspace/a-project)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running target/debug/deps/a_lib-bfd9c3226a734f51\n\nrunning 2 tests\ntest tests::test_sequences ... ok\ntest tests::test_numbers ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/debug/deps/a_project-914dbee1e8606741\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests a-lib\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```", "```rs\n$  cargo run\n   Compiling a-project v0.1.0 (my-workspace/a-project)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.41s\n     Running `target/debug/a-project`\n{ \"values\": [\n    0.6798204591148014,\n    0.6798204591148014,\n    0.6798204591148014,\n    0.6798204591148014,\n    0.6798204591148014,\n    0.6798204591148014,\n], \"sensor\": \"temperature\" }\n```", "```rs\n$ ls -alh\ntotal 28K\ndrwxr-xr-x. 5 cm cm 4.0K Apr 11 17:29 ./\ndrwx------. 63 cm cm 4.0K Apr 10 12:06 ../\ndrwxr-xr-x. 4 cm cm 4.0K Apr 10 00:42 a-lib/\ndrwxr-xr-x. 4 cm cm 4.0K Apr 11 17:28 a-project/\n-rw-r--r--. 1 cm cm 187 Apr 11 00:05 Cargo.lock\n-rw-r--r--. 1 cm cm 48 Apr 11 00:05 Cargo.toml\ndrwxr-xr-x. 3 cm cm 4.0K Apr 11 17:29 target/\n\n$ ls -alh target/debug/\ntotal 1.7M\ndrwxr-xr-x. 8 cm cm 4.0K Apr 11 17:31 ./\ndrwxr-xr-x. 3 cm cm 4.0K Apr 11 17:31 ../\n-rwxr-xr-x. 2 cm cm 1.7M Apr 11 17:31 a-project*\n-rw-r--r--. 1 cm cm 90 Apr 11 17:31 a-project.d\ndrwxr-xr-x. 2 cm cm 4.0K Apr 11 17:31 build/\n-rw-r--r--. 1 cm cm 0 Apr 11 17:31 .cargo-lock\ndrwxr-xr-x. 2 cm cm 4.0K Apr 11 17:31 deps/\ndrwxr-xr-x. 2 cm cm 4.0K Apr 11 17:31 examples/\ndrwxr-xr-x. 4 cm cm 4.0K Apr 11 17:31 .fingerprint/\ndrwxr-xr-x. 4 cm cm 4.0K Apr 11 17:31 incremental/\n-rw-r--r--. 1 cm cm 89 Apr 11 17:31 liba_lib.d\n-rw-r--r--. 2 cm cm 3.9K Apr 11 17:31 liba_lib.rlib\ndrwxr-xr-x. 2 cm cm 4.0K Apr 11 17:31 native/\n```", "```rs\n# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"a-lib\"\nversion = \"0.1.0\"\ndependencies = [\n \"rand 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"a-project\"\nversion = \"0.1.0\"\ndependencies = [\n \"a-lib 0.1.0\",\n \"rand 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n[...]\n```", "```rs\n//! This is a non-optimized implementation of the [bubble sort] algorithm for the book Rust Cookbook by Packt. This implementation also clones the input vector. \n//! \n//! # Examples\n//!```", "```rs\n\n///\n/// See module level documentation. \n/// \npub fn bubble_sort<T: PartialOrd + Clone>(collection: &[T]) -> Vec<T> {\n    let mut result: Vec<T> = collection.into();\n    for _ in 0..result.len() {\n        let mut swaps = 0;\n        for i in 1..result.len() {\n            if result[i - 1] > result[i] {\n                result.swap(i - 1, i);\n                swaps += 1;\n            }\n        }\n        if swaps == 0 {\n            break;\n        }\n    }\n    result\n}\n```", "```rs\n#[cfg(test)]\nmod tests {\n    use super::bubble_sort;\n     #[test]\n    fn test_bubble_sort() {\n        assert_eq!(bubble_sort(&vec![9, 8, 7, 6]), vec![6, 7, 8, \n         9]);\n        assert_eq!(bubble_sort(&vec![9_f32, 8_f32, 7_f32, 6_f32]), \n         vec!\n        [6_f32, 7_f32, 8_f32, 9_f32]);\n\n        assert_eq!(bubble_sort(&vec!['c','f','a','x']), vec!['a', \n         'c', 'f', 'x']);\n\n        assert_eq!(bubble_sort(&vec![6, 8, 7, 9]), vec![6, 7, 8, \n         9]);\n        assert_eq!(bubble_sort(&vec![2, 1, 1, 1, 1]), vec![1, 1, 1, \n         1, 2]);\n    }\n}\n```", "```rs\n[package]\nname = \"bubble-sort\"\ndescription = \"A quick and non-optimized, cloning version of the bubble sort algorithm. Created as a showcase for publishing crates in the Rust Cookbook 2018\"\nversion = \"0.1.0\"\nauthors = [\"Claus Matzinger <claus.matzinger+kb@gmail.com>\"]\nedition = \"2018\"\nhomepage = \"https://blog.x5ff.xyz\"\nrepository = \"https://github.com/PacktPublishing/Rust-\n              Programming-Cookbook\"\nlicense = \"MIT\"\ncategories = [\n    \"Algorithms\", \n    \"Support\"\n]\nkeywords = [\n    \"cookbook\",\n    \"packt\",\n    \"x5ff\", \n    \"bubble\",\n    \"sort\",\n]\nreadme = \"README.md\"\nmaintenance = { status = \"experimental\" }\n```", "```rs\n$ cargo package\nerror: 2 files in the working directory contain changes that were not yet committed into git:\n\nCargo.toml\nREADME.md\n\nto proceed despite this, pass the `--allow-dirty` flag\n```", "```rs\n$ cargo package\n   Packaging bubble-sort v0.1.0 (publish-crate)\n   Verifying bubble-sort v0.1.0 (publish-crate)\n   Compiling bubble-sort v0.1.0 (publish-\n   crate/target/package/bubble-sort-0.1.0)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\n```", "```rs\n $ cargo publish\n    Updating crates.io index\n    Packaging bubble-sort v0.2.0 (Rust-Cookbook/Chapter03/publish-\n    crate)\n   Verifying bubble-sort v0.2.0 (Rust-Cookbook/Chapter03/publish-\n    crate)\n   Compiling bubble-sort v0.2.0 (Rust-Cookbook/Chapter03/publish-\n   crate/target/package/bubble-sort-0.2.0)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.09s\n   Uploading bubble-sort v0.2.0 (Rust-Cookbook/Chapter03/publish-\n    crate)\n```", "```rs\nerror: api errors (status 200 OK): crate version `0.1.0` is already uploaded\nerror: api errors (status 200 OK): invalid upload request: invalid length 6, expected at most 5 keywords per crate at line 1 column 667\nerror: 1 files in the working directory contain changes that were not yet committed into git:\nerror: api errors (status 200 OK): A verified email address is required to publish crates to crates.io. Visit https://crates.io/me to set and verify your email address.\n```", "```rs\n[package]\nname = \"external-deps\"\nversion = \"0.1.0\"\nauthors = [\"Claus Matzinger <claus.matzinger+kb@gmail.com>\"]\nedition = \"2018\"\n\n[dependencies]\nregex = { git = \"https://github.com/rust-lang/regex\" } # bleeding edge libraries\n\n# specifying crate features\nserde = { version = \"1\", features = [\"derive\"] }\nserde_json = \"*\" # pick whatever version\n\n[dev-dependencies]\ncriterion = \"0.2.11\"\n\n[[bench]]\nname = \"cooking_with_rust\"\nharness = false\n```", "```rs\nuse regex::Regex;\nuse serde::Serialize;\n\n#[derive(Serialize)]\nstruct Person {\n    pub full_name: String,\n    pub call_me: String,\n    pub age: usize,\n}\n\nfn main() {\n    let a_person = Person {\n        full_name: \"John Smith\".to_owned(),\n        call_me: \"Smithy\".to_owned(),\n        age: 42,\n    };\n    let serialized = serde_json::to_string(&a_person).unwrap();\n    println!(\"A serialized Person instance: {}\", serialized);\n\n    let re = Regex::new(r\"(?x)(?P<year>\\d{4})-(?P<month>\\d{2})-(?\n    P<day>\\d{2})\").unwrap();\n    println!(\"Some regex parsing:\");\n    let d = \"2019-01-31\";\n    println!(\" Is {} valid? {}\", d, re.captures(d).is_some());\n    let d = \"9999-99-00\";\n    println!(\" Is {} valid? {}\", d, re.captures(d).is_some());\n    let d = \"2019-1-10\";\n    println!(\" Is {} valid? {}\", d, re.captures(d).is_some());\n}\n```", "```rs\n#[macro_use]\nextern crate criterion;\n\nuse criterion::black_box;\nuse criterion::Criterion;\n\npub fn bubble_sort<T: PartialOrd + Clone>(collection: &[T]) -> Vec<T> {\n    let mut result: Vec<T> = collection.into();\n    for _ in 0..result.len() {\n        let mut swaps = 0;\n        for i in 1..result.len() {\n            if result[i - 1] > result[i] {\n                result.swap(i - 1, i);\n                swaps += 1;\n            }\n        }\n        if swaps == 0 {\n            break;\n        }\n    }\n    result\n}\n\nfn bench_bubble_sort_1k_asc(c: &mut Criterion) {\n    c.bench_function(\"Bubble sort 1k descending numbers\", |b| {\n        let items: Vec<i32> = (0..1_000).rev().collect();\n        b.iter(|| black_box(bubble_sort(&items)))\n    });\n}\n\ncriterion_group!(benches, bench_bubble_sort_1k_asc);\ncriterion_main!(benches);\n```", "```rs\n$ cargo run\n   Compiling proc-macro2 v0.4.27\n   Compiling unicode-xid v0.1.0\n   Compiling syn v0.15.30\n   Compiling libc v0.2.51\n   Compiling memchr v2.2.0\n   Compiling ryu v0.2.7\n   Compiling serde v1.0.90\n   Compiling ucd-util v0.1.3\n   Compiling lazy_static v1.3.0\n   Compiling regex v1.1.5 (https://github.com/rust-\n    lang/regex#9687986d)\n   Compiling utf8-ranges v1.0.2\n   Compiling itoa v0.4.3\n   Compiling regex-syntax v0.6.6 (https://github.com/rust-\n    lang/regex#9687986d)\n   Compiling thread_local v0.3.6\n   Compiling quote v0.6.12\n   Compiling aho-corasick v0.7.3\n   Compiling serde_derive v1.0.90\n   Compiling serde_json v1.0.39\n   Compiling external-deps v0.1.0 (Rust-Cookbook\n    /Chapter03/external-deps)\n    Finished dev [unoptimized + debuginfo] target(s) in 24.56s\n     Running `target/debug/external-deps`\nA serialized Person instance: {\"full_name\":\"John Smith\",\"call_me\":\"Smithy\",\"age\":42}\nSome regex parsing:\n  Is 2019-01-31 valid? true\n  Is 9999-99-00 valid? true\n  Is 2019-1-10 valid? false\n```", "```rs\n$ cargo bench\n   Compiling proc-macro2 v0.4.27\n   Compiling unicode-xid v0.1.0\n   Compiling arrayvec v0.4.10\n   [...]\n   Compiling tinytemplate v1.0.1\n   Compiling external-deps v0.1.0 (Rust-Cookbook\n    /Chapter03/external-deps)\n Compiling criterion v0.2.11\n    Finished release [optimized] target(s) in 1m 32s\n     Running target/release/deps/external_deps-09d742c8de9a2cc7\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/release/deps/cooking_with_rust-b879dc4675a42592\nGnuplot not found, disabling plotting\nBubble sort 1k descending numbers \n                        time: [921.90 us 924.39 us 927.17 us]\nFound 12 outliers among 100 measurements (12.00%)\n  6 (6.00%) high mild\n  6 (6.00%) high severe\n\nGnuplot not found, disabling plotting\n```", "```rs\nexport PATH=$PATH:/path/to/cargo-hello/target/debug\n```", "```rs\n$env:Path += \";C:/path/to/cargo-hello/target/debug\"\n```", "```rs\n$ cargo hello\nHello, world!\n```", "```rs\n#[cfg(test)]\nmod tests {\n\n    use std::thread::sleep;\n    use std::time::Duration;\n\n    #[test]\n    fn it_works() {\n        assert_eq!(2 + 2, 4);\n    }\n\n    #[test]\n    fn wait_10secs() {\n        sleep(Duration::from_secs(10));\n        println!(\"Waited for 10 seconds\");\n        assert_eq!(2 + 2, 4);\n    }\n\n    #[test]\n    fn wait_5secs() {\n        sleep(Duration::from_secs(5));\n        println!(\"Waited for 5 seconds\");\n        assert_eq!(2 + 2, 4);\n    }\n\n        #[test]\n    #[ignore]\n    fn ignored() {\n        assert_eq!(2 + 2, 4);\n    }\n}\n```", "```rs\n$ cargo test\n   Compiling test-commands v0.1.0 (Rust-Cookbook/Chapter03/test-\n    commands)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.37s\n     Running target/debug/deps/test_commands-06e02dadda81dfcd\n\nrunning 4 tests\ntest tests::ignored ... ignored\ntest tests::it_works ... ok\ntest tests::wait_5secs ... ok\ntest tests::wait_10secs ... ok\n\ntest result: ok. 3 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n\n   Doc-tests test-commands\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```", "```rs\n$ cargo test tests::it_works\n    Finished dev [unoptimized + debuginfo] target(s) in 0.05s\n     Running target/debug/deps/test_commands-06e02dadda81dfcd\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 3 filtered out\n```", "```rs\n$ cargo test -- --nocapture\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\n     Running target/debug/deps/test_commands-06e02dadda81dfcd\n\nrunning 4 tests\ntest tests::ignored ... ignored\ntest tests::it_works ... ok\nWaited for 5 seconds\ntest tests::wait_5secs ... ok\nWaited for 10 seconds\ntest tests::wait_10secs ... ok\n\ntest result: ok. 3 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n\n   Doc-tests test-commands\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```", "```rs\n$ time -f \"%e\" cargo test -- --test-threads 4\n   Compiling test-commands v0.1.0 (/home/cm/workspace/Mine/Rust-\n    Cookbook/Chapter03/test-commands)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.35s\n     Running target/debug/deps/test_commands-06e02dadda81dfcd\n\nrunning 4 tests\ntest tests::ignored ... ignored\ntest tests::it_works ... ok\ntest tests::wait_5secs ... ok\ntest tests::wait_10secs ... ok\n\ntest result: ok. 3 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n\n   Doc-tests test-commands\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n10.53\n```", "```rs\n$ time -f \"%e\" cargo test -- --test-threads 1\n    Finished dev [unoptimized + debuginfo] target(s) in 0.03s\n     Running target/debug/deps/test_commands-06e02dadda81dfcd\n\nrunning 4 tests\ntest tests::ignored ... ignored\ntest tests::it_works ... ok\ntest tests::wait_10secs ... ok\ntest tests::wait_5secs ... ok\n\ntest result: ok. 3 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n\n   Doc-tests test-commands\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n15.17\n```", "```rs\n$ cargo test wait\n    Finished dev [unoptimized + debuginfo] target(s) in 0.03s\n     Running target/debug/deps/test_commands-06e02dadda81dfcd\n\nrunning 2 tests\ntest tests::wait_5secs ... ok\ntest tests::wait_10secs ... ok\n```", "```rs\nfn main() {\n    println!(\"Overflow! {}\", 128u8 + 129u8);\n}\n```", "```rs\n$ cargo run --release\n Finished release [optimized] target(s) in 0.02s\n Running `target/release/custom-build`\nOverflow! 1\n```", "```rs\n# Let's modify the release build\n[profile.release]\nopt-level = 2\nincremental = true # default is false\noverflow-checks = true\n```", "```rs\n$ cargo run --release\n   Compiling custom-build v0.1.0 (Rust-Cookbook/Chapter03/custom-build)\nerror: attempt to add with overflow\n --> src/main.rs:2:30\n  |\n2 | println!(\"Overflow! {}\", 128u8 + 129u8);\n  | ^^^^^^^^^^^^^\n  |\n  = note: #[deny(const_err)] on by default\n\nerror: aborting due to previous error\n\nerror: Could not compile `custom-build`.\n\nTo learn more, run the command again with --verbose.\n```", "```rs\n[build]\ntarget = \"wasm32-unknown-unknown\" # the new default target\ntarget-dir = \"out\"                # custom build output directory\n```", "```rs\nfn main() {\n    println!(\"Overflow! {}\", 128 + 129);\n}\n```", "```rs\n$  cargo build\n   Compiling custom-build v0.1.0 (Rust-Cookbook/Chapter03/custom-\n    build)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.37s\n$  cargo run\n   Compiling custom-build v0.1.0 (Rust-Cookbook/Chapter03/custom-\n    build)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.15s\n     Running `out/wasm32-unknown-unknown/debug/custom-build.wasm`\n     out/wasm32-unknown-unknown/debug/custom-build.wasm:\n      out/wasm32-unknown-unknown/debug/custom-build.wasm: cannot \n       execute binary file\n```"]