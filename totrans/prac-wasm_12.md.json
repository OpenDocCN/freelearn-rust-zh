["```rs\n    $ cargo new --lib class_world\n    Created library `class_world` package\n    ```", "```rs\n    [package]\n    name = \"class_world\"\n    version = \"0.1.0\"\n    authors = [\"Sendil Kumar\"]\n    edition = \"2018\"\n    [lib]\n    crate-type = [\"cdylib\"]\n    [dependencies]\n    wasm-bindgen = \"0.2.68\"\n    ```", "```rs\n    use wasm_bindgen::prelude::*;\n    #[wasm_bindgen]\n    pub struct Point {\n        x: i32,\n        y: i32,\n    }\n    #[wasm_bindgen]\n    impl Point {\n        pub fn new(x: i32, y: i32) -> Point {\n            Point { x: x, y: y}\n        }\n        pub fn get_x(&self) -> i32 {\n            self.x\n        }\n        pub fn get_y(&self) -> i32 {\n            self.y\n        }\n\n        pub fn set_x(&mut self, x: i32) {\n            self.x = x;\n        }\n\n        pub fn set_y(&mut self, y:i32) {\n            self.y = y;\n        }\n\n        pub fn add(&mut self, p: Point) {\n            self.x = self.x + p.x;\n            self.y = self.y + p.y;\n         }\n    }\n    ```", "```rs\n    $ cargo build --target=wasm32-unknown-unknown\n    ```", "```rs\n    $ wasm-bindgen target/wasm32-unknown-\n      unknown/debug/class_world.wasm --out-dir .\n    ```", "```rs\n    const path = require('path');\n    const HtmlWebpackPlugin = require('html-webpack-\n      plugin');\n    module.exports = {\n        entry: './index.js',\n        output: {\n            path: path.resolve(__dirname, 'dist'),\n            filename: 'bundle.js',\n        },\n        plugins: [\n            new HtmlWebpackPlugin(),\n        ],\n        mode: 'development'\n    };\n    ```", "```rs\n    {\n        \"scripts\": {\n            \"build\": \"webpack\",\n            \"serve\": \"webpack-dev-server\"\n        },\n        \"dependencies\": {\n            \"html-webpack-plugin\": \"^3.2.0\",\n            \"webpack\": \"^4.41.5\",\n            \"webpack-cli\": \"^3.3.10\",\n            \"webpack-dev-server\": \"^3.10.1\"\n        }\n    }\n    ```", "```rs\n    $ touch index.js\n    ```", "```rs\n    import(\"./class_world\").then(({Point}) => {\n    const p1 = Point.new(10, 10);\n    console.log(p1.get_x(), p1.get_y());\n    const p2 = Point.new(3, 3);\n    p1.add(p2);\n    console.log(p1.get_x(), p1.get_y());\n    });\n    ```", "```rs\n    get_x() {\n        return wasm.point_get_x(this.ptr);\n    }\n    ```", "```rs\n    set_x(arg0) {\n        return wasm.point_set_x(this.ptr, arg0);\n    }\n    ```", "```rs\n    add(arg0) {\n        const ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        return wasm.point_add(this.ptr, ptr0);\n    }\n    ```", "```rs\n    $ cargo new --lib class_from_js_world\n    Created library `class_from_js_world` package\n    ```", "```rs\n    [package]\n    name = \"class_from_js_world\"\n    version = \"0.1.0\"\n    authors = [\"Sendil Kumar\"]\n    edition = \"2018\"\n    [lib]\n    crate-type = [\"cdylib\"]\n    [dependencies]\n    wasm-bindgen = \"0.2.68\"\n    ```", "```rs\n    use wasm_bindgen::prelude::*;\n    #[wasm_bindgen(module = \"./point\")] . // 1\n    extern \"C\" {\n         pub type Point; // 2\n\n        #[wasm_bindgen(constructor)] //3\n        fn new(x: i32, y: i32) -> Point;\n\n        #[wasm_bindgen(method, getter)] //4\n        fn get_x(this: &Point) -> i32;\n\n        #[wasm_bindgen(method, getter)]\n        fn get_y(this: &Point) -> i32;\n\n        #[wasm_bindgen(method, setter)] //5\n        fn set_x(this: &Point, x:i32) -> i32;\n\n        #[wasm_bindgen(method, setter)]\n        fn set_y(this: &Point, y:i32) -> i32;\n\n        #[wasm_bindgen(method)] // 6\n        fn add(this: &Point, p: Point);\n    }\n\n    #[wasm_bindgen]\n    fn get_precious_point() -> Point { //7\n        let p = Point::new(10, 10);\n        let p1 = Point::new(3, 3);\n        p.add(p1); // 8\n        p\n    }\n    ```", "```rs\n    export class Point {\n        constructor(x, y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        get_x() {\n            return this.x;\n        }\n\n        get_y() {\n            return this.y;\n        }\n\n        set_x(x) {\n            this.x = x;\n        }\n\n        set_y(y) {\n            this.y = y;\n        }\n\n        add(p1) {\n            this.x += p1.x;\n            this.y += p1.y;\n        }\n    }\n    ```", "```rs\n    import(\"./class_from_js_world\").then(module => {\n        console.log(module.get_precious_point());\n    });\n    ```", "```rs\n    $ npm run serve\n    ```", "```rs\n    $ cargo expand --target=wasm32-unknown-unknown >\n      expanded.rs\n    ```", "```rs\npub struct Point {\n    obj: ::wasm_bindgen::JsValue,\n}\n```", "```rs\nfn new(x: i32, y: i32) -> Point {\n#[link(wasm_import_module =\n  \"__wbindgen_placeholder__\")]\nextern \"C\" {\nfn __wbg_new_3ffc5ccd013f4db7(x:<i32 as\n ::wasm_bindgen::convert::IntoWasmAbi>::Abi, y:<i32 as\n ::wasm_bindgen::convert::IntoWasmAbi>::Abi) -> <Point\n as ::wasm_bindgen::convert::FromWasmAbi>::Abi;\n}\n\nunsafe {\nlet _ret = {\nlet mut __stack =\n  ::wasm_bindgen::convert::GlobalStack::new();\nlet x = <i32 as\n  ::wasm_bindgen::convert::IntoWasmAbi>::into_abi\n  (x, &mut __stack);\nlet y = <i32 as\n  ::wasm_bindgen::convert::IntoWasmAbi>::into_abi\n  (y, &mut __stack);\n__wbg_new_3ffc5ccd013f4db7(x, y)\n};\n<Point as\n ::wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret,\n &mut ::wasm_bindgen::convert::GlobalStack::new())\n}\n}\n```", "```rs\n    $ cargo new --lib jsapi\n    ```", "```rs\n    [package]\n    name = \"jsapi\"\n    version = \"0.1.0\"\n    authors = [\"Sendil Kumar\"]\n    edition = \"2018\"\n\n    [lib]\n    crate-type = [\"cdylib\"]\n\n    [dependencies]\n    wasm-bindgen = \"0.2.68\"\n    js-sys = \"0.3.45\"\n    ```", "```rs\n    use wasm_bindgen::prelude::*;\n\n    use js_sys::Map;\n\n    #[wasm_bindgen]\n    pub fn new_js_map() -> Map {\n        Map::new()\n    }\n    ```", "```rs\n    #[wasm_bindgen]\n    pub fn set_get_js_map() -> JsValue {\n        let map = Map::new();\n        map.set(&\"foo\".into(), &\"bar\".into());\n        map.get(&\"foo\".into())\n    }\n    ```", "```rs\n    #[wasm_bindgen]\n    pub fn run_through_map() -> f64 {\n        let map = Map::new();\n        map.set(&1.into(), &1.into());\n        map.set(&2.into(), &2.into());\n        map.set(&3.into(), &3.into());\n        map.set(&4.into(), &4.into());\n        map.set(&5.into(), &5.into());\n        let mut res: f64 = 0.0;\n\n        map.for_each(&mut |value, _| {\n            res = res + value.as_f64().unwrap();\n        });\n\n        res\n    }\n    ```", "```rs\n    import(\"./jsapi\").then(module => {\n        let m = module.new_js_map();\n        m.set(\"Hi\", \"Hi\");\n        console.log(m); // prints Map { \"Hi\" ->  \"Hi\" }\n        console.log(module.set_get_js_map());  // prints\n          \"bar\"\n        console.log(module.run_through_map()); // prints\n          15\n    });\n    ```", "```rs\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n```", "```rs\n    $ cargo new --lib closure_world\n         Created library `closure_world` package\n    ```", "```rs\n    [package]\n    name = \"closure_world\"\n    version = \"0.1.0\"\n    authors = [\"Sendil Kumar\"]\n    edition = \"2018\"\n\n    [lib]\n    crate-type = [\"cdylib\"]\n\n    [dependencies]\n    wasm-bindgen = \"0.2.38\"\n    js-sys = \"0.3.15\"\n    ```", "```rs\n    use wasm_bindgen::prelude::*;\n\n    #[wasm_bindgen]\n    pub struct Point {\n        x: i32,\n        y: i32,\n    }\n\n    #[wasm_bindgen]\n    impl Point {\n        pub fn new(x: i32, y: i32) -> Point {\n            Point { x: x, y: y}\n        }\n\n        pub fn get_x(&self) -> i32 {\n            self.x\n        }\n\n        pub fn get_y(&self) -> i32 {\n            self.y\n        }\n\n        pub fn set_x(&mut self, x: i32) {\n            self.x = x;\n        }\n\n        pub fn set_y(&mut self, y:i32) {\n            self.y = y;\n        }\n\n        pub fn add(&mut self, p: Point) {\n            self.x = self.x + p.x;\n            self.y = self.y + p.y;\n         }\n\n        pub fn distance(&self, js_func: js_sys::Function)\n          -> JsValue {\n            let this = JsValue::NULL;\n            let x = JsValue::from(self.x);\n            let y = JsValue::from(self.y);\n            js_func.call2(&this, &x, &y).unwrap()\n        }\n    }\n    ```", "```rs\nimport(\"./closure_world\").then(({Point}) => {\n     const p1 = Point.new(13, 10);\n     console.log(p1.distance((x, y) => x - y));\n});\n```", "```rs\n    $ cargo new --lib import_js_world\n         Created library `import_js_world` package\n    ```", "```rs\n\n    [package]\n    name = \"import_js_world\"\n    version = \"0.1.0\"\n    authors = [\"Sendil Kumar\"]\n    edition = \"2018\"\n\n    [lib]\n    crate-type = [\"cdylib\"]\n\n    [dependencies]\n    wasm-bindgen = \"0.2.38\"\n    ```", "```rs\n    use wasm_bindgen::prelude::*;\n\n    #[wasm_bindgen(module = \"./array\")]\n    extern \"C\" {\n        fn topArray() -> f64;\n        fn getNumber() -> i32;\n        fn lowerCase(str: &str) -> String;\n    }\n\n    #[wasm_bindgen]\n    pub fn sum_of_square_root() -> f64 {\n        let n = getNumber();\n        let mut sum = 0;\n\n        for _ in 0..n {\n            sum = sum + (topArray().sqrt() as i64);\n        } \n        sum\n    }\n\n    #[wasm_bindgen]\n    pub fn some_string_to_share() -> String {\n        lowerCase(\"HEYA! I AM ALL CAPS\")\n    }\n    ```", "```rs\n    let someGlobalArray = [1, 4, 9, 16, 25];\n\n    export function getNumber() {\n        return someGlobalArray.length;\n    }\n\n    export function topArray() {\n        return someGlobalArray.sort().pop();\n    }\n\n    export lowerCase(str) {\n        return str.toLowerCase();\n    }\n    ```", "```rs\n    import(\"./import_js_world\").then(module => {\n        console.log(module.sum_of_square_root());\n        console.log(module.some_string_to_share());\n    });\n    ```", "```rs\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n    ```", "```rs\n    const rustptr = mem[retptr / 8];\n    const rustlen = mem[retptr / 8 + 1];\n    ```", "```rs\n    $ cargo new --lib web_sys_api\n        Created library `web_sys_api` package\n    ```", "```rs\n    [package]\n    name = \"web_sys_api\"\n    version = \"0.1.0\"\n    authors = [\"Sendil Kumar\"]\n    edition = \"2018\"\n\n    [lib]\n    crate-type = [\"cdylib\"]\n\n    [dependencies]\n    wasm-bindgen = \"0.2.38\"\n\n    [dependencies.web-sys]\n    version = \"0.3.4\"\n    features = [\n        'Document',\n        'Element',\n        'HtmlElement',\n        'Node',\n        'Window',\n    ]\n    ```", "```rs\n    use wasm_bindgen::prelude::*;\n\n    #[wasm_bindgen]\n    pub fn draw(percent: i32) -> Result<web_sys::Element,\n      JsValue> {\n        let window = web_sys::window().unwrap();\n        let document = window.document().unwrap();\n\n        let div = document.create_element(\"div\")?;\n        let ns = Some(\"http://www.w3.org/2000/svg\");\n\n        div.set_attribute(\"class\", \"pie\")?;\n\n        let svg = document.create_element_ns( ns, \"svg\")?;\n        svg.set_attribute(\"height\", \"100\")?;\n        svg.set_attribute(\"width\", \"100\")?;\n        svg.set_attribute(\"viewBox\", \"0 0 32 32\")?;\n\n        let circle = document.create_element_ns(ns,\n          \"circle\")?;\n        circle.set_attribute(\"r\", \"16\")?;\n        circle.set_attribute(\"cx\", \"16\")?;\n        circle.set_attribute(\"cy\", \"16\")?;\n        circle.set_attribute(\"stroke-dasharray\",\n          &(percent.to_string().to_owned() +\" 100\"))?;\n\n        svg.append_child(&circle)?;\n\n        div.append_child(&svg)?;\n\n        Ok(div)\n    }\n    ```", "```rs\n    import(\"./web_sys_api\").then(module => {\n        class Pie extends HTMLElement {\n            constructor() {\n                super();\n                let shadow = this.attachShadow({ mode:\n                  'open' });\n                let style =\n                  document.createElement('style');\n\n                style.textContent = `\n                        svg {\n                            width:100px;\n                            height: 100px;\n                            background: yellowgreen;\n                            border-radius: 50%;\n                        }\n\n                        circle {\n                            fill: yellowgreen;\n                            stroke: #655;\n                            stroke-width: 32;\n                        }`;\n\n               shadow.appendChild(module.draw(this.\n               getAttribute\n               ('value'));\n               shadow.appendChild(style);\n           }\n       }\n\n        customElements.define('pie-chart', Pie);\n\n        setInterval(() => {\n            let r = Math.floor(Math.random() * 100);\n            document.getElementsByTagName('body')[0].\n              innerHTML = `\n                <pie-chart value='${r}' />`;\n        }, 1000);\n    });\n    ```", "```rs\n    $ npm run serve\n    ```"]