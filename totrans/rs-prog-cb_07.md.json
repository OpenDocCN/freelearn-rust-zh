["```rs\n$ cc --version\ncc (GCC) 9.1.1 20190503 (Red Hat 9.1.1-1)\nCopyright (C) 2019 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n$ make --version\nGNU Make 4.2.1\nBuilt for x86_64-redhat-linux-gnu\nCopyright (C) 1988-2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n```", "```rs\n$ ls legacy-c-code\nC/ rust-digest/\n```", "```rs\n[lib]\nname = \"digest\"\ncrate-type = [\"cdylib\"]\n```", "```rs\n[dependencies]\nlibc = \"0.2\"\nring = \"0.14\"\n```", "```rs\nuse std::ffi::{CStr, CString};\nuse std::os::raw::{c_char, c_void};\n\nuse ring::digest;\n\nextern \"C\" {\n    fn pre_digest() -> c_void;\n}\n\n#[no_mangle]\npub extern \"C\" fn digest(data: *mut c_char) -> *mut c_char {\n    unsafe {\n        pre_digest();\n\n        let data = CStr::from_ptr(data);\n        let signature = digest::digest(&digest::SHA256, \n        data.to_bytes());\n\n        let hex_digest = signature\n            .as_ref()\n            .iter()\n            .map(|b| format!(\"{:X}\", b))\n            .collect::<String>();\n\n        CString::new(hex_digest).unwrap().into_raw()\n    }\n}\n```", "```rs\n$ cd rust-digest; cargo build\n   Compiling libc v0.2.58\n   Compiling cc v1.0.37\n   Compiling lazy_static v1.3.0\n   Compiling untrusted v0.6.2\n   Compiling spin v0.5.0\n   Compiling ring v0.14.6\n   Compiling rust-digest v0.1.0 (Rust-Cookbook/Chapter07/legacy-c-\n    code/rust-digest)\n    Finished dev [unoptimized + debuginfo] target(s) in 7.53s\n```", "```rs\n$  ls -al rust-digest/target/debug/\ntotal 3756\ndrwxr-xr-x. 8 cm cm 4096 Jun 23 20:17 ./\ndrwxr-xr-x. 4 cm cm 4096 Jun 23 20:17 ../\ndrwxr-xr-x. 6 cm cm 4096 Jun 23 20:17 build/\n-rw-r--r--. 1 cm cm 0 Jun 23 20:17 .cargo-lock\ndrwxr-xr-x. 2 cm cm 4096 Jun 23 20:17 deps/\ndrwxr-xr-x. 2 cm cm 4096 Jun 23 20:17 examples/\ndrwxr-xr-x. 13 cm cm 4096 Jun 23 20:17 .fingerprint/\ndrwxr-xr-x. 3 cm cm 4096 Jun 23 20:17 incremental/\n-rw-r--r--. 1 cm cm 186 Jun 23 20:17 libdigest.d\n-rwxr-xr-x. 2 cm cm 3807256 Jun 23 20:17 libdigest.so*\ndrwxr-xr-x. 2 cm cm 4096 Jun 23 20:17 native/\n```", "```rs\n$ cargo build --release\n   Compiling rust-digest v0.1.0 (Rust-Cookbook/Chapter07/legacy-c-\n   code/rust-digest)\n   Finished release [optimized] target(s) in 0.42s\n```", "```rs\n#include <stdio.h>\n\n// A function with that name is expected to be linked to the project\nextern char* digest(char *str);\n\n// This function is exported under the name pre_digest\nextern void pre_digest() {\n    printf(\"pre_digest called\\n\");\n}\n\nint main() {\n    char *result = digest(\"Hello World\");\n    printf(\"SHA digest of \\\"Hello World\\\": %s\", result);\n    return 0;\n}\n```", "```rs\n# Include the Rust library\nLIBS := -ldigest -L../rust-digest/target/release\n\nifeq ($(shell uname),Darwin)\n    LDFLAGS := -Wl,-dead_strip $(LIBS)\nelse\n    LDFLAGS := -Wl,--gc-sections $(LIBS)\nendif\n\nall: target/main\n\ntarget:\n  @mkdir -p $@\n\ntarget/main: target/main.o \n  @echo \"Linking ... \"\n  $(CC) -o $@ $^ $(LDFLAGS)\n\ntarget/main.o: src/main.c | target\n  @echo \"Compiling ...\"\n  $(CC) -o $@ -c $<\n\nclean:\n  @echo \"Removing target/\"\n  @rm -rf target\n```", "```rs\n$ make all\nCompiling ...\ncc -o target/main.o -c src/main.c\nLinking ... \ncc -o target/main target/main.o -Wl,--gc-sections -ldigest -L../rust-digest/target/release\n```", "```rs\n$ cd rust-digest/target/release\n$ LD_LIBRARY_PATH=$(pwd)\n$ echo $LD_LIBRARY_PATH \n/tmp/Rust-Cookbook/Chapter07/legacy-c-code/rust-digest/target/release\n```", "```rs\n$ ./main\npre_digest called\nSHA digest of \"Hello World\": A591A6D4BF420404A11733CFB7B190D62C65BFBCDA32B57B277D9AD9F146E \n```", "```rs\n$ ./main\n./main: error while loading shared libraries: libdigest.so: cannot open shared object file: No such file or directory\n```", "```rs\n$ node --version\nv11.15.0\n$ npm --version\n6.7.0\n```", "```rs\n$ tree node-js-rust/\nnode-js-rust/\n├── node\n│   ├── package.json\n│   └── src\n│       └── index.js\n└── rust-digest\n    ├── Cargo.toml\n    └── src\n        └── lib.rs\n4 directories, 4 files\n```", "```rs\n[lib]\nname = \"digest\"\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nlibc = \"0.2\"\nring = \"0.14\"\n```", "```rs\nuse std::ffi::{CStr, CString};\nuse std::os::raw::c_char;\n\nuse ring::digest;\n\n#[no_mangle]\npub extern \"C\" fn digest(data: *mut c_char) -> *mut c_char {\n    unsafe {\n\n        let data = CStr::from_ptr(data);\n        let signature = digest::digest(&digest::SHA256, \n        data.to_bytes());\n\n        let hex_digest = signature\n            .as_ref()\n            .iter()\n            .map(|b| format!(\"{:X}\", b))\n            .collect::<String>();\n\n        CString::new(hex_digest).unwrap().into_raw()\n    }\n}\n\n// No tests :(\n```", "```rs\n$ cargo build\n   Compiling libc v0.2.58\n   Compiling cc v1.0.37\n   Compiling untrusted v0.6.2\n   Compiling spin v0.5.0\n   Compiling lazy_static v1.3.0\n   Compiling ring v0.14.6\n   Compiling rust-digest v0.1.0 (Rust-Cookbook/Chapter07/node-js-\n    rust/rust-digest)\n    Finished dev [unoptimized + debuginfo] target(s) in 5.88s\n$ ls rust-digest/target/debug/\nbuild/ deps/ examples/ incremental/ libdigest.d libdigest.so* native/\n\n```", "```rs\nconst ffi = require('ffi');\nconst ref = require('ref');\n\nconst libPath = '../rust-digest/target/debug/libdigest';\n\nconst libDigest = ffi.Library(libPath, {\n  'digest': [ \"string\", [\"string\"]],\n});\n\nconst { digest } = libDigest;\nconsole.log('Hello World SHA256', digest(\"Hello World\"));\n```", "```rs\n{\n  [...]\n  \"dependencies\": {\n    \"ffi\": \"^2.3.0\"\n  }\n}\n```", "```rs\n$ npm install\n\n> ref@1.3.5 install Rust-Cookbook/Chapter07/node-js-rust/node/node_modules/ref\n> node-gyp rebuild\n\nmake: Entering directory 'Rust-Cookbook/Chapter07/node-js-rust/node/node_modules/ref/build'\n  CXX(target) Release/obj.target/binding/src/binding.o\nIn file included from ../src/binding.cc:7:\n../../nan/nan.h: In function ‘void Nan::AsyncQueueWorker(Nan::AsyncWorker*)’:\n../../nan/nan.h:2298:62: warning: cast between incompatible function types from ‘void (*)(uv_work_t*)’ {aka ‘void (*)(uv_work_s*)’} to ‘uv_after_work_cb’ {aka ‘void (*)(uv_work_s*, int)’} [-Wcast-function-type]\n 2298 | , reinterpret_cast<uv_after_work_cb>(AsyncExecuteComplete)\n[...]\n  COPY Release/ffi_bindings.node\nmake: Leaving directory 'Rust-Cookbook/Chapter07/node-js-rust/node/node_modules/ffi/build'\nnpm WARN node@1.0.0 No description\nnpm WARN node@1.0.0 No repository field.\n\nadded 7 packages from 12 contributors and audited 18 packages in 4.596s\nfound 0 vulnerabilities\n\n```", "```rs\n$ node src/index.js\nHello World SHA256 A591A6D4BF420404A11733CFB7B190D62C65BFBCDA32B57B277D9AD9F146E\n```", "```rs\n$ rustup target add wasm32-unknown-unknown\ninfo: downloading component 'rust-std' for 'wasm32-unknown-unknown'\n 10.9 MiB / 10.9 MiB (100 %) 5.3 MiB/s in 2s ETA: 0s\ninfo: installing component 'rust-std' for 'wasm32-unknown-unknown'\n```", "```rs\n$ tree browser-rust/\nbrowser-rust/\n├── rust-digest\n│   ├── Cargo.lock\n│   ├── Cargo.toml\n│   ├── src\n│       └── lib.rs\n└── web\n    └── index.html\n\n3 directories, 4 files\n```", "```rs\nuse sha2::{Sha256, Digest};\nuse wasm_bindgen::prelude::*;\n\nfn hex_digest(data: &str) -> String {\n    let mut hasher = Sha256::new();\n    hasher.input(data.as_bytes());\n    let signature = hasher.result();\n    signature\n        .as_ref()\n        .iter()\n        .map(|b| format!(\"{:X}\", b))\n        .collect::<String>()\n}\n```", "```rs\n#[wasm_bindgen]\npub extern \"C\" fn digest(data: String) -> String {\n    hex_digest(&data)\n}\n\n#[wasm_bindgen]\npub extern \"C\" fn digest_attach(data: String, elem_id: String) -> Result<(), JsValue> {\n    web_sys::window().map_or(Err(\"No window found\".into()), |win| {\n        if let Some(doc) = win.document() {\n            doc.get_element_by_id(&elem_id).map_or(Err(format!(\"No \n            element with id {} found\", elem_id).into()), |val|{\n                let signature = hex_digest(&data);\n                val.set_inner_html(&signature);\n                Ok(())\n            })\n        }\n        else {\n            Err(\"No document found\".into())\n        }\n    })\n}\n// No tests :( \n```", "```rs\n\n#[wasm_bindgen(start)]\npub fn start() -> Result<(), JsValue> {\n    // This function is getting called when initializing the WASM \n    // module\n    Ok(())\n}\n```", "```rs\n[lib]\nname = \"digest\"\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nsha2 = \"0.8\"\nwasm-bindgen = \"0.2.48\"\n\n[dependencies.web-sys]\nversion = \"0.3.25\"\nfeatures = [\n  'Document',\n  'Element',\n  'HtmlElement',\n  'Node',\n  'Window',\n]\n```", "```rs\n$ cargo build --target wasm32-unknown-unknown\n   Compiling proc-macro2 v0.4.30\n   [...]\n   Compiling js-sys v0.3.24\n   Compiling rust-digest v0.1.0 (Rust-Cookbook/Chapter07/browser-\n    rust/rust-digest)\n    Finished dev [unoptimized + debuginfo] target(s) in 54.49s\n$ ls target/wasm32-unknown-unknown/debug/\nbuild/ deps/ digest.d digest.wasm* examples/ incremental/ native/\n```", "```rs\n$ wasm-bindgen target/wasm32-unknown-unknown/debug/digest.wasm --out-dir ../web/ --web\n$ ls ../web/\ndigest_bg.d.ts digest_bg.wasm digest.d.ts digest.js index.html\n```", "```rs\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta content=\"text/html;charset=utf-8\" http-equiv=\"Content-\n         Type\"/>\n        <script type=\"module\">\n            import init, { digest, digest_attach } from \n             './digest.js';        \n            async function run() {\n                await init();\n                const result = digest(\"Hello World\");\n                console.log(`Hello World SHA256 = ${result}`);\n                digest_attach(\"Hello World\", \"sha_out\")\n            }\n            run();\n        </script>\n    </head>\n    <body>\n        <h1>Hello World in SHA256 <span id=\"sha_out\"></span></h1>\n    </body>\n</html>\n```", "```rs\npy -m http.server 8080\nServing HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...\n```", "```rs\n$ tree python\npython\n├── setup.py\n└── src\n    └── digest.py\n\n1 directory, 2 files\n```", "```rs\nuse std::ffi::{CStr, CString};\nuse std::os::raw::c_char;\n\nuse ring::digest;\n\n#[no_mangle]\npub extern \"C\" fn digest(data: *mut c_char) -> *mut c_char {\n    unsafe {\n\n        let data = CStr::from_ptr(data);\n        let signature = digest::digest(&digest::SHA256, \n         data.to_bytes());\n\n        let hex_digest = signature\n            .as_ref()\n            .iter()\n            .map(|b| format!(\"{:X}\", b))\n            .collect::<String>();\n\n        CString::new(hex_digest).unwrap().into_raw()\n    }\n}\n\n// No tests :( \n```", "```rs\n[lib]\nname = \"digest\"\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nlibc = \"0.2\"\nring = \"0.14\"\n```", "```rs\n$ cargo build\n    Updating crates.io index\n   Compiling cc v1.0.37\n   Compiling libc v0.2.58\n   Compiling untrusted v0.6.2\n   Compiling spin v0.5.0\n   Compiling lazy_static v1.3.0\n   Compiling ring v0.14.6\n   Compiling rust-digest v0.1.0 (Rust-Cookbook/Chapter07/python-\n    rust/rust-digest)\n    Finished dev [unoptimized + debuginfo] target(s) in 8.29s\n$ ls target/debug/\nbuild/ deps/ examples/ incremental/ libdigest.d libdigest.so* native/\n```", "```rs\nfrom ctypes import cdll, c_char_p\nfrom sys import platform\n\ndef build_lib_name(name):\n    prefix = \"lib\"\n    ext = \"so\"\n\n    if platform == 'darwin':\n        ext = 'dylib'\n    elif platform == 'win32':\n        prefix = \"\"\n        ext = 'dll'\n\n    return \"{prefix}{name}.{ext}\".format(prefix=prefix, name=name, ext=ext)\n\ndef main():\n    lib = cdll.LoadLibrary(build_lib_name(\"digest\"))\n    lib.digest.restype = c_char_p\n    print(\"SHA256 of Hello World =\", lib.digest(b\"Hello World\"))\n\nif __name__ == \"__main__\":\n    main()\n```", "```rs\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Courtesy of https://github.com/kennethreitz/setup.py \n\nfrom setuptools import find_packages, setup, Command\n\n# Package meta-data.\nNAME = 'digest'\nDESCRIPTION = 'A simple Python package that loads and executes a Rust function.'\nURL = 'https://blog.x5ff.xyz'\nAUTHOR = 'Claus Matzinger'\nREQUIRES_PYTHON = '>=3.7.0'\nVERSION = '0.1.0'\nLICENSE = 'MIT'\n```", "```rs\nsetup(\n    # Meta stuff\n    name=NAME,\n    version=VERSION,\n    description=DESCRIPTION,\n    long_description=DESCRIPTION,\n    long_description_content_type='text/markdown',\n    # ---\n    package_dir={'':'src'}, # Declare src as root folder\n    packages=find_packages(exclude=[\"tests\", \"*.tests\", \"*.tests.*\", \n     \"tests.*\"]), # Auto discover any Python packages\n    python_requires=REQUIRES_PYTHON,\n    # Scripts that will be generated invoke this method\n    entry_points={\n        'setuptools.installation': ['eggsecutable=digest:main'],\n    },\n    include_package_data=True,\n    license=LICENSE,\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?\n         %3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: Implementation :: \n         CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n)\n```", "```rs\n$ python3 setup.py bdist_egg\nrunning bdist_egg\nrunning egg_info\nwriting src/digest.egg-info/PKG-INFO\nwriting dependency_links to src/digest.egg-info/dependency_links.txt\nwriting entry points to src/digest.egg-info/entry_points.txt\nwriting top-level names to src/digest.egg-info/top_level.txt\nreading manifest file 'src/digest.egg-info/SOURCES.txt'\nwriting manifest file 'src/digest.egg-info/SOURCES.txt'\ninstalling library code to build/bdist.linux-x86_64/egg\nrunning install_lib\nwarning: install_lib: 'build/lib' does not exist -- no Python modules to install\n\ncreating build/bdist.linux-x86_64/egg\ncreating build/bdist.linux-x86_64/egg/EGG-INFO\ncopying src/digest.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO\ncopying src/digest.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\ncopying src/digest.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\ncopying src/digest.egg-info/entry_points.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\ncopying src/digest.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\nzip_safe flag not set; analyzing archive contents...\ncreating 'dist/digest-0.1.0-py3.7.egg' and adding 'build/bdist.linux-x86_64/egg' to it\nremoving 'build/bdist.linux-x86_64/egg' (and everything under it)\n```", "```rs\n$ cd python/dist\n$  ./digest-0.1.0-py3.7.egg\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"Rust-Cookbook/Chapter07/python-rust/python/src/digest.py\", line 17, in main\n    lib = cdll.LoadLibrary(build_lib_name(\"digest\"))\n  File \"/usr/lib64/python3.7/ctypes/__init__.py\", line 429, in LoadLibrary\n    return self._dlltype(name)\n  File \"/usr/lib64/python3.7/ctypes/__init__.py\", line 351, in __init__\n    self._handle = _dlopen(self._name, mode)\nOSError: libdigest.so: cannot open shared object file: No such file or directory\n```", "```rs\n$ LD_LIBRARY_PATH=$(pwd)/../../rust-digest/target/debug/ ./digest-0.1.0-py3.7.egg\nSHA256 of Hello World = b'A591A6D4BF420404A11733CFB7B190D62C65BFBCDA32B57B277D9AD9F146E'\n```", "```rs\n$ cp ../rust-digest/target/debug/digest.dll .\n$ python.exe src/digest.py\nSHA256 of Hello World = b'A591A6D4BF420404A11733CFB7B190D62C65BFBCDA32B57B277D9AD9F146E'\n```", "```rs\n$ cc --version\ncc (GCC) 9.1.1 20190503 (Red Hat 9.1.1-1)\nCopyright (C) 2019 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n$  ar --version\nGNU ar version 2.31.1-29.fc30\nCopyright (C) 2018 Free Software Foundation, Inc.\nThis program is free software; you may redistribute it under the terms of\nthe GNU General Public License version 3 or (at your option) any later version.\nThis program has absolutely no warranty.\n$ git --version\ngit version 2.21.0\n```", "```rs\n[build-dependencies]\nbindgen = \"0.49\"\n```", "```rs\nuse std::env;\nuse std::env::var;\nuse std::path::PathBuf;\nconst HEADER_FILE_NAME: &'static str = \"../tinyexpr/tinyexpr.h\";\n\nfn main() {\n    let project_dir = var(\"CARGO_MANIFEST_DIR\").unwrap();\n    println!(\"cargo:rustc-link-search={}/../tinyexpr/\", \n     project_dir);\n    println!(\"cargo:rustc-link-lib=static=tinyexpr\");\n\n    if cfg!(target_env = \"msvc\") {\n        println!(\"cargo:rustc-link-\n         lib=static=legacy_stdio_definitions\");\n    }\n\n    let bindings = bindgen::Builder::default()\n        .header(HEADER_FILE_NAME)\n        .generate()\n        .expect(\"Error generating bindings\");\n\n    let out_path = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n    bindings\n        .write_to_file(out_path.join(\"bindings.rs\"))\n        .expect(\"Error writing bindings\");\n}\n```", "```rs\n#![allow(non_upper_case_globals)]\n#![allow(non_camel_case_types)]\n#![allow(non_snake_case)]\nuse std::ffi::CString;\n\ninclude!(concat!(env!(\"OUT_DIR\"), \"/bindings.rs\"));\n\nfn main() {\n    let expr = \"sqrt(5^2+7^2+11^2+(8-2)^2)\".to_owned();\n    let result = unsafe {\n        te_interp(CString::new(expr.clone()).unwrap().into_raw(), 0 as *mut i32)\n    };\n    println!(\"{} = {}\", expr, result);\n}\n```", "```rs\n$  cargo build\n   Compiling libc v0.2.58\n   Compiling cc v1.0.37\n   Compiling autocfg v0.1.4\n   Compiling memchr v2.2.0\n   Compiling version_check v0.1.5\n   Compiling rustc-demangle v0.1.15\n   Compiling proc-macro2 v0.4.30\n   Compiling bitflags v1.1.0\n   Compiling ucd-util v0.1.3\n   Compiling byteorder v1.3.2\n   Compiling lazy_static v1.3.0\n   Compiling regex v1.1.7\n   Compiling glob v0.2.11\n   Compiling cfg-if v0.1.9\n   Compiling quick-error v1.2.2\n   Compiling utf8-ranges v1.0.3\n   Compiling unicode-xid v0.1.0\n   Compiling unicode-width v0.1.5\n   Compiling vec_map v0.8.1\n   Compiling ansi_term v0.11.0\n   Compiling termcolor v1.0.5\n   Compiling strsim v0.8.0\n   Compiling bindgen v0.49.3\n   Compiling peeking_take_while v0.1.2\n   Compiling shlex v0.1.1\n   Compiling backtrace v0.3.31\n   Compiling nom v4.2.3\n   Compiling regex-syntax v0.6.7\n   Compiling thread_local v0.3.6\n   Compiling log v0.4.6\n   Compiling humantime v1.2.0\n   Compiling textwrap v0.11.0\n   Compiling backtrace-sys v0.1.28\n   Compiling libloading v0.5.1\n   Compiling clang-sys v0.28.0\n   Compiling atty v0.2.11\n   Compiling aho-corasick v0.7.3\n   Compiling fxhash v0.2.1\n   Compiling clap v2.33.0\n   Compiling quote v0.6.12\n   Compiling cexpr v0.3.5\n   Compiling failure v0.1.5\n   Compiling which v2.0.1\n   Compiling env_logger v0.6.1\n   Compiling rust-tinyexpr v0.1.0 (Rust-Cookbook/Chapter07/bindgen/rust-tinyexpr)\nerror: linking with `cc` failed: exit code: 1\n[...]\n\"-Wl,-Bdynamic\" \"-ldl\" \"-lrt\" \"-lpthread\" \"-lgcc_s\" \"-lc\" \"-lm\" \"-lrt\" \"-lpthread\" \"-lutil\" \"-lutil\"\n  = note: /usr/bin/ld: cannot find -ltinyexpr\n          collect2: error: ld returned 1 exit status\n\nerror: aborting due to previous error\n\nerror: Could not compile `rust-tinyexpr`.\n\nTo learn more, run the command again with --verbose.\n```", "```rs\n$ cc -c -ansi -Wall -Wshadow -O2 tinyexpr.c -o tinyexpr.o -fPIC\n$ ar rcs libtinyexpr.a tinyexpr.o\n```", "```rs\n$ gcc -c -ansi -Wall -Wshadow -O2 tinyexpr.c -o tinyexpr.lib -fPIC\n```", "```rs\n$ cargo build\n   Compiling rust-tinyexpr v0.1.0 (Rust-Cookbook/Chapter07/bindgen/rust-tinyexpr)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n```", "```rs\n$ cargo test\n   Compiling rust-tinyexpr v0.1.0 (Rust-\n    Cookbook/Chapter07/bindgen/rust-tinyexpr)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.36s\n     Running target/debug/deps/rust_tinyexpr-fbf606d893dc44c6\n\nrunning 3 tests\ntest bindgen_test_layout_te_expr ... ok\ntest bindgen_test_layout_te_expr__bindgen_ty_1 ... ok\ntest bindgen_test_layout_te_variable ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.04s\n     Running `target/debug/rust-tinyexpr`\n    sqrt(5^2+7^2+11^2+(8-2)^2) = 15.198684153570664\n```"]