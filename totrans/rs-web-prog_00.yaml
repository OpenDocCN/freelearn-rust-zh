- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you want to push your web applications to the limit for speed and low energy
    consumption but still have memory safety? Rust enables you to have memory safety
    without the garbage collection and a similar energy consumption as the C programming
    language. This means you can create high-performance and secure applications with
    relative ease.
  prefs: []
  type: TYPE_NORMAL
- en: This book will take you through each stage of web development resulting in you
    deploying advanced web applications built in Rust and packaged in distroless Docker,
    resulting in server images around the size of 50 MB on AWS using automated build
    and deployment pipes that we created.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll start with an introduction to programming in Rust so you can avoid the
    common pitfalls when migrating from a traditional dynamic programming language.
    The book will show you how to structure Rust code for a project that spans multiple
    pages and modules. Next, you’ll explore the Actix Web framework and get a basic
    web server up and running. As you advance, you’ll learn how to process JSON requests
    and display the data from the server via HTML, CSS, and JavaScript and even build
    a basic React application for our data. You’ll also learn how to persist data
    and create RESTful services in Rust, where we log in and authenticate users and
    cache data in the frontend. Later, you’ll build an automated build and deployment
    process for the app on AWS over two EC2 instances, where we load balance the HTTPS
    traffic from a registered domain to our application on those EC2 instances, which
    we will build using Terraform. You will also lock down the traffic directly to
    the EC2 instances by configuring security groups in Terraform. You’ll then cover
    multi-layered builds to produce distroless Rust images. Finally, you’ll cover
    advanced web concepts exploring async Rust, Tokio, Hyper, and TCP framing. With
    these tools, you will implement the actor model to enable you to implement advanced
    complex async real-time event processing systems, practicing by building a basic
    stock purchasing system. You’ll finish the book by building your own queuing mechanism
    on Redis, where your own Rust home-built server and worker nodes consume the tasks
    on the queue and process these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book on web programming with Rust is for web developers who have programmed
    in traditional languages, such as Python, Ruby, JavaScript, and Java, and are
    looking to develop high-performance web applications with Rust. Although no prior
    experience with Rust is necessary, a solid understanding of web development principles
    and basic knowledge of HTML, CSS, and JavaScript is required if you want to get
    the most out of this book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18722_01.xhtml#_idTextAnchor015), *A Quick Introduction to Rust*,
    provides the basics of the Rust programming language.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18722_02.xhtml#_idTextAnchor039), *Designing Your Web Application
    in Rust*, covers building and managing applications in Rust.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18722_03.xhtml#_idTextAnchor059), *Handling HTTP Requests*,
    covers building a basic Rust server that handles HTTP requests using the Actix
    Web framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18722_04.xhtml#_idTextAnchor073), *Processing HTTP Requests*,
    covers extracting and handling data from an incoming HTTP request.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18722_05.xhtml#_idTextAnchor091), *Displaying Content in the
    Browser*, covers displaying data from the server and sending requests to the server
    from the browser with HTML, CSS, and JavaScript with React.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18722_06.xhtml#_idTextAnchor127), *Data Persistence with PostgreSQL*,
    covers managing and structuring data in PostgreSQL and interacting with the database
    with our Rust web server.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18722_07.xhtml#_idTextAnchor149), *Managing User Sessions*,
    covers authentication and managing of user sessions when making requests to the
    web server.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18722_08.xhtml#_idTextAnchor168), *Building RESTful Services*,
    covers implementing RESTful concepts for Rust web servers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18722_09.xhtml#_idTextAnchor182), *Testing Our Application Endpoints
    and Components*, covers end-to-end testing pipelines and unit testing on Rust
    web servers using Postman.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18722_10.xhtml#_idTextAnchor200), *Deploying Our Application
    on AWS*, covers building automated build and deployment pipelines to deploy on
    AWS using Docker and automating the infrastructure building with Terraform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18722_11.xhtml#_idTextAnchor222), *Configuring HTTPS with NGINX
    on AWS*, covers configuring HTTPS and routing to servers via load balancing on
    AWS with NGINX and routing traffic to different applications depending on endpoints
    in the URL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18722_12.xhtml#_idTextAnchor246), *Recreating Our Application
    in Rocket*, covers slotting our existing application into a Rocket web framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B18722_13.xhtml#_idTextAnchor264), *Best Practices for a Clean
    Web App Repository*, covers cleaning up a web application repository with multi-stage
    Docker builds for smaller images and init Docker containers to automate database
    migrations on deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B18722_14.xhtml#_idTextAnchor279), *Exploring the Tokio Framework*,
    covers implementing basic async code using the Tokio framework to facilitate an
    async runtime.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B18722_15.xhtml#_idTextAnchor291), *Accepting TCP Traffic with
    Tokio*, covers sending, receiving, and processing TCP traffic.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B18722_16.xhtml#_idTextAnchor306), *Building Protocols on Top
    of TCP*, covers processing TCP byte streams into advanced data structures using
    structs and framing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B18722_17.xhtml#_idTextAnchor323), *Implementing Actors and
    Async with the Hyper Framework*, covers building an async system using the actor
    framework that accepts HTTP requests via the Hyper framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 18*](B18722_18.xhtml#_idTextAnchor335), *Queuing Tasks with Redis*,
    covers accepting HTTP requests and packaging them as tasks to put on a Redis queue
    for a pool of workers to process.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to know some basic concepts around HTML and CSS. You will also
    need to have some basic understanding of JavaScript. However, the HTML, CSS, and
    JavaScript is only needed for displaying data in the browser. If you are just
    reading the book to build backend API servers in Rust, then knowledge of HTML,
    CSS, and JavaScript is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: Some basic understanding of programming concepts such as functions and loops
    will also be needed as these will not be covered in the book.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Rust | Windows, macOS, or Linux (any) |'
  prefs: []
  type: TYPE_TB
- en: '| Node (for JavaScript) | Windows, macOS, or Linux (any) |'
  prefs: []
  type: TYPE_TB
- en: '| Python 3 | Windows, macOS, or Linux (any) |'
  prefs: []
  type: TYPE_TB
- en: '| Docker | Windows, macOS, or Linux (any) |'
  prefs: []
  type: TYPE_TB
- en: '| docker-compose | Windows, macOS, or Linux (any) |'
  prefs: []
  type: TYPE_TB
- en: '| Postman | Windows, macOS, or Linux (any) |'
  prefs: []
  type: TYPE_TB
- en: '| Terraform | Windows, macOS, or Linux (any) |'
  prefs: []
  type: TYPE_TB
- en: To take full advantage of the deployment on AWS chapters, you will need an AWS
    account, which might cost if you are not eligible for the Free Tier. However,
    the builds are automated with Terraform, so spinning up builds and tearing them
    down will be quick and easy, so you will not need to keep the infrastructure running
    while working through the book, keeping the costs to a minimum.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: By the of this book, you will have a solid foundation of building and deploying
    Rust servers. However, it must be noted that Rust is a powerful language. As this
    book focuses on web programming and deployment, there is scope for improvement
    in Rust programming after the book. Further reading on Rust is advised after the
    book to enable you to solve more complex problems.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Rust-Web-Programming-2nd-Edition](https://github.com/PacktPublishing/Rust-Web-Programming-2nd-Edition).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://packt.link/Z1lgk](https://packt.link/Z1lgk).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “This means that we must alter the existing schema
    for the to-do item table and add a user schema to the `src/schema.rs` file.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “If we press the **Send** button in Postman another two times before the initial
    30 seconds is up, we get the following printout:”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Rust Web Programming - Second Edition*, we’d love to hear
    your thoughts! Please click here to go straight to the Amazon review page for
    this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
    Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18722_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: https://packt.link/free-ebook/9781803234694
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Part 1:Getting Started with Rust Web Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coding in Rust can be challenging. In this part, we cover the basics of Rust
    programming and how to build applications spanning multiple files in a project
    with dependencies. By the end of this part, you will be able to build applications
    in Rust, manage dependencies, navigate the Rust borrow checker, and manage data
    collections, structs, the basic design structure, and referencing structs.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18722_01.xhtml#_idTextAnchor015), *A Quick Introduction to Rust*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18722_02.xhtml#_idTextAnchor039), *Designing Your Web Application
    in Rust*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
