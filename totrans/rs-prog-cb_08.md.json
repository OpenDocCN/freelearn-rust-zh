["```rs\n#[macro_use]\nextern crate actix_web;\n\nuse actix_web::{web, App, middleware, HttpServer, Responder, Result};\nuse std::{env};\nuse actix_files as fs;\n\nfn index() -> Result<fs::NamedFile> {\n    Ok(fs::NamedFile::open(\"static/index.html\")?)\n}\n```", "```rs\nfn path_parser(info: web::Path<(String, i32)>) -> impl Responder {\n    format!(\"You tried to reach '{}/{}'\", info.0, info.1)\n}\n\nfn rust_cookbook() -> impl Responder {\n    format!(\"Welcome to the Rust Cookbook\")\n}\n\n#[get(\"/foxes\")]\nfn foxes() -> Result<fs::NamedFile> {\n    Ok(fs::NamedFile::open(\"static/foxes.jpg\")?)\n}\n```", "```rs\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\n    env_logger::init();\n    HttpServer::new(\n        || App::new()\n            .wrap(middleware::Logger::default())\n            .service(foxes)\n            .service(web::resource(\"/\").to(index))\n            .service(web::resource(\"/welcome\").to(rust_cookbook))  \n            .service(web::resource(\"/{path}/{id}\").to(path_parser)))\n        .bind(\"127.0.0.1:8081\")?\n        .run()\n}\n```", "```rs\n<html>\n    <body>\n        <marquee><h1>Hello World</h1></marquee>\n    </body>\n</html>\n```", "```rs\n[dependencies]\nactix-web = \"1\"\nenv_logger = \"0.6\"\nactix-files = \"0\"\n```", "```rs\n$ cargo run\n   Compiling autocfg v0.1.4\n   Compiling semver-parser v0.7.0\n   Compiling libc v0.2.59\n[...]\n   Compiling static-web v0.1.0 (Rust-Cookbook/Chapter08/static-web)\n    Finished dev [unoptimized + debuginfo] target(s) in 1m 51s\n     Running `target/debug/static-web`\n```", "```rs\n[...]\n    Finished dev [unoptimized + debuginfo] target(s) in 1m 51s\n     Running `target/debug/static-web`\n[2019-07-17T06:20:27Z INFO actix_web::middleware::logger] 127.0.0.1:35358 \"GET / HTTP/1.1\" 200 89 \"-\" \"Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" 0.004907\n[2019-07-17T06:21:58Z INFO actix_web::middleware::logger] 127.0.0.1:36154 \"GET /welcome HTTP/1.1\" 200 28 \"-\" \"Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" 0.000844\n^[[B[2019-07-17T06:22:34Z INFO actix_web::middleware::logger] 127.0.0.1:36476 \"GET /somethingarbitrary/10 HTTP/1.1\" 200 42 \"-\" \"Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" 0.000804\n[2019-07-17T06:24:22Z INFO actix_web::middleware::logger] 127.0.0.1:37424 \"GET /foxes HTTP/1.1\" 200 1416043 \"-\" \"Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" 0.010263\n```", "```rs\n#[macro_use]\nextern crate actix_web;\n\nuse actix_files as fs;\nuse actix_web::{ guard,\n    http::header, http::Method, middleware, web, App, HttpRequest, HttpResponse, HttpServer,\n    Responder, Result,\n};\nuse std::env;\nuse std::path::PathBuf;\n```", "```rs\n#[get(\"by-id/{id}\")]\nfn bookmark_by_id(id: web::Path<(i32)>) -> impl Responder {\n    format!(\"{{ \\\"id\\\": {}, \\\"url\\\": \\\"https://blog.x5ff.xyz\\\" }}\", id)\n}\n\nfn echo_bookmark(req: HttpRequest) -> impl Responder {\n    let id: i32 = req.match_info().query(\"id\").parse().unwrap();\n    format!(\"{:?}\", id)\n}\n\n#[get(\"/captures/{tail:.*}\")]\nfn captures(req: HttpRequest) -> Result<fs::NamedFile> {\n    let mut root = PathBuf::from(\"static/\");\n    let tail: PathBuf = req.match_info().query(\"tail\").parse().unwrap();\n    root.push(tail);\n\n    Ok(fs::NamedFile::open(root)?)\n}\n\n#[get(\"from-bitly/{bitlyid}\")]\nfn bit_ly(req: HttpRequest) -> HttpResponse {\n    let bitly_id = req.match_info().get(\"bitlyid\").unwrap();\n    let url = req.url_for(\"bitly\", &[bitly_id]).unwrap();\n    HttpResponse::Found()\n        .header(header::LOCATION, url.into_string())\n        .finish()\n        .into_body()\n}\n\n#[get(\"/\")]\nfn bookmarks_index() -> impl Responder {\n    format!(\"Welcome to your quick and easy bookmarking service!\")\n}\n```", "```rs\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\n    env_logger::init();\n    HttpServer::new(|| {\n        App::new()\n            .wrap(middleware::Logger::default())\n            .service(\n                web::scope(\"/api\")\n                .service(\n                    web::scope(\"/bookmarks\")\n                    .service(captures)\n                    .service(bookmark_by_id)\n                    .service(bit_ly)\n                    .service(web::resource(\"add/{id}\")\n                        .name(\"add\") \n\n                        .guard(guard::Any(guard::Put())\n                        .or(guard::Post()))\n                        .to(echo_bookmark))\n            ))\n            .service(\n                web::scope(\"/bookmarks\")\n                    .service(bookmarks_index)\n            )\n            .external_resource(\"bitly\", \"https://bit.ly/{bitly}\")\n\n    })\n    .bind(\"127.0.0.1:8081\")?\n    .run()\n}\n```", "```rs\n[dependencies]\nactix-web = \"1\"\nenv_logger = \"0.6\"\nactix-files = \"0\"\n```", "```rs\n$ cargo run\n Finished dev [unoptimized + debuginfo] target(s) in 0.09s\n Running `target/debug/api`\n[2019-07-17T15:38:14Z INFO actix_web::middleware::logger] 127.0.0.1:50426 \"GET /bookmarks/ HTTP/1.1\" 200 51 \"-\" \"curl/7.64.0\" 0.000655\n[2019-07-17T15:40:07Z INFO actix_web::middleware::logger] 127.0.0.1:51386 \"GET /api/bookmarks/by-id/10 HTTP/1.1\" 200 44 \"-\" \"curl/7.64.0\" 0.001103\n[2019-07-17T15:40:41Z INFO actix_web::middleware::logger] 127.0.0.1:51676 \"GET /api/bookmarks/from-bitly/2NOMT6Q HTTP/1.1\" 302 0 \"-\" \"curl/7.64.0\" 0.007269\n[2019-07-17T15:42:26Z INFO actix_web::middleware::logger] 127.0.0.1:52566 \"PUT /api/bookmarks/add/10 HTTP/1.1\" 200 2 \"-\" \"curl/7.64.0\" 0.000704\n[2019-07-17T15:42:33Z INFO actix_web::middleware::logger] 127.0.0.1:52626 \"POST /api/bookmarks/add/10 HTTP/1.1\" 200 2 \"-\" \"curl/7.64.0\" 0.001098\n[2019-07-17T15:42:39Z INFO actix_web::middleware::logger] 127.0.0.1:52678 \"DELETE /api/bookmarks/add/10 HTTP/1.1\" 404 0 \"-\" \"curl/7.64.0\" 0.000630\n[2019-07-17T15:43:30Z INFO actix_web::middleware::logger] 127.0.0.1:53094 \"GET /api/bookmarks/captures/does-not/exist HTTP/1.1\" 404 38 \"-\" \"curl/7.64.0\" 0.003554\n[2019-07-17T15:43:39Z INFO actix_web::middleware::logger] 127.0.0.1:53170 \"GET /api/bookmarks/captures/foxes.jpg HTTP/1.1\" 200 59072 \"-\" \"curl/7.64.0\" 0.013600\n```", "```rs\n$ curl localhost:8081/bookmarks/\nWelcome to your quick and easy bookmarking service!⏎ \n$ curl localhost:8081/api/bookmarks/by-id/10\n{ \"id\": 10, \"url\": \"https://blog.x5ff.xyz\" }⏎\n$ curl -v localhost:8081/api/bookmarks/from-bitly/2NOMT6Q\n* Trying ::1...\n* TCP_NODELAY set\n* connect to ::1 port 8081 failed: Connection refused\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> GET /api/bookmarks/from-bitly/2NOMT6Q HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.64.0\n> Accept: */*\n> \n< HTTP/1.1 302 Found\n< content-length: 0\n< location: https://bit.ly/2NOMT6Q\n< date: Wed, 17 Jul 2019 15:40:45 GMT\n<\n$ curl -X PUT localhost:8081/api/bookmarks/add/10\n10⏎ \n$ curl -X POST localhost:8081/api/bookmarks/add/10\n10⏎\n$ curl -v -X DELETE localhost:8081/api/bookmarks/add/10\n* Trying ::1...\n* TCP_NODELAY set\n* connect to ::1 port 8081 failed: Connection refused\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> DELETE /api/bookmarks/add/10 HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.64.0\n> Accept: */*\n> \n< HTTP/1.1 404 Not Found\n< content-length: 0\n< date: Wed, 17 Jul 2019 15:42:51 GMT\n< \n* Connection #0 to host localhost left intact\n$ curl localhost:8081/api/bookmarks/captures/does-not/exist\nNo such file or directory (os error 2)⏎ 17:43:31\n$ curl localhost:8081/api/bookmarks/captures/foxes.jpg\nWarning: Binary output can mess up your terminal. Use \"--output -\" to tell \nWarning: curl to output it to your terminal anyway, or consider \"--output \nWarning: <FILE>\" to save to a file.\n```", "```rs\n#[macro_use]\nextern crate actix_web;\n\nuse actix_web::{\n    guard, http::Method, middleware, web, App, HttpResponse, HttpServer,\n};\nuse serde_derive::{Deserialize, Serialize};\nuse std::env;\n```", "```rs\n#[derive(Debug, Clone, Serialize, Deserialize)]\nstruct Bookmark {\n    id: i32,\n    url: String,\n}\n\n#[get(\"by-id/{id}\")]\nfn bookmarks_by_id(id: web::Path<(i32)>) -> HttpResponse {\n    let bookmark = Bookmark {\n        id: *id,\n        url: \"https://blog.x5ff.xyz\".into(),\n    };\n    HttpResponse::Ok().json(bookmark)\n}\n\nfn echo_bookmark(bookmark: web::Json<Bookmark>) -> HttpResponse {\n    HttpResponse::Ok().json(bookmark.clone())\n}\n```", "```rs\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\n    env_logger::init();\n    HttpServer::new(|| {\n        App::new().wrap(middleware::Logger::default()).service(\n            web::scope(\"/api\").service(\n                web::scope(\"/bookmarks\")\n                    .service(bookmarks_by_id)\n                    .service(\n                        web::resource(\"add/{id}\")\n                            .name(\"add\")\n                            .guard(guard::Any(guard::Put()).\n                             or(guard::Post()))\n                            .to(echo_bookmark),\n                    )\n                    .default_service(web::route().method\n                     (Method::GET)),\n            ),\n        )\n    })\n    .bind(\"127.0.0.1:8081\")?\n    .run()\n}\n```", "```rs\n[dependencies]\nactix-web = \"1\"\nserde = \"1\"\nserde_derive = \"1\"\nenv_logger = \"0.6\"\n```", "```rs\n$ curl -d \"{\\\"id\\\":10,\\\"url\\\":\\\"https://blog.x5ff.xyz\\\"}\" localhost:8081/api/bookmarks/add/10\nContent type error⏎\n$ curl -d \"{\\\"id\\\":10,\\\"url\\\":\\\"https://blog.x5ff.xyz\\\"}\" -H \"Content-Type: application/json\" localhost:8081/api/bookmarks/add/10\n{\"id\":10,\"url\":\"https://blog.x5ff.xyz\"}⏎\n$ curl localhost:8081/api/bookmarks/by-id/1\n{\"id\":1,\"url\":\"https://blog.x5ff.xyz\"}⏎ \n```", "```rs\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.08s\n     Running `target/debug/json-handling`\n[2019-07-13T17:06:22Z INFO actix_web::middleware::logger] 127.0.0.1:48880 \"POST /api/bookmarks/add/10 HTTP/1.1\" 400 63 \"-\" \"curl/7.64.0\" 0.001955\n[2019-07-13T17:06:51Z INFO actix_web::middleware::logger] 127.0.0.1:49124 \"POST /api/bookmarks/add/10 HTTP/1.1\" 200 39 \"-\" \"curl/7.64.0\" 0.001290\n[2019-07-18T06:34:18Z INFO actix_web::middleware::logger] 127.0.0.1:54900 \"GET /api/bookmarks/by-id/1 HTTP/1.1\" 200 39 \"-\" \"curl/7.64.0\" 0.001636\n```", "```rs\n#[macro_use]\nextern crate actix_web;\nuse failure::Fail;\n\nuse actix_web::{ http, middleware, web, App, HttpResponse, HttpServer, error\n};\nuse serde_derive::{Deserialize, Serialize};\nuse std::env;\n```", "```rs\n#[derive(Fail, Debug)]\nenum WebError {\n    #[fail(display = \"Invalid id '{}'\", id)]\n    InvalidIdError { id: i32 },\n    #[fail(display = \"Invalid request, please try again later\")]\n    RandomInternalError,\n}\n\nimpl error::ResponseError for WebError {\n    fn error_response(&self) -> HttpResponse {\n        match *self {\n            WebError::InvalidIdError { .. } => HttpResponse::new(http::StatusCode::BAD_REQUEST),\n            WebError::RandomInternalError => HttpResponse::new(http::StatusCode::INTERNAL_SERVER_ERROR)\n        }\n    }\n}\n```", "```rs\n#[derive(Debug, Clone, Serialize, Deserialize)]\nstruct Bookmark {\n    id: i32,\n    url: String,\n}\n\n#[get(\"by-id/{id}\")]\nfn bookmarks_by_id(id: web::Path<(i32)>) -> Result<HttpResponse, WebError> {\n    if *id < 10 {\n        Ok(HttpResponse::Ok().json(Bookmark {\n            id: *id,\n            url: \"https://blog.x5ff.xyz\".into(),\n        }))\n    }\n    else {\n        Err(WebError::InvalidIdError { id: *id })\n    }\n}\n\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\n    env_logger::init();\n    HttpServer::new(|| {\n        App::new()\n            .wrap(middleware::Logger::default())\n            .service(\n                web::scope(\"/bookmarks\")\n                    .service(bookmarks_by_id)\n            )\n            .route(\n                \"/underconstruction\",\n                web::get().to(|| Result::<HttpResponse, \n                WebError>::Err(WebError::RandomInternalError)),\n            )\n    })\n    .bind(\"127.0.0.1:8081\")?\n    .run()\n}\n```", "```rs\n[dependencies]\nactix-web = \"1\"\nserde = \"1\"\nserde_derive = \"1\"\nenv_logger = \"0.6\"\nfailure = \"0\"\n```", "```rs\n$ cargo run\n  Compiling web-errors v0.1.0 (Rust-Cookbook/Chapter08/web-errors)\n    Finished dev [unoptimized + debuginfo] target(s) in 7.74s\n     Running `target/debug/web-errors`\n[2019-07-19T17:33:43Z INFO actix_web::middleware::logger] 127.0.0.1:46316 \"GET /bookmarks/by-id/1 HTTP/1.1\" 200 38 \"-\" \"curl/7.64.0\" 0.001529\n[2019-07-19T17:33:47Z INFO actix_web::middleware::logger] 127.0.0.1:46352 \"GET /bookmarks/by-id/100 HTTP/1.1\" 400 16 \"-\" \"curl/7.64.0\" 0.000952\n[2019-07-19T17:33:54Z INFO actix_web::middleware::logger] 127.0.0.1:46412 \"GET /underconstruction HTTP/1.1\" 500 39 \"-\" \"curl/7.64.0\" 0.000275\n```", "```rs\n$ curl -v localhost:8081/bookmarks/by-id/1\n* Trying ::1...\n* TCP_NODELAY set\n* connect to ::1 port 8081 failed: Connection refused\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> GET /bookmarks/by-id/1 HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.64.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< content-length: 38\n< content-type: application/json\n< date: Fri, 19 Jul 2019 17:33:43 GMT\n< \n* Connection #0 to host localhost left intact\n{\"id\":1,\"url\":\"https://blog.x5ff.xyz\"}⏎ \n```", "```rs\n$ curl -v localhost:8081/bookmarks/by-id/100\n* Trying ::1...\n* TCP_NODELAY set\n* connect to ::1 port 8081 failed: Connection refused\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> GET /bookmarks/by-id/100 HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.64.0\n> Accept: */*\n> \n< HTTP/1.1 400 Bad Request\n< content-length: 16\n< content-type: text/plain\n< date: Fri, 19 Jul 2019 17:33:47 GMT\n< \n* Connection #0 to host localhost left intact\nInvalid id '100'⏎\n```", "```rs\n$ curl -v localhost:8081/underconstruction\n* Trying ::1...\n* TCP_NODELAY set\n* connect to ::1 port 8081 failed: Connection refused\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> GET /underconstruction HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.64.0\n> Accept: */*\n> \n< HTTP/1.1 500 Internal Server Error\n< content-length: 39\n< content-type: text/plain\n< date: Fri, 19 Jul 2019 17:33:54 GMT\n< \n* Connection #0 to host localhost left intact\nInvalid request, please try again later⏎ \n```", "```rs\nhtml-templates/\n├── Cargo.toml\n├── src\n│   └── main.rs\n├── static\n│   ├── packtpub.com.b64\n│   ├── packtpub.com.png\n│   ├── placeholder.b64\n│   ├── placeholder.png\n│   ├── x5ff.xyz.b64\n│   └── x5ff.xyz.png\n└── templates\n    ├── index.hbs\n    └── partials\n        └──bookmark.hbs\n```", "```rs\n#[macro_use]\nextern crate actix_web;\n\nuse actix_web::{middleware, web, App, HttpServer, Responder};\nuse chrono::prelude::*;\nuse std::env;\nuse yarte::Template;\n\nconst PLACEHOLDER_IMG: &str =\n    \"iVBORw0KGgoAAAANS[...]s1NR+4AAAAASUVORK5CYII=\";\n\n#[derive(Template)]\n#[template(path = \"index.hbs\")]\nstruct IndexViewModel {\n    user: String,\n    bookmarks: Vec<BookmarkViewModel>,\n}\n\n#[derive(Debug, Clone)]\nstruct BookmarkViewModel {\n    timestamp: Date<Utc>,\n    url: String,\n    mime: String,\n    base64_image: String,\n}\n```", "```rs\n[dependencies] \nactix-web = \"1\"\nserde = \"1\"\nserde_derive = \"1\"\nenv_logger = \"0.6\"\nbase64 = \"0.10.1\"\nyarte = {version = \"0\", features=[\"with-actix-web\"]}\nchrono = \"0.4\"⏎ \n\n```", "```rs\n#[get(\"/{name}\")]\npub fn index(name: web::Path<(String)>) -> impl Responder {\n    let user_name = name.as_str().into();\n```", "```rs\n    if &user_name == \"Claus\" {\n        IndexViewModel {\n            user: user_name,\n            bookmarks: vec![\n                BookmarkViewModel {\n                    timestamp: Utc.ymd(2019, 7, 20),\n                    url: \"https://blog.x5ff.xyz\".into(),\n                    mime: \"image/png\".into(),\n                    base64_image: std::fs::read_to_string\n                    (\"static/x5ff.xyz.b64\")\n                        .unwrap_or(PLACEHOLDER_IMG.into()),\n                },\n                BookmarkViewModel {\n                    timestamp: Utc.ymd(2017, 9, 1),\n                    url: \"https://microsoft.com\".into(),\n                    mime: \"image/png\".into(),\n                    base64_image: std::fs::read_to_string\n                    (\"static/microsoft.com.b64\")\n                        .unwrap_or(PLACEHOLDER_IMG.into()),\n                },\n                BookmarkViewModel {\n                    timestamp: Utc.ymd(2019, 2, 2),\n                    url: \"https://www.packtpub.com/\".into(),\n                    mime: \"image/png\".into(),\n                    base64_image: std::fs::read_to_string\n                    (\"static/packtpub.com.b64\")\n                        .unwrap_or(PLACEHOLDER_IMG.into()),\n                },\n            ],\n        }\n```", "```rs\n    } else {\n        IndexViewModel {\n            user: user_name,\n            bookmarks: vec![],\n        }\n    }\n}\n```", "```rs\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\n    env_logger::init();\n    HttpServer::new(|| {\n        App::new()\n            .wrap(middleware::Logger::default())\n            .service(web::scope(\"/bookmarks\").service(index))\n    })\n    .bind(\"127.0.0.1:8081\")?\n    .run()\n}\n```", "```rs\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n</head>\n```", "```rs\n<body>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-lg-12 pb-3\">\n                <h1>Welcome {{ user }}.</h1>\n                <h2 class=\"text-muted\">Your bookmarks:</h2>\n            </div>\n        </div>\n\n        {{#if bookmarks.is_empty() }}\n        <div class=\"row\">\n            <div class=\"col-lg-12\">\n            No bookmarks :(\n            </div>\n        </div>\n        {{~/if}}\n\n        {{#each bookmarks}}\n            <div class=\"row {{# if index % 2 == 1 }} bg-light text-\n            dark {{/if }} mt-2 mb-2\">\n            {{> partials/bookmark }}\n            </div>\n        {{~/each}}\n    </div>\n</body>\n</html>\n```", "```rs\n<div class=\"col-lg-2\">\n    <img class=\"rounded img-fluid p-1\" src=\"img/>    {{ base64_image }}\"> </div>\n<div class=\"col-lg-10\">\n    <a href=\"{{ url }}\">\n        <h3>{{ url.replace(\"https://\", \"\") }}</h3>\n    </a>\n    <i class=\"text-muted\">Added {{ timestamp.format(\"%Y-%m-\n    %d\").to_string() }}</i>\n</div>\n```", "```rs\n$ cargo run\n   Compiling html-templates v0.1.0 (Rust-Cookbook/Chapter08/html-templates)\n Finished dev [unoptimized + debuginfo] target(s) in 2m 38s\n     Running `target/debug/html-templates`\n[2019-07-20T16:36:06Z INFO actix_web::middleware::logger] 127.0.0.1:50060 \"GET /bookmarks/Claus HTTP/1.1\" 200 425706 \"-\" \"Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" 0.013246\n[2019-07-20T16:37:34Z INFO actix_web::middleware::logger] 127.0.0.1:50798 \"GET /bookmarks/Hans HTTP/1.1\" 200 821 \"-\" \"Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" 0.000730\n```", "```rs\nCREATE TABLE bookmarks(id TEXT PRIMARY KEY, url TEXT);\n```", "```rs\n#[macro_use]\nextern crate diesel;\nmod models;\nmod schema;\n\nuse actix_web::{middleware, web, App, Error, HttpResponse, HttpServer};\n\nuse std::env;\n\nuse diesel::prelude::*;\nuse diesel::sqlite::SqliteConnection;\nuse futures::Future;\nuse models::{Bookmark, NewBookmark};\nuse serde_derive::{Deserialize, Serialize};\n```", "```rs\n// Helpers\nconst SQLITE_DB_URL: &str = \"db/bookmarks.sqlite\";\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct WebBookmark {\n    url: String,\n}\n\nfn connect(db_url: &str) -> SqliteConnection {\n    SqliteConnection::establish(&SQLITE_DB_URL)\n     .expect(&format!(\"Error connecting to {}\", db_url))\n}\n```", "```rs\n// Handlers\nfn bookmarks_by_id(req_id: web::Path<(String)>) -> impl \n Future<Item = HttpResponse, Error = Error> {\n    web::block(move || {\n        use self::schema::bookmarks::dsl::*;\n\n        let conn = connect(&SQLITE_DB_URL);\n        bookmarks\n            .filter(id.eq(req_id.as_str()))\n            .limit(1)\n            .load::<Bookmark>(&conn)\n    })\n    .then(|res| match res {\n        Ok(obj) => Ok(HttpResponse::Ok().json(obj)),\n        Err(_) => Ok(HttpResponse::InternalServerError().into()),\n    })\n}\n```", "```rs\nfn all_bookmarks() -> impl Future<Item = HttpResponse, Error = Error> {\n    web::block(move || {\n        use self::schema::bookmarks::dsl::*;\n\n        let conn = connect(&SQLITE_DB_URL);\n        bookmarks.load::<Bookmark>(&conn)\n    })\n    .then(|res| match res {\n        Ok(obj) => Ok(HttpResponse::Ok().json(obj)),\n        Err(_) => Ok(HttpResponse::InternalServerError().into()),\n    })\n}\n```", "```rs\nfn bookmarks_add(\n    bookmark: web::Json<WebBookmark>,\n     ) -> impl Future<Item = HttpResponse, Error = Error> {\n    web::block(move || {\n        use self::schema::bookmarks::dsl::*;\n\n        let conn = connect(&SQLITE_DB_URL);\n        let new_id = format!(\"{}\", uuid::Uuid::new_v4());\n        let new_bookmark = NewBookmark {\n            id: &new_id,\n            url: &bookmark.url,\n        };\n        diesel::insert_into(bookmarks)\n            .values(&new_bookmark)\n            .execute(&conn)\n            .map(|_| new_id)\n    })\n    .then(|res| match res {\n        Ok(obj) => Ok(HttpResponse::Ok().json(obj)),\n        Err(_) => Ok(HttpResponse::InternalServerError().into()),\n    })\n}\n```", "```rs\nfn bookmarks_delete(\n    req_id: web::Path<(String)>,\n     ) -> impl Future<Item = HttpResponse, Error = Error> {\n    web::block(move || {\n        use self::schema::bookmarks::dsl::*;\n\n        let conn = connect(&SQLITE_DB_URL);\n        diesel::delete(bookmarks.filter(id.eq(req_id.as_str())))\n         .execute(&conn)\n    })\n    .then(|res| match res {\n        Ok(obj) => Ok(HttpResponse::Ok().json(obj)),\n        Err(_) => Ok(HttpResponse::InternalServerError().into()),\n    })\n}\n```", "```rs\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\n    env_logger::init();\n    HttpServer::new(move || {\n        App::new().wrap(middleware::Logger::default()).service(\n            web::scope(\"/api\").service(\n                web::scope(\"/bookmarks\")\n                    .service(web::resource(\"/all\").route(web::get()\n                    .to_async(all_bookmarks)))\n                    .service(\n                        web::resource(\"by-id/{id}\").route(web\n                        ::get().to_async(bookmarks_by_id)),\n                    )\n                    .service(\n                        web::resource(\"/\")\n                            .data(web::JsonConfig::default())      \n                            .route(web::post().to_async\n                            (bookmarks_add)),\n                    )\n                    .service(\n                        web::resource(\"by-\n                        id/{id}\").route(web::delete()\n                        .to_async(bookmarks_delete)),\n                    ),\n            ),\n        )\n    })\n    .bind(\"127.0.0.1:8081\")?\n    .run()\n}\n```", "```rs\nuse crate::schema::bookmarks;\nuse serde_derive::Serialize;\n\n#[derive(Debug, Clone, Insertable)]\n#[table_name = \"bookmarks\"]\npub struct NewBookmark<'a> {\n    pub id: &'a str,\n    pub url: &'a str,\n}\n\n#[derive(Serialize, Queryable)]\npub struct Bookmark {\n    pub id: String,\n    pub url: String,\n}\n```", "```rs\ntable! {\n    bookmarks (id) {\n        id -> Text,\n        url -> Text,\n    }\n}\n```", "```rs\n[dependencies]\nactix-web = \"1\"\nserde = \"1\"\nserde_derive = \"1\"\nenv_logger = \"0.6\"\ndiesel = {version = \"1.4\", features = [\"sqlite\"] }\nuuid = { version = \"0.7\", features = [\"serde\", \"v4\"] }\nfutures = \"0.1\"\n```", "```rs\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.16s\n     Running `target/debug/orm`\n[2019-07-20T19:33:33Z INFO actix_web::middleware::logger] 127.0.0.1:54560 \"GET /api/bookmarks/all HTTP/1.1\" 200 2 \"-\" \"curl/7.64.0\" 0.004737\n[2019-07-20T19:33:52Z INFO actix_web::middleware::logger] 127.0.0.1:54722 \"POST /api/bookmarks/ HTTP/1.1\" 200 1 \"-\" \"curl/7.64.0\" 0.017087\n[2019-07-20T19:33:55Z INFO actix_web::middleware::logger] 127.0.0.1:54750 \"GET /api/bookmarks/all HTTP/1.1\" 200 77 \"-\" \"curl/7.64.0\" 0.002248\n[2019-07-20T19:34:11Z INFO actix_web::middleware::logger] 127.0.0.1:54890 \"GET /api/bookmarks/by-id/9b2a4264-3db6-4c50-88f1-807b20b5841e HTTP/1.1\" 200 77 \"-\" \"curl/7.64.0\" 0.003298\n[2019-07-20T19:34:23Z INFO actix_web::middleware::logger] 127.0.0.1:54992 \"DELETE /api/bookmarks/by-id/9b2a4264-3db6-4c50-88f1-807b20b5841e HTTP/1.1\" 200 1 \"-\" \"curl/7.64.0\" 0.017980\n[2019-07-20T19:34:27Z INFO actix_web::middleware::logger] 127.0.0.1:55030 \"GET /api/bookmarks/all HTTP/1.1\" 200 2 \"-\" \"curl/7.64.0\" 0.000972\n```", "```rs\n$ curl localhost:8081/api/bookmarks/all\n[]⏎\n$ curl -d \"{\\\"url\\\":\\\"https://blog.x5ff.xyz\\\"}\" -H \"Content-Type: application/json\" localhost:8081/api/bookmarks/\n\"9b2a4264-3db6-4c50-88f1-807b20b5841e\"⏎\n$ curl localhost:8081/api/bookmarks/all\n[{\"id\":\"9b2a4264-3db6-4c50-88f1-807b20b5841e\",\"url\":\"https://blog.x5ff.xyz\"}]⏎\n$ curl localhost:8081/api/bookmarks/by-id/9b2a4264-3db6-4c50-88f1-807b20b5841e\n[{\"id\":\"9b2a4264-3db6-4c50-88f1-807b20b5841e\",\"url\":\"https://blog.x5ff.xyz\"}]⏎\n$ curl -X \"DELETE\" localhost:8081/api/bookmarks/by-id/9b2a4264-3db6-4c50-88f1-807b20b5841e\n1⏎\n$ curl localhost:8081/api/bookmarks/all\n[]⏎\n```", "```rs\nCREATE TABLE bookmarks(id TEXT PRIMARY KEY, url TEXT, added TEXT);\nCREATE TABLE comments(id TEXT PRIMARY KEY, bookmark_id TEXT, comment TEXT);\n```", "```rs\n#[macro_use]\nextern crate diesel;\nmod models;\nmod schema;\n\nuse actix_web::{middleware, web, App, Error, HttpResponse, HttpServer};\n\nuse std::env;\n\nuse crate::schema::{date, julianday};\nuse chrono::prelude::*;\nuse diesel::prelude::*;\nuse diesel::sqlite::SqliteConnection;\nuse futures::Future;\nuse serde_derive::{Deserialize, Serialize};\n```", "```rs\n// Helpers\nconst SQLITE_DB_URL: &str = \"db/bookmarks.sqlite\";\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct WebBookmark {\n    url: String,\n    comment: Option<String>,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct WebBookmarkResponse {\n    id: String,\n    added: String,\n    url: String,\n    comment: Option<String>,\n}\n\nfn connect(db_url: &str) -> SqliteConnection {\n    SqliteConnection::establish(&SQLITE_DB_URL).expect(&format!(\"Error connecting to {}\", db_url))\n}\n```", "```rs\nfn bookmarks_as_julian_by_date(\n    at: web::Path<(String)>,\n    ) -> impl Future<Item = HttpResponse, Error = Error> {\n    web::block(move || {\n        use self::schema::bookmarks::dsl::*;\n        let conn = connect(&SQLITE_DB_URL);\n        bookmarks\n            .select((id, url, julianday(added)))\n            .filter(date(added).eq(at.as_str()))\n            .load::<models::JulianBookmark>(&conn)\n    })\n    .then(|res| match res {\n        Ok(obj) => Ok(HttpResponse::Ok().json(obj)),\n        Err(_) => Ok(HttpResponse::InternalServerError().into()),\n    })\n}\n```", "```rs\nfn bookmarks_add(\n    bookmark: web::Json<WebBookmark>,\n    ) -> impl Future<Item = HttpResponse, \n    Error = Error> {\n    web::block(move || {\n        use self::schema::bookmarks::dsl::*;\n        use self::schema::comments::dsl::*;\n\n        let conn = connect(&SQLITE_DB_URL);\n        let new_id = format!(\"{}\", uuid::Uuid::new_v4());\n        let now = Utc::now().to_rfc3339();\n        let new_bookmark = models::NewBookmark {\n            id: &new_id,\n            url: &bookmark.url,\n            added: &now,\n        };\n\n        if let Some(comment_) = &bookmark.comment {\n            let new_comment_id = format!(\"{}\", \n            uuid::Uuid::new_v4());\n            let new_comment = models::NewComment {\n                comment_id: &new_comment_id,\n                bookmark_id: &new_id,\n                comment: &comment_,\n            };\n            let _ = diesel::insert_into(comments)\n                .values(&new_comment)\n                .execute(&conn);\n        }\n\n        diesel::insert_into(bookmarks)\n            .values(&new_bookmark)\n            .execute(&conn)\n            .map(|_| new_id)\n    })\n    .then(|res| match res {\n        Ok(obj) => Ok(HttpResponse::Ok().json(obj)),\n        Err(_) => Ok(HttpResponse::InternalServerError().into()),\n    })\n}\n```", "```rs\nfn bookmarks_delete(\n    req_id: web::Path<(String)>,\n    ) -> impl Future<Item = HttpResponse, Error = Error> {\n    web::block(move || {\n        use self::schema::bookmarks::dsl::*;\n        use self::schema::comments::dsl::*;\n\n        let conn = connect(&SQLITE_DB_URL);\n        diesel::delete(bookmarks.filter(id.eq(req_id.as_str())))\n            .execute(&conn)\n            .and_then(|_| {\n                diesel::delete(comments.filter(bookmark_id.eq\n                (req_id.as_str()))).execute(&conn)\n            })\n    })\n    .then(|res| match res {\n        Ok(obj) => Ok(HttpResponse::Ok().json(obj)),\n        Err(_) => Ok(HttpResponse::InternalServerError().into()),\n    })\n}\n```", "```rs\nfn all_bookmarks() -> impl Future<Item = HttpResponse, Error = Error> {\n    web::block(move || {\n        use self::schema::bookmarks::dsl::*;\n        use self::schema::comments::dsl::*;\n\n        let conn = connect(&SQLITE_DB_URL);\n        bookmarks\n            .left_outer_join(comments)\n            .load::<(models::Bookmark, Option<models::Comment>)>\n            (&conn)\n            .map(\n                |bookmarks_: Vec<(models::Bookmark, \n                Option<models::Comment>)>| {\n                    let responses: Vec<WebBookmarkResponse> = \n                    bookmarks_\n                        .into_iter()\n                        .map(|(b, c)| WebBookmarkResponse {\n                            id: b.id,\n                            url: b.url,\n                            added: b.added,\n                            comment: c.map(|c| c.comment),\n                        })\n                        .collect();\n                    responses\n                },\n            )\n    })\n    .then(|res| match res {\n        Ok(obj) => Ok(HttpResponse::Ok().json(obj)),\n        Err(_) => Ok(HttpResponse::InternalServerError().into()),\n    })\n}\n```", "```rs\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\n    env_logger::init();\n    HttpServer::new(move || {\n        App::new().wrap(middleware::Logger::default()).service(\n            web::scope(\"/api\").service(\n                web::scope(\"/bookmarks\")\n                    .service(web::resource(\"/all\").route\n                    (web::get().to_async(all_bookmarks)))\n                    .service(\n                        web::resource(\"added_on/{at}/julian\")\n                            .route(web::get().to_async\n                            (bookmarks_as_julian_by_date)),\n                    )\n                    .service(\n                        web::resource(\"/\")\n                            .data(web::JsonConfig::default())\n                            .route(web::post().to_async\n                            (bookmarks_add)),\n                    )\n                    .service(\n                        web::resource(\"by-                    \n                        id/{id}\").route(web::delete().\n                        to_async(bookmarks_delete)),\n                    ),\n            ),\n        )\n    })\n    .bind(\"127.0.0.1:8081\")?\n    .run()\n}\n```", "```rs\nuse diesel::sql_types::Text;\njoinable!(comments -> bookmarks (bookmark_id));\nallow_tables_to_appear_in_same_query!(comments, bookmarks);\n\nsql_function! {\n    fn julianday(t: Text) -> Float;\n}\nsql_function! {\n    fn date(t: Text) -> Text;\n}\n\ntable! {\n    bookmarks (id) {\n        id -> Text,\n        url -> Text,\n        added -> Text,\n    }\n}\n\ntable! {\n    comments (comment_id) {\n        comment_id -> Text,\n        bookmark_id -> Text,\n        comment -> Text,\n    }\n}\n```", "```rs\nuse crate::schema::{bookmarks, comments};\nuse serde_derive::Serialize;\n\n#[derive(Debug, Clone, Insertable)]\n#[table_name = \"bookmarks\"]\npub struct NewBookmark<'a> {\n    pub id: &'a str,\n    pub url: &'a str,\n    pub added: &'a str,\n}\n\n#[derive(Debug, Serialize, Queryable)]\npub struct Bookmark {\n    pub id: String,\n    pub url: String,\n    pub added: String,\n}\n\n#[derive(Serialize, Queryable)]\npub struct JulianBookmark {\n    pub id: String,\n    pub url: String,\n    pub julian: f32,\n}\n\n#[derive(Debug, Serialize, Queryable)]\npub struct Comment {\n    pub bookmark_id: String,\n    pub comment_id: String,\n    pub comment: String,\n}\n\n#[derive(Debug, Clone, Insertable)]\n#[table_name = \"comments\"]\npub struct NewComment<'a> {\n    pub bookmark_id: &'a str,\n    pub comment_id: &'a str,\n    pub comment: &'a str,\n}\n```", "```rs\n[dependencies]\nactix-web = \"1\"\nserde = \"1\"\nserde_derive = \"1\"\nenv_logger = \"0.6\"\ndiesel = {version = \"1.4\", features = [\"sqlite\"] }\nuuid = { version = \"0.7\", features = [\"serde\", \"v4\"] }\nfutures = \"0.1\"\nchrono = \"0.4\"\n```", "```rs\n$ curl http://localhost:8081/api/bookmarks/all\n[]⏎\n$ curl -d \"{\\\"url\\\":\\\"https://blog.x5ff.xyz\\\"}\" -H \"Content-Type: application/json\" localhost:8081/api/bookmarks/\n\"db5538f4-e2f9-4170-bc38-02af42e6ef59\"⏎\n$ curl -d \"{\\\"url\\\":\\\"https://www.packtpub.com\\\", \\\"comment\\\": \\\"Great books\\\"}\" -H \"Content-Type:       \n  application/json\" localhost:8081/api/bookmarks/\n\"5648b8c3-635e-4d55-9592-d6dfab59b32d\"⏎\n$ curl http://localhost:8081/api/bookmarks/all\n[{\n    \"id\": \"db5538f4-e2f9-4170-bc38-02af42e6ef59\",\n    \"added\": \"2019-07-23T10:32:51.020749289+00:00\",\n    \"url\": \"https://blog.x5ff.xyz\",\n    \"comment\": null\n },\n {\n    \"id\": \"5648b8c3-635e-4d55-9592-d6dfab59b32d\",\n    \"added\": \"2019-07-23T10:32:59.899292263+00:00\",\n    \"url\": \"https://www.packtpub.com\",\n    \"comment\": \"Great books\"\n }]⏎\n$ curl http://localhost:8081/api/bookmarks/added_on/2019-07-23/julian\n[{\n    \"id\": \"db5538f4-e2f9-4170-bc38-02af42e6ef59\",\n    \"url\": \"https://blog.x5ff.xyz\",\n    \"julian\": 2458688.0\n},\n{\n    \"id\": \"5648b8c3-635e-4d55-9592-d6dfab59b32d\",\n    \"url\": \"https://www.packtpub.com\",\n    \"julian\": 2458688.0\n}]⏎ \n```", "```rs\n$ cargo run\n   Compiling advanced-orm v0.1.0 (Rust-Cookbook/Chapter08/advanced-orm)\n Finished dev [unoptimized + debuginfo] target(s) in 4.75s\n Running `target/debug/advanced-orm`\n[2019-07-23T10:32:36Z INFO actix_web::middleware::logger] 127.0.0.1:39962 \"GET /api/bookmarks/all HTTP/1.1\" 200 2 \"-\" \"curl/7.64.0\" 0.004323\n[2019-07-23T10:32:51Z INFO actix_web::middleware::logger] 127.0.0.1:40094 \"POST /api/bookmarks/ HTTP/1.1\" 200 38 \"-\" \"curl/7.64.0\" 0.018222\n[2019-07-23T10:32:59Z INFO actix_web::middleware::logger] 127.0.0.1:40172 \"POST /api/bookmarks/ HTTP/1.1\" 200 38 \"-\" \"curl/7.64.0\" 0.025890\n[2019-07-23T10:33:06Z INFO actix_web::middleware::logger] 127.0.0.1:40226 \"GET /api/bookmarks/all HTTP/1.1\" 200 287 \"-\" \"curl/7.64.0\" 0.001803\n[2019-07-23T10:34:18Z INFO actix_web::middleware::logger] 127.0.0.1:40844 \"GET /api/bookmarks/added_on/2019-07-23/julian HTTP/1.1\" 200 194 \"-\" \"curl/7.64.0\" 0.001653\n```", "```rs\n#[macro_use]\nextern crate actix_web;\nmod middlewares;\nuse actix_web::{http, middleware, web, App, HttpResponse, HttpServer, Responder};\nuse jsonwebtoken::{encode, Header};\nuse middlewares::Claims;\nuse serde_derive::{Deserialize, Serialize};\nuse std::env;\n```", "```rs\nconst PASSWORD: &str = \"swordfish\";\npub const TOKEN_SECRET: &str = \"0fd2af6f\";\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Login {\n    password: String,\n}\n\n#[get(\"/secret\")]\nfn authed() -> impl Responder {\n    format!(\"Congrats, you are authenticated\")\n}\n```", "```rs\nfn login(login: web::Json<Login>) -> HttpResponse {\n    // TODO: have a proper security concept\n    if &login.password == PASSWORD {\n        let claims = Claims {\n            user_id: \"1\".into(),\n        };\n        encode(&Header::default(), &claims, TOKEN_SECRET.as_ref())\n            .map(|token| {\n                HttpResponse::Ok()\n                    .header(http::header::AUTHORIZATION, format!\n                    (\"Bearer {}\", token))\n                    .finish()\n            })\n            .unwrap_or(HttpResponse::InternalServerError().into())\n    } else {\n        HttpResponse::Unauthorized().into()\n    }\n}\n\nfn main() -> std::io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"actix_web=debug\");\n    env_logger::init();\n    HttpServer::new(|| {\n        App::new()\n            .wrap(middleware::Logger::default())\n            .wrap(middlewares::JwtLogin)\n            .service(authed)\n            .service(web::resource(\"/login\").route(web::post().to(login)))\n    })\n    .bind(\"127.0.0.1:8081\")?\n    .run()\n}\n```", "```rs\nuse actix_service::{Service, Transform};\nuse actix_web::dev::{ServiceRequest, ServiceResponse};\nuse actix_web::{http, Error, HttpResponse};\nuse futures::future::{ok, Either, FutureResult};\nuse futures::Poll;\nuse jsonwebtoken::{decode, Validation};\nuse serde_derive::{Deserialize, Serialize};\n\n#[derive(Debug, Serialize, Deserialize)]\npub struct Claims {\n    pub user_id: String,\n}\n\npub struct JwtLogin;\n\nimpl<S, B> Transform<S> for JwtLogin\nwhere\n    S: Service<Request = ServiceRequest, Response = ServiceResponse<B>, Error = Error>,\n    S::Future: 'static,\n{\n    type Request = ServiceRequest;\n    type Response = ServiceResponse<B>;\n    type Error = Error;\n    type InitError = ();\n    type Transform = JwtLoginMiddleware<S>;\n    type Future = FutureResult<Self::Transform, Self::InitError>;\n\n    fn new_transform(&self, service: S) -> Self::Future {\n        ok(JwtLoginMiddleware { service })\n    }\n}\n```", "```rs\npub struct JwtLoginMiddleware<S> {\n    service: S,\n}\n\nimpl<S, B> Service for JwtLoginMiddleware<S>\nwhere\n    S: Service<Request = ServiceRequest, Response = \n    ServiceResponse<B>, Error = Error>,\n    S::Future: 'static,\n{\n    type Request = ServiceRequest;\n    type Response = ServiceResponse<B>;\n    type Error = Error;\n    type Future = Either<S::Future, FutureResult<Self::Response, \n    Self::Error>>;\n\n    fn poll_ready(&mut self) -> Poll<(), Self::Error> {\n        self.service.poll_ready()\n    }\n```", "```rs\n    fn call(&mut self, req: ServiceRequest) -> Self::Future {\n        if req.path() == \"/login\" {\n            Either::A(self.service.call(req))\n        } else {\n            if let Some(header_value) = \n            req.headers().get(http::header::AUTHORIZATION) {\n                let token = header_value.to_str().unwrap().\n                replace(\"Bearer\", \"\");\n                let mut validation = Validation::default();\n                validation.validate_exp = false; // our logins don't \n                // expire\n                if let Ok(_) =\n                    decode::<Claims>(&token.trim(), \n                    crate::TOKEN_SECRET.as_ref(), &validation)\n                {\n                    Either::A(self.service.call(req))\n                } else {\n                    Either::B(ok(\n                        req.into_response(HttpResponse::Unauthorized()\n                        .finish().into_body())\n                    ))\n                }\n            } else {\n                Either::B(ok(\n                    req.into_response(HttpResponse::Unauthorized().\n                    finish().into_body())\n                ))\n            }\n        }\n    }\n}\n```", "```rs\n[dependencies]\nactix-web = \"1\"\nserde = \"1\"\nserde_derive = \"1\"\nenv_logger = \"0.6\"\njsonwebtoken = \"6\"\nfutures = \"0.1\"\nactix-service = \"0.4\"\n```", "```rs\n$ cargo run\n   Compiling authentication v0.1.0 (Rust-Cookbook/Chapter08/authentication)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.07s\n     Running `target/debug/authentication`\n[2019-07-22T21:28:07Z INFO actix_web::middleware::logger] 127.0.0.1:33280 \"POST /login HTTP/1.1\" 401 0 \"-\" \"curl/7.64.0\" 0.009627\n[2019-07-22T21:28:13Z INFO actix_web::middleware::logger] 127.0.0.1:33334 \"POST /login HTTP/1.1\" 200 0 \"-\" \"curl/7.64.0\" 0.009191\n[2019-07-22T21:28:21Z INFO actix_web::middleware::logger] 127.0.0.1:33404 \"GET /secret HTTP/1.1\" 200 31 \"-\" \"curl/7.64.0\" 0.000784\n\n```", "```rs\n$ curl -v localhost:8081/secret\n* Trying ::1...\n* TCP_NODELAY set\n* connect to ::1 port 8081 failed: Connection refused\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> GET /secret HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.64.0\n> Accept: */*\n> \n< HTTP/1.1 401 Unauthorized\n< content-length: 0\n< date: Mon, 22 Jul 2019 21:27:48 GMT\n< \n* Connection #0 to host localhost left intact\n```", "```rs\n$ curl -d \"{\\\"password\\\":\\\"a-good-guess\\\"}\" -H \"Content-Type: application/json\" \n  http://localhost:8081/login -v\n* Trying ::1...\n* TCP_NODELAY set\n* connect to ::1 port 8081 failed: Connection refused\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> POST /login HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.64.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 27\n> \n* upload completely sent off: 27 out of 27 bytes\n< HTTP/1.1 401 Unauthorized\n< content-length: 0\n< date: Mon, 22 Jul 2019 21:28:07 GMT\n< \n* Connection #0 to host localhost left intact\n```", "```rs\n$ curl -d \"{\\\"password\\\":\\\"swordfish\\\"}\" -H \"Content-Type: application/json\" \n  http://localhost:8081/login -v\n* Trying ::1...\n* TCP_NODELAY set\n* connect to ::1 port 8081 failed: Connection refused\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> POST /login HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.64.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 24\n> \n* upload completely sent off: 24 out of 24 bytes\n< HTTP/1.1 200 OK\n< content-length: 0\n< authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMSJ9.V_Po0UCGZqNmbXw0hYozeFLsNpjTZeSh8wcyELavx-c\n< date: Mon, 22 Jul 2019 21:28:13 GMT\n< \n* Connection #0 to host localhost left intact\n```", "```rs\n\n$ curl -H \"authorization: Bearer \n  eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMSJ9.V_Po0UCGZqNmbXw0hYozeFLsNpjTZeSh8wcyELavx-  \n  c\" http://localhost:8081/secret -v\n* Trying ::1...\n* TCP_NODELAY set\n* connect to ::1 port 8081 failed: Connection refused\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> GET /secret HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.64.0\n> Accept: */*\n> authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMSJ9.V_Po0UCGZqNmbXw0hYozeFLsNpjTZeSh8wcyELavx-c\n> \n< HTTP/1.1 200 OK\n< content-length: 31\n< content-type: text/plain; charset=utf-8\n< date: Mon, 22 Jul 2019 21:28:21 GMT\n< \n* Connection #0 to host localhost left intact\nCongrats, you are authenticated⏎\n```"]