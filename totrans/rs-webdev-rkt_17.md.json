["```rs\n    [workspace]\n    members = [\n    Â Â \"our_application\",\n    ]\n    ```", "```rs\n    cargo new our_application_wasm\n    ```", "```rs\n    members = [\n    Â Â \"our_application\",\n    Â Â \"our_application_wasm\",\n    ]\n    ```", "```rs\n    cargo build\n    ```", "```rs\n    cargo build --bin our_application\n    ```", "```rs\nrustup target list\n```", "```rs\nrustup target add wasm32-unknown-unknown\n```", "```rs\ncargo build --target wasm32-unknown-unknown --bin our_application_wasm\n```", "```rs\ncargo install --locked trunk\n```", "```rs\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    </head>\n    <body>\n    Â Â <header>\n    Â Â Â Â <a href=\"/\" class=\"button\">Home</a>\n    Â Â </header>\n    Â Â <div class=\"container\" id=\"main_container\"></div>\n    </body>\n    </html>\n    ```", "```rs\n    gloo-utils = \"0.1.3\"\n    yew = \"0.19\"\n    getrandom = { version = \"0.2\", features = [\"js\"] }\n    ```", "```rs\n    use gloo_utils::document;\n    use yew::prelude::*;\n    ```", "```rs\n    #[function_component(App)]\n    fn app() -> Html {\n    Â Â Â Â html! {\n    Â Â Â Â Â Â Â Â <>{\"Hello WebAssembly!\"}</>\n    Â Â Â Â }\n    }\n    ```", "```rs\n    let document = document();\n    let main_container = document.query_selector(\"#main_container\").unwrap().unwrap();\n    ```", "```rs\n    yew::start_app_in_element::<App>(main_container);\n    ```", "```rs\n    trunk serve\n    ```", "```rs\nApr 27 20:35:44.122Â Â INFO fetching cargo artifacts\nApr 27 20:35:44.747Â Â INFO processing WASM\nApr 27 20:35:44.782Â Â INFO using system installed binary app=\"wasm-bindgen\" version=\"0.2.80\"\nApr 27 20:35:44.782Â Â INFO calling wasm-bindgen\nApr 27 20:35:45.065Â Â INFO copying generated wasm-bindgen artifacts\nApr 27 20:35:45.072Â Â INFO applying new distribution\nApr 27 20:35:45.074Â Â INFO âœ… success\nApr 27 20:35:45.074Â Â INFO ðŸ“¡ serving static assets at -> /\nApr 27 20:35:45.075Â Â INFO ðŸ“¡ server listening at 0.0.0.0:8080\nApr 27 20:53:10.796Â Â INFO ðŸ“¦ starting build\nApr 27 20:53:10.797Â Â INFO spawning asset pipelines\nApr 27 20:53:11.430Â Â INFO building our_application_wasm\n```", "```rs\n    chrono = {version = \"0.4\", features = [\"serde\"]}\n    serde = {version = \"1.0.130\", features = [\"derive\"]}\n    uuid = {version = \"0.8.2\", features = [\"v4\", \"serde\"]}\n    ```", "```rs\n    use chrono::{offset::Utc, DateTime};\n    use serde::Deserialize;\n    use std::fmt::{self, Display, Formatter};\n    use uuid::Uuid;\n    ```", "```rs\n    #[derive(Deserialize, Clone, PartialEq)]\n    enum UserStatus {\n    Â Â Â Â Inactive = 0,\n    Â Â Â Â Active = 1,\n    }\n    impl fmt::Display for UserStatus {\n    Â Â Â Â fn fmt(&self, f: &mut fmt::Formatter<'_>) -> \n    Â Â Â Â fmt::Result {\n    Â Â Â Â Â Â Â Â match *self {\n    Â Â Â Â Â Â Â Â Â Â Â Â UserStatus::Inactive => write!(f, \n    Â Â Â Â Â Â Â Â Â Â Â Â \"Inactive\"),\n    Â Â Â Â Â Â Â Â Â Â Â Â UserStatus::Active => write!(f, \"Active\"),\n    Â Â Â Â Â Â Â Â }\n    Â Â Â Â }\n    }\n    #[derive(Copy, Clone, Deserialize, PartialEq)]\n    struct OurDateTime(DateTime<Utc>);\n    impl fmt::Display for OurDateTime {\n    Â Â Â Â fn fmt(&self, f: &mut fmt::Formatter<'_>) -> \n    Â Â Â Â fmt::Result {\n    Â Â Â Â Â Â Â Â write!(f, \"{}\", self.0)\n    Â Â Â Â }\n    }\n    #[derive(Deserialize, Clone, PartialEq)]\n    struct User {\n    Â Â Â Â uuid: Uuid,\n    Â Â Â Â username: String,\n    Â Â Â Â email: String,\n    Â Â Â Â description: Option<String>,\n    Â Â Â Â status: UserStatus,\n    Â Â Â Â created_at: OurDateTime,\n    Â Â Â Â updated_at: OurDateTime,\n    }\n    #[derive(Clone, Copy, Deserialize, PartialEq)]\n    struct Pagination {\n    Â Â Â Â next: OurDateTime,\n    Â Â Â Â limit: usize,\n    }\n    #[derive(Deserialize, Default, Properties, PartialEq)]\n    struct UsersWrapper {\n    Â Â Â Â users: Vec<User>,\n    Â Â Â Â #[serde(skip_serializing_if = \"Option::is_none\")]\n    Â Â Â Â #[serde(default)]\n    Â Â Â Â pagination: Option<Pagination>,\n    }\n    ```", "```rs\n    struct DisplayOption<T>(pub Option<T>);\n    impl<T: Display> Display for DisplayOption<T> {\n    Â Â Â Â fn fmt(&self, f: &mut Formatter) -> fmt::Result {\n    Â Â Â Â Â Â Â Â match self.0 {\n    Â Â Â Â Â Â Â Â Â Â Â Â Some(ref v) => write!(f, \"{}\", v),\n    Â Â Â Â Â Â Â Â Â Â Â Â None => write!(f, \"\"),\n    Â Â Â Â Â Â Â Â }\n    Â Â Â Â }\n    }\n    ```", "```rs\n    #[function_component(UsersList)]\n    fn users_list(UsersWrapper { users, .. }: &UsersWrapper) -> Html {\n    Â Â Â Â users.iter()\n    Â Â Â Â Â Â Â Â .enumerate().map(|user| html! {\n    Â Â Â Â Â Â Â Â <div class=\"container\">\n    Â Â Â Â Â Â Â Â Â Â Â Â <div><mark class=\"tag\">{ format!(\"{}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â user.0) }</mark></div>\n    Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"row\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-3\"><mark>{ \"UUID:\" \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }</mark></div>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-9\"> { format!(\"{}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â user.1.uuid) }</div>\n    Â Â Â Â Â Â Â Â Â Â Â Â </div>\n    Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"row\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-3\"><mark>{ \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \"Username:\" }</mark></div>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-9\">{ format!(\"{}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â user.1.username) }</div>\n    Â Â Â Â Â Â Â Â Â Â Â Â </div>\n    Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"row\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-3\"><mark>{ \"Email:\" \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }</mark></div>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-9\"> { format!(\"{}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â user.1.email) }</div>\n    Â Â Â Â Â Â Â Â Â Â Â Â </div>\n    Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"row\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-3\"><mark>{ \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \"Description:\" }</mark></div>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-9\"> { format!(\"{}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â DisplayOption(user.1.description.\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â as_ref())) }</div>\n    Â Â Â Â Â Â Â Â Â Â Â Â </div>\n    Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"row\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-3\"><mark>{ \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â \"Status:\" }</mark></div>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-9\"> { format!(\"{}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â user.1.status) }</div>\n    Â Â Â Â Â Â Â Â Â Â Â Â </div>\n    Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"row\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-3\"><mark>{ \"Created \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â At:\" }</mark></div>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-9\"> { format!(\"{}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â user.1.created_at) }</div>\n    Â Â Â Â Â Â Â Â Â Â Â Â </div>\n    Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"row\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-3\"><mark>{ \"Updated \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â At:\" }</mark></div>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div class=\"col-sm-9\"> { format!(\"{}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â user.1.updated_at) }</div>\n    Â Â Â Â Â Â Â Â Â Â Â Â </div>\n    Â Â Â Â Â Â Â Â Â Â Â Â <a href={format!(\"/users/{}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â user.1.uuid)} class=\"button\">{ \"See user\" \n    Â Â Â Â Â Â Â Â Â Â Â Â }</a>\n    Â Â Â Â Â Â Â Â </div>\n    Â Â Â Â }).collect()\n    }\n    ```", "```rs\n    reqwasm = \"0.2\"\n    wasm-bindgen-futures = \"0.4\"\n    ```", "```rs\n    const USERS_URL: &str = \"http://127.0.0.1:8000/api/users\";\n    ```", "```rs\n    use reqwasm::http::Request;\n    ```", "```rs\nfn app() -> Html {\nÂ Â Â Â let users_wrapper = use_state(|| UsersWrapper::\nÂ Â Â Â default());\nÂ Â Â Â {\nÂ Â Â Â Â Â Â Â let users_wrapper = users_wrapper.clone();\nÂ Â Â Â Â Â Â Â use_effect_with_deps(\nÂ Â Â Â Â Â Â Â Â Â Â Â move |_| {\nlet users_wrapper = \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â users_wrapper.clone();\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â wasm_bindgen_futures::spawn_\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â local(async move {\nlet fetched_users_wrapper: \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â UsersWrapper = Request::get(\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â USERS_URL)\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .send()\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .await\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .unwrap()\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .json()\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .await\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .unwrap();\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â users_wrapper.set(fetched_\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â users_wrapper);\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â });\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â || ()\nÂ Â Â Â Â Â Â Â Â Â Â Â },\nÂ Â Â Â Â Â Â Â Â Â Â Â (),\nÂ Â Â Â Â Â Â Â );\nÂ Â Â Â }\n}\n```", "```rs\n    let users_wrapper = use_state(|| UsersWrapper::default());\n    {\n    Â Â Â Â ...\n    }\n    let (next, limit): (Option<OurDateTime>, Option<usize>) = if users_wrapper.pagination.is_some()\n    {\n    Â Â Â Â let pagination = users_wrapper.\n    Â Â Â Â pagination.as_ref().unwrap();\n    Â Â Â Â (Some(pagination.next), Some(pagination.limit))\n    } else {\n    Â Â Â Â (None, None)\n    };\n    ```", "```rs\n    html! {\n    Â Â Â Â <>\n    Â Â Â Â Â Â Â Â <UsersList users = {users_wrapper.\n    Â Â Â Â Â Â Â Â users.clone()}/>\n    Â Â Â Â Â Â Â Â if next.is_some() {\n    Â Â Â Â Â Â Â Â Â Â Â Â <a href={ format!(\"/users?\n    Â Â Â Â Â Â Â Â Â Â Â Â pagination.next={}&pagination.limit={}\", \n    Â Â Â Â Â Â Â Â Â Â Â Â DisplayOption(next), DisplayOption(limit)) \n    Â Â Â Â Â Â Â Â Â Â Â Â } class=\"button\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â { \"Next\" }\n    Â Â Â Â Â Â Â Â Â Â Â Â </a>\n    Â Â Â Â Â Â Â Â }\n    Â Â Â Â </>\n    }\n    ```", "```rs\n    trunk build\n    ```", "```rs\n    <head>\n    Â Â ...\n    Â Â {% block wasm %}{% endblock wasm %}\n    Â Â <meta...> \n    </head>\n    <body>\n    Â Â ...\n    Â Â {% block wasmscript %}{% endblock wasmscript %}\n    </body>\n    ```", "```rs\n    {% extends \"template\" %}\n    {% block wasm %}\n    <link rel=\"preload\" href=\"/assets/index-9eb0724334955a2a_bg.wasm\" as=\"fetch\" type=\"application/wasm\" crossorigin=\"\">\n    <link rel=\"modulepreload\" href=\"/assets/index-9eb0724334955a2a.js\">\n    {% endblock wasm %}\n    {% block body %}\n    <div id=\"main_container\"></div>\n    {% endblock body %}\n    {% block wasmscript %}\n    <script type=\"module\">import init from '/assets/index-9eb0724334955a2a.js';init('/assets/index-9eb0724334955a2a_bg.wasm');</script>\n    {% endblock wasmscript %}\n    ```", "```rs\n    #[get(\"/users/wasm\", format = \"text/html\")]\n    pub async fn wasm() -> HtmlResponse {\n    Â Â Â Â let context = context! {};\n    Â Â Â Â Ok(Template::render(\"users/wasm\", context))\n    }\n    ```", "```rs\n    user::delete_user_entry_point,\n    user::wasm,\n    post::get_post,\n    ```"]