["```rs\n// see Chapter 2/code/comments.rs\nfn main() {\n // Here starts the execution of the Game.\n // We begin with printing a welcome message:\n  println!(\"Welcome to the Game!\");\n}\n```", "```rs\n/// Start of the Game\nfn main() {\n}\n```", "```rs\n// see Chapter 2/code/constants1.rs\nstatic MAX_HEALTH: i32 = 100;\nstatic GAME_NAME: &'static str = \"Monster Attack\";\n\nfn main() {\n}\n```", "```rs\n// warning: incorrect code!\nstatic GAME_NAME: &str = \"Monster Attack\";\n```", "```rs\n2:22 error: missing lifetime specifier [E0106]\n\n```", "```rs\n// see Chapter 2/code/constants2.rs\nstatic MAX_HEALTH: i32 = 100;\nstatic GAME_NAME: &'static str = \"Monster Attack\";\n\nfn main() {\n const PI: f32 = 3.14;\n println!(\"The Game you are playing is called {}.\", GAME_NAME);\n  println!(\"You start with {} health points.\", MAX_HEALTH);\n}\n```", "```rs\nThe Game you are playing is called Monster Attack.\nYou start with 100 health points.\n\n```", "```rs\nprintln!(\"In the Game {0} you start with {1} % health, yes you read it correctly: {1} points!\", GAME_NAME, MAX_HEALTH);\n```", "```rs\nIn the Game Monster Attack you start with 100 % health, yes you read it correctly: 100 points!\n\n```", "```rs\n    println!(\"You have {points} % health\", points=70);\n```", "```rs\nYou have 70 % health\n\n```", "```rs\nprintln!(\"MAX_HEALTH is {:x} in hexadecimal\", MAX_HEALTH); // 64\nprintln!(\"MAX_HEALTH is {:b} in binary\", MAX_HEALTH);  // 1100100\nprintln!(\"pi is {:e} in floating point notation\", PI); // 3.14e0\n```", "```rs\n// see Chapter 2/code/bindings.rs\nfn main() {\n let energy = 5; // value 5 is bound to variable energy\n}\n```", "```rs\nvalues.rs:2:6: 2:7 warning: unused variable: `energy`, #[warn(unused_variables)] on by default\n\n```", "```rs\nlet copy_energy = energy;\nprintln!(\"Your energy is {}\", energy););\n```", "```rs\nlet level_title = \"Level 1\";\nlet dead = false;\nlet magic_number = 3.14f32;\nlet empty = ();  // the value of the unit type ()\n```", "```rs\n  let mut fuel = 34;\n  fuel = 60;\n```", "```rs\n  let n: i32;\n```", "```rs\nlet n: i32 = -2; // n is a binding of type i32 and value -2\n```", "```rs\nlet x = 42u8;\nlet magic_number = 3.14f64;\n```", "```rs\n// see Chapter 2/code/scope.rs\nfn main() {\n  let outer = 42;\n { // start of code block\n        let inner = 3.14;\n        println!(\"block variable: {}\", inner);\n        let outer = 99; // shadows the first outer variable\n        println!(\"block variable outer: {}\", outer);\n } // end of code block\n    println!(\"outer variable: {}\", outer);\n  }\n```", "```rs\nblock variable: 3.14\nblock variable outer: 99\nouter variable: 42\n\n```", "```rs\n// see Chapter 2/code/type_errors.rs\n// warning: this code does not work!\nfn main() {\n  let score: i32 = 100;\n  score = \"YOU WON!\"\n}\n```", "```rs\nlet score = \"YOU WON!\";\n```", "```rs\nlet player1 = \"Rob\";\nlet player2 = \"Jane\";\nlet player3 = player1 + player2;\n```", "```rs\n    let player3 = format!(\"{}{}\", player1, player2);\n```", "```rs\n// see Chapter 2/code/type_conversions.rs\nfn main() {\n  let points = 10i32;\n  let mut saved_points: u32 = 0;\n  saved_points = points; // error !\n}\n```", "```rs\n saved_points = points as u32;\n\n```", "```rs\n  let f2 = 3.14;\n  saved_points = f2 as u32; // truncation to value 3 occurs here\n```", "```rs\n  let mag = \"Gandalf\";\n  saved_points = mag as u32; // error: non-scalar cast:`&str`as`u32`\n```", "```rs\n// see Chapter 2/code/alias.rs\ntype MagicPower = u16;\n\nfn main() {\n  let run: MagicPower= 7800;  \n}\n```", "```rs\n// see Chapter 2/code/expressions.rs\nlet a = 2;    // a binds to 2\nlet b = 5;    // b binds to 5\nlet n = a + b;   // n binds to 7\n```", "```rs\n  let mut n = 0;\n  let mut m = 1;\n  let t = m; m = n; n  = t;\n  println!(\"{} {} {}\", n, m, t); // which prints out 1 0 1\n```", "```rs\n    let mut a = 5;\n    let mut b = 6;\n    let n = 7;\n    let a = b = n; \n```", "```rs\nlet n1 = {\n let a = 2;\n let b = 5;\n a + b   // <-- no semicolon!\n};\n  println!(\"n1 is: {}\", n1);  // prints: n1 is 7\n\n  let n2 = {\n    let a = 2;\n    let b = 5;\n    a + b;\n  };\n  println!(\"n2 is: {:?}\", n2);  // prints: n2 is ()\n```", "```rs\n   // see Chapter 2/code/references.rs\n  let health = 32;\n  let mut game = \"Space Invaders\";\n```", "```rs\nprintln!(\"address of health-value: {:p}\", &health); \n// prints 0x23fba4\nprintln!(\"address of game-value: {:p}\", &game); // prints 0x23fb90\nprintln!(\"game-value: {}\", game); // prints \"Space Invaders\"\n```", "```rs\nlet game2 = &game;\nprintln!(\"{:p}\", game2); // prints 0x23fb90\n```", "```rs\n  println!(\"{}\", *game2); // prints \"Space Invaders\"\n```", "```rs\nhealth = 33; // error: re-assignment of immutable variable `health`.\n```", "```rs\n  let tricks = 10;\n  let reftricks = &mut tricks; \n```", "```rs\n  let mut score = 0;\n  let score2 = &score;\n  // error: cannot assign to immutable borrowed content *score2\n  // *score2 = 5; \n\n  let mut score = 0;\n  let score3 = &mut score;\n   *score3 = 5;\n```", "```rs\nlet score4 = &mut score;\n```", "```rs\nlet x = Box::new(5i32);\n```"]