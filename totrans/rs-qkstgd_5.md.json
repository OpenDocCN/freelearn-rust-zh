["```rs\npub enum Color {\n    Red,\n    Orange,\n    Yellow,\n    Green,\n    Blue,\n    Indigo,\n    Violet,\n}\n```", "```rs\nlet color: Color = Color::Green;\n```", "```rs\npub enum Drive {\n    Forward(u8),\n    Turn{slight: bool, right: bool},\n    Stop,\n}\n```", "```rs\nlet directions = [\n    Drive::Forward(3),\n    Drive::Turn{slight: false, right: true},\n    Drive::Forward(1),\n    Drive::Stop,\n];\n```", "```rs\n    for step in directions.iter() {\n        match step {\n            Drive::Forward(blocks) => {\n                println!(\"Drive forward {} blocks\", blocks);\n            },\n            Drive::Turn{slight, right} => {\n                println!(\"Turn {}{}\",\n                         if *slight {\n                             \"slightly \"\n                         }\n                         else {\n                             \"\"\n                         },\n                         if *right {\n                             \"right\"\n                         }\n                         else {\n                             \"left\"\n                         }\n                );\n            },\n            Drive::Stop => {\n                println!(\"You have reached your destination\");\n            }\n        };\n    };\n```", "```rs\npub trait PrintableDirection {\n    fn forward(&self);\n    fn reverse(&self);\n}\n```", "```rs\npub struct Forward {\n    pub blocks: u8,\n}\n\npub struct Turn {\n    pub slight: bool,\n    pub right: bool,\n}\n\npub struct Stop {}\n```", "```rs\nimpl PrintableDirection for Forward {\n    fn forward(&self) {\n        println!(\"Go forward {} blocks\", self.blocks);\n    }\n\n    fn reverse(&self) {\n        println!(\"Go forward {} blocks\", self.blocks);\n    }\n}\n\nimpl PrintableDirection for Turn {\n    fn forward(&self) {\n        println!(\"Turn {}{}\",\n                 if self.slight {\"slightly \"} else {\"\"},\n                 if self.right {\"right\"} else {\"left\"});\n    }\n\n    fn reverse(&self) {\n        println!(\"Turn {}{}\",\n                 if self.slight {\"slightly \"} else {\"\"},\n                 if self.right {\"left\"} else {\"right\"});\n    }\n}\n\nimpl PrintableDirection for Stop {\n    fn forward(&self) {\n        println!(\"You have reached your destination\");\n    }\n\n    fn reverse(&self) {\n        println!(\"Turn 180 degrees\");\n    }\n}\n```", "```rs\n    let mut directions = [\n        &Forward{ blocks: 5 },\n        &Turn{ slight: true, right: false },\n        &Forward{ blocks: 1 },\n        &Turn{ slight: false, right: true },\n        &Forward{ blocks: 2 },\n        &Stop{},\n    ];\n```", "```rs\n    let mut directions: [&dyn PrintableDirection; 6] = [\n        &Forward{ blocks: 5 },\n        &Turn{ slight: true, right: false },\n        &Forward{ blocks: 1 },\n        &Turn{ slight: false, right: true },\n        &Forward{ blocks: 2 },\n        &Stop{},\n    ];\n```", "```rs\nfor step in directions.iter() {\n    step.forward();\n};\n```", "```rs\ndirections.reverse();\n\nfor step in directions.iter() {\n    step.reverse();\n};\n```", "```rs\npub struct DoesNotHaveAnyTrait<'a> {\n    pub name: &'a str,\n    pub count: i32,\n}\n```", "```rs\nuse std::any::Any;\n\n//...\n\npub struct DoesHaveAnyTrait {\n pub name: String,\n pub count: i32,\n}\n\n//...\n\nlet okay = String::from(\"okay\");\n\nlet directions: [&dyn Any; 7] = [\n    &Forward{ blocks: 5 },\n    &Turn{ slight: true, right: false },\n    &Forward{ blocks: 1 },\n    &Turn{ slight: false, right: true },\n    &Forward{ blocks: 2 },\n    &Stop{},\n    &DoesHaveAnyTrait{ name: okay, count: 16},\n];\n```", "```rs\n    for step in directions.iter() {\n        if step.is::<Forward>() {\n            println!(\"Go forward\");\n        }\n        else if step.is::<Turn>() {\n            println!(\"Turn here\");\n        }\n        else if step.is::<Stop>() {\n            println!(\"Stop now\");\n        }\n    }\n```", "```rs\n    for step in directions.iter() {\n        if let Some(x) = step.downcast_ref::<Forward>() {\n            x.forward();\n        }\n        else if let Some(x) = step.downcast_ref::<Turn>() {\n            x.forward();\n        }\n        else if let Some(x) = step.downcast_ref::<Stop>() {\n            x.forward();\n        }\n    }\n```", "```rs\npub enum LikeATraitObject {\n    Integer(i32),\n    Float(f32),\n    Bool(bool),\n}\n\nfn handle_integer(x: i32) {\n    println!(\"Integer {}\", x);\n}\n\nfn handle_float(x: f32) {\n    println!(\"Float {}\", x);\n}\n\nfn handle_bool(x: bool) {\n    println!(\"Bool {}\", x);\n}\n\nimpl LikeATraitObject {\n    pub fn handle(&self) {\n        match self {\n            LikeATraitObject::Integer(x) => { handle_integer(*x); }\n            LikeATraitObject::Float(x) => { handle_float(*x); }\n            LikeATraitObject::Bool(x) => { handle_bool(*x); }\n        }\n    }\n}\n```"]