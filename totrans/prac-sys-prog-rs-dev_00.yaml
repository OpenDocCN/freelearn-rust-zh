- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The modern software stack is evolving rapidly in size and complexity. Technology
    domains such as the cloud, the web, data science, machine learning, DevOps, containers,
    IoT, embedded systems, distributed ledgers, virtual and augmented reality, and
    artificial intelligence continue to evolve and specialize. This has resulted in
    a severe shortage of system software developers able to build out the system infrastructure
    components. Modern societies, businesses, and governments increasingly rely heavily
    on digital technologies, which puts greater emphasis on developing safe, reliable,
    and efficient systems software and software infrastructure that modern web and
    mobile applications are built on.
  prefs: []
  type: TYPE_NORMAL
- en: System programming languages such as C/C++ have proved their mettle for decades
    in this domain, and provide a high degree of control and performance, but it is
    at the cost of memory safety.
  prefs: []
  type: TYPE_NORMAL
- en: Higher-level languages such as Java, C#, Python, Ruby, and JavaScript provide
    memory safety but offer less control over memory layout, and suffer from garbage
    collection pauses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rust is a modern, open source system programming language that promises the
    best of three worlds: the type safety of Java; the speed, expressiveness, and
    efficiency of C++; and memory safety without a garbage collector.'
  prefs: []
  type: TYPE_NORMAL
- en: This book adopts a unique three-step approach to teaching system programming
    in Rust. Each chapter in this book starts with an overview of the system programming
    fundamentals and kernel system calls for that topic in Unix-like operating systems
    (Unix/Linux/macOS). You will then learn how to perform common system calls using
    the Rust Standard Library, and in a few cases, external crates, using abundant
    code snippets. This knowledge is then reinforced through a practical example project
    that you will build. Lastly, there are questions in each chapter to embed learning.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you will have a sound foundational understanding of
    how to use Rust to manage and control operating system resources such as memory,
    files, processes, threads, system environment, peripheral devices, networking
    interfaces, terminals, and shells, and you'll understand how to build cross-language
    bindings through FFI. Along the way, you will learn how to use the tools of the
    trade, and get a firm appreciation of the value Rust brings to build safe, performant,
    reliable, and efficient system-level software.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is aimed at programmers with basic knowledge of Rust but little or
    no system programming or experience. This book is also for people who have a background
    in system programming and want to consider Rust as an alternative to C/C++.
  prefs: []
  type: TYPE_NORMAL
- en: The reader should have a basic understanding of programming concepts in any
    language, such as C, C++, Java, Python, Ruby, JavaScript, or Go.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B16405_01_Final_NM_ePUB.xhtml#_idTextAnchor016), *Tools of the
    Trade â€“ Rust Toolchains and Project Structures*, introduces the Rust toolchain
    for build and dependency management, automated testing, and documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B16405_02_Final_NM_ePUB.xhtml#_idTextAnchor041), *A Tour of the
    Rust Programming Language*, illustrates the key concepts of the Rust programming
    language including the type system, data structures, and memory management fundamentals
    through an example project.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B16405_03_Final_NM_ePUB.xhtml#_idTextAnchor057), *Introduction
    to the Rust Standard Library*, introduces key modules of the Rust standard library
    that provide the building blocks and pre-defined functionality for system programming
    in Rust.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B16405_04_Final_NM_ePUB.xhtml#_idTextAnchor070), *Managing Environment,
    Command Line, and Time*, covers a few foundational topics around how to programmatically
    deal with command-line parameters, set and manipulate the process environment,
    and work with system time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B16405_05_Final_NM_ePUB.xhtml#_idTextAnchor083), *Memory Management
    in Rust*, provides a comprehensive look at the memory management facilities provided
    by Rust. We will review Linux memory management basics, the traditional shortcomings
    of C/C++, and how Rust can be used to overcome many of these shortcomings.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B16405_06_Final_NM_ePUB.xhtml#_idTextAnchor101), *Working with
    Files and Directories in Rust*, helps you understand how the Linux filesystem
    works, and how to master the Rust Standard Library for various scenarios in file
    and directory operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B16405_07_Final_NM_ePUB.xhtml#_idTextAnchor114), *Implementing
    Terminal I/O in Rust*, helps you understand how a pseudo-terminal application
    works and how to create one. The result will be an interactive application that
    handles streams.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B16405_08_Final_NM_ePUB.xhtml#_idTextAnchor132), *Working with
    Processes and Signals*, provides an explanation of what processes are, how to
    handle them in Rust, how to create and communicate with a child process, and how
    to handle signals and errors.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B16405_09_Final_NM_ePUB.xhtml#_idTextAnchor150), *Managing Concurrency*,
    explains the basics of concurrency and various mechanisms for sharing data across
    threads in an idiomatic way in Rust, including channels, mutexes, and reference
    counters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B16405_10_Final_NM_ePUB.xhtml#_idTextAnchor165), *Working with
    Device I/O*, explains Linux I/O concepts such as buffering, standard inputs and
    outputs, and device I/O, and shows how to control I/O operations with Rust.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B16405_11_Final_NM_ePUB.xhtml#_idTextAnchor181), *Learning Network
    Programming*, explains how to work with low-level network primitives and protocols
    in Rust, illustrated by building low-level TCP and UDP servers and clients, and
    a reverse proxy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B16405_12_Final_NM_ePUB.xhtml#_idTextAnchor194), *Writing Unsafe
    Rust and FFI*, describes the key motivations and risks associated with unsafe
    Rust, and shows how to use FFI to safely interface Rust with other programming
    languages.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rustup must be installed in your local development environment. Use this link
    for installation: [https://github.com/rust-lang/rustup](https://github.com/rust-lang/rustup).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following link for official installation instructions: [https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, check whether `rustc`, and `cargo` have been installed
    correctly with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can use Linux, macOS, or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: While the Rust standard library largely is platform-independent, the general
    flavor of the book is oriented towards Linux/Unix-based systems. As a result,
    in a few chapters (or some sections within chapters) it is recommended to use
    a local Linux virtual machine, like Virtual box, (or if you have a cloud VM you
    may use it) for the code in the chapter to work. This may be because a command,
    or an external crate or a shared library used in example code and projects may
    be Linux/Unix specific.
  prefs: []
  type: TYPE_NORMAL
- en: Note for those using Windows for development
  prefs: []
  type: TYPE_NORMAL
- en: There are certain chapters that require a virtual machine or Docker image running
    Unix-like OSes (Unix/Linux/macOS).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of code in each chapter which are placed in the Packt GitHub
    repository for the book:'
  prefs: []
  type: TYPE_NORMAL
- en: The code corresponding to the example projects (which are referred to by named
    source files within the chapter),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Independent code snippets, that are placed within the `miscellaneous` folder
    within each chapter (where applicable)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using the digital version of this book, we advise you to type the
    code yourself or access the code via the GitHub repository (link available in
    the next section). Doing so will help you avoid any potential errors related to
    the copying and pasting of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'While using `cargo run` command to build and run Rust programs, you may encounter
    ''permission denied'' messages if the user ID with which the command is run does
    not have sufficient permissions to perform system-level operations (such as reading
    or writing to files). In such cases, one of the workarounds that can be used is
    to run the program with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Support** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Code Downloads**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the **Search** box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Practical-System-Programming-for-Rust-Developers](https://github.com/PacktPublishing/Practical-System-Programming-for-Rust-Developers).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The code snippets in this book are designed for learning, and not intended to
    be of production quality. As a result, while the code examples are practical and
    use idiomatic Rust, they are not likely to be full-featured with robust error
    handling covering all types of edge cases. This is by design, so as not to impede
    the learning process.
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781800560963_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781800560963_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "We can access the `now()` function from the `Utc`
    module to print out the current date and time."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "You will see **Hello, world!** printed to your console."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at [customercare@packtpub.com](mailto:customercare@packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://packt.com).
  prefs: []
  type: TYPE_NORMAL
