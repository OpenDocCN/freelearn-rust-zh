["```rs\nuse std::mem;\nfn main() {\n    println!(\"Size of string is {:?}\", \n        mem::size_of::<String>());\n}\n```", "```rs\n<p> Hello {{name}} </p>\n```", "```rs\n<p> Hello Bob </p>\n```", "```rs\n<p> Hello {{name}}. Are you from {{city}}? </p>\n```", "```rs\n<p> Hello Bob. Are you from Boston? </p>\n```", "```rs\n#[derive(PartialEq, Debug)]\npub struct ExpressionData {\n    pub head: Option<String>,\n    pub variable: String,\n    pub tail: Option<String>,\n}\n```", "```rs\nHead = Hello\nVariable = name\nTail = How are you?\n```", "```rs\n<String literal> <template variable> <String literal>\n```", "```rs\n<p> Hello , Hello {{name}}. Can you tell me if you are living \n    in {{city}}? For how long? </p>\n```", "```rs\n#[derive(PartialEq, Debug, Clone)]\npub struct ExpressionData {\n    pub expression: String,\n    pub var_map: Vec<String>,\n    pub gen_html: String,\n}\n```", "```rs\npub fn get_expression_data(input_line: &str) -> ExpressionData {\n    let expression_iter = input_line.split_whitespace();\n    let mut template_var_map: Vec<String> = vec![];\n    for word in expression_iter {\n        if check_symbol_string(word, \"{{\") && \n            check_symbol_string(word, \"}}\") {\n            template_var_map.push(word.to_string());\n        }\n    }\n    ExpressionData {\n        expression: input_line.into(),\n        var_map: template_var_map,\n        gen_html: \"\".into(),\n    }\n}\n```", "```rs\npub fn generate_html_template_var(\n    content: &mut ExpressionData,\n    context: HashMap<String, String>,\n) -> &mut ExpressionData {\n    content.gen_html = content.expression.clone();\n    for var in &content.var_map {\n        let (_h, i) = get_index_for_symbol(&var, '{');\n        let (_j, k) = get_index_for_symbol(&var, '}');\n        let var_without_braces = &var[i + 2..k];\n        let val = context.get(var_without_braces).unwrap();\n        content.gen_html = content.gen_html.replace(var, val);\n    }\n    content\n}\n```", "```rs\nuse std::collections::HashMap;\nuse std::io;\nuse std::io::BufRead;\nuse template_engine::*;\nfn main() {\n    let mut context: HashMap<String, String> = HashMap::new();\n    context.insert(\"name\".to_string(), \"Bob\".to_string());\n    context.insert(\"city\".to_string(), \"Boston\".to_string());\n\n    for line in io::stdin().lock().lines() {\n        match get_content_type(&line.unwrap().clone()) {\n            ContentType::TemplateVariable(mut content) => {\n                let html = generate_html_template_var(&mut \n                    content, context.clone());\n                println!(\"{}\", html.gen_html);\n            }\n            ContentType::Literal(text) => println!(\"{}\", \n                text),\n            ContentType::Tag(TagType::ForTag) => println!(\"For \n                Tag not implemented\"),\n            ContentType::Tag(TagType::IfTag) => println!(\"If \n                Tag not implemented\"),\n            ContentType::Unrecognized => println!(\n                \"Unrecognized input\"),\n        }\n    }\n}\n```", "```rs\n<p> Hello {{name}}. Are you from {{city}}? </p>\n```", "```rs\n<p> Hello Bob. Are you from Boston? </p>\n```"]