["```rs\n    routes![\n        ...\n        routes::favicon,\n    ],\n    ```", "```rs\n    use rocket::fs::{relative, NamedFile};\n    use std::path::Path;\n    ...\n    #[get(\"/favicon.png\")]\n    pub async fn favicon() -> NamedFile {\n        NamedFile::open(Path::new(relative!(\"static/\n        favicon.png\")))\n            .await\n            .ok()\n            .unwrap()\n    }\n    ```", "```rs\nuse rocket::fs::{relative, NamedFile};\nuse std::path::{Path, PathBuf};\n```", "```rs\n    #[get(\"/<filename..>\")]\n    pub async fn assets(filename: PathBuf) -> Option<NamedFile> {}\n    ```", "```rs\n    let mut filename = Path::new(relative!(\"static\")).join(filename);\n    NamedFile::open(filename).await.ok()\n    ```", "```rs\n    let mut filename = Path::new(relative!(\"static\")).join(filename);\n    if filename.is_dir() {\n        filename.push(\"index.html\");\n    }\n    NamedFile::open(filename).await.ok()\n    ```", "```rs\n    use rocket::fs::relative;\n    use rocket::fs::FileServer;\n    ...\n    .mount(\"/assets\", FileServer::from(\n     relative!(\"static\")))\n    ```", "```rs\nHello {{ name }}!\n```", "```rs\nHello Robert!\n```", "```rs\n<div>\n```", "```rs\n    {# we are setting a variable 'name' with the value \n```", "```rs\n    \"Robert\" #}\n```", "```rs\n    {% set name = \"Robert\" %}\n```", "```rs\n    Hello {{ name }}!\n```", "```rs\n</div>\n```", "```rs\n<div>\n```", "```rs\n    Hello Robert!\n```", "```rs\n</div>\n```", "```rs\n    chrono = {version = \"0.4\", features = [\"serde\"]}\n    rocket_dyn_templates = {path = \"../../../rocket/contrib/dyn_templates/\", features = [\"tera\"]}\n    serde = \"1.0.130\"\n    ```", "```rs\n    [default]\n    ...\n    template_dir = \"src/views\"\n    ```", "```rs\n    use rocket_dyn_templates::Template;\n    ...\n    #[launch]\n    async fn rocket() -> Rocket<Build> {\n    ...\n    rocket::build()\n    ...\n        .attach(Template::fairing())\n    ...\n    }\n    ```", "```rs\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <title>Our Application User</title>\n      <link href=\"/assets/mini-default.css\" \n      rel=\"stylesheet\">\n      <link rel=\"icon\" type=\"image/png\" href=\"/assets/\n      favicon.png\">\n      <meta name=\"viewport\" content=\"width=device-width, \n      initial-scale=1\">\n    </head>\n    <body>\n      <div class=\"container\"></div>\n    </body>\n    </html>\n    ```", "```rs\n    <div class=\"container\">\n      {% if flash %}\n        <div class=\"toast\" onclick=\"this.remove()\">\n          {{ flash | safe }}\n        </div>\n      {% endif %}\n      {% block body %}{% endblock body %}\n    </div>\n    ```", "```rs\n    use rocket::serde::Serialize;\n    ...\n    #[derive(Debug, FromRow, FromForm, Serialize)]\n    pub struct User {\n    ...\n    ```", "```rs\n    use rocket::serde::Serialize;\n    ...\n    #[derive(sqlx::Type, Debug, FromFormField, Serialize)]\n    #[repr(i32)]\n    pub enum UserStatus {\n    ...\n    ```", "```rs\n    use rocket::serde::Serialize;\n    #[derive(Debug, sqlx::Type, Clone, Serialize)]\n    #[sqlx(transparent)]\n    pub struct OurDateTime(pub DateTime<Utc>);\n    ...\n    ```", "```rs\n    use rocket::serde::Serialize;\n    ...\n    #[derive(Serialize)]\n    pub struct PaginationContext {\n        pub next: i64,\n        pub limit: usize,\n    }\n    impl Pagination {\n        pub fn to_context(&self) -> PaginationContext {\n            PaginationContext {\n                next: self.next.0.timestamp_nanos(),\n                limit: self.limit,\n            }\n        }\n    }\n    ```", "```rs\n    use rocket_dyn_templates::Template;\n    ...\n    type HtmlResponse = Result<Template, Status>;\n    ```", "```rs\n    use rocket::serde::Serialize;\n    ...\n    use rocket_dyn_templates::{context, Template};\n    ```", "```rs\n    #[derive(Serialize)]\n    struct GetUser {\n        user: User,\n        flash: Option<String>,\n    }\n    let flash_message = flash.map(|fm| String::from(fm.message()));\n    let context = GetUser {\n        user,\n        flash: flash_message,\n    };\n    Ok(Template::render(\"users/show\", &context))\n    ```", "```rs\n    {% extends \"template\" %}\n    {% block body %}\n      {% include \"users/_user\" %}\n      <a href=\"/users/edit/{{user.uuid}}\" class=\"\n      button\">Edit User</a>\n      <form accept-charset=\"UTF-8\" action=\"/users/\n      delete/{{user.uuid}}\" autocomplete=\"off\" \n      method=\"POST\" id=\"deleteUser\"\n          class=\"hidden\"></form>\n      <button type=\"submit\" value=\"Submit\" \n      form=\"deleteUser\">Delete</button>\n      <a href=\"/users\" class=\"button\">User List</a>\n    {% endblock body %}\n    ```", "```rs\n    <div class=\"row\">\n      <div class=\"col-sm-3\"><mark>UUID:</mark></div>\n      <div class=\"col-sm-9\"> {{ user.uuid }}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-3\"><mark>Username:</mark></div>\n      <div class=\"col-sm-9\"> {{ user.username }}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-3\"><mark>Email:</mark></div>\n      <div class=\"col-sm-9\"> {{ user.email }}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-3\"><mark>\n      Description:</mark></div>\n      <div class=\"col-sm-9\"> {{ user.description }}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-3\"><mark>Status:</mark></div>\n      <div class=\"col-sm-9\"> {{ user.status }}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-3\"><mark>Created At:</mark></div>\n      <div class=\"col-sm-9\"> {{ user.created_at }}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-3\"><mark>Updated At:</mark></div>\n      <div class=\"col-sm-9\"> {{ user.updated_at }}</div>\n    </div>\n    ```", "```rs\n    let context = context! {users: users, pagination: new_pagination.map(|pg|pg.to_context())};\n    Ok(Template::render(\"users/index\", context))\n    ```", "```rs\n    {% extends \"template\" %}\n    {% block body %}\n      {% for user in users %}\n        <div class=\"container\">\n          <div><mark class=\"tag\">{{loop.\n          index}}</mark></div>\n          {% include \"users/_user\" %}\n          <a href=\"/users/{{ user.uuid }}\" class=\"\n          button\">See User</a>\n          <a href=\"/users/edit/{{ user.uuid }}\" \n          class=\"button\">Edit User</a>\n        </div>\n      {% endfor %}\n      {% if pagination %}\n        <a href=\"/users?pagination.next={{\n        pagination.next}}&pagination.limit={{\n        pagination.limit}}\" class=\"button\">\n          Next\n        </a>\n      {% endif %}\n      <a href=\"/users/new\" class=\"button\">New user</a>\n    {% endblock %}\n    ```", "```rs\n    {% extends \"template\" %}\n    {% block body %}\n      <form accept-charset=\"UTF-8\" action=\"{{ form_url }}\" \n      autocomplete=\"off\" method=\"POST\">\n        <fieldset>\n        </fieldset>\n      </form>\n    {% endblock %}\n    ```", "```rs\n    <legend>{{ legend }}</legend>\n    ```", "```rs\n    {% if edit %}\n      <input type=\"hidden\" name=\"_METHOD\" value=\"PUT\" />\n    {% endif %}\n    ```", "```rs\n    <div class=\"row\">\n      <div class=\"col-sm-12 col-md-3\">\n        <label for=\"username\">Username:</label>\n      </div>\n      <div class=\"col-sm-12 col-md\">\n        <input name=\"username\" type=\"text\" value=\"{{ \n        user.username }}\"/>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-12 col-md-3\">\n        <label for=\"email\">Email:</label>\n      </div>\n      <div class=\"col-sm-12 col-md\">\n        <input name=\"email\" type=\"email\" value=\"{{ \n        user.email }}\"/>\n      </div>\n    </div>\n    ```", "```rs\n    {% if edit %}\n      <div class=\"row\">\n        <div class=\"col-sm-12 col-md-3\">\n          <label for=\"old_password\">Old password:</label>\n        </div>\n        <div class=\"col-sm-12 col-md\">\n          <input name=\"old_password\" type=\"password\" />\n        </div>\n      </div>\n    {% endif %}\n    ```", "```rs\n    <div class=\"row\">\n      <div class=\"col-sm-12 col-md-3\">\n        <label for=\"password\">Password:</label>\n      </div>\n      <div class=\"col-sm-12 col-md\">\n        <input name=\"password\" type=\"password\" />\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-12 col-md-3\">\n        <label for=\"password_confirmation\">Password \n        Confirmation:</label>\n      </div>\n      <div class=\"col-sm-12 col-md\">\n        <input name=\"password_confirmation\" type=\n        \"password\" />\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-12 col-md-3\">\n        <label for=\"description\">Tell us a little bit more \n        about yourself:</label>\n      </div>\n      <div class=\"col-sm-12 col-md\">\n        <textarea name=\"description\">{{ user.description \n        }}</textarea>\n      </div>\n    </div>\n    <button type=\"submit\" value=\"Submit\">Submit</button>\n    ```", "```rs\n    <input name=\"username\" type=\"text\" {% if user %}value=\"{{ user.username }}\"{% endif %} />\n    ...\n    <input name=\"email\" type=\"email\" {% if user %}value=\"{{ user.email }}\"{% endif %} />\n    ...\n    <label for=\"password\">{% if edit %}New Password:{% else %}Password:{% endif %}</label>\n    ...\n    <textarea name=\"description\">{% if user %}{{ user.description }}{% endif %}</textarea>\n    ```", "```rs\nlet flash_string = flash\n    .map(|fl| format!(\"{}\", fl.message()))\n    .unwrap_or_else(|| \"\".to_string());\nlet context = context! {\n    edit: false,\n    form_url: \"/users\",\n    legend: \"New User\",\n    flash: flash_string,\n};\nOk(Template::render(\"users/form\", context))\n```", "```rs\nlet flash_string = flash\n    .map(|fl| format!(\"{}\", fl.message()))\n    .unwrap_or_else(|| \"\".to_string());\nlet context = context! {\n    form_url: format!(\"/users/{}\",&user.uuid ),\n    edit: true,\n    legend: \"Edit User\",\n    flash: flash_string,\n    user,\n};\nOk(Template::render(\"users/form\", context))\n```", "```rs\n    Ok(Flash::success(\n        Redirect::to(format!(\"/users/{}\", user.uuid)),\n        \"<div>Successfully created user</div>\",\n    ))\n    ```", "```rs\nOk(Flash::success(\n    Redirect::to(format!(\"/users/{}\", user.uuid)),\n    \"Successfully created user\",\n))\n```", "```rs\nbase64 = {version = \"0.13.0\"}\n...\nrocket = {path = \"../../../rocket/core/lib/\", features = [\"uuid\", \"json\", \"secrets\"]}\n...\ntime = {version = \"0.3\", features = [\"std\"]}\n```", "```rs\n    pub mod csrf;\n    ```", "```rs\n    use argon2::{\n        password_hash::{\n            rand_core::{OsRng, RngCore},\n            PasswordHash, PasswordHasher, \n            PasswordVerifier, SaltString,\n        },\n        Argon2,\n    };\n    use rocket::fairing::{self, Fairing, Info, Kind};\n    use rocket::http::{Cookie, Status};\n    use rocket::request::{FromRequest, Outcome, Request};\n    use rocket::serde::Serialize;\n    use rocket::{Build, Data, Rocket};\n    use time::{Duration, OffsetDateTime};\n    const CSRF_NAME: &str = \"csrf_cookie\";\n    const CSRF_LENGTH: usize = 32;\n    const CSRF_DURATION: Duration = Duration::hours(1);\n    ```", "```rs\n    trait RequestCsrf {\n        fn get_csrf_token(&self) -> Option<Vec<u8>>;\n    }\n    impl RequestCsrf for Request<'_> {\n        fn get_csrf_token(&self) -> Option<Vec<u8>> {\n            self.cookies()\n                .get_private(CSRF_NAME)\n                .and_then(|cookie| base64::\n                decode(cookie.value()).ok())\n                .and_then(|raw| {\n                    if raw.len() >= CSRF_LENGTH {\n                        Some(raw)\n                    } else {\n                        None\n                    }\n                })\n        }\n    }\n    ```", "```rs\n    #[derive(Debug, Clone)]\n    pub struct Csrf {}\n    impl Csrf {\n        pub fn new() -> Self {\n            Self {}\n        }\n    }\n    #[rocket::async_trait]\n    impl Fairing for Csrf {\n        fn info(&self) -> Info {\n            Info {\n                name: \"CSRF Fairing\",\n                kind: Kind::Ignite | Kind::Request,\n            }\n        }\n        async fn on_ignite(&self, rocket: Rocket<Build>) –\n        > fairing::Result {\n            Ok(rocket.manage(self.clone()))\n        }\n    }\n    ```", "```rs\n    async fn on_request(&self, request: &mut Request<'_>, _: &mut Data<'_>) {\n        if let Some(_) = request.get_csrf_token() {\n            return;\n        }\n        let mut key = vec![0; CSRF_LENGTH];\n        OsRng.fill_bytes(&mut key);\n        let encoded = base64::encode(&key[..]);\n        let expires = OffsetDateTime::now_utc() + CSRF_\n        DURATION;\n        let mut csrf_cookie = Cookie::new(\n        String::from(CSRF_NAME), encoded);\n        csrf_cookie.set_expires(expires);\n        request.cookies().add_private(csrf_cookie);\n    }\n    ```", "```rs\n    #[derive(Debug, Serialize)]\n    pub struct Token(String);\n    #[rocket::async_trait]\n    impl<'r> FromRequest<'r> for Token {\n        type Error = ();\n        async fn from_request(request: &'r Request<'_>) -> \n        Outcome<Self, Self::Error> {\n            match request.get_csrf_token() {\n                None => Outcome::Failure((Status::\n                Forbidden, ())),\n                Some(token) => Outcome::\n                Success(Self(base64::encode(token))),\n            }\n        }\n    }\n    ```", "```rs\n    impl Token {\n        pub fn generate_hash(&self) -> Result<String, \n        String> {\n            let salt = SaltString::generate(&mut OsRng);\n            Argon2::default()\n                .hash_password(self.0.as_bytes(), &salt)\n                .map(|hp| hp.to_string())\n                .map_err(|_| String::from(\"cannot hash \n                authenticity token\"))\n        }\n        pub fn verify(&self, form_authenticity_token: \n        &str) -> Result<(), String> {\n            let old_password_hash = self.generate_hash()?;\n            let parsed_hash = PasswordHash::new(&old_\n            password_hash)\n                .map_err(|_| String::from(\"cannot verify \n                authenticity token\"))?;\n            Ok(Argon2::default()\n                .verify_password(form_authenticity_\n                token.as_bytes(), &parsed_hash)\n                .map_err(|_| String::from(\"cannot verify \n                authenticity token\"))?)\n        }\n    }\n    ```", "```rs\n    use our_application::fairings::{csrf::Csrf, db::DBConnection};\n    ...\n    async fn rocket() -> Rocket<Build> {\n    ...\n            .attach(Csrf::new())\n    ...\n    }\n    ```", "```rs\n    pub struct NewUser<'r> {\n    ...\n        pub authenticity_token: &'r str,\n    }\n    ...\n    pub struct EditedUser<'r> {\n    ...\n        pub authenticity_token: &'r str,\n    }\n    ```", "```rs\n    <form accept-charset=\"UTF-8\" action=\"{{ form_url }}\" autocomplete=\"off\" method=\"POST\">\n      <input type=\"hidden\" name=\"authenticity_token\" \n      value=\"{{ csrf_token }}\"/>\n    ...\n    ```", "```rs\n    use crate::fairings::csrf::Token as CsrfToken;\n    ```", "```rs\n    pub async fn new_user(flash: Option<FlashMessage<'_>>, csrf_token: CsrfToken) -> HtmlResponse {\n    ...\n        let context = context! {\n            ...\n            csrf_token: csrf_token,\n        };\n        ...\n    }\n    ...\n    pub async fn edit_user(\n        mut db: Connection<DBConnection>, uuid: &str, \n        flash: Option<FlashMessage<'_>>, csrf_token: \n        CsrfToken) -> HtmlResponse {\n    ...\n        let context = context! {\n            ...\n            csrf_token: csrf_token,\n        };\n        ...\n    }\n    ```", "```rs\n    pub async fn create_user<'r>(\n        ...\n        csrf_token: CsrfToken,\n    ) -> Result<Flash<Redirect>, Flash<Redirect>> {\n        …\n        let new_user = user_context.value.as_ref().\n        unwrap();\n        csrf_token\n            .verify(&new_user.authenticity_token)\n            .map_err(|_| {\n                Flash::error(\n                    Redirect::to(\"/users/new\"),\n                    \"Something went wrong when creating \n                    user\",\n                )\n            })?;\n        ...\n    }\n    ```", "```rs\n    pub async fn update_user<'r>(\n        ...\n        csrf_token: CsrfToken,\n    ) -> Result<Flash<Redirect>, Flash<Redirect>> {\n        ...\n        match user_value.method {\n            \"PUT\" => put_user(db, uuid, user_context, \n            csrf_token).await,\n            \"PATCH\" => patch_user(db, uuid, user_context, \n            csrf_token).await,\n            ...\n        }\n    }\n    ...\n    pub async fn put_user<'r>(\n        ...\n        csrf_token: CsrfToken,\n    ) -> Result<Flash<Redirect>, Flash<Redirect>> {\n        let user_value = user_context.value.as_ref().\n        unwrap();\n        csrf_token\n            .verify(&user_value.authenticity_token)\n            .map_err(|_| {\n                Flash::error(\n                    Redirect::to(format!(\"/users/edit/{}\",\n                    uuid)),\n                    \"Something went wrong when updating \n                    user\",\n                )\n            })?;\n        …\n    }\n    …\n    pub async fn patch_user<'r>(\n        ...\n        csrf_token: CsrfToken,\n    ) -> Result<Flash<Redirect>, Flash<Redirect>> {\n        put_user(db, uuid, user_context, csrf_token).await\n    }\n    ```"]