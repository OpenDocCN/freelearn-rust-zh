["```rs\n    // from Chapter 4/code/strings.rs\n       let magician1 = \"Merlin\";\n       let greeting = \"Hello, 世界!\";\n    ```", "```rs\n     let magician2: &'static str = \"Gandalf\";\n\n    ```", "```rs\n    println!(\"Magician {} greets magician {} with {}\", \n            magician1, magician2, greeting);\n    ```", "```rs\n     let mut str1 = String::new();\n\n    ```", "```rs\n     let mut str2 = String::with_capacity(25);\n\n    ```", "```rs\n     let mut str3 = magician1.to_string();\n\n    ```", "```rs\n     let sl1 = &str3;\n\n    ```", "```rs\n  if &str3[] == magician1 {\n    println!(\"We got the same magician alright!\")\n  }\n```", "```rs\nlet c1 = 'q';  // character c1\nstr1.push(c1);\nprintln!(\"{}\", str1); // q\nstr1.push_str(\" Level 1 is finished - \");\nprintln!(\"{}\", str1); // q Level 1 is finished - \nstr1.push_str(\"Rise up to Level 2\");\nprintln!(\"{}\", str1); // q Level 1 is finished - Rise up to Level 2\n```", "```rs\nfor c in magician1.chars() {\n    print!(\"{} - \", c); \n} \n```", "```rs\n for word in str1.split(\" \") {\n print!(\"{} / \", word);\n }\n\n```", "```rs\nlet str5 = str1.replace(\"Level\", \"Floor\");\n\n```", "```rs\n  fn how_long(s: &str) -> usize { s.len() }\n```", "```rs\nprintln!(\"Length of str1: {}\", how_long(&str1));\n```", "```rs\nprintln!(\"Length of str1: {}\", how_long(&str1[..]));\n```", "```rs\n// from Chapter 4/code/arrays.rs\nlet aliens = [\"Cherfer\", \"Fynock\", \"Shirack\", \"Zuxu\"];\nprintln!(\"{:?}\", aliens);\n\n```", "```rs\nlet aliens: [&str; 4] = [\"Cherfer\", \"Fynock\", \"Shirack\", \"Zuxu\"];\n```", "```rs\nlet zuxus = [\"Zuxu\"; 3];\n```", "```rs\nlet mut empty: [i32; 0] = [];\nprintln!(\"{:?}\", empty); // []\n```", "```rs\nprintln!(\"The first item is: {}\", aliens[0]); // Cherfer\nprintln!(\"The third item is: {}\", aliens[2]); // Shirack\n```", "```rs\nlet pa = &aliens;\nprintln!(\"Third item via pointer: {}\", pa[2]);\n```", "```rs\naliens[2] = \"Facehugger\";\n```", "```rs\nprintln!(\"This item does not exist: {}\", aliens[10]); // runtime error:\n```", "```rs\nthread '<main>' panicked at 'index out of bounds: the len is 4 but the index is 10'\n```", "```rs\nfor ix in 0..aliens.len() {\n println!(\"Alien no {} is {}\", ix, aliens[ix]);\n}\n\n```", "```rs\nfor a in aliens.iter() {\n println!(\"The next alien is {}\", a); \n}\n\n```", "```rs\nfor a in &aliens  { … }\n\n```", "```rs\nlet mut numbers: Vec<i32> = Vec::new();\nlet mut magic_numbers = vec![7i32, 42, 47, 45, 54];\n```", "```rs\nlet mut ids: Vec<i32> = Vec::with_capacity(25);\n```", "```rs\nlet rgvec: Vec<u32> = (0..7).collect();\nprintln!(\"Collected the range into: {:?}\", rgvec);\n```", "```rs\nlet values = vec![1, 2, 3];\nfor n in values {\n      println!(\"{}\", n);\n}\n```", "```rs\nnumbers.push(magic_numbers[1]);\nnumbers.push(magic_numbers[4]);\nprintln!(\"{:?}\", numbers); // [42, 54]\nlet fifty_four = numbers.pop();// fifty_four now contains 54\nprintln!(\"{:?}\", numbers); // [42]\n```", "```rs\nlet slc = &magic_numbers[1..4]; // only the items 42, 47 and 45\n\n```", "```rs\nlet location = \"Middle-Earth\";\nlet part = &location[7..12];\nprintln!(\"{}\", part); // Earth\n```", "```rs\nlet magician = \"Merlin\";\nlet mut chars: Vec<char> = magician.chars().collect();\nchars.sort();\nfor c in chars.iter() {\n      print!(\"{} \", c);\n}\n```", "```rs\nlet v: Vec<&str> = \"The wizard of Oz\".split(' ').collect();\nlet v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).collect();\n```", "```rs\n// from Chapter 4/code/tuples.rs\nlet thor = (\"Thor\", true, 3500u32);\nprintln!(\"{:?}\", thor); // (\"Thor\", true, 3500)\n```", "```rs\nprintln!(\"{} - {} - {}\", thor.0, thor.1, thor.2);\n\n```", "```rs\nlet (name, _, power) = thor;\nprintln!(\"{} has {} points of power\", name, power);\n\n```", "```rs\nfn increase_power(name: &str, power: u32) -> (&str, u32) {\n  if power > 1000 {\n    return (name, power * 3);\n  } else {\n    return (name, power * 2);\n  }\n}\n```", "```rs\nlet (god, strength) = increase_power(thor.0, thor.2);\nprintln!(\"This god {} has now {} strength\", god, strength);\n```", "```rs\n   let score1 = Score(73, 2);\n```", "```rs\n  // from Chapter 4/code/structs.rs\n  let Score(h, l) = score1; // destructure the tuple\n  println!(\"Health {} - Level {}\", h, l);\n```", "```rs\nstruct Kilograms(u32);\nlet weight = Kilograms(250);\nlet Kilograms(kgm) = weight; // extracting kgm\nprintln!(\"weight is {} kilograms\", kgm);\n```", "```rs\n   struct Player {\n      nname: &'static str, // nickname\n      health: i32,\n      level: u8\n  }\n```", "```rs\nlet mut pl1 = Player{ nname: \"Dzenan\", health: 73, level: 2 };\n\n```", "```rs\nprintln!(\"Player {} is at level {}\", pl1.nname, pl1.level); \n\n```", "```rs\n  pl1.level = 3;\n```", "```rs\nlet Player{ health: ht, nname: nn, .. } = pl1; \nprintln!(\"Player {} has health {}\", nn, ht); \n```", "```rs\n    let ps = &Player{ nname: \"John\", health: 95, level: 1 };\n    println!(\"{} == {}\", ps.nname, (*ps).nname);\n```", "```rs\n// from Chapter 4/code/enums.rs\nenum Compass {\n North, South, East, West\n}\n\n```", "```rs\n  let direction = Compass::West;\n```", "```rs\ntype species = &'static str;\n\nenum PlanetaryMonster {\n  VenusMonster(species, i32),\n  MarsMonster(species, i32)\n}\nlet martian = PlanetaryMonster::MarsMonster(\"Chela\", 42);\n```", "```rs\nuse PlanetaryMonster::MarsMonster;\n```", "```rs\nlet martian = MarsMonster(\"Chela\", 42);\n```", "```rs\nenum Result<T, E> {\n Ok(T),\n Err(E)\n}\n\n```", "```rs\nenum Option<T> {\n Some(T),\n None\n}\n\n```", "```rs\nlet mut buf = String::new();\nio::stdin().read_line(&mut buf); \n```", "```rs\nio::stdin().read_line(&mut buf).ok().expect(\"Error!\");\n```", "```rs\n   // from Chapter 4/code/input.rs\nuse std::io;\n\nfn main() {\n  println!(\"What's your name, noble warrior?\");\n  let mut buf = String::new();\n  io::stdin().read_line(&mut buf)\n      .ok()\n      .expect(\"Failed to read line\");\n  println!(\"{}, that's a mighty name indeed!\", buf);\n}\n```", "```rs\nWhat's your name, noble warrior?\nRiddick\nRiddick\n, that's a mighty name indeed!\n\n```", "```rs\nlet name = buf.trim();\nprintln!(\"{}, that's a mighty name indeed!\", name);\n```", "```rs\nWhat's your name, noble warrior?\nthread '<main>' panicked at 'Failed to read line \n```", "```rs\n// from Chapter 4/code/pattern_match.rs\nlet mut buf = String::new();\nio::stdin().read_line(&mut buf)\n .ok()\n .expect(\"Failed to read number\");\nlet input_num: Result<u32, _> = buf.trim().parse();\n\n```", "```rs\nprintln!(\"Unwrap found {}\", input_num.unwrap());\n\n```", "```rs\nmatch input_num {\n Ok(num) => println!(\"{}\", num),\n Err(ex) => println!(\"Please input an integer number! {}\", ex)\n};\n\n```", "```rs\nlet num = match input_num {\n        Ok(num) => num,\n        Err(_)  => 0\n}; \n```", "```rs\nif let Ok(val) = input_num {\n    println!(\"Matched {:?}!\", val);\n} else {\n    println!(\"No match!\");\n}\n```", "```rs\nwhile let Ok(val) = input_num {\n    println!(\"Matched {:?}!\", val);\n    if val == 42 { break }\n}\n```", "```rs\n// from Chapter 4/code/pattern_match2.rs\nlet magician = \"Gandalf\";\nmatch magician {\n      \"Gandalf\" => println!(\"A good magician!\"),\n      \"Sauron\"  => println!(\"A magician turned bad!\")\n}\n```", "```rs\nmatch magician {\n      \"Gandalf\" => println!(\"A good magician!\"),\n      \"Sauron\"  => println!(\"A magician turned bad!\"),\n      _         => println!(\"No magician turned up!\")\n}\n```", "```rs\nlet magical_number: i32 = 42;\nmatch magical_number {\n      // Match a single value\n       1 => println!(\"Unity!\"),\n      // Match several values\n       2 | 3 | 5 | 7 | 11 => println!(\"Ok, these are primes\"),\n      // Match an inclusive range\n       40...42 => println!(\"It is contained in this range\"),\n      // Handle the rest of cases\n        _ => println!(\"No magic at all!\"),\n}\n```", "```rs\n  num @ 40...42 => println!(\"{} is contained in this range\", num)\n```", "```rs\n let loki = (\"Loki\", true, 800u32); \n    match loki {\n (name, demi, _) if demi => {\n                            print!(\"This is a demigod \");\n                            println!(\"called {}\", name);\n                        },\n (name, _, _) if name == \"Thor\" => \n                        println!(\"This is Thor!\"),\n (_, _, pow) if pow <= 1000 => \n                        println!(\"This is a powerless god\"),\n        _ => println!(\"This is something else\")\n    }\n```"]