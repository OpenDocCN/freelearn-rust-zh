["```rs\n$ git clone --recursive https://github.com/WebAssembly/wabt\n```", "```rs\n$ cd wabt\n$ mkdir build\n$ cd build\n```", "```rs\n$ cmake ..\n```", "```rs\nUsage: cmake --build <dir> [options] [-- [native-options]]\nOptions:\n  <dir> = Project binary directory to be built.\n  --parallel [<jobs>], -j [<jobs>]\n        = Build in parallel using the given number of jobs.\n                   If <jobs> is omitted the native build\n                   tool's\n                   default number is used.\n                   The CMAKE_BUILD_PARALLEL_LEVEL\n                   environment variable\n                   specifies a default parallel level when\n                   this option\n                   is not given.\n  --target <tgt>..., -t <tgt>...\n                 = Build <tgt> instead of default targets.\n  --config <cfg> = For multi-configuration tools, choose\n    <cfg>.\n  --clean-first  = Build target 'clean' first, then build.\n                   (To clean only, use --target 'clean'.)\n  --verbose, -v  = Enable verbose output - if supported –\n    including the build commands to be executed.\n  --             = Pass remaining options to the native\n    tool.\n```", "```rs\n$ cmake --build .\n....\n[100%] Built target spectest-interp-copy-to-bin\n```", "```rs\n$ cmake [wabt project root] -DCMAKE_BUILD_TYPE=[config] –\n  DCMAKE_INSTALL_PREFIX=[install directory] -G [generator]\n```", "```rs\n$ cd build\n$ cmake --build .. --config RELEASE --target install\n```", "```rs\n$ tree -L 1\n├── dummy\n├── hexfloat_test\n├── spectest-interp\n├── wabt-unittests\n├── wasm-c-api-global\n├── wasm-c-api-hello\n├── wasm-c-api-hostref\n├── wasm-c-api-memory\n├── wasm-c-api-multi\n├── wasm-c-api-reflect\n├── wasm-c-api-serialize\n├── wasm-c-api-start\n├── wasm-c-api-table\n├── wasm-c-api-threads\n├── wasm-c-api-trap\n├── wasm-decompile\n├── wasm-interp\n├── wasm-objdump\n├── wasm-opcodecnt\n├── wasm-strip\n├── wasm-validate\n├── wasm2c\n├── wasm2wat\n├── wast2json\n├── wat-desugar\n└── wat2wasm\n```", "```rs\n    $ mkdir wabt-playground\n    $ cd wabt-playground\n    ```", "```rs\n    $ touch add.wat\n    ```", "```rs\n    (module\n    (func $add (param $lhs i32) (param $rhs i32) (result i32)\n     get_local $lhs \n      get_local $rhs\n        i32.add\n    )\n    )\n    ```", "```rs\n    $ /path/to/build/directory/of/wabt/wat2wasm add.wat\n    ```", "```rs\n00 61 73 6d 01 00 00 00 01 07 01 60 02 7f 7f 017f 03\n 02 01 00 0a 09 01 07 00 20 00 20 01 6a 0b\n```", "```rs\n    $ /path/to/build/directory/of/wabt/wat2wasm --help\n    usage: wat2wasm [options] filename\n      read a file in the wasm text format, check it for\n      errors, and\n      convert it to the wasm binary format.\n    examples:\n      # parse and typecheck test.wat\n      $ wat2wasm test.wat\n      # parse test.wat and write to binary file test.wasm\n      $ wat2wasm test.wat -o test.wasm\n      # parse spec-test.wast, and write verbose output to\n        stdout (including\n      # the meaning of every byte)\n      $ wat2wasm spec-test.wast -v\n    options:\n          --help              Print this help message\n          --version           Print version information\n      -v, --verbose       Use multiple times for more info\n          --debug-parser      Turn on debugging the parser\n                              of wat files\n      ...\n          --debug-names       Write debug names to the\n                              generated binary file\n          --no-check          Don't check for invalid\n                              modules\n    ```", "```rs\n     $ /path/to/build/directory/of/wabt/wat2wasm add.wat -v\n    0000000: 0061 736d     ; WASM_BINARY_MAGIC\n    0000004: 0100 0000     ; WASM_BINARY_VERSION\n    ; section \"Type\" (1)\n    0000008: 01            ; section code\n    0000009: 00            ; section size (guess)\n    000000a: 01            ; num types\n    ; type 0\n    000000b: 60            ; func\n    000000c: 02            ; num params\n    000000d: 7f            ; i32\n    000000e: 7f            ; i32\n    000000f: 01            ; num results\n    0000010: 7f            ; i32\n    0000009: 07            ; FIXUP section size\n    ; section \"Function\" (3)\n    0000011: 03            ; section code\n    0000012: 00            ; section size (guess)\n    0000013: 01            ; num functions\n    0000014: 00            ; function 0 signature index\n    0000012: 02            ; FIXUP section size\n    ; section \"Code\" (10)\n    0000015: 0a            ; section code\n    0000016: 00            ; section size (guess)\n    0000017: 01            ; num functions\n    ; function body 0\n    0000018: 00            ; func body size (guess)\n    0000019: 00            ; local decl count\n    000001a: 20            ; local.get\n    000001b: 00            ; local index\n    000001c: 20            ; local.get\n    000001d: 01            ; local index\n    000001e: 6a            ; i32.add\n    000001f: 0b            ; end\n    0000018: 07            ; FIXUP func body size\n    0000016: 09            ; FIXUP section size\n    ```", "```rs\n$ /path/to/build/directory/of/wabt/wasm2wat add.wasm\n(module\n  (type (;0;) (func (param i32 i32) (result i32)))\n  (func (;0;) (type 0) (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    i32.add))\n```", "```rs\n$ /path/to/build/directory/of/wabt/wasm2wat add.wasm -o new_\n  add.wat\n```", "```rs\n$ wasm2wat --help\nusage: wasm2wat [options] filename\n\n  Read a file in the WebAssembly binary format, and convert \n  it to\n  the WebAssembly text format.\n\nexamples:\n  # parse binary file test.wasm and write text file test.wast\n  $ wasm2wat test.wasm -o test.wat\n\n  # parse test.wasm, write test.wat, but ignore the debug names, if any\n  $ wasm2wat test.wasm --no-debug-names -o test.wat\n\noptions:\n      --help                                Print this help \n        message\n      --version                             Print version \n        information\n  -v, --verbose                             Use multiple times \n   for more info\n  -o, --output=FILENAME                     Output file for the \n   generated wast file, by default use stdout\n  -f, --fold-exprs                          Write folded \n   expressions where possible\n  ....\n      --no-debug-names                      Ignore debug names \n        in the binary file\n      --ignore-custom-section-errors        Ignore errors in \n        custom sections\n      --generate-names                      Give auto-generated\n        names to non-named functions, types, etc.\n      --no-check                            Don't check for \n        invalid modules\n```", "```rs\n$ /path/to/build/directory/of/wabt/wasm2wat add.wasm -o new_\n  add.wat -v\nBeginModule(version: 1)\n  BeginTypeSection(7)\n    OnTypeCount(1)\n    OnType(index: 0, params: [i32, i32], results: [i32])\n  EndTypeSection\n  BeginFunctionSection(2)\n    OnFunctionCount(1)\n    OnFunction(index: 0, sig_index: 0)\n  EndFunctionSection\n  BeginCodeSection(9)\n    OnFunctionBodyCount(1)\n    BeginFunctionBody(0, size:7)\n    OnLocalDeclCount(0)\n    OnLocalGetExpr(index: 0)\n    OnLocalGetExpr(index: 1)\n    OnBinaryExpr(\"i32.add\" (106))\n    EndFunctionBody(0)\n  EndCodeSection\n  BeginCustomSection('name', size: 28)\n    BeginNamesSection(28)\n      OnNameSubsection(index: 0, type: function, size:6)\n      OnFunctionNameSubsection(index:0, nametype:1, size:6)\n      OnFunctionNamesCount(1)\n      OnFunctionName(index: 0, name: \"add\")\n      OnNameSubsection(index: 1, type: local, size:13)\n      OnLocalNameSubsection(index:1, nametype:2, size:13)\n      OnLocalNameFunctionCount(1)\n      OnLocalNameLocalCount(index: 0, count: 2)\n      OnLocalName(func_index: 0, local_index: 0, name: \"lhs\")\n      OnLocalName(func_index: 0, local_index: 1, name: \"rhs\")\n    EndNamesSection\n  EndCustomSection\nEndModule\n```", "```rs\n $ /path/to/build/directory/of/wabt/wasm2wat add.wasm -o new_\n  add.wat -v --no-debug-names\nBeginModule(version: 1)\n  BeginTypeSection(7)\n    OnTypeCount(1)\n    OnType(index: 0, params: [i32, i32], results: [i32])\n  EndTypeSection\n  BeginFunctionSection(2)\n    OnFunctionCount(1)\n    OnFunction(index: 0, sig_index: 0)\n  EndFunctionSection\n  BeginCodeSection(9)\n    OnFunctionBodyCount(1)\n    BeginFunctionBody(0, size:7)\n    OnLocalDeclCount(0)\n    OnLocalGetExpr(index: 0)\n    OnLocalGetExpr(index: 1)\n    OnBinaryExpr(\"i32.add\" (106))\n    EndFunctionBody(0)\n  EndCodeSection\n  BeginCustomSection('name', size: 28)\n  EndCustomSection\nEndModule\n```", "```rs\n    (module\n        (func $fold (result i32)\n            i32.const 22\n            i32.const 20\n            i32.add\n        )\n    )\n    ```", "```rs\n    $ /path/to/build/directory/of/wabt/wat2wasm -v\n      fold.wat\n    ; some contents\n    0000018: 41                                        ;\n      i32.const\n    0000019: 16                                        ;\n      i32 literal\n    000001a: 41                                        ;\n      i32.const\n    000001b: 14                                        ;\n      i32 literal\n    000001c: 6a                                        ;\n      i32.add\n    ; other contents\n    ```", "```rs\n    $ /path/to/build/directory/of/wabt/wasm2wat -v\n      fold.wasm -o converted_fold.wat -f\n    ```", "```rs\n(module\n    (type (;0;) (func (result i32)))\n    (func (;0;) (type 0) (result i32)\n        (i32.add\n            (i32.const 1)\n            (i32.const 2))))\n```", "```rs\n$ touch simple.wat\n```", "```rs\n(module\n    (func $uanswer (result i32)\n        i32.const 22\n        i32.const 20\n        i32.add\n    )\n)\n```", "```rs\n$ /path/to/build/directory/of/wabt/wat2wasm simple.wat -o \n  simple.wasm\n```", "```rs\n$ /path/to/build/directory/of/wabt/wasm2c simple.wasm -o \n  simple.c\n```", "```rs\n#ifndef SIMPLE_H_GENERATED_\n#define SIMPLE_H_GENERATED_\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n...\n\n#ifdef __cplusplus\n}\n#endif\n#endif\n```", "```rs\n\n#ifndef WASM_RT_MODULE_PREFIX\n#define WASM_RT_MODULE_PREFIX\n#endif\n\n#define WASM_RT_PASTE_(x, y) x ## y\n#define WASM_RT_PASTE(x, y) WASM_RT_PASTE_(x, y)\n#define WASM_RT_ADD_PREFIX(x) WASM_RT_PASTE(WASM_RT_MODULE_PREFIX, x)\n```", "```rs\ntypedef uint8_t u8;\ntypedef int8_t s8;\ntypedef uint16_t u16;\ntypedef int16_t s16;\ntypedef uint32_t u32;\ntypedef int32_t s32;\ntypedef uint64_t u64;\ntypedef int64_t s64;\ntypedef float f32;\ntypedef double f64;\n```", "```rs\n    #include <math.h>\n    #include <string.h>\n\n    #include \"simple.h\"\n    ```", "```rs\n    #define TRAP(x) (wasm_rt_trap(WASM_RT_TRAP_##x), 0)\n    ```", "```rs\n    #define FUNC_PROLOGUE                                            \\\n      if (++wasm_rt_call_stack_depth >\n        WASM_RT_MAX_CALL_STACK_DEPTH) \\\n        TRAP(EXHAUSTION)\n\n    #define FUNC_EPILOGUE --wasm_rt_call_stack_depth\n\n    #define UNREACHABLE TRAP(UNREACHABLE)\n    ```", "```rs\n        addr) {   \\\n        addr, t2 value) { \\\n        MEMCHECK(mem, addr, t1);       \n    \\\n        t1 wrapped = (t1)value;      \n    \\\n        __builtin_memcpy(&mem->data[addr], &wrapped,\n          sizeof(t1));          \\\n      }\n    ```", "```rs\n    DEFINE_LOAD(i32_load, u32, u32, u32);\n    DEFINE_LOAD(i64_load, u64, u64, u64);\n    ...\n    DEFINE_LOAD(i64_load32_u, u32, u64, u64);\n    DEFINE_STORE(i32_store, u32, u32);\n    DEFINE_STORE(i64_store, u64, u64);\n    ...\n    DEFINE_STORE(i64_store32, u32, u64);\n    ```", "```rs\n    static u32 func_types[1];\n\n    static void init_func_types(void) {\n      func_types[0] = wasm_rt_register_func_type(0, 1,\n        WASM_RT_I32);\n    }\n    ```", "```rs\n    static void init_globals(void) {\n    }\n\n    static void init_memory(void) {\n    }\n\n    static void init_table(void) {\n      uint32_t offset;\n    }\n\n    static void init_exports(void) {\n    }\n    ```", "```rs\n    static u32 w2c_f0(void) {\n      FUNC_PROLOGUE;\n      u32 w2c_i0, w2c_i1;\n      w2c_i0 = 22u;\n      w2c_i1 = 20u;\n      w2c_i0 += w2c_i1;\n      FUNC_EPILOGUE;\n      return w2c_i0;\n    }\n    ```", "```rs\n$ /path/to/build/directory/of/wabt/wast2json add.wat -o add.\n  json\n$ cat add.json\n{\"source_filename\": \"add.wat\",\n\"commands\": [\n{\"type\": \"module\", \"line\": 1, \"filename\": \"add.0.wasm\"}]}\n```", "```rs\n$ /path/to/build/directory/of/wabt/wast2json --help\nusage: wast2json [options] filename\n\n  read a file in the wasm spec test format, check it for \n  errors, and\n  convert it to a JSON file and associated wasm binary files.\n\nexamples:\n  # parse spec-test.wast, and write files to spec-test.json. \n  Modules are\n  # written to spec-test.0.wasm, spec-test.1.wasm, etc.\n  $ wast2json spec-test.wast -o spec-test.json\n\noptions:\n      --help                                Print this help \n        message\n      --version                             Print version \n        information\n  -v, --verbose                             Use multiple times \n   for more info\n      --debug-parser                        Turn on debugging \n        the parser of wast files\n      --enable-exceptions                   Enable Experimental \n        exception handling\n      --disable-mutable-globals             Disable Import/\n        export mutable globals\n      --disable-saturating-float-to-int     Disable Saturating\n        float-to-int operators\n      --disable-sign-extension              Disable Sign-\n        extension operators\n      --enable-simd                         Enable SIMD support\n      --enable-threads                      Enable Threading \n        support\n      --disable-multi-value                 Disable Multi-value\n      --enable-tail-call                    Enable Tail-call \n        support\n      --enable-bulk-memory                  Enable Bulk-memory \n        operations\n      --enable-reference-types              Enable Reference \n        types (externref)\n      --enable-annotations                  Enable Custom \n        annotation syntax\n      --enable-gc                           Enable Garbage \n        collection\n      --enable-memory64                     Enable 64-bit \n        memory\n      --enable-all                          Enable all features\n  -o, --output=FILE                         output JSON file\n  -r, --relocatable                         Create a \n   relocatable wasm binary (suitable for linking with e.g. lld)\n      --no-canonicalize-leb128s             Write all LEB128 \n        sizes as 5-bytes instead of their minimal size\n      --debug-names                         Write debug names \n        to the generated binary file\n      --no-check                            Don't check for \n        invalid modules\n```", "```rs\n$ /path/to/build/directory/of/wabt/wasm-objdump --help\nusage: wasm-objdump [options] filename+\n\n  Print information about the contents of wasm binaries.\n\nexamples:\n  $ wasm-objdump test.wasm\n\noptions:\n      --help                   Print this help message\n      --version                Print version information\n  -h, --headers                Print headers\n  -j, --section=SECTION        Select just one section\n  -s, --full-contents          Print raw section contents\n  -d, --disassemble            Disassemble function bodies\n      --debug                  Print extra debug information\n  -x, --details                Show section details\n  -r, --reloc                  Show relocations inline with \n   disassembly\n```", "```rs\n-d/--disassemble\n-h/--headers\n-x/--details\n-s/--full-contents\n```", "```rs\n$ /path/to/build/directory/of/wabt/wasm-objdump add.wasm -h\nadd.wasm: file format wasm 0x1\n\nSections:\n\n     Type start=0x0000000a end=0x00000011 (size=0x00000007)\n  count: 1\nFunction start=0x00000013 end=0x00000015 (size=0x00000002) \n  count: 1\n     Code start=0x00000017 end=0x00000020 (size=0x00000009) \n  count: 1\n```", "```rs\n\n$/path/to/build/directory/of/wabt/wasm-objdump add.wasm -d\nadd.wasm: file format wasm 0x1\n\nCode Disassembly:\n\n000019 func[0]:\n00001a: 20 00 | local.get 0\n00001c: 20 01 | local.get 1\n00001e: 6a | i32.add\n00001f: 0b | end\n```", "```rs\n$ /path/to/build/directory/of/wabt/wasm-objdump add.wasm -x\n\nadd.wasm: file format wasm 0x1\n\nSection Details:\n\nType[1]:\n- type[0] (i32, i32) -> i32\nFunction[1]:\n- func[0] sig=0\nCode[1]:\n- func[0] size=7\n```", "```rs\n$ /path/to/build/directory/of/wabt/wasm-objdump add.wasm -s\n\nadd.wasm: file format wasm 0x1\n\nContents of section Type:\n000000a: 0160 027f 7f01 7f .`.....\n\nContents of section Function:\n0000013: 0100 ..\n\nContents of section Code:\n0000017: 0107 0020 0020 016a 0b ... . .j.\n```", "```rs\n    $ touch simple.wat\n    (module\n        (func $fold (result i32)\n            i32.const 22\n            i32.const 20\n            i32.add\n        )\n    )\n    ```", "```rs\n    $ /path/to/build/directory/of/wabt/wat2wasm simple.wat\n      --debug-names\n    $ l simple.wasm\n    51B simple.wasm\n    ```", "```rs\n    $ /path/to/build/directory/of/wabt/wasm-strip add.wasm\n    $ l simple.wasm\n    30B simple.wasm\n    ```", "```rs\n    00 61 73 6d 03 00 00 00\n                |\n            Error value\n    ```", "```rs\n    $ /path/to/build/directory/of/wabt/wasm-validate\n      error.wasm\n    0000004: error: bad magic value\n    ```", "```rs\n    usage: wasm-validate [options] filename\n    ```", "```rs\n    examples:\n      # validate binary file test.wasm\n      $ wasm-validate test.wasm\n\n    options:\n          --help                Print this help message\n          --version             Print version information\n    -v, --verbose             Use multiple times for \n       more info\n          --enable-exceptions   Enable Experimental\n            exception handling\n          --disable-mutable-globals     Disable\n            Import/export mutable globals\n          --disable-saturating-float-to-int        Disable\n            Saturating float-to-int operators\n          --disable-sign-extension                 Disable\n            Sign-extension operators\n          --enable-simd                            Enable\n            SIMD support\n          --enable-threads                         Enable\n            Threading support\n          --disable-multi-value                    Disable\n            Multi-value\n          --enable-tail-call                       Enable\n            Tail-call support\n          --enable-bulk-memory                     Enable\n            Bulk-memory operations\n          --enable-reference-types                 Enable\n            Reference types (externref)\n          --enable-annotations                     Enable\n            Custom annotation syntax\n          --enable-gc                              Enable\n            Garbage collection\n          --enable-memory64                        Enable\n            64-bit memory\n          --enable-all                             Enable\n            all features\n          --no-debug-names                         Ignore\n            debug names in the binary file\n          --ignore-custom-section-errors           Ignore\n            errors in custom sections\n    ```", "```rs\n$ /path/to/build/directory/of/wabt/wasm-interp add.wasm -v\nBeginModule(version: 1)\n  BeginTypeSection(7)\n    OnTypeCount(1)\n    OnType(index: 0, params: [i32, i32], results: [i32])\n  EndTypeSection\n  BeginFunctionSection(2)\n    OnFunctionCount(1)\n    OnFunction(index: 0, sig_index: 0)\n  EndFunctionSection\n  BeginCodeSection(9)\n    OnFunctionBodyCount(1)\n    BeginFunctionBody(0, size:7)\n    OnLocalDeclCount(0)\n    OnLocalGetExpr(index: 0)\n    OnLocalGetExpr(index: 1)\n    OnBinaryExpr(\"i32.add\" (106))\n    EndFunctionBody(0)\n  EndCodeSection\nEndModule\n   0| local.get $2\n   8| local.get $2\n  16| i32.add %[-2], %[-1]\n  20| drop_keep $2 $1\n  32| return\n```", "```rs\n\nusage: wasm-interp [options] filename [arg]...\n\n  read a file in the wasm binary format and run it in a stack-\n  based\n  interpreter.\n\nexamples:\n  ...\n\noptions:\n      --help                                Print this help \n        message\n      --version                             Print version \n        information\n  ...\n```"]