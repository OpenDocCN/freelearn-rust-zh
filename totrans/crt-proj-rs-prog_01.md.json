["```rs\nfn main() {\n    let mut _a = 7;\n    let _ref_to_a = &_a;\n    _a = 9;\n}\n```", "```rs\nfn main() -> Result<(), String> {\n    Err(\"Hi\".to_string())\n}\n```", "```rs\nfn main() -> Result<(), usize> {\n    let array = [12, 19, 27];\n    let found = array.binary_search(&19)?;\n    println!(\"Found {}\", found);\n    let found = array.binary_search(&20)?;\n    println!(\"Found {}\", found);\n    Ok(())\n}\n```", "```rs\n// Declare basic functions for pseudo-random number generators.\nuse rand::prelude::*;\n\nfn main() {\n    // Create a pseudo-Random Number Generator for the current thread\n    let mut rng = thread_rng();\n\n    // Print an integer number\n    // between 0 (included) and 20 (excluded).\n    println!(\"{}\", rng.gen_range(0, 20));\n\n    // Print a floating-point number\n    // between 0 (included) and 1 (excluded).\n    println!(\"{}\", rng.gen::<f64>());\n\n    // Generate a Boolean.\n    println!(\"{}\", if rng.gen() { \"Heads\" } else { \"Tails\" });\n}\n```", "```rs\n#[macro_use]\nextern crate log;\n\nfn main() {\n    env_logger::init();\n    error!(\"Error message\");\n    warn!(\"Warning message\");\n    info!(\"Information message\");\n    debug!(\"Debugging message\");\n}\n```", "```rs\nRUST_LOG=debug ./target/debug/use_env_logger\n```", "```rs\n[2020-01-11T15:43:44Z ERROR logging] Error message\n[2020-01-11T15:43:44Z WARN logging] Warning message\n[2020-01-11T15:43:44Z INFO logging] Information message\n[2020-01-11T15:43:44Z DEBUG logging] Debugging message\n```", "```rs\nRUST_LOG=info ./target/debug/use_env_logger\n```", "```rs\nRUST_LOG=warn ./target/debug/use_env_logger\n```", "```rs\nuse lazy_static::lazy_static;\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref DICTIONARY: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(11, \"foo\");\n        m.insert(12, \"bar\");\n        println!(\"Initialized\");\n        m\n    };\n}\n\nfn main() {\n    println!(\"Started\");\n    println!(\"DICTIONARY contains {:?}\", *DICTIONARY);\n    println!(\"DICTIONARY contains {:?}\", *DICTIONARY);\n}\n```", "```rs\nStarted\nInitialized\nDICTIONARY contains {12: \"bar\", 11: \"foo\"}\nDICTIONARY contains {12: \"bar\", 11: \"foo\"}\n```", "```rs\nuse std::path::PathBuf;\nuse structopt::StructOpt;\n\n#[derive(StructOpt, Debug)]\nstruct Opt {\n    /// Activate verbose mode\n    #[structopt(short = \"v\", long = \"verbose\")]\n    verbose: bool,\n\n    /// File to generate\n    #[structopt(short = \"r\", long = \"result\", parse(from_os_str))]\n    result_file: PathBuf,\n\n    /// Files to process\n    #[structopt(name = \"FILE\", parse(from_os_str))]\n    files: Vec<PathBuf>,\n}\n\nfn main() {\n    println!(\"{:#?}\", Opt::from_args());\n}\n```", "```rs\nOpt {\n    verbose: true,\n    result_file: \"res.txt\",\n    files: [\n        \"input1.tx\",\n        \"input2.txt\"\n    ]\n}\n```"]