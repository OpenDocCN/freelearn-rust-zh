- en: '*Chapter 4*: Understanding WebAssembly Binary Toolkit'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第四章*：理解WebAssembly二进制工具包'
- en: The Rust compiler chain converts Rust code into WebAssembly binary. But the
    generated binaries are both size- and performance-optimized. It is difficult to
    understand, debug, and validate binary code (it is a bunch of hexadecimal numbers).
    Converting WebAssembly binary back into the original source code is very difficult.
    **WebAssembly Binary Toolkit** (**WABT**) helps to convert WebAssembly binary
    into a human-readable format, such as the **WebAssembly text** (**WAST**) format
    or C-native code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Rust编译器链将Rust代码转换为WebAssembly二进制。但生成的二进制文件在大小和性能上都进行了优化。理解、调试和验证二进制代码（它是一堆十六进制数字）是困难的。将WebAssembly二进制转换回原始源代码非常困难。**WebAssembly二进制工具包**（**WABT**）有助于将WebAssembly二进制转换为人类可读的格式，例如**WebAssembly文本**（**WAST**）格式或C本地代码。
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Native code here does not refer to the original source of truth; instead, it
    refers to C-native code that the machine interprets.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的本地代码并不指代原始的真实来源；相反，它指的是机器解释的C本地代码。
- en: WebAssembly Binary Toolkit is abbreviated as WABT and pronounced as "*wabbit*."
    WABT provides a set of tools for converting, analyzing, and testing WebAssembly
    binaries.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly二进制工具包（WebAssembly Binary Toolkit）简称为WABT，发音为"*wabbit*"。WABT提供了一套用于转换、分析和测试WebAssembly二进制文件的工具。
- en: 'In this chapter, we will explore WABT and how it helps to convert WebAssembly
    binary into various formats and why it is useful. We will cover the following
    main topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨WABT以及它是如何帮助将WebAssembly二进制转换为各种格式，以及为什么它是有用的。本章将涵盖以下主要主题：
- en: Getting started with WABT
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用WABT
- en: Converting WAST into WASM
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将WAST转换为WASM
- en: Converting WASM into WAST
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将WASM转换为WAST
- en: Converting WASM into C
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将WASM转换为C
- en: Converting WAST into JSON
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将WAST转换为JSON
- en: Understanding a few other tools provided by WABT
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解WABT提供的其他一些工具
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Practical-WebAssembly](https://github.com/PacktPublishing/Practical-WebAssembly).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到本章中存在的代码文件，链接为[https://github.com/PacktPublishing/Practical-WebAssembly](https://github.com/PacktPublishing/Practical-WebAssembly)。
- en: Getting started with WABT
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用WABT
- en: Let's first install WABT and then explore the various options provided by the
    WABT tool.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先安装WABT，然后探索WABT工具提供的各种选项。
- en: Installing WABT
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装WABT
- en: 'In order to install WABT, first clone the repository from GitHub:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装WABT，首先从GitHub克隆仓库：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We use the `--recursive` flag here as it ensures that after the clone is created,
    all submodules within the repository (such as `test-suite`) are initialized.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用`--recursive`标志，因为它确保在创建克隆之后，仓库中的所有子模块（如`test-suite`）都被初始化。
- en: 'Go into the cloned repository, create a folder named `build`, and then go inside
    the `build` folder. This is where we will generate the binaries:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 进入克隆的仓库，创建一个名为`build`的文件夹，然后进入`build`文件夹。这是我们生成二进制文件的地方：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You will also need to install CMake. Refer to [https://cmake.org/download/](https://cmake.org/download/)
    for more instructions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装CMake。有关更多说明，请参阅[https://cmake.org/download/](https://cmake.org/download/)。
- en: To build the binary with CMake, we first need to generate the build system.
    We specify the source to the `cmake` command. CMake will then build trees and
    generate a build system for the specified source, using the `CMakeLists.txt` file.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用CMake构建二进制文件，我们首先需要生成构建系统。我们指定`cmake`命令的源。然后，CMake将构建树并为指定的源生成一个构建系统，使用`CMakeLists.txt`文件。
- en: Linux or macOS
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux或macOS
- en: 'In order to generate the project build system, we run the `cmake` command with
    the path to the `wabt` folder. The `cmake` command accepts both a relative and
    absolute path. We are using the relative path here (`..`):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成项目构建系统，我们运行带有`wabt`文件夹路径的`cmake`命令。`cmake`命令接受相对路径和绝对路径。我们在这里使用相对路径（`..`）：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we can build the project using cmake build. `cmake build` makes use of
    the generated project binary tree to generate the binaries:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`cmake build`来构建项目。`cmake build`利用生成的项目二进制树来生成二进制文件：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `cmake build` command requires the `<dir>` option to generate the binaries.
    The cmake build command accepts the flags listed in the preceding code block:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`cmake build`命令需要`<dir>`选项来生成二进制文件。`cmake build`命令接受前面代码块中列出的标志：'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Windows
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: 'Install CMake and Visual Studio (>= 2015). Then, run `cmake` inside the `build`
    folder:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安装CMake和Visual Studio（>= 2015）。然后，在`build`文件夹内运行`cmake`：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `[config]` parameter can be either `DEBUG` or `RELEASE`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`[config]`参数可以是`DEBUG`或`RELEASE`。'
- en: The `[install directory]` parameter should be the folder where you want to install
    the binaries.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`[安装目录]`参数应该是您想要安装二进制文件的文件夹。'
- en: The `[generator]` parameter should be the type of project you want to generate,
    for example, Visual Studio 14 2015\. You can see the list of available generators
    by running `cmake –help`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`[generator]`参数应该是您想要生成的项目类型，例如，Visual Studio 14 2015。您可以通过运行`cmake –help`来查看可用生成器的列表。'
- en: 'This will build and install all the required executables inside the folder
    specified:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在指定的文件夹内构建和安装所有必需的可执行文件：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once you have successfully installed all the WABT tools, you can either add
    them to your path or call them from their path.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功安装了所有WABT工具，您可以将它们添加到您的路径中或从它们的路径中调用它们。
- en: 'The `build` folder contains the following binaries:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`build`文件夹包含以下二进制文件：'
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'That sure is a huge list of binaries. Let''s see what each one is capable of,
    in detail:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实是一个庞大的二进制文件列表。让我们详细看看每个二进制文件能做什么：
- en: '`wat2wasm` – This tool helps to convert the WAST format into a **WebAssembly
    module** (**WASM**).'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wat2wasm` – 这个工具帮助将WAST格式转换为**WebAssembly模块**（**WASM**）。'
- en: '`wat-desugar` – This tool reads a file in a WASM S-expression and formats it.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wat-desugar` – 这个工具读取WASM S表达式文件并格式化它。'
- en: '`wast2json` – This tool validates and converts WAST format into JSON format.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wast2json` – 这个工具验证并将WAST格式转换为JSON格式。'
- en: '`wasm2wat` – This tool converts WASM into WAST format.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm2wat` – 这个工具将WASM转换为WAST格式。'
- en: '`wasm2c` – This tool converts WASM into C-native code.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm2c` – 这个工具将WASM转换为C原生代码。'
- en: '`wasm-validate` – This tool validates whether the given WebAssembly is constructed
    as per the specification.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-validate` – 这个工具验证给定的WebAssembly是否按照规范构建。'
- en: '`wasm-strip` – As we saw in the previous chapter, WASM consists of various
    sections. The custom section in the module is used only for extra meta-information
    about the module and the tools used in its generation. `wasm-strip` removes the
    custom section from the WASM.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-strip` – 正如我们在上一章中看到的，WASM由多个部分组成。模块中的自定义部分仅用于关于模块及其生成过程中使用的工具的额外元信息。`wasm-strip`从WASM中移除自定义部分。'
- en: '`wasm-opcodecnt` – This tool reads the WASM and counts the use of opcode instructions
    in the WebAssembly Module.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-opcodecnt` – 这个工具读取WASM并计算WebAssembly模块中指令操作码的使用情况。'
- en: '`wasm-objdump` – This tool helps to print information about a WASM binary.
    It is similar to objdump ([https://en.wikipedia.org/wiki/Objdump](https://en.wikipedia.org/wiki/Objdump))
    but for WebAssembly Modules.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-objdump` – 这个工具帮助打印关于WASM二进制文件的信息。它与objdump ([https://en.wikipedia.org/wiki/Objdump](https://en.wikipedia.org/wiki/Objdump))类似，但用于WebAssembly模块。'
- en: '`wasm-interp` – This tool decodes and runs a WebAssembly binary file using
    a stack-based interpreter.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-interp` – 这个工具使用基于堆栈的解释器解码并运行WebAssembly二进制文件。'
- en: '`wasm-decompile` – This tool helps to decompile a WASM binary into readable
    C-like syntax.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-decompile` – 这个工具帮助将WASM二进制文件反编译成可读的类似C的语法。'
- en: 'The following are the testing binaries:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些测试二进制文件：
- en: '`hexfloat_test`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hexfloat_test`'
- en: '`spectest-interp`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spectest-interp`'
- en: '`wabt-unittests`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wabt-unittests`'
- en: Note
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Explore various supported proposals by WABT at [https://github.com/WebAssembly/wabt#supported-proposals](https://github.com/WebAssembly/wabt#supported-proposals).
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 探索WABT支持的各个提案，请访问[https://github.com/WebAssembly/wabt#supported-proposals](https://github.com/WebAssembly/wabt#supported-proposals)。
- en: We have built WABT and generated the tools. Now, let's explore the most important
    and useful tools.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了WABT并生成了工具。现在，让我们探索最重要和最有用的工具。
- en: Converting WAST into WASM
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将WAST转换为WASM
- en: '`wat2wasm` helps to convert the WAST format into WASM. Let''s take it for a
    spin:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`wat2wasm`帮助将WAST格式转换为WASM。让我们试一试：'
- en: 'Create a new folder called `wabt-playground` and go into the folder:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`wabt-playground`的新文件夹并进入该文件夹：
- en: '[PRE8]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a `.wat` file called `add.wat`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`add.wat`的`.wat`文件：
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following contents to `add.wat`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到`add.wat`：
- en: '[PRE10]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Convert the WAST format into WASM using the `wat2wasm` binary:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`wat2wasm`二进制文件将WAST格式转换为WASM：
- en: '[PRE11]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This generates a valid WebAssembly binary in `add.wasm` file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`add.wasm`文件中生成有效的WebAssembly二进制文件：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that the size of the generated binary is 32 bytes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，生成的二进制文件大小为32字节。
- en: 'WABT reads the WAST format file (`.wat`) and converts it into a WebAssembly
    module (`.wasm`). `wat2wasm` first validates the given file (`.wat`) and then
    converts it into a `.wasm` file. To check the various options supported by `wat2wasm`,
    we can run the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WABT读取WAST格式文件（`.wat`）并将其转换为WebAssembly模块（`.wasm`）。`wat2wasm`首先验证给定的文件（`.wat`），然后将其转换为`.wasm`文件。要检查`wat2wasm`支持的选项，我们可以运行以下命令：
- en: '[PRE13]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we need to generate the WASM file in a different name, we can use the `-o`
    option with the filename. For example, `wat2wasm add.wat -o add.wasm` will generate
    `add.wasm`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要以不同的名称生成 WASM 文件，可以使用 `-o` 选项和文件名。例如，`wat2wasm add.wat -o add.wasm` 将生成
    `add.wasm`。
- en: '`wat2wasm` also provides verbose output that clearly explains how the WASM
    is structured. In order to see the structure of the WASM, we run it with the `-v`
    option:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wat2wasm` 还提供了详细的输出，清楚地解释了 WASM 的结构。为了查看 WASM 的结构，我们使用 `-v` 选项运行它：'
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding output is a detailed description of the binary generated. The
    leftmost seven numbers are the index, followed by a colon. The next two characters
    are the actual binary code, and then comments. The comment describes what the
    binary (op)code does.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出是对生成的二进制的详细描述。最左边的七个数字是索引，后面跟着一个冒号。接下来的两个字符是实际的二进制代码，然后是注释。注释描述了二进制（操作）码的功能。
- en: The first two lines specify `wasm_magic_header` and its version. The next segment
    is the `Type` section. The `Type` section defines the section ID, followed by
    the size of the section, and then the number of type blocks. In our case, we have
    only one type. The `type 0` section defines the `type` signature of the `add`
    function.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行指定 `wasm_magic_header` 及其版本。下一个部分是 `Type` 部分。`Type` 部分定义了部分 ID，后面跟着部分大小，然后是类型块的数量。在我们的例子中，我们只有一个类型。`type
    0` 部分定义了 `add` 函数的类型签名。
- en: Then, we have the `Function` section. In the `Function` section, we have the
    section ID, followed by the section size, and then the number of functions. The
    function section does not have the function body. The function body is defined
    in the `Code` section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有 `Function` 部分。在 `Function` 部分，我们有部分 ID，后面跟着部分大小，然后是函数的数量。函数部分没有函数体。函数体在
    `Code` 部分定义。
- en: While generating the binary, we can enable the compiler to include the new and
    shiny features and disable various existing features using the appropriate `enable-*`
    and `disable-*` options, respectively.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成二进制时，我们可以通过使用适当的 `enable-*` 和 `disable-*` 选项分别启用新功能和禁用现有功能来让编译器包含新功能和禁用现有功能。
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also check the online version at [https://webassembly.github.io/wabt/demo/wat2wasm/](https://webassembly.github.io/wabt/demo/wat2wasm/)
    to explore the WABT tools.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在网上查看版本，在 [https://webassembly.github.io/wabt/demo/wat2wasm/](https://webassembly.github.io/wabt/demo/wat2wasm/)
    探索 WABT 工具。
- en: We have converted WAST into WASM. Now, let's explore how to convert WASM into
    WAST with `wasm2wat`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将 WAST 转换成了 WASM。现在，让我们探索如何使用 `wasm2wat` 将 WASM 转换为 WAST。
- en: Converting WASM into WAST
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 WASM 转换为 WAST
- en: 'Sometimes, for debugging or understanding, we need to know what the WASM is
    doing. WABT has a `wasm2wat` converter. It helps to convert WASM into WAST format:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，为了调试或理解，我们需要知道 WASM 正在做什么。WABT 有一个 `wasm2wat` 转换器。它可以帮助将 WASM 转换为 WAST 格式：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Running the previous command will convert `add.wasm` back into WAST format and
    print the output in the console.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令将 `add.wasm` 转换回 WAST 格式，并在控制台打印输出。
- en: 'If you want to save it as a file, you can do so by using the `-o` flag:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将其保存为文件，可以使用 `-o` 标志：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command creates a `new_add.wat` file.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建一个 `new_add.wat` 文件。
- en: 'To check the various options supported by `wasm2wat`, we can run the following
    command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 `wasm2wat` 支持的各种选项，我们可以运行以下命令：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Both `wasm2wat` and `wat2wasm` have almost identical options.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm2wat` 和 `wat2wasm` 几乎有相同的选项。'
- en: 'Running the previous command with the `-v` option prints the AST syntax of
    the WAST format:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `-v` 选项运行前面的命令将打印 WAST 格式的 AST 语法：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The entire code block is wrapped inside `BeginModule` and `EndModule`. `BeginModule`
    includes the version of the WebAssembly binary.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 整个代码块被包裹在 `BeginModule` 和 `EndModule` 之间。`BeginModule` 包含 WebAssembly 二进制的版本。
- en: Inside the BeginModule, the `BeginTypeSection` starts with the section index
    of type (that is, `7`), followed by `OnTypeCount`, the number of types defined.
    Then, we have the actual definition of the type with `OnType`. We end the type
    section with `EndTypeSection`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `BeginModule` 内部，`BeginTypeSection` 从类型的部分索引（即 `7`）开始，后面跟着 `OnTypeCount`，定义的类型数量。然后，我们有
    `OnType` 的实际类型定义。我们通过 `EndTypeSection` 结束类型部分。
- en: Then, we have the `Function` section marked by `BeginFunctionSection` and `EndFunctionSection`.
    This contains the function count (`OnFunctionCount`) and the function definition
    (`OnFunction`).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有由 `BeginFunctionSection` 和 `EndFunctionSection` 标记的 `Function` 部分。这部分包含函数计数（`OnFunctionCount`）和函数定义（`OnFunction`）。
- en: Finally, we have the code section, which holds the actual body of the function.
    The code section begins and ends with `BeginCodeSection` and `EndCodeSection`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有代码部分，它包含函数的实际主体。代码部分以`BeginCodeSection`开始，以`EndCodeSection`结束。
- en: 'Sometimes, WASM may contain debug names. We can ignore them using the `--no-debug-names`
    flag:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，WASM可能包含调试名称。我们可以使用`--no-debug-names`标志来忽略它们：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note `BeginCustomSection` and `EndCustomSection`. Compare it with the previous
    output; it is missing `NamesSection`. Now, let's check out the various options
    provided by the `wasm2wat` tool.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`BeginCustomSection`和`EndCustomSection`。与之前的输出比较，它缺少`NamesSection`。现在，让我们查看`wasm2wat`工具提供的各种选项。
- en: -f or --fold-exprs
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: -f或--fold-exprs
- en: As a big fan of functional programming, this is one of the coolest options available.
    It folds over the expression; that is, it converts expression 1 >> expression
    2 >> operation into operation >> expression 1 >> expression2.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为功能编程的大粉丝，这是可用的最酷的选项之一。它折叠表达式；也就是说，它将表达式1 >> 表达式2 >> 操作转换为操作 >> 表达式1 >> 表达式2。
- en: 'Let''s see that in action:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看实际操作：
- en: 'Create a WAST file called `fold.wat` and fill it with the following contents:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`fold.wat`的WAST文件，并填充以下内容：
- en: '[PRE20]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s first convert it into WASM using `wat2wasm`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用`wat2wasm`将其转换为WASM：
- en: '[PRE21]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This creates `fold.wasm`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建`fold.wasm`。
- en: 'Now, convert the WASM into the WAST format using `wasm2wat` and pass in the
    `-f` option:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`wasm2wat`将WASM转换为WAST格式，并传递`-f`选项：
- en: '[PRE22]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will create a file called `converted_fold.wat`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`converted_fold.wat`的文件：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Instead of using `i32.const 1` (expression 1) and `i32.const 2` (expression
    2) and then doing `i32.add` (operation), this generates an output, `i32.add` (operation),
    followed by `i32.const 1` (expression 1) and `i32.const 2` (expression 2).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用`i32.const 1`（表达式1）和`i32.const 2`（表达式2）然后执行`i32.add`（操作），这生成一个输出，`i32.add`（操作），然后是`i32.const
    1`（表达式1）和`i32.const 2`（表达式2）。
- en: While generating `wat`, we can enable the compiler to include the new and shiny
    features and disable various existing features using the appropriate `enable-*`
    and `disable-*` options, respectively.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成`wat`时，我们可以通过使用适当的`enable-*`和`disable-*`选项来启用编译器包括新的和闪亮的功能，并禁用各种现有功能。
- en: We have converted WASM into WAST. Now, let's explore how to convert WASM into
    native code (C) using `wasm2c`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将WASM转换为WAST。现在，让我们探索如何使用`wasm2c`将WASM转换为本地代码（C）。
- en: Converting WASM into C
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将WASM转换为C
- en: WABT has a `wasm2c` converter that converts WASM into C source code and a header.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: WABT有一个`wasm2c`转换器，可以将WASM转换为C源代码和头文件。
- en: 'Let''s create a `simple.wat` file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`simple.wat`文件：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following contents to `simple.wat`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到`simple.wat`中：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`wat` here defines a `uanswer` function that adds `22` and `20` to give `42`
    as the answer. Let''s create a WebAssembly binary using `wat2wasm`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`wat`在这里定义了一个`uanswer`函数，将`22`和`20`相加得到`42`作为答案。让我们使用`wat2wasm`创建一个WebAssembly二进制文件：'
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This generates the `simple.wasm` binary. Now, convert the binary into C code
    using `wasm2c`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这生成了`simple.wasm`二进制文件。现在，使用`wasm2c`将二进制文件转换为C代码：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This generates `simple.c` and `simple.h`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这生成了`simple.c`和`simple.h`。
- en: Note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Both `simple.c` and `simple.h` might look huge. Remember this is an autogenerated
    file and it includes all the necessary headers and configuration needed for the
    program to run.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`simple.c`和`simple.h`可能看起来很大。记住这是一个自动生成的文件，它包含了程序运行所需的所有必要的头文件和配置。'
- en: simple.h
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: simple.h
- en: '`simple.h` (the header file) includes standard boilerplate for the header.
    It also includes the `_cplusplus` condition to prevent name mangling in C++:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`simple.h`（头文件）包括头文件的标准化样板代码。它还包括`_cplusplus`条件，以防止C++中的名称修饰：'
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Since we have used `i32.const` and `i32.add`, the header file also imports `stdint.h`.
    It includes `wasm-rt.h`. The `wasm-rt.h` header imports the necessary WASM runtime
    variables.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了`i32.const`和`i32.add`，头文件也导入了`stdint.h`。它包括`wasm-rt.h`。`wasm-rt.h`头文件导入了必要的WASM运行时变量。
- en: 'Next, we can specify a module prefix. The module prefix is useful when using
    multiple modules. Since we only have one module, we use an empty prefix:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以指定一个模块前缀。当使用多个模块时，模块前缀很有用。由于我们只有一个模块，我们使用一个空前缀：
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, we have some typedefs for the various number formats that WASM supports:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一些针对WASM支持的多种数字格式的typedef：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: simple.c
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: simple.c
- en: '`simple.c` provides the actual C code generated from the WASM binary. The generated
    code has the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`simple.c`提供了从WASM二进制生成的实际C代码。生成的代码具有以下内容：'
- en: 'We''ll require the following list of libraries to use in the code:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将需要以下库列表在代码中使用：
- en: '[PRE31]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, we define the trap that is called when an error occurs:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义当发生错误时调用的陷阱：
- en: '[PRE32]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, we define `PROLOGUE`, `EPILOGUE`, and `UNREACHABLE_TRAP`, which are called
    before the start of execution, after execution, and when the execution meets an
    unreachable exception, respectively:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义 `PROLOGUE`、`EPILOGUE` 和 `UNREACHABLE_TRAP`，分别是在执行开始前、执行后以及执行遇到不可达异常时调用的：
- en: '[PRE33]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`WASM_RT_MAX_CALL_STACK_DEPTH` is the maximum depth of the stack. By default,
    the value is `500` but we can change it. Note that if it reaches the limit, then
    an exception is thrown.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`WASM_RT_MAX_CALL_STACK_DEPTH` 是堆栈的最大深度。默认值为 `500`，但我们可以更改它。注意，如果达到限制，则会抛出异常。'
- en: 'Next, we define the memory manipulations:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义内存操作：
- en: '[PRE34]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`MEMCHECK` checks for memory. The `DEFINE_LOAD` and `DEFINE_STORE` blocks define
    how to load and store a value in memory.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMCHECK` 检查内存。`DEFINE_LOAD` 和 `DEFINE_STORE` 块定义了如何在内存中加载和存储值。'
- en: 'Next, we define a bunch of load and store operations for various data types
    that we have in this example:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们为示例中具有的各种数据类型定义了一组加载和存储操作：
- en: '[PRE35]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Then, we define various functions that each of the data types supports, such
    as `TRUNC`, `DIV`, and `REM`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义各种数据类型支持的各种函数，例如 `TRUNC`、`DIV` 和 `REM`。
- en: 'Next, we initialize the function types using `func_types`:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用 `func_types` 初始化函数类型：
- en: '[PRE36]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This registers the (result i32) type in the WASM provided.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 WASM 中注册了（结果 i32）类型。
- en: 'Next, we initialize `globals`, `memory`, `table`, and `exports`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们初始化 `globals`、`memory`、`table` 和 `exports`：
- en: '[PRE37]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, we implement the actual function:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们实现实际的功能：
- en: '[PRE38]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The function is static. It calls `FUNC_PROLOGUE` before the execution. Then,
    it creates two variables (both are unsigned u32). Then, we define the value of
    both the variables, `22` and `20`, respectively. After that, we add them both.
    Once the execution is complete, we call `FUNC_EPILOGUE`. Finally, we return the
    value.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是静态的。它在执行前调用 `FUNC_PROLOGUE`。然后，它创建两个变量（都是无符号 u32）。然后，我们定义两个变量的值，分别是 `22`
    和 `20`。之后，我们将它们相加。一旦执行完成，我们调用 `FUNC_EPILOGUE`。最后，我们返回值。
- en: Note
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Since we have not exported anything in `wat`, `init_exports` is empty.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在 `wat` 中没有导出任何内容，因此 `init_exports` 是空的。
- en: We have converted WASM into C. The generated code is slightly different from
    the original code. Let's explore how to convert WAST into JSON with `wast2json`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将 WASM 转换为 C。生成的代码与原始代码略有不同。让我们探索如何使用 `wast2json` 将 WAST 转换为 JSON。
- en: Converting WAST into JSON
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 WAST 转换为 JSON
- en: 'The `wast2json` tool reads the WAST format and parses it, checks for errors,
    and then converts WAST into the JSON file. It generates a JSON and WASM file associated
    with the WAST file. Then, it links the WASM inside the JSON:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`wast2json` 工具读取 WAST 格式并解析它，检查错误，然后将 WAST 转换为 JSON 文件。它为 WAST 文件生成一个 JSON
    和 WASM 文件。然后，它将 JSON 中的 WASM 链接起来：'
- en: '[PRE39]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To check the various options supported by `wast2json`, run the following command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 `wast2json` 支持的各种选项，请运行以下命令：
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: These are the frequently used WABT tools. There are a few other tools provided
    by WABT that help with debugging and understanding WASM better.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是常用的 WABT 工具。WABT 还提供了一些其他工具，有助于调试和更好地理解 WASM。
- en: Understanding a few other tools provided by WABT
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 WABT 提供的几个其他工具
- en: 'In addition to the converters, WABT also provides a few tools that help us
    to understand WASM better. In this section, let''s explore the following tools
    provided by WABT:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 除了转换器之外，WABT 还提供了一些工具，帮助我们更好地理解 WASM。在本节中，让我们探索 WABT 提供的以下工具：
- en: '`wasm-objdump`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-objdump`'
- en: '`wasm-strip`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-strip`'
- en: '`wasm-validate`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-validate`'
- en: '`wasm-interp`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wasm-interp`'
- en: wasm-objdump
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`wasm-objdump`'
- en: Object code is nothing more than a sequence of instructions or statements in
    the computer language. Object code is what the compiler produces. The object code
    is then collected together and then stored inside the object file. The object
    file is the metadata holder for linking and debugging information. The machine
    code in the object file is not directly executable, but it provides valuable information
    when debugging and also helps with linking.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 目标代码不过是计算机语言中的一系列指令或语句。目标代码是编译器产生的。目标代码随后收集在一起，并存储在目标文件中。目标文件是链接和调试信息的元数据持有者。目标文件中的机器代码不能直接执行，但在调试时提供有价值的信息，并有助于链接。
- en: Note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`objdump` is the tool that is available in POSIX systems that provides a way
    to disassemble the binary format and print the assembly format of the code that
    is running.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`objdump` 是 POSIX 系统中可用的工具，它提供了一种解汇编二进制格式并打印运行代码汇编格式的方法。'
- en: 'The `wasm-objdump` tool provides the following options:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm-objdump` 工具提供以下选项：'
- en: '[PRE41]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'At least one of the following options should be provided to the `wasm-objdump`
    command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 至少应提供以下选项之一给 `wasm-objdump` 命令：
- en: '[PRE42]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The `-h` option prints all the available headers in WASM. For example, in our
    add example (`add.wasm`), we have the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`-h` 选项打印 WASM 中所有可用的头信息。例如，在我们的 add 示例（`add.wasm`）中，我们有以下内容：'
- en: '[PRE43]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Here, we have three sections available:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有三个部分可用：
- en: '`Type`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Type`'
- en: '`Function`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Function`'
- en: '`Code`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Code`'
- en: 'The `-d` option prints the actual body of the function available:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`-d` 选项打印函数的实际主体：'
- en: '[PRE44]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: It dissembles the assembly function and prints only the function body.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 它反汇编汇编函数并仅打印函数主体。
- en: 'The `-x` option prints the section details of the WebAssembly binary file:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`-x` 选项打印 WebAssembly 二进制文件的段详细信息：'
- en: '[PRE45]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `-s` option prints the contents of all the sections that are available:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`-s` 选项打印所有可用的段的内容：'
- en: '[PRE46]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: wasm-strip
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: wasm-strip
- en: The custom section in a WASM holds information about the names of the function
    and all locals defined in the WASM. It may contain information about the build
    and how the WASM was created. This is additional information. It bloats the binary
    and does not add any functionality.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: WASM 中的自定义部分包含有关函数和所有在 WASM 中定义的局部变量的名称的信息。它可能包含有关构建和 WASM 如何创建的信息。这是附加信息。它会使二进制文件膨胀，但不会添加任何功能。
- en: 'We can strip the custom section to trim the binary size using the `wasm-strip`
    tool:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `wasm-strip` 工具删除自定义部分以减小二进制文件大小：
- en: 'Create a `wat` file with the following contents:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的 `wat` 文件：
- en: '[PRE47]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, convert that into a WASM with `wat2wasm`:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `wat2wasm` 将其转换为 WASM：
- en: '[PRE48]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `--debug-names` option provided generates the custom section and adds it
    to the binary generated.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`--debug-names` 选项提供的生成自定义部分并将其添加到生成的二进制文件中。'
- en: The previous command generates a `simple.wasm` file and it is 51 bytes in size.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令生成了一个 `simple.wasm` 文件，其大小为 51 字节。
- en: 'Now, let''s remove the custom section from the binary using the following:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令从二进制文件中移除自定义部分：
- en: '[PRE49]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see, it removed 21 bytes of unnecessary information. Some WASM generators
    add the custom section for a better debugging experience but when deploying in
    production, we do not need the custom section. Use `wasm-strip` to remove it.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它删除了 21 字节的不必要信息。一些 WASM 生成器添加自定义部分以获得更好的调试体验，但在生产部署时，我们不需要自定义部分。使用 `wasm-strip`
    来删除它。
- en: wasm-validate
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: wasm-validate
- en: 'We can validate the WASM using `wasm-validate`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `wasm-validate` 验证 WASM：
- en: 'Create `error.wasm` with the following contents:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用以下内容创建 `error.wasm`:'
- en: '[PRE50]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, run `wasm-validate` to check whether the WASM is valid or not:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行 `wasm-validate` 检查 WASM 是否有效：
- en: '[PRE51]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The `wasm-validate` tool provides the following options:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wasm-validate` 工具提供以下选项：'
- en: '[PRE52]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Read a file in the WebAssembly binary format and validate it:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取 WebAssembly 二进制格式的文件并验证它：
- en: '[PRE53]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: wasm-interp
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: wasm-interp
- en: '`wasm-interp` reads a file in the WebAssembly binary format and runs it in
    a stack-based interpreter. The `wasm-interp` tool parses the binary file and then
    type checks it:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm-interp` 读取 WebAssembly 二进制格式的文件并在基于堆栈的解释器中运行它。`wasm-interp` 工具解析二进制文件，然后进行类型检查：'
- en: '[PRE54]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The last five lines are how the stack interpreter executes the code.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最后五行是堆栈解释器执行代码的方式。
- en: 'The `wasm-interp` tool provides the following options:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`wasm-interp` 工具提供以下选项：'
- en: '[PRE55]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: WABT provides a list of tools that make WASM easier to understand, debug, and
    convert into various human-readable formats. It is one of the most important toolkits
    that allows developers to explore the WASM better.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: WABT 提供了一系列工具，使 WASM 更易于理解、调试和转换为各种可读格式。它是允许开发者更好地探索 WASM 的最重要的工具包之一。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw what WABT is and how to install and use various tools
    provided by it. The WABT tool is very important in the WebAssembly ecosystem as
    it provides an easy option to convert non-readable, compact binaries into readable,
    expanded source code.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 WABT 是什么以及如何安装和使用它提供的各种工具。WABT 工具在 WebAssembly 生态系统中非常重要，因为它提供了一个将不可读的紧凑二进制文件转换为可读的展开源代码的简单选项。
- en: In the next chapter, we will explore various sections inside the WASM.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索 WASM 内部的各种部分。
