- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: The content in this book was initially written as a series of shorter books
    for programmers wanting to learn asynchronous programming from the ground up using
    Rust. I found the existing material I came upon at the time to be in equal parts
    frustrating, enlightening, and confusing, so I wanted to do something about that.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的内容最初是为那些希望从零开始使用Rust学习异步编程的程序员编写的一系列较短的书籍。我发现当时我所遇到的材料在挫败感、启发性和困惑感上各占一半，所以我想要做些改变。
- en: Those shorter books became popular, so when I got the chance to write everything
    a second time, improve the parts that I was happy with, and completely rewrite
    everything else and put it in a single, coherent book, I just had to do it. The
    result is right in front of you.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 那些较短的书籍变得流行起来，所以当我有机会再次写一切，改进我满意的部分，并完全重写其他所有内容，将其整合成一本单一、连贯的书籍时，我不得不这么做。结果就在你面前。
- en: People start programming for a variety of different reasons. Scientists start
    programming to model problems and perform calculations. Business experts create
    programs that solve specific problems that help their businesses. Some people
    start programming as a hobby or in their spare time. Common to these programmers
    is that they learn programming from the top down.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 人们开始编程的原因多种多样。科学家开始编程是为了建模问题和进行计算。商业专家创建程序来解决特定问题，这些问题有助于他们的业务。有些人开始编程作为一种爱好或在业余时间。这些程序员共同的特点是他们从上到下学习编程。
- en: Most of the time, this is perfectly fine, but on the topic of asynchronous programming
    in general, and Rust in particular, there is a clear advantage to learning about
    the topic from first principles, and this book aims to provide a means to do just
    that.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，这完全没问题，但在异步编程这一普遍话题，尤其是在Rust语言中，从基本原理学习这一主题具有明显的优势，本书旨在提供一种实现这一目标的方法。
- en: '**Asynchronous programming** is a way to write programs where you divide your
    program into tasks that can be stopped and resumed at specific points. This, in
    turn, allows a language runtime, or a library, to drive and schedule these tasks
    so their progress interleaves.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步编程**是一种编写程序的方式，你将程序划分为可以在特定点停止和恢复的任务。这反过来又允许语言运行时或库驱动和调度这些任务，使它们的进度交错。'
- en: Asynchronous programming will, by its very nature, affect the entire program
    flow, and it’s very invasive. It rewrites, reorders, and schedules the program
    you write in a way that’s not always obvious to you as a programmer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程由于其本质，将影响整个程序流程，并且非常具有侵入性。它以对你作为程序员来说并不总是明显的方式重写、重新排序和调度你编写的程序。
- en: Most programming languages try to make asynchronous programming so easy that
    you don’t really have to understand how it works just to be productive in it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编程语言都试图使异步编程变得如此简单，以至于你不必真正了解它是如何工作的，就可以在其中高效工作。
- en: You can get quite productive writing asynchronous Rust without really knowing
    how it works as well, but Rust is more explicit and surfaces more complexity to
    the programmer than most other languages. You will have a much easier time handling
    this complexity if you get a deep understanding of asynchronous programming in
    general and what really happens when you write asynchronous Rust.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在几乎不了解异步Rust是如何工作的同时，相当高效地编写异步Rust，但Rust比大多数其他语言更明确，并向程序员暴露了更多的复杂性。如果你对异步编程有一个深入的理解，以及当你编写异步Rust时真正发生了什么，你将更容易处理这种复杂性。
- en: Another huge upside is that learning from first principles results in knowledge
    that is applicable way beyond Rust, and it will, in turn, make it easier to pick
    up asynchronous programming in other languages as well. I would even go so far
    as to say that most of this knowledge will be useful even in your day-to-day programming.
    At least, that’s how it’s been for me.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个巨大的优势是，从基本原理学习得出的知识可以应用于Rust之外，而且它反过来会使在其他语言中学习异步编程变得更加容易。我甚至可以说，这些知识中的大部分在日常编程中也会很有用。至少，对我来说是这样的。
- en: I want this book to feel like you’re joining me on a journey, where we build
    our knowledge topic by topic and learn by creating examples and experiments along
    the way. I don’t want this book to feel like a lecturer simply telling you how
    everything works.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这本书能让你感觉像是加入了我的旅程，我们在每个知识主题上逐步构建知识，并通过创建示例和实验来学习。我不想让这本书感觉像是一位讲师简单地告诉你一切是如何工作的。
- en: This book is created for people who are curious by nature, the kind of programmers
    who want to understand the systems they use, and who like creating small and big
    experiments as a way to explore and learn.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是为那些天生好奇的人而创作的，这类程序员希望理解他们使用的系统，并喜欢通过创建小实验和大实验来探索和学习。
- en: Who this book is for
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书面向的对象
- en: 'This book is for developers with some prior programming experience who want
    to learn asynchronous programming from the ground up so they can be proficient
    in async Rust and be able to participate in technical discussions on the subject.
    The book is perfect for those who like writing working examples they can pick
    apart, expand, and experiment with.     There are two kinds of personas that I feel this book is especially relevant to:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书面向那些有一定编程经验，希望从零开始学习异步编程的开发者，以便他们能够熟练掌握异步Rust，并能够参与关于该主题的技术讨论。对于那些喜欢编写可以拆解、扩展和实验的工作示例的人来说，本书是完美的。我认为这本书对以下两种角色特别相关：
- en: Developers coming from higher-level languages with a garbage collector, interpreter,
    or runtime, such as C#, Java, JavaScript, Python, Ruby, Swift, or Go. Programmers
    who have extensive experience with asynchronous programming in any of these languages
    but want to learn it from the ground up and programmers with no experience with
    asynchronous programming should both find this book equally useful.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自具有垃圾收集器、解释器或运行时的高级语言（如C#、Java、JavaScript、Python、Ruby、Swift或Go）的开发者。那些在这些语言中具有丰富异步编程经验，但希望从零开始学习它，以及那些没有异步编程经验的程序员，都应该发现这本书同样有用。
- en: Developers with experience in languages such as C or C++ that have limited experience
    with asynchronous programming.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在C或C++等语言方面有经验，但对异步编程经验有限的开发者。
- en: What this book covers
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[*Chapter 1*](B20892_01.xhtml#_idTextAnchor014), *Concurrency and Asynchronous
    Programming: A Detailed Overview*, provides a short history leading up to the
    type of asynchronous programming we use today. We give several important definitions
    and provide a mental model that explains what kind of problems asynchronous programming
    really solves, and how concurrency differs from parallelism. We also cover the
    importance of choosing the correct reference frame when discussing asynchronous
    program flow, and we go through several important and fundamental concepts about
    CPUs, operating systems, hardware, interrupts, and I/O.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第1章*](B20892_01.xhtml#_idTextAnchor014)，*并发与异步编程：详细概述*，提供了关于我们今天使用的异步编程类型的历史简短介绍。我们给出了几个重要的定义，并提供了一个心理模型来解释异步编程真正解决的问题，以及并发与并行之间的区别。我们还讨论了在讨论异步程序流程时选择正确参考框架的重要性，并介绍了关于CPU、操作系统、硬件、中断和I/O的几个重要和基本概念。'
- en: '[*Chapter 2*](B20892_02.xhtml#_idTextAnchor043), *How Programming Languages
    Model Asynchronous Program Flow*, narrows the scope from the previous chapter
    and focuses on the different ways programming languages deal with asynchronous
    programming. It starts by giving several important definitions before explaining
    stackful and stackless coroutines, OS threads, green threads, fibers, callbacks,
    promises, futures, and async/await.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第2章*](B20892_02.xhtml#_idTextAnchor043)，*编程语言如何模拟异步程序流程*，将范围从上一章缩小，专注于编程语言处理异步编程的不同方式。它首先给出了几个重要的定义，然后解释了堆栈式和无堆栈协程、操作系统线程、绿色线程、纤程、回调、承诺、未来和async/await。'
- en: '[*Chapter 3*](B20892_03.xhtml#_idTextAnchor063), *Understanding OS-Backed Event
    Queues, System Calls, and Cross-Platform Abstractions*, explains what epoll, kqueue,
    and IOCP are and how they differ. It prepares us for the next chapters by giving
    an introduction to syscalls, FFI, and cross-platform abstractions.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第3章*](B20892_03.xhtml#_idTextAnchor063)，*理解操作系统支持的事件队列、系统调用和跨平台抽象*，解释了epoll、kqueue和IOCP是什么以及它们之间的区别。通过介绍系统调用、FFI和跨平台抽象，为下一章做准备。'
- en: '[*Chapter 4*](B20892_04.xhtml#_idTextAnchor081), *Create Your Own Event Queue*,
    is the chapter where you create your own event queue that mimics the API of *mio*
    (the popular Rust library that underpins much of the current async ecosystem).
    The example will center around epoll and go into quite a bit of detail on how
    it works.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第4章*](B20892_04.xhtml#_idTextAnchor081)，*创建您自己的事件队列*，在这一章中，你将创建自己的事件队列，该队列模仿了*mio*（支撑当前异步生态系统大部分内容的流行Rust库）的API。示例将围绕epoll展开，并详细介绍其工作原理。'
- en: '[*Chapter 5*](B20892_05.xhtml#_idTextAnchor092), *Creating Our Own Fibers*,
    walks through an example where we create our own kind of stackful coroutines called
    fibers. They’re the same kind of green threads that Go uses and show one of the
    most widespread and popular alternatives to the type of abstraction Rust uses
    with futures and async/await today. Rust used this kind of abstraction in its
    early days before it reached 1.0, so it’s also a part of Rust’s history. This
    chapter will also cover quite a few general programming concepts, such as stacks,
    assembly, **Application Binary Interfaces** (**ABIs**), and **instruction set
    architecture** (**ISAs**), that are useful beyond the context of asynchronous
    programming as well.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第5章*](B20892_05.xhtml#_idTextAnchor092)，*创建我们自己的Fibers*，通过一个示例展示了我们创建自己的堆栈式协程，称为fibers。它们与Go使用的绿色线程相同，展示了目前Rust使用futures和async/await进行抽象的最常见和最受欢迎的替代方案之一。Rust在达到1.0之前就使用了这种抽象，因此它也是Rust历史的一部分。本章还将涵盖许多通用编程概念，如堆栈、汇编、**应用程序二进制接口**（**ABIs**）和**指令集架构**（**ISAs**），这些概念在异步编程之外也很有用。'
- en: '[*Chapter 6*](B20892_06.xhtml#_idTextAnchor113), *Futures in Rust*, gives a
    short introduction and overview of futures, runtimes, and asynchronous programming
    in Rust.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第6章*](B20892_06.xhtml#_idTextAnchor113)，*Rust中的Futures*，提供了对futures、运行时和Rust中异步编程的简要介绍和概述。'
- en: '[*Chapter 7*](B20892_07.xhtml#_idTextAnchor122), *Coroutines and async/await*,
    is a chapter where you write your own coroutines that are simplified versions
    of the ones created by async/await in Rust today. We’ll write a few of them by
    hand and introduce a new syntax that allows us to programmatically rewrite what
    look like regular functions into the coroutines we wrote by hand.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第7章*](B20892_07.xhtml#_idTextAnchor122)，*协程和async/await*，是一个你可以编写自己的协程的章节，这些协程是Rust中async/await创建的协程的简化版本。我们将手动编写几个，并介绍一种新的语法，允许我们将看起来像常规函数的内容程序化地重写为我们手动编写的协程。'
- en: '[*Chapter 8*](B20892_08.xhtml#_idTextAnchor138), *Runtimes, Wakers, and the
    Reactor-Executor Pattern*, introduces runtimes and runtime design. By iterating
    on the example we created in [*Chapter 7*](B20892_07.xhtml#_idTextAnchor122),
    we’ll create a runtime for our coroutines that we’ll gradually improve. We’ll
    also do some experiments with our runtime once it’s done to better understand
    how it works.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第8章*](B20892_08.xhtml#_idTextAnchor138)，*运行时、唤醒器和反应器-执行器模式*，介绍了运行时和运行时设计。通过迭代我们在[*第7章*](B20892_07.xhtml#_idTextAnchor122)中创建的示例，我们将为我们的协程创建一个运行时，我们将逐步改进它。完成之后，我们还会对我们的运行时进行一些实验，以更好地理解其工作原理。'
- en: '[*Chapter 9*](B20892_09.xhtml#_idTextAnchor156), *Coroutines, Self-Referential
    Structs, and Pinning*, is the chapter where we introduce self-referential structs
    and pinning in Rust. By improving our coroutines further, we’ll experience first-hand
    why we need something such as `Pin`, and how it helps us solve the problems we
    encounter.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第9章*](B20892_09.xhtml#_idTextAnchor156)，*协程、自引用结构和Pinning*，是我们介绍Rust中的自引用结构和Pinning的章节。通过进一步改进我们的协程，我们将亲身体验为什么我们需要像`Pin`这样的东西，以及它是如何帮助我们解决我们遇到的问题的。'
- en: '[*Chapter 10*](B20892_10.xhtml#_idTextAnchor178), *Create Your Own Runtime*,
    is the chapter where we finally put all the pieces together. We’ll improve the
    same example from the previous chapters further so we can run Rust futures, which
    will allow us to use the full power of async/await and asynchronous Rust. We’ll
    also do a few experiments that show some of the difficulties with asynchronous
    Rust and how we can best solve them.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第10章*](B20892_10.xhtml#_idTextAnchor178)，*创建您自己的运行时*，是我们最终将所有部件组合在一起的一章。我们将进一步改进前几章中的相同示例，以便我们可以运行Rust的future，这将使我们能够使用async/await和异步Rust的全部功能。我们还将进行一些实验，展示异步Rust的一些困难以及我们如何最好地解决这些问题。'
- en: To get the most out of this book
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了充分利用这本书
- en: You should have some prior programming experience and, preferably, some knowledge
    about Rust. Reading the free, and excellent, introductory book *The Rust Programming
    Language* ([https://doc.rust-lang.org/book/](https://doc.rust-lang.org/book/))
    should give you more than enough knowledge about Rust to follow along since any
    advanced topics will be explained step by step.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该有一些先前的编程经验，并且最好有一些关于Rust的知识。阅读免费的、优秀的入门书籍*《Rust编程语言》*([https://doc.rust-lang.org/book/](https://doc.rust-lang.org/book/))应该会给你提供足够多的关于Rust的知识，以便跟随，因为任何高级主题都会一步一步地解释。
- en: The ideal way to read this book is to have the book and a code editor open side
    by side. You should also have the accompanying repository available so you can
    refer to that if you encounter any issues.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本书的理想方式是将书本和代码编辑器并排打开。您还应该有伴随的仓库可用，以便在遇到任何问题时可以参考。
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **本书涵盖的软件/硬件** | **操作系统要求** |'
- en: '| Rust (version 1.51 or later) | Windows, macOS, or Linux |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Rust (版本 1.51 或更高) | Windows, macOS, 或 Linux |'
- en: 'You need Rust installed. If you haven’t already, follow the instructions here:
    [https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装Rust。如果您还没有安装，请按照以下说明进行操作：[https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install)。
- en: 'Some examples will require you to use **Windows Subsystem for Linux** (**WSL**)
    on Windows. If you’re following along on a Windows machine, I recommend that you
    enable WSL ([https://learn.microsoft.com/en-us/windows/wsl/install](https://learn.microsoft.com/en-us/windows/wsl/install))
    now and install Rust by following the instructions for installing Rust on WSL
    here: [https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例可能需要您在Windows上使用**Windows Subsystem for Linux**（**WSL**）。如果您在Windows机器上跟随，我建议您现在启用WSL（[https://learn.microsoft.com/en-us/windows/wsl/install](https://learn.microsoft.com/en-us/windows/wsl/install)），并按照以下安装Rust的说明进行安装：[https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install)。
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您使用的是本书的数字版，我们建议您自己输入代码或从书本的GitHub仓库（下一节中有一个链接）访问代码。这样做将帮助您避免与代码复制和粘贴相关的任何潜在错误。**'
- en: 'The accompanying repository is organized in the following fashion:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随的仓库按照以下方式组织：
- en: Code that belongs to a specific chapter is in that chapter’s folder (e.g., `ch01`).
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属于特定章节的代码位于该章节的文件夹中（例如，`ch01`）。
- en: Each example is organized as a separate crate.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个示例都作为一个单独的crate组织。
- en: The letters in front of the example names indicate in what order the different
    examples are presented in the book. For example, the `a-runtime` example comes
    before the `b-reactor-executor` example. This way, they will be ordered chronologically
    (at least by default on most systems).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例名称前的字母表示不同示例在书中的呈现顺序。例如，`a-runtime`示例在`b-reactor-executor`示例之前。这样，它们将按时间顺序排列（至少在大多数系统上默认是这样）。
- en: Some examples have a version postfixed with `-bonus`. These versions will be
    mentioned in the book text and often contain a specific variant of the example
    that might be interesting to check out but is not important to the topic at hand.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些示例有一个后缀为`-bonus`的版本。这些版本将在书中提到，通常包含一个可能值得检查但不是当前主题重要性的示例的具体变体。
- en: Download the example code files
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Asynchronous-Programming-in-Rust](https://github.com/PacktPublishing/Asynchronous-Programming-in-Rust).
    If there’s an update to the code, it will be updated in the GitHub repository.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub下载本书的示例代码文件：[https://github.com/PacktPublishing/Asynchronous-Programming-in-Rust](https://github.com/PacktPublishing/Asynchronous-Programming-in-Rust)。如果代码有更新，它将在GitHub仓库中更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有其他来自我们丰富图书和视频目录的代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)找到。查看它们吧！
- en: Conventions used
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用了多种文本约定。
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “So, now we have created our own async runtime that
    uses Rust’s `Futures`, `Waker`, `Context`, and `async/await`.”'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`文本中的代码`：表示文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter昵称。以下是一个示例：“因此，我们现在已经创建了自己的异步运行时，它使用了Rust的`Futures`、`Waker`、`Context`和`async/await`。”'
- en: 'A block of code is set as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置为如下：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望您注意代码块中的特定部分时，相关的行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都应如下编写：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tips or important notes
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士或重要注意事项
- en: Appear like this.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像这样。
- en: Get in touch
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我们
- en: Feedback from our readers is always welcome.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读者的反馈始终受到欢迎。
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般反馈**：如果您对本书的任何方面有疑问，请通过[mailto:customercare@packtpub.com](mailto:customercare@packtpub.com)给我们发邮件，并在邮件主题中提及书名。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误**：尽管我们已经尽最大努力确保内容的准确性，但错误仍然可能发生。如果您在这本书中发现了错误，如果您能向我们报告，我们将不胜感激。请访问[www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)并填写表格。'
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**盗版**：如果您在互联网上以任何形式发现我们作品的非法副本，如果您能向我们提供位置地址或网站名称，我们将不胜感激。请通过[mailto:copyright@packt.com](mailto:copyright@packt.com)与我们联系，并提供材料的链接。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您有兴趣成为作者**：如果您在某个主题上具有专业知识，并且您有兴趣撰写或为书籍做出贡献，请访问[authors.packtpub.com](http://authors.packtpub.com)。'
- en: Share your thoughts
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享您的想法
- en: Once you’ve read *Asynchronous Programming in Rust*, we’d love to hear your
    thoughts! Please [click here to go straight to the Amazon review page](https://packt.link/r/1805128132)
    for this book and share your feedback.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您阅读了《Rust中的异步编程》，我们很乐意听到您的想法！请[点击此处直接进入此书的亚马逊评论页面](https://packt.link/r/1805128132)并分享您的反馈。
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您的评论对我们和科技社区非常重要，并将帮助我们确保我们提供高质量的内容。
- en: Download a free PDF copy of this book
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载本书的免费PDF副本
- en: Thanks for purchasing this book!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您购买本书！
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您喜欢在路上阅读，但又无法携带您的印刷书籍到处走？
- en: Is your eBook purchase not compatible with the device of your choice?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您的电子书购买是否与您选择的设备不兼容？
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心，现在，随着每本Packt书籍，您都可以免费获得该书的DRM免费PDF版本。
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何地方、任何设备上阅读。直接从您最喜欢的技术书籍中搜索、复制和粘贴代码到您的应用程序中。
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠远不止于此，您还可以获得独家折扣、时事通讯和每日免费内容的每日电子邮件。
- en: 'Follow these simple steps to get the benefits:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下简单步骤获取优惠：
- en: Scan the QR code or visit the link below
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描下面的二维码或访问链接
- en: '![](img/B20892_QR_Free_PDF.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20892_QR_Free_PDF.jpg)'
- en: '[https://packt.link/free-ebook/9781805128137](https://packt.link/free-ebook/9781805128137)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/free-ebook/9781805128137](https://packt.link/free-ebook/9781805128137)'
- en: 2. Submit your proof of purchase
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 提交您的购买证明
- en: 3. That’s it! We’ll send your free PDF and other benefits to your email directly
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 就这样！我们将直接将您的免费PDF和其他优惠发送到您的电子邮件
- en: Part 1:Asynchronous Programming Fundamentals
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1部分：异步编程基础
- en: 'In this part, you’ll receive a thorough introduction to concurrency and asynchronous
    programming. We’ll also explore various techniques that programming languages
    employ to model asynchrony, examining the most popular ones and covering some
    of the pros and cons associated with each. Finally, we’ll explain the concept
    of OS-backed event queues, such as epoll, kqueue, and IOCP, detailing how system
    calls are used to interact with the operating system and addressing the challenges
    encountered in creating cross-platform abstractions like mio. This section comprises
    the following chapters:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，您将全面了解并发与异步编程。我们还将探讨编程语言采用的各种技术来模拟异步性，包括最流行的技术，并讨论与每种技术相关的优缺点。最后，我们将解释基于操作系统的事件队列的概念，例如epoll、kqueue和IOCP，详细说明如何使用系统调用来与操作系统交互，并解决在创建跨平台抽象（如mio）时遇到的挑战。本节包括以下章节：
- en: '[*Chapter 1*](B20892_01.xhtml#_idTextAnchor014), *Concurrency and Asynchronous
    Programming: A Detailed Overview*'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第一章*](B20892_01.xhtml#_idTextAnchor014), *并发与异步编程：详细概述*'
- en: '[*Chapter 2*](B20892_02.xhtml#_idTextAnchor043), *How Programming Languages
    Model Asynchronous Program Flow*'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第二章*](B20892_02.xhtml#_idTextAnchor043), *编程语言如何模拟异步程序流程*'
- en: '[*Chapter 3*](B20892_03.xhtml#_idTextAnchor063)*, Understanding OS-Backed Event
    Queues, System Calls and Cross Platform Abstractions*'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第三章*](B20892_03.xhtml#_idTextAnchor063)*, 理解基于操作系统的事件队列、系统调用和跨平台抽象*'
