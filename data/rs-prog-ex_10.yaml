- en: Implementing Asynchronous File Transfer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现异步文件传输
- en: 'In the previous chapter, we started to write an asynchronous FTP server using
    `tokio`. Now, we''ll start using the second channel used in the FTP protocol:
    the data channel. We''ll cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们开始编写使用`tokio`的异步FTP服务器。现在，我们将开始使用FTP协议中使用的第二个通道：数据通道。我们将涵盖以下主题：
- en: Unit tests
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Integration tests
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试
- en: Backtraces
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回溯
- en: Documentation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档
- en: Documentation tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档测试
- en: Fuzzing tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊测试
- en: Listing files
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出文件
- en: 'We''ll start this chapter by implementing the command to list files. This will
    allow us to actually see the files in an FTP client, and we''ll be able to tests
    some commands from the previous chapter by navigating in the directories. So,
    let''s add a case in the `Client::handle_cmd()` method:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始实现列出文件的命令。这将使我们能够在FTP客户端中真正看到文件，并且我们可以通过在目录中导航来测试上一章的一些命令。所以，让我们在`Client::handle_cmd()`方法中添加一个用例：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This simply calls the `list()` method, which begins as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是调用`list()`方法，它开始如下：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We first check that the data channel is opened and, if this is the case, we
    check that the provided optional path is valid. If it is, we send a response that
    indicates to the client that we''re about to send it the data. The next part of
    the method is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查数据通道是否打开，如果是这样，我们检查提供的可选路径是否有效。如果是，我们发送一个响应，指示客户端我们将发送数据。方法的后半部分如下：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We first create a variable, `out`, that will contain the data to send to the
    client. If the specified path is a directory, we use the `read_dir()` function
    from the standard library. We then iterate over all files in the directory to
    gather the info about every file. If we were unable to open the directory, we
    send an error back to the client. If the path is not a directory, for example,
    if it is a file, we only get the info for this single file. Here''s the end of
    the method:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个变量`out`，它将包含要发送给客户端的数据。如果指定的路径是目录，我们使用标准库中的`read_dir()`函数。然后，我们遍历目录中的所有文件以收集每个文件的信息。如果我们无法打开目录，我们将向客户端发送错误。如果路径不是目录，例如，如果它是一个文件，我们只为这个单个文件获取信息。以下是该方法的结尾：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We then send the data in the right channel using the `send_data()` method that
    we'll see later. If there was another error, we send the appropriate response
    to the client. If we successfully sent the data, we close the connection and indicate
    this action to the client. This code used a few new methods, so let's implement
    them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用稍后将要看到的`send_data()`方法在正确的通道发送数据。如果出现其他错误，我们向客户端发送适当的响应。如果我们成功发送了数据，我们将关闭连接并向客户端指示这一动作。这段代码使用了几个新方法，所以让我们来实现它们。
- en: 'First, here''s the method that sends data in the data channel:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这是在数据通道中发送数据的步骤：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is very similar to the `send()` method, but this one only sends the data
    if the data socket is opened. Another method that is needed is the one that closes
    the connection:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它与`send()`方法非常相似，但这个方法只有在数据套接字打开时才会发送数据。另一个需要的方法是关闭连接的方法：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We need to implement the method to gather the info about a file. Here is how
    it starts:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现一个方法来收集有关文件的信息。以下是它的开始：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The parameter `out` is a mutable reference, because we''ll append the info
    in this variable. Then, we gather the different required info and permissions
    of the file. Here''s the rest of the function:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`out`是一个可变引用，因为我们将在此变量中追加信息。然后，我们收集文件的不同所需信息和权限。以下是函数的其余部分：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It formats the info and appends it to the variable `out`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它格式化信息并将其追加到变量`out`中。
- en: 'This function uses another one:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数使用了另一个函数：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we have two versions of `get_file_info()`: one for Windows and the other
    for all non-Windows operating systems. Since we use a new crate, we need to add
    this line in `Cargo.toml`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有`get_file_info()`函数的两个版本：一个用于Windows，另一个用于所有非Windows操作系统。由于我们使用了一个新的crate，我们需要在`Cargo.toml`中添加这一行：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can now test, in the FTP client, that the files are indeed listed (on the
    right):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在FTP客户端中测试文件是否确实被列出（在右侧）：
- en: '![](img/00046.jpeg)**Figure 10.1**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1](img/00046.jpeg)**图10.1**'
- en: 'If we double-click on a directory, for instance, src, the FTP client will update
    its content:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们双击目录，比如src，FTP客户端将更新其内容：
- en: '![](img/00047.jpeg)*Figure 10.2*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.2](img/00047.jpeg)*图10.2*'
- en: Downloading a file
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载文件
- en: A very useful feature of an FTP server is the ability to download files. So,
    it's time to add the command to do so.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: FTP服务器的一个非常有用的功能是能够下载文件。因此，现在是添加执行此操作命令的时候了。
- en: 'First of all, we add the case in the `handle_cmd()` method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在`handle_cmd()`方法中添加一个情况：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the start of the `retr()` function:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`retr()`函数的开始：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Again, we check that the data channel is opened and we check the path. If it
    is a file, we open it, read its content, and send it to the client. Otherwise,
    we send the appropriate error:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查数据通道是否已打开，并检查路径。如果是文件，我们打开它，读取其内容，并发送给客户端。否则，我们发送适当的错误：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, we use this pattern:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用这个模式：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This converts the `Option` into a `Result`, and returns the error if there is
    one.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这将`Option`转换为`Result`，并在有错误时返回错误。
- en: 'And finally, we close the data socket if we successfully sent the file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们成功发送了文件，我们将关闭数据套接字：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s download a file in FileZilla to check that it works:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在FileZilla中下载一个文件来检查它是否工作：
- en: '![](img/00048.jpeg)**Figure 10.3**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.3](img/00048.jpeg)**图10.3**'
- en: Uploading files
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: 'Now, let''s do the opposite command: `STOR` to upload a file on the server.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们执行相反的命令：`STOR`在服务器上上传文件。
- en: 'As always, we''ll add a case in the `handle_cmd()` method:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们将在`handle_cmd()`方法中添加一个情况：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is the start of the corresponding method:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相应方法的开始：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once again, we check that the data channel is opened. Then, we use a new function
    to check that the path is valid, by which we mean it does not contain `..`. In
    the other cases, we used another method, `canonicalize()`, and checked that the
    path was under the server root, but we cannot do so here since there exists no
    file to upload yet. Here''s the end of the method:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查数据通道是否已打开。然后，我们使用一个新的函数来检查路径是否有效，这意味着它不包含`..`。在其他情况下，我们使用了另一个方法`canonicalize()`，并检查路径是否位于服务器根目录下，但在这里我们无法这样做，因为没有文件可以上传。这是方法的结尾：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we call `receive_data()`, which is a `Future` that will resolve to the
    data received from the client. Then, we write this content in a new file. Finally,
    we close the connection and send the response to indicate that the transfer is
    done.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们调用`receive_data()`，这是一个`Future`，它将解析为从客户端接收到的数据。然后，我们将这些内容写入一个新文件。最后，我们关闭连接并发送响应以指示传输完成。
- en: 'Here''s the method to read the data from the data socket:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从数据套接字读取数据的方法：
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we take the `data_reader` attribute, which means it will be `None` after
    this statement. And we iterate, using an `async for` loop, over the reader stream.
    At every iteration, we add the data to the vector that is returned at the end.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们获取`data_reader`属性，这意味着在此语句之后它将是`None`。然后我们使用`async for`循环迭代读取器流。在每次迭代中，我们将数据添加到最终返回的向量中。
- en: 'This is the method to check if the path is valid:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检查路径是否有效的方法：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s check that the upload does indeed work:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查上传是否真的工作：
- en: '![](img/00049.jpeg)*Figure 10.4*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.4](img/00049.jpeg)*图10.4*'
- en: Going further!
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步！
- en: Adding a bit of configuration would be nice, don't you think? Adding user authentication
    would be nice as well. Let's start with the configuration!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一些配置会很好，不是吗？添加用户认证也会很好。让我们从配置开始！
- en: Configuration
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: First, let's create a new file in `src/` called `config.rs`. To make things
    easier, we'll use the TOML format for our configuration file. Luckily for us,
    there is a crate for handling TOML files in Rust, called `toml`. In addition to
    this one, we'll use `serde` to handle serialization and deserialization (very
    useful!).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在`src/`中创建一个名为`config.rs`的新文件。为了使事情更简单，我们将使用TOML格式来处理我们的配置文件。幸运的是，有一个Rust中处理TOML文件的crate，名为`toml`。除了这个之外，我们还将使用`serde`来处理序列化和反序列化（非常有用！）。
- en: 'Ok, let''s start by adding the dependencies into our `Cargo.toml` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们首先将依赖项添加到我们的`Cargo.toml`文件中：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Good, now let''s write our `Config` struct:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们编写我们的`Config`结构体：
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So what should we put in there? The port and address the server should listen
    on to start, maybe?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们应该放些什么呢？服务器启动时应监听的端口和地址，也许？
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Done. We also talked about handling authentication. Why not adding it as well?
    We''ll need a new `struct` for users. Let''s call it `User` (yay for originality!):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了。我们也讨论了处理认证。为什么不添加它呢？我们需要一个新的`struct`来处理用户。让我们称它为`User`（原创性真好！）：
- en: '[PRE24]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now let''s add the users into the `Config` struct:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将用户添加到`Config`结构体中：
- en: '[PRE25]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To make these two `struct` work with `serde`, we''ll have to add the following
    tags:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这两个`struct`与`serde`一起工作，我们必须添加以下标签：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And because we''ll need to clone `Config`, we''ll add `Debug` into the tags,
    which gives us:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要克隆`Config`，我们将添加`Debug`到标签中，这给了我们：
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Ok, we''re now ready to implement the reading:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在准备好实现读取：
- en: '[PRE28]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s go through the `Config::new` method''s code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过`Config::new`方法的代码来了解：
- en: '[PRE29]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Thanks to `serde`, we can directly load the configuration file from a `&str`
    and it'll return our `Config` struct fully set. Amazing, right?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了 `serde`，我们可以直接从 `&str` 加载配置文件，并返回完全设置的 `Config` 结构体。太棒了，对吧？
- en: For information, the `get_content` function is just a `utility` function that
    allows the return of the content of a file, if this file exists.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 关于信息，`get_content` 函数只是一个 `utility` 函数，允许返回文件的内容，如果该文件存在的话。
- en: 'Also, don''t forget to add the `DEFAULT_PORT` constant:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，别忘了添加 `DEFAULT_PORT` 常量：
- en: '[PRE30]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In case the file doesn''t exist, we can create a new one with some default
    values:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件不存在，我们可以使用一些默认值创建一个新的文件：
- en: '[PRE31]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now you might wonder, how will we actually be able to generate TOML from our
    `Config` struct using this code? With `serde`'s magic once again!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会想知道，我们如何能够使用这段代码从我们的 `Config` 结构体生成 TOML？再次使用 `serde` 的魔法！
- en: 'With this, our `config` file is now complete. Let get back to the `main.rs`
    one. First, we''ll need to define a new constant:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们的 `config` 文件现在就完整了。让我们回到 `main.rs`。首先，我们需要定义一个新的常量：
- en: '[PRE32]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, we''ll need to update quite a few methods/functions. Let''s start with
    the `main` function. Add this line at the beginning:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要更新相当多的方法/函数。让我们从 `main` 函数开始。在开始处添加此行：
- en: '[PRE33]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now pass the `config` variable to the `server` function:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 `config` 变量传递给 `server` 函数：
- en: '[PRE34]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, let''s update the `server` function:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更新 `server` 函数：
- en: '[PRE35]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now, the server is started with the value from the `Config` struct. However,
    we still need the user list for each client in order to handle the authentication.
    To do so, we need to give a `Config` instance to each `Client`. In here, to make
    things simpler, we'll just `clone`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，服务器使用 `Config` 结构体的值启动。然而，我们仍然需要每个客户端的用户列表来处理身份验证。为此，我们需要给每个 `Client` 一个
    `Config` 实例。在这里，为了使事情更简单，我们只需 `clone`。
- en: 'Time to update the `handle_client` function now:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更新 `handle_client` 函数了：
- en: '[PRE36]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s update the `client` function now:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更新 `client` 函数：
- en: '[PRE37]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The final step is updating the `Client` struct:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是更新 `Client` 结构体：
- en: '[PRE38]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The brand new `config` field seems logical, however what about `is_admin` and
    `waiting_password`? The first one will be used to be able to list/download/overwrite
    the `config.toml` file, whereas the second one will be used when the `USER` command
    has been used and the server is now expecting the user's password.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 新增的 `config` 字段看起来很合理，然而 `is_admin` 和 `waiting_password` 呢？第一个将用于能够列出/下载/覆盖
    `config.toml` 文件，而第二个将在使用 `USER` 命令且服务器现在期待用户密码时使用。
- en: 'Let''s add another method to our `Client` struct:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `Client` 结构体中添加另一个方法：
- en: '[PRE39]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Don''t forget to update the `Config::new` method:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记更新 `Config::new` 方法：
- en: '[PRE40]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Ok, now here comes the huge update! But first, don''t forget to add the `Pass`
    command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在有一个巨大的更新！但是首先，别忘了添加 `Pass` 命令：
- en: '[PRE41]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now the `Command::new` match:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是 `Command::new` 匹配：
- en: '[PRE42]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Don't forget to also update the `AsRef` implementation!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记更新 `AsRef` 的实现！
- en: 'Good, we''re ready for the last (and very big) step. Let''s head to the `Client::handle_cmd`
    method:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经准备好最后（而且非常庞大）的一步。让我们转到 `Client::handle_cmd` 方法：
- en: '[PRE43]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'I told you it was huge! The main points in here are just the flow rework. The
    following commands only work when you''re logged in:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经告诉你它有多么巨大了！这里的主要点是流程重构。以下命令仅在您登录时才有效：
- en: '`Cwd`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cwd`'
- en: '`List`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`'
- en: '`Pasv`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pasv`'
- en: '`Port`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Port`'
- en: '`Pwd`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pwd`'
- en: '`Retr`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Retr`'
- en: '`Stor`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stor`'
- en: '`CdUp`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CdUp`'
- en: '`Mkd`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mkd`'
- en: '`Rmd`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Rmd`'
- en: 'This command only works when you''re not *yet* logged in and the server is
    waiting for the password:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令仅在您尚未登录且服务器正在等待密码时才有效：
- en: '`Pass`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pass`'
- en: The rest of the commands work in any case. We're almost done in here. Remember
    when I talked about the security? You wouldn't want anyone to have access to the
    configuration file with the list of all users, I suppose.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的命令在任何情况下都有效。我们在这里几乎完成了。记得我提到过的安全性吗？你不希望任何人都能访问包含所有用户列表的配置文件，我想。
- en: Securing the config.toml access
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护 config.toml 访问
- en: 'This time, not much to do! We just need to add a check when a user wants to
    list, download, or overwrite the file. Which means that the three following commands
    have to be updated:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，没有太多的事情要做！我们只需要在用户想要列出、下载或覆盖文件时添加一个检查。这意味着以下三个命令必须更新：
- en: '`List`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`'
- en: '`Retr`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Retr`'
- en: '`Stor`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stor`'
- en: 'Let''s start with `List`. Before the first `add_file_info` function call, just
    wrap the `add_file_info` function call around this block:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `List` 开始更新。在第一个 `add_file_info` 函数调用之前，只需将 `add_file_info` 函数调用包裹在这个块中：
- en: '[PRE44]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Before the second one, add the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个之前，添加以下内容：
- en: '[PRE45]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now let''s update the `retr` function. Take the following condition:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更新`retr`函数。考虑以下条件：
- en: '[PRE46]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Replace it with this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE47]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Finally, let''s update the `stor` function. Take the following condition:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更新`stor`函数。考虑以下条件：
- en: '[PRE48]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Replace it with this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE49]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: And we're done! You now have a configurable server that you can easily extend,
    following your needs.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了！您现在有一个可配置的服务器，您可以轻松地根据您的需求进行扩展。
- en: Unit tests
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: A good software needs tests to ensure that it works in most cases. So, we will
    add tests to our FTP server by starting to write unit tests for the FTP `codec`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的软件需要测试来确保它在大多数情况下都能正常工作。因此，我们将通过开始为FTP的`codec`编写单元测试来为我们的FTP服务器添加测试。
- en: Unit tests verify only a unit of the program, which may be a function. They
    are different from the integration tests, which we will see later, that test the
    software as a whole.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试仅验证程序的一个单元，这可能是一个函数。它们与稍后我们将看到的集成测试不同，集成测试测试整个软件。
- en: 'Let''s go in the `codec` module and add a new inner module to it:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入`codec`模块并为其添加一个新的内部模块：
- en: '[PRE50]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We are again using the `#[cfg]` attribute; this time, it only compiles the following
    module when running the tests. This is to avoid adding useless code in the final
    binary.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`#[cfg]`属性；这次，只有在运行测试时才会编译以下模块。这是为了避免在最终二进制文件中添加无用的代码。
- en: 'In this new module, we will add a few import statements that we will need later
    when writing the tests:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新模块中，我们将添加一些我们稍后编写测试时需要的导入语句：
- en: '[PRE51]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'As you can see, we use `super` to access some types from the parent module
    (`codec`): this is very frequent for unit tests because we usually test the code
    from the same file.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用`super`来访问父模块（`codec`）中的某些类型：这在单元测试中非常常见，因为我们通常测试同一文件中的代码。
- en: 'Let''s now add a `test` function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一个`test`函数：
- en: '[PRE52]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In the `test_encoder()` function, we will write the code that will test that
    the `FtpCodec`, `Encoder` implementation works as intended.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在`test_encoder()`函数中，我们将编写测试`FtpCodec`、`Encoder`实现的代码，以验证它是否按预期工作。
- en: 'We will first check that an `Answer` with a message produces the right output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查带有消息的`Answer`是否产生正确的输出：
- en: '[PRE53]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Here, we start by creating the objects needed to call `Encode::encode`, for
    example, a `codec` and a buffer. Then, we call `codec.encode()`, since it is the
    method we actually want to test. After that, we check if the result is `Ok` and
    we check that the buffer was filled accordingly. To do so, we use some macros:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先创建调用`Encode::encode`所需的对象，例如，一个`codec`和一个缓冲区。然后，我们调用`codec.encode()`，因为我们实际上想测试的是这个方法。之后，我们检查结果是否为`Ok`，并检查缓冲区是否相应地被填充。为此，我们使用一些宏：
- en: '`assert!`: This checks if the value is `true`. If it is `false`, it will panic
    and make the test fail.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert!`：这检查值是否为`true`。如果是`false`，它将引发恐慌并使测试失败。'
- en: '`assert_eq!`: This checks that both values are equal.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert_eq!`：这检查两个值是否相等。'
- en: 'This a quite simple and effective test, but it does not test every path of
    the function. So, let''s add more lines in this function to test the other possible
    path:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当简单且有效的测试，但它并不测试函数的每一条路径。因此，让我们在这个函数中添加更多行来测试其他可能的路径：
- en: '[PRE54]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Here, we test with an empty message. The rest is basically the same: we create
    the necessary objects and use the assert macros. But this time, we added a new
    parameter to the assert macros; this is an optional message to show when the test
    fails.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用空消息进行测试。其余部分基本上相同：我们创建必要的对象并使用assert宏。但这次，我们向assert宏添加了一个新参数；这是一个可选的消息，当测试失败时显示。
- en: 'If we run the test with `cargo test`, we get the following result:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`cargo test`运行测试，我们会得到以下结果：
- en: '[PRE55]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This shows the test that was run and that it passed.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了运行的测试以及它通过了。
- en: 'Let''s write a `test` function that fails:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个失败的`test`函数：
- en: '[PRE56]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'When we run `cargo test`, we see the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`cargo test`时，我们看到以下内容：
- en: '[PRE57]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: We can see that the message we specified (`Always fail`) is shown. We also see
    that `1` test failed.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们指定的消息（`Always fail`）被显示出来。我们还看到有`1`个测试失败了。
- en: Backtraces
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回溯
- en: 'As mentioned in the output, we can set the environment variable `RUST_BACKTRACE`
    to `1` in order to get more information about where the test failed. Let''s do
    so:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出中所述，我们可以设置环境变量`RUST_BACKTRACE`为`1`以获取更多有关测试失败位置的信息。让我们这样做：
- en: '[PRE59]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The important part here is the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的重要部分如下：
- en: '[PRE61]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This shows the file, function, and line where the code panicked.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了代码恐慌的文件、函数和行。
- en: 'This variable is useful even outside of testing code: when debugging a problem
    with a code that panics, we can use this variable as well.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量即使在测试代码之外也很有用：当调试引发恐慌的代码时，我们也可以使用这个变量。
- en: Testing failures
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试失败
- en: 'Sometimes, we want to test that a function will panic. To do so, we can simply
    add the `#[should_panic]` attribute at the top of the `test` function:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们想要测试一个函数是否会引发恐慌。为此，我们可以在 `test` 函数的顶部简单地添加 `#[should_panic]` 属性：
- en: '[PRE62]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'When doing so, the `test` now passes:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做时，`test` 现在通过了：
- en: '[PRE63]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Ignoring tests
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忽略测试
- en: 'Sometimes, we have tests that take a lot of time, or we want to avoid running
    a specific test all the time. To avoid running a test by default, we can add the
    `#[ignore]` attribute above the function:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们有需要花费很多时间或我们想要避免始终运行特定测试的测试。为了避免默认运行测试，我们可以在函数上方添加 `#[ignore]` 属性：
- en: '[PRE64]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'When we run the `test`, we''ll see that the `test` function was not running:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 `test` 时，我们会看到 `test` 函数没有运行：
- en: '[PRE65]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'As you can see, the `test_dummy()` test function was ignored. To run it, we
    need to specify a command-line argument to the program running the tests (not
    to `cargo` itself):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`test_dummy()` 测试函数被忽略了。要运行它，我们需要向运行测试的程序（而不是 `cargo` 本身）指定一个命令行参数：
- en: '[PRE66]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '**Note:** We specified `--` before `--ignored` to send the latter to the program
    running the tests (which is not `cargo`).'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 我们在 `--ignored` 前指定了 `--`，以便将后者发送给运行测试的程序（这并不是 `cargo`）。'
- en: 'With that argument, we see that the test indeed runs:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该参数，我们看到测试确实运行了：
- en: '[PRE67]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'To end this section, let''s write a unit test for the decoder:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束这一节，让我们为解码器编写一个单元测试：
- en: '[PRE68]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Here, we test that `None` is returned in the case when more input is needed:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们测试在需要更多输入的情况下返回 `None`：
- en: '[PRE69]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'And here, we add the missing output to check that the command was parsed correctly:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加缺失的输出以检查命令是否正确解析：
- en: '[PRE70]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Finally, we test that parsing a command with an argument works. If we run `cargo
    test` again, we get the following output:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们测试解析带有参数的命令是否有效。如果我们再次运行 `cargo test`，我们得到以下输出：
- en: '[PRE71]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Integration tests
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: 'In the previous section, we checked that a part of our code works: now, we
    will check that the program as a whole works, by writing integration tests. These
    tests reside in the `tests/` directory, so we start by creating it:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们检查了我们的代码的一部分是否工作：现在，我们将通过编写集成测试来检查程序作为一个整体是否工作。这些测试位于 `tests/` 目录中，所以我们首先创建它：
- en: '[PRE72]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In this directory, we can create a new file, `tests/server.rs`, in which we''ll
    put the following content:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中，我们可以创建一个新的文件，`tests/server.rs`，我们将放入以下内容：
- en: '[PRE73]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We import the `ftp` crate which is an FTP client; it will be useful to test
    our FTP server. We need to add it in `Cargo.toml` as well:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入 `ftp` 包，这是一个 FTP 客户端；它将有助于测试我们的 FTP 服务器。我们还需要在 `Cargo.toml` 中添加它：
- en: '[PRE74]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Here we see a new section, `dev-dependencies`: it contains the dependencies
    that are needed outside the main crate itself, like in the integration tests.
    By putting the dependency here and not in `[dependencies]`, it won''t be available
    in the main crate, which is what we want.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们看到一个新的部分，`dev-dependencies`：它包含在主包本身之外需要的依赖项，例如在集成测试中。通过在这里放置依赖项而不是 `[dependencies]`
    中，它将不会在主包中可用，这正是我们想要的。
- en: 'Let''s go back to the file `tests/server.rs` and add a `test` function:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到文件 `tests/server.rs` 并添加一个 `test` 函数：
- en: '[PRE75]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Here, we don't need to put the code in an inner `tests` module because the integration
    tests are compiled separately. Since our crate is a binary, we need to run it
    with the `Command` object. We give the child process to a `ProcessController`
    that we will create later.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们不需要将代码放入内嵌的 `tests` 模块，因为集成测试是单独编译的。由于我们的包是一个二进制文件，我们需要使用 `Command` 对象来运行它。我们将子进程交给稍后创建的
    `ProcessController`。
- en: 'Note: If our crate was a library, we would add an `extern crate` for it, and
    we would be able to call functions from it directly.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果我们的包是一个库，我们会为它添加一个 `extern crate`，然后我们可以直接调用它的函数。
- en: We then call `thread::sleep()` to give some time for our server to start. After
    that, we use the `ftp` crate to connect to our server, and then we quit.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用 `thread::sleep()` 给我们的服务器一些启动时间。之后，我们使用 `ftp` 包连接到我们的服务器，然后退出。
- en: Teardown
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拆卸
- en: 'In the Rust test framework, there''s no `setup()` and `teardown()` functions
    like there are in the test frameworks of many other languages. And here, we need
    to run some code when the test is done: we need to kill our FTP server. So, we
    need some kind of `teardown` function. We cannot simply say `child.kill()` at
    the end of the function because, if the test panics before that, the FTP server
    will continue running after the test ends. To make sure the cleanup code is always
    called, no matter how the function ended, we''ll have to use the `RAII` pattern
    that we discovered in [Chapter 6](part0143.html#48C0E0-13a27bdc411a4c2eaad1cc3a71f7fca7)*,
    Implementing the Engine of the Music Player*.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rust测试框架中，没有像许多其他语言的测试框架那样的`setup()`和`teardown()`函数。在这里，我们需要在测试完成后运行一些代码：我们需要关闭我们的FTP服务器。所以，我们需要某种`teardown`函数。我们不能简单地在函数末尾说`child.kill()`，因为如果测试在那时崩溃，FTP服务器将在测试结束后继续运行。为了确保清理代码始终被调用，无论函数如何结束，我们不得不使用我们在[第6章](part0143.html#48C0E0-13a27bdc411a4c2eaad1cc3a71f7fca7)*，实现音乐播放器的引擎*中发现的`RAII`模式。
- en: 'Let''s write a simple `teardown` structure:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个简单的`teardown`结构：
- en: '[PRE76]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The structure contains the child process that will be killed in the destructor.
    So, if the test panics, this destructor will be called. It will also be called
    if the function ends normally.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 该结构包含将在析构函数中杀死的子进程。所以，如果测试崩溃，这个析构函数将被调用。如果函数正常结束，它也会被调用。
- en: 'We''ll also create a constructor and the `utility` method that we used in the
    `test` function:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一个构造函数和`utility`方法，这些方法我们在`test`函数中使用：
- en: '[PRE77]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The function `is_running()` is used to ensure that the FTP server we launched
    is actually running; if another instance of the application is already running,
    our instance will not run. That's why we used an assert in the test function.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`is_running()`函数用于确保我们启动的FTP服务器实际上正在运行；如果应用程序的另一个实例已经运行，我们的实例将不会运行。这就是为什么我们在测试函数中使用了断言。'
- en: 'Finally, we need to create a destructor:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要创建一个析构函数：
- en: '[PRE78]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'We''re now ready to write the `test` function:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好编写`test`函数：
- en: '[PRE79]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'In this function, we issue some FTP commands and make sure the server state
    is correct by calling the `assert_eq!()` macro. When we run `cargo test`, we see
    the following output:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们发出一些FTP命令，并通过调用`assert_eq!()`宏来确保服务器状态正确。当我们运行`cargo test`时，我们看到以下输出：
- en: '[PRE80]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: A new section is added for our integration test.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的集成测试添加了一个新部分。
- en: Print output to stdout
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印输出到stdout
- en: 'Let''s see what happens when we add a call to `println!()` in our test (for
    debug purposes, for instance):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们向测试中添加对`println!()`的调用会发生什么（例如，用于调试目的）：
- en: '[PRE81]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'It will not be printed to the terminal. In order to see it, we need to pass
    another parameter to the test runner. Let''s run `cargo test` this way to see
    the output to `stdout`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会被打印到终端。为了看到它，我们需要向测试运行器传递另一个参数。让我们这样运行`cargo test`来查看输出到`stdout`：
- en: '[PRE82]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'This time, we see the following output:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们看到以下输出：
- en: '[PRE83]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Documentation
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档
- en: 'Another very important aspect of a software is documentation. It is useful
    to describe how to use a project, giving some examples and detailing the complete
    public API: let''s see how we can document a crate in Rust.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的一个重要方面是文档。描述如何使用项目，给出一些示例并详细说明完整的公共API很有用：让我们看看我们如何在Rust中文档化一个crate。
- en: Documenting a crate
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档化crate
- en: Documentation is written in comments, but these doc-comments start with a special
    symbol. We use the token `///` to document the item following the comment, and
    `//!` to document the item from within this item. Let's start by seeing an example
    of the latter.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是用注释编写的，但这些文档注释以特殊符号开头。我们使用`///`来注释注释后的项，使用`//!`来注释此项内部的项。让我们先看看后者的一个例子。
- en: 'At the top of our crate''s root (specifically, in the file `main.rs`), we''ll
    add the following comment:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的crate根目录的顶部（具体来说，在`main.rs`文件中），我们将添加以下注释：
- en: '[PRE84]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Here, we use the `//!` form because we cannot write a comment before a crate;
    we can only write a comment from within the crate.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用`//!`形式，因为我们不能在crate之前写注释；我们只能从crate内部写注释。
- en: Documenting a module
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块文档化
- en: 'Documenting a module is very similar: we add a comment of the form `//!` at
    the top of a module''s file. Let''s add the following doc-comment in `codec.rs`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 模块文档化非常相似：我们在模块文件的顶部添加一个`//!`形式的注释。让我们在`codec.rs`中添加以下文档注释：
- en: '[PRE85]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Headers
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标题
- en: The doc-comments are written in Markdown, so let's look at some Markdown formatting
    syntax. We can write headers by starting a line with a `#`. The more `#`'s, the
    smaller the title.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 文档注释是用 Markdown 编写的，所以让我们看看一些 Markdown 格式化语法。我们可以通过在一行开头使用 `#` 来写标题。`#` 的数量越多，标题越小。
- en: 'For example:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE86]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: I think you get it at this point!
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我想你到这里应该明白了！
- en: 'Here is a list of common headers:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些常见的标题：
- en: Examples
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例
- en: Panics
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Panics
- en: Failure
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败
- en: Code blocks
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码块
- en: The code we write in doc-comments must be inserted between two pairs of [PRE87]
    [PRE88]
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在文档注释中编写的代码必须在 [PRE87] [PRE88] 两对之间插入。
- en: /// Convert a sequence of bytes to uppercase.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: /// 将字节序列转换为大写。
- en: ///
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: '/// # Examples'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '/// # 示例'
- en: ///
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: /// [PRE89]
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE89]
- en: 'fn to_uppercase(data: &mut [u8]) {'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 'fn to_uppercase(data: &mut [u8]) {'
- en: for byte in data {
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for byte in data {
- en: if *byte >= 'a' as u8 && *byte <= 'z' as u8 {
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if *byte >= 'a' as u8 && *byte <= 'z' as u8 {
- en: '*byte -= 32;'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*byte -= 32;'
- en: '}'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE90]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: /// An FTP command parsed by the parser.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: /// 由解析器解析的 FTP 命令。
- en: '#[derive(Clone, Debug, PartialEq)]'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '#[derive(Clone, Debug, PartialEq)]'
- en: pub enum Command {
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: pub enum Command {
- en: Auth,
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Auth,
- en: /// Change the working directory to the one specified as an argument.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 将工作目录更改为作为参数指定的目录。
- en: Cwd(PathBuf),
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Cwd(PathBuf),
- en: /// Get a list of files.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 获取文件列表。
- en: List(Option<PathBuf>),
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: List(Option<PathBuf>),
- en: /// Create a new directory.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 创建一个新目录。
- en: Mkd(PathBuf),
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mkd(PathBuf),
- en: /// No operation.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 无操作。
- en: NoOp,
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NoOp,
- en: /// Specify the port to use for the data channel.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 指定用于数据通道的端口号。
- en: Port(u16),
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Port(u16),
- en: /// Enter passive mode.
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 进入被动模式。
- en: Pasv,
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Pasv,
- en: /// Print current directory.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 打印当前目录。
- en: Pwd,
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Pwd,
- en: /// Terminate the connection.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 终止连接。
- en: Quit,
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Quit,
- en: /// Retrieve a file.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 获取文件。
- en: Retr(PathBuf),
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Retr(PathBuf),
- en: /// Remove a directory.
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 删除一个目录。
- en: Rmd(PathBuf),
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Rmd(PathBuf),
- en: /// Store a file on the server.
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 在服务器上存储一个文件。
- en: Stor(PathBuf),
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 存储路径(PathBuf),
- en: Syst,
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Syst,
- en: /// Specify the transfert type.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 指定传输类型。
- en: Type(TransferType),
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Type(TransferType),
- en: /// Go to the parent directory.
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /// 进入父目录。
- en: CdUp,
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CdUp,
- en: Unknown(String),
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未知(String),
- en: User(String),
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户(String),
- en: '}'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE91]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: cargo doc
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: cargo doc
- en: '[PRE92]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'warning: missing documentation for crate'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 警告：缺少对包的文档
- en: --> src/main.rs:9:1
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: --> src/main.rs:9:1
- en: '|'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '9   | / #![feature(proc_macro, conservative_impl_trait, generators)]'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '9   | / #![feature(proc_macro, conservative_impl_trait, generators)]'
- en: '10  | | #![warn(missing_docs)]'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '10  | | #![warn(missing_docs)]'
- en: 11  | |
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 11  | |
- en: 12  | | extern crate bytes;
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 12  | | extern crate bytes;
- en: '...   |'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '...   |'
- en: 528 | |     }
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 528 | |     }
- en: 529 | | }
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 529 | | }
- en: '| |_^'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '| |_^'
- en: '|'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'note: lint level defined here'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这里定义了 lint 级别
- en: --> src/main.rs:10:9
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: --> src/main.rs:10:9
- en: '|'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '10  | #![warn(missing_docs)]'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '10  | #![warn(missing_docs)]'
- en: '|         ^^^^^^^^^^^^'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|         ^^^^^^^^^^^^'
- en: '[PRE93]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '#[doc(hidden)]'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '#[doc(hidden)]'
- en: '#[derive(Clone, Copy, Debug, PartialEq)]'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '#[derive(Clone, Copy, Debug, PartialEq)]'
- en: pub enum TransferType {
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: pub enum TransferType {
- en: Ascii,
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Ascii,
- en: Image,
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图片
- en: Unknown,
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未知,
- en: '}'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE94]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: /// [PRE95]
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE95]
- en: '[PRE96]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '/// # Some text'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '/// # 一些文本'
- en: ///
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: /// [PRE97]
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE97]
- en: ///
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: '/// # Why not C?'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '/// # 为什么不是 C？'
- en: ///
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: /// [PRE98]
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE98]
- en: ///
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: '/// # Or an unknown language?'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '/// # 或者一种未知语言？'
- en: ///
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: /// [PRE99]
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE99]
- en: '[PRE100]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: /// [PRE101]
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE101]
- en: '[PRE102]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: /// [PRE103]
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE103]
- en: '[PRE104]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: /// [PRE105]
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE105]
- en: '[PRE106]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: /// [PRE107]
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE107]
- en: '[PRE108]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: /// [PRE109]
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE109]
- en: '[PRE110]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: /// [PRE111]
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE111]
- en: '[PRE112]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: /// [PRE113]
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE113]
- en: '[PRE114]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: /// [PRE115]
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE115]
- en: '[PRE116]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: /// [PRE117]
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: /// [PRE117]
- en: '[PRE118]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: let mut file = File::open("some-file.txt")?;
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: let mut file = File::open("some-file.txt")?;
- en: write!(file, "Hello world!")?;
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: write!(file, "Hello world!")?;
- en: '[PRE119]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: fn main() {
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: fn main() {
- en: use std::fs::File;
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: use std::fs::File;
- en: use std::io::prelude::*;
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: use std::io::prelude::*;
- en: fn foo() -> std::io::Result<()> {
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: fn foo() -> std::io::Result<()> {
- en: let mut file = File::open("some-file.txt")?;
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: let mut file = File::open("some-file.txt")?;
- en: write!(file, "Hello world!")?;
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: write!(file, "Hello world!")?;
- en: Ok(())
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: Ok(())
- en: '}'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE120]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: cargo install cargo-fuzz
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: cargo install cargo-fuzz
- en: '[PRE121]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: cargo fuzz init
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: cargo fuzz init
- en: '[PRE122]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '#![no_main]'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '#![no_main]'
- en: '#[macro_use] extern crate libfuzzer_sys;'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '#[macro_use] extern crate libfuzzer_sys;'
- en: mod error {
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 模块错误 {
- en: include!("../../src/error.rs");
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: include!("../../src/error.rs");
- en: '}'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: include!("../../src/cmd.rs");
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: include!("../../src/cmd.rs");
- en: 'fuzz_target!(|data: &[u8]| {'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 'fuzz_target!(|data: &[u8]| {'
- en: let _ = Command::new(data.to_vec());
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let _ = Command::new(data.to_vec());
- en: '});'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '[PRE123]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: mod error {
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 模块错误 {
- en: include!("../../src/error.rs");
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: include!("../../src/error.rs");
- en: '}'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: include!("../../src/cmd.rs");
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: include!("../../src/cmd.rs");
- en: '[PRE124]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'fuzz_target!(|data: &[u8]| {'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'fuzz_target!(|data: &[u8]| {'
- en: let _ = Command::new(data.to_vec());
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let _ = Command::new(data.to_vec());
- en: '});'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '[PRE125]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: cargo fuzz run fuzz_target_1
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: cargo fuzz run fuzz_target_1
- en: '[PRE126]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Fresh arbitrary v0.1.0
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: Fresh arbitrary v0.1.0
- en: Fresh cc v1.0.3
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Fresh cc v1.0.3
- en: Fresh libfuzzer-sys v0.1.0 (https://github.com/rust-fuzz/libfuzzer-sys.git#737524f7)
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Fresh libfuzzer-sys v0.1.0 (https://github.com/rust-fuzz/libfuzzer-sys.git#737524f7)
- en: Compiling ftp-server-fuzz v0.0.1 (file:///path/to/FTP-server-rs/fuzz)
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 编译 ftp-server-fuzz v0.0.1 (file:///path/to/FTP-server-rs/fuzz)
- en: Running `rustc --crate-name fuzz_target_1 fuzz/fuzz_targets/fuzz_target_1.rs
    --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=7eb012a2948092cc
    -C extra-filename=-7eb012a2948092cc --out-dir /path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps
    --target x86_64-unknown-linux-gnu -L dependency=/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps
    -L dependency=/path/to/FTP-server-rs/fuzz/target/debug/deps --extern libfuzzer_sys=/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/liblibfuzzer_sys-44f07aaa9fd00b00.rlib
    --cfg fuzzing -Cpasses=sancov -Cllvm-args=-sanitizer-coverage-level=3 -Zsanitizer=address
    -Cpanic=abort -L native=/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/build/libfuzzer-sys-b260d147c5e0139d/out`
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Running `rustc --crate-name fuzz_target_1 fuzz/fuzz_targets/fuzz_target_1.rs
    --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=7eb012a2948092cc
    -C extra-filename=-7eb012a2948092cc --out-dir /path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps
    --target x86_64-unknown-linux-gnu -L dependency=/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps
    -L dependency=/path/to/FTP-server-rs/fuzz/target/debug/deps --extern libfuzzer_sys=/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/deps/liblibfuzzer_sys-44f07aaa9fd00b00.rlib
    --cfg fuzzing -Cpasses=sancov -Cllvm-args=-sanitizer-coverage-level=3 -Zsanitizer=address
    -Cpanic=abort -L native=/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/build/libfuzzer-sys-b260d147c5e0139d/out`
- en: Finished dev [unoptimized + debuginfo] target(s) in 1.57 secs
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Finished dev [unoptimized + debuginfo] target(s) in 1.57 secs
- en: Fresh arbitrary v0.1.0
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Fresh arbitrary v0.1.0
- en: Fresh cc v1.0.3
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Fresh cc v1.0.3
- en: Fresh libfuzzer-sys v0.1.0 (https://github.com/rust-fuzz/libfuzzer-sys.git#737524f7)
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Fresh libfuzzer-sys v0.1.0 (https://github.com/rust-fuzz/libfuzzer-sys.git#737524f7)
- en: Fresh ftp-server-fuzz v0.0.1 (file:///path/to/FTP-server-rs/fuzz)
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Fresh ftp-server-fuzz v0.0.1 (file:///path/to/FTP-server-rs/fuzz)
- en: Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
- en: Running `fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1 -artifact_prefix=/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/
    /path/to/FTP-server-rs/fuzz/corpus/fuzz_target_1`
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Running `fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1 -artifact_prefix=/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/
    /path/to/FTP-server-rs/fuzz/corpus/fuzz_target_1/`
- en: 'INFO: Seed: 1369551667'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 'INFO: Seed: 1369551667'
- en: 'INFO: Loaded 0 modules (0 guards):'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 'INFO: Loaded 0 modules (0 guards):'
- en: 'Loading corpus dir: /path/to/FTP-server-rs/fuzz/corpus/fuzz_target_1'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 'Loading corpus dir: /path/to/FTP-server-rs/fuzz/corpus/fuzz_target_1'
- en: 'INFO: -max_len is not provided, using 64'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 'INFO: -max_len is not provided, using 64'
- en: 'INFO: A corpus is not provided, starting from an empty corpus'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 'INFO: A corpus is not provided, starting from an empty corpus'
- en: '#0  READ units: 1'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '#0  READ units: 1'
- en: '#1  INITED cov: 389 corp: 1/1b exec/s: 0 rss: 23Mb'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '#1  INITED cov: 389 corp: 1/1b exec/s: 0 rss: 23Mb'
- en: '#4  NEW    cov: 393 corp: 2/4b exec/s: 0 rss: 23Mb L: 3 MS: 3 ShuffleBytes-InsertByte-InsertByte-'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '#4  NEW    cov: 393 corp: 2/4b exec/s: 0 rss: 23Mb L: 3 MS: 3 ShuffleBytes-InsertByte-InsertByte-'
- en: '#5  NEW    cov: 412 corp: 3/62b exec/s: 0 rss: 23Mb L: 58 MS: 4 ShuffleBytes-InsertByte-InsertByte-InsertRepeatedBytes-'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '#5  NEW    cov: 412 corp: 3/62b exec/s: 0 rss: 23Mb L: 58 MS: 4 ShuffleBytes-InsertByte-InsertByte-InsertRepeatedBytes-'
- en: '#7  NEW    cov: 415 corp: 4/121b exec/s: 0 rss: 23Mb L: 59 MS: 1 InsertByte-'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '#7  NEW    cov: 415 corp: 4/121b exec/s: 0 rss: 23Mb L: 59 MS: 1 InsertByte-'
- en: '#21 NEW    cov: 416 corp: 5/181b exec/s: 0 rss: 23Mb L: 60 MS: 5 ChangeBit-InsertByte-ChangeBinInt-ChangeByte-InsertByte-'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '#21 NEW    cov: 416 corp: 5/181b exec/s: 0 rss: 23Mb L: 60 MS: 5 ChangeBit-InsertByte-ChangeBinInt-ChangeByte-InsertByte-'
- en: '#707    NEW    cov: 446 corp: 6/241b exec/s: 0 rss: 23Mb L: 60 MS: 1 ChangeBit-'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '#707    NEW    cov: 446 corp: 6/241b exec/s: 0 rss: 23Mb L: 60 MS: 1 ChangeBit-'
- en: '#710    NEW    cov: 447 corp: 7/295b exec/s: 0 rss: 23Mb L: 54 MS: 4 ChangeBit-InsertByte-EraseBytes-InsertByte-'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '#710    NEW    cov: 447 corp: 7/295b exec/s: 0 rss: 23Mb L: 54 MS: 4 ChangeBit-InsertByte-EraseBytes-InsertByte-'
- en: '#767    NEW    cov: 448 corp: 8/357b exec/s: 0 rss: 23Mb L: 62 MS: 1 CMP- DE:
    "\x01\x00"-'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '#767    NEW    cov: 448 corp: 8/357b exec/s: 0 rss: 23Mb L: 62 MS: 1 CMP- DE:
    "\x01\x00"-'
- en: '#780    NEW    cov: 449 corp: 9/421b exec/s: 0 rss: 23Mb L: 64 MS: 4 CopyPart-InsertByte-ChangeByte-CrossOver-'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '#780    NEW    cov: 449 corp: 9/421b exec/s: 0 rss: 23Mb L: 64 MS: 4 CopyPart-InsertByte-ChangeByte-CrossOver-'
- en: '#852    NEW    cov: 450 corp: 10/439b exec/s: 0 rss: 23Mb L: 18 MS: 1 CrossOver-'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '#852    NEW    cov: 450 corp: 10/439b exec/s: 0 rss: 23Mb L: 18 MS: 1 CrossOver-'
- en: '#1072   NEW    cov: 452 corp: 11/483b exec/s: 0 rss: 23Mb L: 44 MS: 1 InsertRepeatedBytes-'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '#1072   NEW    cov: 452 corp: 11/483b exec/s: 0 rss: 23Mb L: 44 MS: 1 InsertRepeatedBytes-'
- en: '#85826  NEW    cov: 454 corp: 12/487b exec/s: 85826 rss: 41Mb L: 4 MS: 5 ChangeBit-InsertByte-InsertByte-EraseBytes-CMP-
    DE: "NOOP"-'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '#85826  NEW    cov: 454 corp: 12/487b exec/s: 85826 rss: 41Mb L: 4 MS: 5 ChangeBit-InsertByte-InsertByte-EraseBytes-CMP-
    DE: "NOOP"-'
- en: '#92732  NEW    cov: 456 corp: 13/491b exec/s: 92732 rss: 43Mb L: 4 MS: 1 CMP-
    DE: "PASV"-'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '#92732  NEW    cov: 456 corp: 13/491b exec/s: 92732 rss: 43Mb L: 4 MS: 1 CMP-
    DE: "PASV"-'
- en: '#101858 NEW    cov: 477 corp: 14/495b exec/s: 50929 rss: 46Mb L: 4 MS: 2 ChangeByte-CMP-
    DE: "STOR"-'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '#101858 NEW    cov: 477 corp: 14/495b exec/s: 50929 rss: 46Mb L: 4 MS: 2 ChangeByte-CMP-
    DE: "STOR"-'
- en: '#105338 NEW    cov: 497 corp: 15/499b exec/s: 52669 rss: 47Mb L: 4 MS: 2 ShuffleBytes-CMP-
    DE: "LIST"-'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '#105338 NEW    cov: 497 corp: 15/499b exec/s: 52669 rss: 47Mb L: 4 MS: 2 ShuffleBytes-CMP-
    DE: "LIST"-'
- en: '#108617 NEW    cov: 499 corp: 16/503b exec/s: 54308 rss: 48Mb L: 4 MS: 1 CMP-
    DE: "AUTH"-'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '#108617 NEW    cov: 499 corp: 16/503b exec/s: 54308 rss: 48Mb L: 4 MS: 1 CMP-
    DE: "AUTH"-'
- en: '#108867 NEW    cov: 501 corp: 17/507b exec/s: 54433 rss: 48Mb L: 4 MS: 1 CMP-
    DE: "QUIT"-'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '#108867 NEW    cov: 501 corp: 17/507b exec/s: 54433 rss: 48Mb L: 4 MS: 1 CMP-
    DE: "QUIT"-'
- en: '#115442 NEW    cov: 503 corp: 18/511b exec/s: 57721 rss: 50Mb L: 4 MS: 1 CMP-
    DE: "SYST"-'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '#115442 NEW    cov: 503 corp: 18/511b exec/s: 57721 rss: 50Mb L: 4 MS: 1 CMP-
    DE: "SYST"-'
- en: '#115533 NEW    cov: 505 corp: 19/515b exec/s: 57766 rss: 50Mb L: 4 MS: 2 ChangeBinInt-CMP-
    DE: "CDUP"-'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '#115533 NEW    cov: 505 corp: 19/515b exec/s: 57766 rss: 50Mb L: 4 MS: 2 ChangeBinInt-CMP-
    DE: "CDUP"-'
- en: '#123001 NEW    cov: 513 corp: 20/518b exec/s: 61500 rss: 52Mb L: 3 MS: 5 PersAutoDict-EraseBytes-ChangeByte-ChangeBinInt-CMP-
    DE: "\x01\x00"-"RMD"-'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '#123001 NEW    cov: 513 corp: 20/518b exec/s: 61500 rss: 52Mb L: 3 MS: 5 PersAutoDict-EraseBytes-ChangeByte-ChangeBinInt-CMP-
    DE: "\x01\x00"-"RMD"-'
- en: '#127270 NEW    cov: 515 corp: 21/521b exec/s: 63635 rss: 54Mb L: 3 MS: 4 EraseBytes-ChangeByte-InsertByte-CMP-
    DE: "PWD"-'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '#127270 NEW    cov: 515 corp: 21/521b exec/s: 63635 rss: 54Mb L: 3 MS: 4 EraseBytes-ChangeByte-InsertByte-CMP-
    DE: "PWD"-'
- en: '#131072 pulse  cov: 515 corp: 21/521b exec/s: 65536 rss: 55Mb'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '#131072 pulse  cov: 515 corp: 21/521b exec/s: 65536 rss: 55Mb'
- en: '#148469 NEW    cov: 527 corp: 22/525b exec/s: 49489 rss: 59Mb L: 4 MS: 3 ChangeBit-ChangeBit-CMP-
    DE: "USER"-'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '#148469 NEW    cov: 527 corp: 22/525b exec/s: 49489 rss: 59Mb L: 4 MS: 3 ChangeBit-ChangeBit-CMP-
    DE: "USER"-'
- en: '#151237 NEW    cov: 528 corp: 23/529b exec/s: 50412 rss: 60Mb L: 4 MS: 1 CMP-
    DE: "TYPE"-'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '#151237 NEW    cov: 528 corp: 23/529b exec/s: 50412 rss: 60Mb L: 4 MS: 1 CMP-
    DE: "TYPE"-'
- en: '#169842 NEW    cov: 536 corp: 24/532b exec/s: 56614 rss: 65Mb L: 3 MS: 1 ChangeByte-'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '#169842 NEW    cov: 536 corp: 24/532b exec/s: 56614 rss: 65Mb L: 3 MS: 1 ChangeByte-'
- en: '#262144 pulse  cov: 536 corp: 24/532b exec/s: 52428 rss: 90Mb'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '#262144 pulse  cov: 536 corp: 24/532b exec/s: 52428 rss: 90Mb'
- en: '#274258 NEW    cov: 544 corp: 25/535b exec/s: 54851 rss: 94Mb L: 3 MS: 2 ChangeBit-CMP-
    DE: "MKD"-'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '#274258 NEW    cov: 544 corp: 25/535b exec/s: 54851 rss: 94Mb L: 3 MS: 2 ChangeBit-CMP-
    DE: "MKD"-'
- en: '#355992 NEW    cov: 566 corp: 26/539b exec/s: 50856 rss: 116Mb L: 4 MS: 1 InsertByte-'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '#355992 NEW    cov: 566 corp: 26/539b exec/s: 50856 rss: 116Mb L: 4 MS: 1 InsertByte-'
- en: '#356837 NEW    cov: 575 corp: 27/558b exec/s: 50976 rss: 116Mb L: 19 MS: 1
    InsertRepeatedBytes-'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '#356837 NEW    cov: 575 corp: 27/558b exec/s: 50976 rss: 116Mb L: 19 MS: 1
    InsertRepeatedBytes-'
- en: '#361667 NEW    cov: 586 corp: 28/562b exec/s: 51666 rss: 117Mb L: 4 MS: 1 PersAutoDict-
    DE: "MKD"-'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '#361667 NEW    cov: 586 corp: 28/562b exec/s: 51666 rss: 117Mb L: 4 MS: 1 PersAutoDict-
    DE: "MKD"-'
- en: 'thread ''<unnamed>'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', fuzz/fuzz_targets/../../src/cmd.rs:85:46'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '线程 ''<unnamed>'' 在fuzz/fuzz_targets/../../src/cmd.rs:85:46处崩溃，错误信息：''index
    out of bounds: the len is 0 but the index is 0'''
- en: 'note: Run with `RUST_BACKTRACE=1` for a backtrace.'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：使用`RUST_BACKTRACE=1`运行以获取回溯信息。
- en: '==10969== ERROR: libFuzzer: deadly signal'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '==10969== ERROR: libFuzzer: 致命信号'
- en: '#0 0x55e90764cf73  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x110f73)'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#0 0x55e90764cf73  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x110f73)'
- en: '#1 0x55e9076aa701  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x16e701)'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#1 0x55e9076aa701  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x16e701)'
- en: '#2 0x55e9076aa64b  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x16e64b)'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#2 0x55e9076aa64b  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x16e64b)'
- en: '#3 0x55e907683059  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x147059)'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#3 0x55e907683059  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x147059)'
- en: '#4 0x7f4bda433d9f  (/usr/lib/libpthread.so.0+0x11d9f)'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#4 0x7f4bda433d9f  (/usr/lib/libpthread.so.0+0x11d9f)'
- en: '#5 0x7f4bd9e8789f  (/usr/lib/libc.so.6+0x3489f)'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#5 0x7f4bd9e8789f  (/usr/lib/libc.so.6+0x3489f)'
- en: '#6 0x7f4bd9e88f08  (/usr/lib/libc.so.6+0x35f08)'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#6 0x7f4bd9e88f08  (/usr/lib/libc.so.6+0x35f08)'
- en: '#7 0x55e9076c2b18  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x186b18)'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#7 0x55e9076c2b18  (/path/to/FTP-server-rs/fuzz/target/x86_64-unknown-linux-gnu/debug/fuzz_target_1+0x186b18)'
- en: 'NOTE: libFuzzer has rudimentary signal handlers.'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 'NOTE: libFuzzer具有基本的信号处理器。'
- en: Combine libFuzzer with AddressSanitizer or similar for better crash reports.
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将libFuzzer与AddressSanitizer或类似工具结合使用，以获得更好的崩溃报告。
- en: 'SUMMARY: libFuzzer: deadly signal'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 'SUMMARY: libFuzzer: 致命信号'
- en: 'MS: 2 CopyPart-InsertByte-; base unit: 6e9816a8e9d0388eecdb52866188c04e75e4b1b3'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 'MS: 2 CopyPart-InsertByte-; base unit: 6e9816a8e9d0388eecdb52866188c04e75e4b1b3'
- en: 0x54,0x59,0x50,0x45,0x20,
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 0x54,0x59,0x50,0x45,0x20,
- en: TYPE
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: TYPE
- en: artifact_prefix='/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/'; Test
    unit written to /path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/crash-601e8dbb61bd6c7d63cff0bd3f749f7cb53922bc
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: artifact_prefix='/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/'; 测试单元写入到/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/crash-601e8dbb61bd6c7d63cff0bd3f749f7cb53922bc
- en: 'Base64: VFlQRSA='
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 'Base64: VFlQRSA='
- en: ==10969==LeakSanitizer has encountered a fatal error.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: ==10969==LeakSanitizer has encountered a fatal error.
- en: '==10969==HINT: For debugging, try setting environment variable LSAN_OPTIONS=verbosity=1:log_threads=1'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: ==10969==HINT：对于调试，尝试设置环境变量LSAN_OPTIONS=verbosity=1:log_threads=1
- en: '==10969==HINT: LeakSanitizer does not work under ptrace (strace, gdb, etc)'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: ==10969==HINT：LeakSanitizer在ptrace（strace、gdb等）下不工作
- en: 'MS: 2 CopyPart-InsertByte-; base unit: 6e9816a8e9d0388eecdb52866188c04e75e4b1b3'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: MS：2 CopyPart-InsertByte-; 基础单元：6e9816a8e9d0388eecdb52866188c04e75e4b1b3
- en: 0x54,0x59,0x50,0x45,0x20,
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 0x54,0x59,0x50,0x45,0x20,
- en: TYPE
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: TYPE
- en: artifact_prefix='/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/'; Test
    unit written to /path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/crash-601e8dbb61bd6c7d63cff0bd3f749f7cb53922bc
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: artifact_prefix='/path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/'; 测试单元写入到
    /path/to/FTP-server-rs/fuzz/artifacts/fuzz_target_1/crash-601e8dbb61bd6c7d63cff0bd3f749f7cb53922bc
- en: 'Base64: VFlQRSA='
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: Base64：VFlQRSA=
- en: '[PRE127]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'thread ''<unnamed>'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', fuzz/fuzz_targets/../../src/cmd.rs:85:46'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 线程 '<unnamed>' 在 fuzz/fuzz_targets/../../src/cmd.rs:85:46 处恐慌：索引越界：长度为0但索引为0
- en: '[PRE128]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: match TransferType::from(data?[0]) {
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: match TransferType::from(data?[0]) {
- en: '[PRE129]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: impl Command {
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: impl Command {
- en: 'pub fn new(input: Vec<u8>) -> Result<Self> {'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'pub fn new(input: Vec<u8>) -> Result<Self> {'
- en: // …
  id: totrans-499
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: // …
- en: let command =
  id: totrans-500
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: let command =
- en: match command.as_slice() {
  id: totrans-501
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: match command.as_slice() {
- en: // …
  id: totrans-502
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: // …
- en: b"TYPE" => {
  id: totrans-503
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: b"TYPE" => {
- en: let error = Err("command not implemented for that
  id: totrans-504
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: let error = Err("command not implemented for that
- en: parameter".into());
  id: totrans-505
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: parameter".into());
- en: let data = data?;
  id: totrans-506
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: let data = data?;
- en: if data.is_empty() {
  id: totrans-507
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if data.is_empty() {
- en: return error;
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return error;
- en: '}'
  id: totrans-509
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: match TransferType::from(data[0]) {
  id: totrans-510
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: match TransferType::from(data[0]) {
- en: TransferType::Unknown => return error,
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: TransferType::Unknown => return error,
- en: typ => {
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: typ => {
- en: Command::Type(typ)
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Command::Type(typ)
- en: '},'
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: '}'
  id: totrans-515
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-516
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: // …
  id: totrans-517
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: // …
- en: '};'
  id: totrans-518
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: Ok(command)
  id: totrans-519
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Ok(command)
- en: '}'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE130]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'INFO: Seed: 81554194'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: INFO：种子：81554194
- en: 'INFO: Loaded 0 modules (0 guards):'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: INFO：加载了0个模块（0个守卫）：
- en: 'Loading corpus dir: /home/bouanto/Ordinateur/Programmation/Rust/Projets/FTP-server-rs/fuzz/corpus/fuzz_target_1'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 加载语料库目录：/home/bouanto/Ordinateur/Programmation/Rust/Projets/FTP-server-rs/fuzz/corpus/fuzz_target_1
- en: 'INFO: -max_len is not provided, using 64'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: INFO：未提供-max_len，使用64
- en: '#0  READ units: 27'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '#0  READ units：27'
- en: '#27 INITED cov: 595 corp: 23/330b exec/s: 0 rss: 28Mb'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '#27 INITED cov：595 corp：23/330b exec/s：0 rss：28Mb'
- en: '#21494  NEW    cov: 602 corp: 24/349b exec/s: 0 rss: 28Mb L: 19 MS: 2 ShuffleBytes-CMP-
    DE: "STOR"-'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '#21494  NEW    cov：602 corp：24/349b exec/s：0 rss：28Mb L：19 MS：2 ShuffleBytes-CMP-
    DE：“STOR”-'
- en: '#21504  NEW    cov: 606 corp: 25/354b exec/s: 0 rss: 28Mb L: 5 MS: 2 InsertByte-PersAutoDict-
    DE: "STOR"-'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '#21504  NEW    cov：606 corp：25/354b exec/s：0 rss：28Mb L：5 MS：2 InsertByte-PersAutoDict-
    DE：“STOR”-'
- en: '#24893  NEW    cov: 616 corp: 26/359b exec/s: 0 rss: 29Mb L: 5 MS: 1 CMP- DE:
    "TYPE"-'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '#24893  NEW    cov：616 corp：26/359b exec/s：0 rss：29Mb L：5 MS：1 CMP- DE：“TYPE”-'
- en: '#25619  NEW    cov: 620 corp: 27/365b exec/s: 0 rss: 29Mb L: 6 MS: 2 PersAutoDict-InsertByte-
    DE: "TYPE"-'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '#25619  NEW    cov：620 corp：27/365b exec/s：0 rss：29Mb L：6 MS：2 PersAutoDict-InsertByte-
    DE：“TYPE”-'
- en: '#25620  NEW    cov: 621 corp: 28/379b exec/s: 0 rss: 29Mb L: 14 MS: 3 PersAutoDict-InsertByte-CMP-
    DE: "TYPE"-"\x00\x00\x00\x00\x00\x00\x00\x00"-'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '#25620  NEW    cov：621 corp：28/379b exec/s：0 rss：29Mb L：14 MS：3 PersAutoDict-InsertByte-CMP-
    DE：“TYPE”-"\x00\x00\x00\x00\x00\x00\x00\x00"-'
- en: '#32193  NEW    cov: 628 corp: 29/398b exec/s: 0 rss: 31Mb L: 19 MS: 1 CMP-
    DE: "CWD"-'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '#32193  NEW    cov：628 corp：29/398b exec/s：0 rss：31Mb L：19 MS：1 CMP- DE：“CWD”-'
- en: '#34108  NEW    cov: 662 corp: 30/417b exec/s: 0 rss: 31Mb L: 19 MS: 1 CMP-
    DE: "USER"-'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '#34108  NEW    cov：662 corp：30/417b exec/s：0 rss：31Mb L：19 MS：1 CMP- DE：“USER”-'
- en: '#35745  NEW    cov: 666 corp: 31/421b exec/s: 0 rss: 31Mb L: 4 MS: 3 ShuffleBytes-EraseBytes-PersAutoDict-
    DE: "CWD"-'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '#35745  NEW    cov：666 corp：31/421b exec/s：0 rss：31Mb L：4 MS：3 ShuffleBytes-EraseBytes-PersAutoDict-
    DE：“CWD”-'
- en: '#36518  NEW    cov: 673 corp: 32/426b exec/s: 0 rss: 32Mb L: 5 MS: 1 PersAutoDict-
    DE: "USER"-'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '#36518  NEW    cov：673 corp：32/426b exec/s：0 rss：32Mb L：5 MS：1 PersAutoDict-
    DE：“USER”-'
- en: '#36634  NEW    cov: 685 corp: 33/433b exec/s: 0 rss: 32Mb L: 7 MS: 2 CMP-CMP-
    DE: "\xff\xff"-"RETR"-'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '#36634  NEW    cov：685 corp：33/433b exec/s：0 rss：32Mb L：7 MS：2 CMP-CMP- DE："\xff\xff"-"RETR"-'
- en: '#37172  NEW    cov: 688 corp: 34/437b exec/s: 0 rss: 32Mb L: 4 MS: 5 EraseBytes-ChangeBinInt-InsertByte-ChangeBit-CMP-
    DE: "RETR"-'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '#37172  NEW    cov：688 corp：34/437b exec/s：0 rss：32Mb L：4 MS：5 EraseBytes-ChangeBinInt-InsertByte-ChangeBit-CMP-
    DE：“RETR”-'
- en: '#39248  NEW    cov: 692 corp: 35/442b exec/s: 0 rss: 32Mb L: 5 MS: 1 PersAutoDict-
    DE: "RETR"-'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '#39248  NEW    cov：692 corp：35/442b exec/s：0 rss：32Mb L：5 MS：1 PersAutoDict-
    DE：“RETR”-'
- en: '#65735  NEW    cov: 699 corp: 36/492b exec/s: 65735 rss: 39Mb L: 50 MS: 3 InsertRepeatedBytes-ChangeBit-CMP-
    DE: "LIST"-'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '#65735  NEW    cov：699 corp：36/492b exec/s：65735 rss：39Mb L：50 MS：3 InsertRepeatedBytes-ChangeBit-CMP-
    DE：“LIST”-'
- en: '#69797  NEW    cov: 703 corp: 37/497b exec/s: 69797 rss: 40Mb L: 5 MS: 5 ChangeByte-CopyPart-CopyPart-EraseBytes-PersAutoDict-
    DE: "LIST"-'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '#69797  NEW    cov：703 corp：37/497b exec/s：69797 rss：40Mb L：5 MS：5 ChangeByte-CopyPart-CopyPart-EraseBytes-PersAutoDict-
    DE：“LIST”-'
- en: '#131072 pulse  cov: 703 corp: 37/497b exec/s: 65536 rss: 55Mb'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '#131072 pulse  cov：703 corp：37/497b exec/s：65536 rss：55Mb'
- en: '#217284 NEW    cov: 707 corp: 38/511b exec/s: 54321 rss: 75Mb L: 14 MS: 2 CMP-ShuffleBytes-
    DE: "LIST"-'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '#217284 NEW    cov: 707 corp: 38/511b exec/s: 54321 rss: 75Mb L: 14 MS: 2 CMP-ShuffleBytes-
    DE: "LIST"-'
- en: '#219879 NEW    cov: 708 corp: 39/525b exec/s: 54969 rss: 76Mb L: 14 MS: 2 ChangeByte-ChangeBit-'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '#219879 NEW    cov: 708 corp: 39/525b exec/s: 54969 rss: 76Mb L: 14 MS: 2 ChangeByte-ChangeBit-'
- en: '#262144 pulse  cov: 708 corp: 39/525b exec/s: 52428 rss: 86Mb'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '#262144脉冲  cov: 708 corp: 39/525b exec/s: 52428 rss: 86Mb'
- en: '#524288 pulse  cov: 708 corp: 39/525b exec/s: 52428 rss: 148Mb'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '#524288脉冲  cov: 708 corp: 39/525b exec/s: 52428 rss: 148Mb'
- en: '#1048576    pulse  cov: 708 corp: 39/525b exec/s: 52428 rss: 273Mb'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '#1048576    pulse  cov: 708 corp: 39/525b exec/s: 52428 rss: 273Mb'
- en: '#2097152    pulse  cov: 708 corp: 39/525b exec/s: 51150 rss: 522Mb'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '#2097152    pulse  cov: 708 corp: 39/525b exec/s: 51150 rss: 522Mb'
- en: '#4194304    pulse  cov: 708 corp: 39/525b exec/s: 50533 rss: 569Mb'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '#4194304    pulse  cov: 708 corp: 39/525b exec/s: 50533 rss: 569Mb'
- en: '#8388608    pulse  cov: 708 corp: 39/525b exec/s: 50533 rss: 569Mb'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '#8388608    pulse  cov: 708 corp: 39/525b exec/s: 50533 rss: 569Mb'
- en: '#12628080   NEW    cov: 835 corp: 40/530b exec/s: 50311 rss: 570Mb L: 5 MS:
    3 ChangeBit-ChangeBinInt-ShuffleBytes-'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '#12628080   NEW    cov: 835 corp: 40/530b exec/s: 50311 rss: 570Mb L: 5 MS:
    3 ChangeBit-ChangeBinInt-ShuffleBytes-'
- en: '#12628883   NEW    cov: 859 corp: 41/540b exec/s: 50314 rss: 570Mb L: 10 MS:
    1 CopyPart-'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '#12628883   NEW    cov: 859 corp: 41/540b exec/s: 50314 rss: 570Mb L: 10 MS:
    1 CopyPart-'
- en: '#12628893   NEW    cov: 867 corp: 42/604b exec/s: 50314 rss: 570Mb L: 64 MS:
    1 CrossOver-'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '#12628893   NEW    cov: 867 corp: 42/604b exec/s: 50314 rss: 570Mb L: 64 MS:
    1 CrossOver-'
- en: '#12643279   NEW    cov: 868 corp: 43/608b exec/s: 50371 rss: 570Mb L: 4 MS:
    2 EraseBytes-EraseBytes-'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '#12643279   NEW    cov: 868 corp: 43/608b exec/s: 50371 rss: 570Mb L: 4 MS:
    2 EraseBytes-EraseBytes-'
- en: '#12670956   NEW    cov: 871 corp: 44/652b exec/s: 50281 rss: 570Mb L: 44 MS:
    4 EraseBytes-InsertByte-ChangeBinInt-ChangeBinInt-'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '#12670956   NEW    cov: 871 corp: 44/652b exec/s: 50281 rss: 570Mb L: 44 MS:
    4 EraseBytes-InsertByte-ChangeBinInt-ChangeBinInt-'
- en: '#12671130   NEW    cov: 872 corp: 45/697b exec/s: 50282 rss: 570Mb L: 45 MS:
    3 ChangeBit-CMP-InsertByte- DE: "\xff\xff\xff\xff"-'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '#12671130   NEW    cov: 872 corp: 45/697b exec/s: 50282 rss: 570Mb L: 45 MS:
    3 ChangeBit-CMP-InsertByte- DE: "\xff\xff\xff\xff"-'
- en: '#12671140   NEW    cov: 873 corp: 46/750b exec/s: 50282 rss: 570Mb L: 53 MS:
    3 ChangeBinInt-CMP-CopyPart- DE: "\x00\x00\x00\x00\x00\x00\x00\x00"-'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '#12671140   NEW    cov: 873 corp: 46/750b exec/s: 50282 rss: 570Mb L: 53 MS:
    3 ChangeBinInt-CMP-CopyPart- DE: "\x00\x00\x00\x00\x00\x00\x00\x00"-'
- en: '#12671906   NEW    cov: 874 corp: 47/803b exec/s: 50285 rss: 570Mb L: 53 MS:
    4 ChangeBit-ChangeByte-PersAutoDict-ShuffleBytes- DE: "CWD"-'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '#12671906   NEW    cov: 874 corp: 47/803b exec/s: 50285 rss: 570Mb L: 53 MS:
    4 ChangeBit-ChangeByte-PersAutoDict-ShuffleBytes- DE: "CWD"-'
- en: '#12687428   NEW    cov: 875 corp: 48/856b exec/s: 50346 rss: 574Mb L: 53 MS:
    1 ShuffleBytes-'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '#12687428   NEW    cov: 875 corp: 48/856b exec/s: 50346 rss: 574Mb L: 53 MS:
    1 ShuffleBytes-'
- en: '#12699014   NEW    cov: 945 corp: 49/862b exec/s: 50392 rss: 574Mb L: 6 MS:
    2 InsertByte-ChangeBit-'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '#12699014   NEW    cov: 945 corp: 49/862b exec/s: 50392 rss: 574Mb L: 6 MS:
    2 InsertByte-ChangeBit-'
- en: '#13319888   NEW    cov: 946 corp: 50/869b exec/s: 50074 rss: 579Mb L: 7 MS:
    1 InsertByte-'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '#13319888   NEW    cov: 946 corp: 50/869b exec/s: 50074 rss: 579Mb L: 7 MS:
    1 InsertByte-'
- en: '#13424473   NEW    cov: 1015 corp: 51/878b exec/s: 50091 rss: 580Mb L: 9 MS:
    1 CopyPart-'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '#13424473   NEW    cov: 1015 corp: 51/878b exec/s: 50091 rss: 580Mb L: 9 MS:
    1 CopyPart-'
- en: '#13432333   NEW    cov: 1018 corp: 52/888b exec/s: 50120 rss: 580Mb L: 10 MS:
    1 CopyPart-'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '#13432333   NEW    cov: 1018 corp: 52/888b exec/s: 50120 rss: 580Mb L: 10 MS:
    1 CopyPart-'
- en: '#13651748   NEW    cov: 1019 corp: 53/901b exec/s: 50006 rss: 582Mb L: 13 MS:
    1 CopyPart-'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '#13651748   NEW    cov: 1019 corp: 53/901b exec/s: 50006 rss: 582Mb L: 13 MS:
    1 CopyPart-'
- en: '#13652268   NEW    cov: 1020 corp: 54/920b exec/s: 50008 rss: 582Mb L: 19 MS:
    1 CopyPart-'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '#13652268   NEW    cov: 1020 corp: 54/920b exec/s: 50008 rss: 582Mb L: 19 MS:
    1 CopyPart-'
- en: '#13652535   NEW    cov: 1025 corp: 55/978b exec/s: 50009 rss: 582Mb L: 58 MS:
    3 InsertRepeatedBytes-ChangeBit-InsertByte-'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '#13652535   NEW    cov: 1025 corp: 55/978b exec/s: 50009 rss: 582Mb L: 58 MS:
    3 InsertRepeatedBytes-ChangeBit-InsertByte-'
- en: '#13662779   NEW    cov: 1028 corp: 56/997b exec/s: 50046 rss: 582Mb L: 19 MS:
    2 ChangeBit-ShuffleBytes-'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '#13662779   NEW    cov: 1028 corp: 56/997b exec/s: 50046 rss: 582Mb L: 19 MS:
    2 ChangeBit-ShuffleBytes-'
- en: '#16777216   pulse  cov: 1028 corp: 56/997b exec/s: 48913 rss: 589Mb'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '#16777216   pulse  cov: 1028 corp: 56/997b exec/s: 48913 rss: 589Mb'
- en: '#33554432   pulse  cov: 1028 corp: 56/997b exec/s: 46154 rss: 589Mb'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '#33554432   pulse  cov: 1028 corp: 56/997b exec/s: 46154 rss: 589Mb'
- en: '#67108864   pulse  cov: 1028 corp: 56/997b exec/s: 45343 rss: 589Mb'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '#67108864   pulse  cov: 1028 corp: 56/997b exec/s: 45343 rss: 589Mb'
- en: '#134217728  pulse  cov: 1028 corp: 56/997b exec/s: 44325 rss: 589Mb'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '#134217728  pulse  cov: 1028 corp: 56/997b exec/s: 44325 rss: 589Mb'
- en: '#268435456  pulse  cov: 1028 corp: 56/997b exec/s: 43819 rss: 589Mb'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '#268435456  pulse  cov: 1028 corp: 56/997b exec/s: 43819 rss: 589Mb'
- en: '^C==16792== libFuzzer: run interrupted; exiting'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '^C==16792== libFuzzer: 运行中断；退出'
- en: '```'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: So, we ran the fuzzer for a very long time and it didn't find a panic, so we
    ended it with *Ctrl* + *C*. We cannot be certain that there's no bug left, but
    we are more confident thanks to all these tests.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们运行了很长时间的fuzzer，但没有发现panic，所以我们用*Ctrl* + *C*结束它。我们无法确定是否还有bug遗留，但所有这些测试使我们更加自信。
- en: Summary
  id: totrans-577
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we finalized our FTP server. Then, we learned how to do different
    types of tests. We saw how we can test a single function or type by writing unit
    tests. We learned how to test a program as a whole by writing integration tests.
    We also learned about documentation and fuzzing tests to make sure our examples
    are up to date and to find even more bugs in our application.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们完成了我们的 FTP 服务器。然后，我们学习了如何进行不同类型的测试。我们看到了如何通过编写单元测试来测试单个函数或类型。我们学习了如何通过编写集成测试来整体测试一个程序。我们还学习了关于文档和模糊测试的内容，以确保我们的示例是最新的，并找到我们应用程序中的更多错误。
- en: In the next and ultimate chapter, we will learn about Rust's good practice and
    common idioms.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最终章节中，我们将学习 Rust 的良好实践和常见惯用法。
