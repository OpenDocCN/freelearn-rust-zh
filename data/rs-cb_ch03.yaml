- en: Deep Diving into Cargo
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解Cargo
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Creating a new project using Cargo
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cargo创建新项目
- en: Downloading an external crate from crates.io
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从crates.io下载外部crate
- en: Working on existing Cargo projects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在现有的Cargo项目中工作
- en: Running tests with Cargo
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cargo运行测试
- en: Configuration management of the project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目的配置管理
- en: Building the project on the Travis CI
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Travis CI上构建项目
- en: Uploading to crates.io
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传到crates.io
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Cargo is one of the unique selling points of Rust, which is the first of its
    kind in the system programming space. Cargo is Rust's package manager, and it
    makes a developer's life easy in regard to creating, developing, packaging, maintaining,
    testing, and deploying application code or tools to production, without great
    effort. In this chapter, we will cover recipes that will enable a developer to
    utilize all the features of Cargo and make a production-grade Rust application
    from day one of development.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo是Rust的独特卖点之一，在系统编程空间中是首创。Cargo是Rust的包管理器，它使得开发者能够轻松地创建、开发、打包、维护、测试并将应用程序代码或工具部署到生产环境中，而不需要付出太多努力。在本章中，我们将介绍一些配方，使开发者能够利用Cargo的所有功能，并在开发的第一天就创建一个生产级别的Rust应用程序。
- en: Creating a new project using Cargo
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cargo创建新项目
- en: Cargo is a unique offering from Rust and is very new in the sphere of system
    programming. It is also one of the selling points of Rust, as it enables developers
    to package, ship, and test their Rust application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo是Rust的独特贡献，在系统编程领域非常新颖。它也是Rust的卖点之一，因为它使开发者能够打包、分发和测试他们的Rust应用程序。
- en: We will cover a lot of functionalities of Cargo in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Cargo的许多功能。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: We require the Rust compiler, Cargo, and any text editor for coding.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要Rust编译器、Cargo以及任何文本编辑器进行编码。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the Terminal.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Go to the directory where you want to create the project:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你想要创建项目的目录：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Enter the following command to create a new Rust project:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以创建一个新的Rust项目：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a project named `hello_world`, as shown in the following example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`hello_world`的项目，如下例所示：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should get the following output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/3b17cd26-363d-47a8-84a9-838bc8711661.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3b17cd26-363d-47a8-84a9-838bc8711661.png)'
- en: You should have a new folder created with the name of the project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该创建一个名为项目的新文件夹。
- en: 'First, get into the project and examine it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，进入项目并检查它：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should get the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/a5dc8dbc-18b3-45ab-8dc7-4e094c7d4062.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a5dc8dbc-18b3-45ab-8dc7-4e094c7d4062.png)'
- en: This is the whole structure of the newly created project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新创建项目的整体结构。
- en: 'Print the content of the `Cargo.toml` file using the `cat` command in Linux:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Linux中的`cat`命令打印`Cargo.toml`文件的内容：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should get the following output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/fd799fce-392e-489c-ac2c-e958fe9d2a4b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fd799fce-392e-489c-ac2c-e958fe9d2a4b.png)'
- en: 'Go to the `src` directory inside the project where you will find the default
    `main.rs` file and print its content using the `cat` command in Linux:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往项目中的`src`目录，在那里你可以找到默认的`main.rs`文件，并使用Linux中的`cat`命令打印其内容：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should get the following output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/ce80257d-ccc6-4036-88d5-226eb35e414e.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ce80257d-ccc6-4036-88d5-226eb35e414e.png)'
- en: 'Build the sample project that comes with the `cargo new` command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建随`cargo new`命令提供的示例项目：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should get the following output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/5c519252-e025-470e-9fa4-c1e86cb9e4d7.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5c519252-e025-470e-9fa4-c1e86cb9e4d7.png)'
- en: The Cargo build will create a new directory named `target` and a file named
    `cargo.lock`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cargo构建将创建一个名为`target`的新目录和一个名为`cargo.lock`的文件。
- en: Run the compiled project, which is a executable file present in the target directory.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行编译后的项目，这是一个位于目标目录中的可执行文件。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since this is an executable, you should be able to see the output of the application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个可执行文件，你应该能够看到应用程序的输出。
- en: 'You should get the following output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/fae32c88-7b4a-4aed-b76a-148cf0cbd9a3.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fae32c88-7b4a-4aed-b76a-148cf0cbd9a3.png)'
- en: 'We have to follow the preceding two steps in order to build the executable
    code and then execute the Rust application, but with the `cargo run` command we
    can perform both simultaneously:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须遵循前面的两个步骤来构建可执行代码，然后执行Rust应用程序，但使用`cargo run`命令我们可以同时执行这两个操作：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should get the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/4c35b8e5-eb65-41b2-93ba-56c606a1cc0f.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4c35b8e5-eb65-41b2-93ba-56c606a1cc0f.png)'
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Cargo is a command-line tool that comes with the installation of Rust. It''s
    essential for the following reasons:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo是随Rust安装一起提供的命令行工具。它对于以下原因至关重要：
- en: It introduces metadata files that convey all the details about the project
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它引入了包含项目所有详细信息的元数据文件
- en: It calls the `rustc` compiler to build the project
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它调用`rustc`编译器来构建项目
- en: It helps the developer structure and maintain the code better
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它帮助开发者更好地组织和维护代码
- en: The `cargo new` commands create the complete folder structure for us. For our
    project, the `--bin` indicates the binary file. This means we are creating a Rust
    application that is expected to work out of the box in regard to solving a real-world
    problem. However, in this case, we created a library that would not use the `--bin`
    option as a command-line tool. Libraries are known as crates in Rust. We will
    create a crate in Rust later, in the upcoming chapters.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`cargo new`命令为我们创建了完整的文件夹结构。对于我们的项目，`--bin`表示二进制文件。这意味着我们正在创建一个Rust应用程序，它预期能够直接解决现实世界的问题。然而，在这种情况下，我们创建了一个不会使用`--bin`选项作为命令行工具的库。在Rust中，库被称为crate。我们将在接下来的章节中创建一个crate。'
- en: '`Cargo.toml` is a manifest file that contains all the metadata that Cargo needs
    to compile your project. When you run the `cargo build` command, you will see
    that the source code is converted into an executable byte code, which would be
    the end application; this creates the `target` directory and places the executable
    in the `debug` folder inside it. Inside the `debug` folder, we mainly have `deps`
    directory which contains the different dependent crates which were downloaded
    to execute the application.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cargo.toml`是一个包含Cargo编译项目所需所有元数据的清单文件。当你运行`cargo build`命令时，你会看到源代码被转换成可执行的字节码，这将形成最终的应用程序；这会创建`target`目录，并将可执行文件放置在其中的`debug`文件夹内。在`debug`文件夹内，我们主要有一个`deps`目录，它包含执行应用程序所需下载的不同依赖库。'
- en: Your project can optionally contain folders named `example`, `test`, and `bench`,
    which Cargo will treat as containing examples, integration tests, and benchmarks
    respectively.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你的项目可以包含名为`example`、`test`和`bench`的文件夹，Cargo会将它们分别视为包含示例、集成测试和基准测试。
- en: Rust is very smart and only compiles when there are changes in the code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Rust非常智能，只有当代码有变化时才会进行编译。
- en: Compiling `cargo build --release` in debug mode is suitable for development,
    and its compilation time is shorter since the compiler does not do any optimizations
    and checks. However, when you run the code in release mode, it will take longer
    to compile, but the code will run faster in production. The release mode will
    prepare the build in the `release` folder inside `target` instead of `debug` directory.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式下编译`cargo build --release`适合开发使用，其编译时间更短，因为编译器不会进行任何优化和检查。然而，当你以发布模式运行代码时，编译时间会更长，但代码在生产环境中运行会更快。发布模式将在`target`目录内的`release`文件夹中准备构建，而不是`debug`目录。
- en: We see that the build process created a `Cargo.lock` file. This file contains
    all the information about our dependencies. We will cover this file in detail
    in an upcoming recipe.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到构建过程创建了一个`Cargo.lock`文件。此文件包含有关我们依赖项的所有信息。我们将在接下来的菜谱中详细介绍此文件。
- en: 'In order to compile multiple binaries in the same Rust project, we have to
    make certain entries in the `Cargo.toml` file where we explicitly mention the
    target that we want to build. By default, Cargo compiles the `main.rs` file in
    the `src` folder with the same name of the project, but for compiling multiple
    binaries, say `daemon` and `client`, which need to be built, we make the following
    mention changes in the `Cargo.toml` file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在同一Rust项目中编译多个二进制文件，我们必须在`Cargo.toml`文件中进行一些设置，明确指出我们想要构建的目标。默认情况下，Cargo会使用与项目同名的方式编译`src`文件夹中的`main.rs`文件，但为了编译多个二进制文件，例如需要构建的`daemon`和`client`，我们需在`Cargo.toml`文件中进行以下提及的更改：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This would build an additional two binaries named `daemon` and `client`, along
    with the project binary.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建两个额外的二进制文件，名为`daemon`和`client`，以及项目本身的二进制文件。
- en: Similarly we can have sections such as`[lib]`, `[[bench]]`, `[[test]]`, and
    `[[example]]` in a configuration file to build libraries, benchmarks, tests, and
    examples.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以在配置文件中拥有如`[lib]`、`[[bench]]`、`[[test]]`和`[[example]]`等部分，以构建库、基准测试、测试和示例。
- en: Downloading an external crate from crates.io
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从crates.io下载外部crate
- en: To create complex applications for solving real-world problems, we need to reuse
    other open source projects and dependencies for faster development.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建解决现实世界问题的复杂应用程序，我们需要重用其他开源项目和依赖项以加快开发速度。
- en: The [https://crates.io/](https://crates.io/) is the Rust community's central
    repository that serves as a location for discovering and downloading packages.
    The command-line tool **`cargo`** is configured to find requested packages and
    download and use them. You will learn how to download and maintain external crates
    (dependencies) in this recipe.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://crates.io/](https://crates.io/) 是Rust社区的中心仓库，作为发现和下载包的位置。命令行工具 **`cargo`**
    被配置为查找请求的包并下载和使用它们。你将在本食谱中学习如何下载和维护外部crates（依赖项）。'
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We require the Rust compiler, Cargo, and any text editor for coding.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要Rust编译器、Cargo和任何文本编辑器进行编码。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Open the `Cargo.toml` file in your favorite text editor; in this recipe, we
    will use the `nano` editor:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你喜欢的文本编辑器中打开`Cargo.toml`文件；在本食谱中，我们将使用`nano`编辑器：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should get the following output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/6051ead3-0ccc-4386-aeaa-2521cb2d287a.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6051ead3-0ccc-4386-aeaa-2521cb2d287a.png)'
- en: Add a `[dependencies]` section to the `cargo.toml` file and enter `time = "0.1.12"`
    and `regex = "0.1.41"` below it.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cargo.toml`文件中添加一个`[dependencies]`部分，并在其下方输入`time = "0.1.12"`和`regex = "0.1.41"`。
- en: 'You should get the following output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/b796fa21-2c3b-4cec-8373-624992ff2f0e.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b796fa21-2c3b-4cec-8373-624992ff2f0e.png)'
- en: 'Use the `cat` command to see the configuration list:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cat`命令查看配置列表：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should get the following output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/0e08a465-a5b1-4268-8108-4f528522de23.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e08a465-a5b1-4268-8108-4f528522de23.png)'
- en: 'Build the project to pull the dependencies from [https://crates.io/](https://crates.io/):'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以从[https://crates.io/](https://crates.io/)拉取依赖项：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should get the following output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/1f0112ef-2dd0-47bd-a639-7435f462de6f.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f0112ef-2dd0-47bd-a639-7435f462de6f.png)'
- en: Use the existing crates pulled in our project.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们项目中已有的crates。
- en: 'Open the `main.rs` file in the `src` directory using `nano` and enter the following
    code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`nano`在`src`目录中打开`main.rs`文件，并输入以下代码：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should get the following output:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/a8670d72-1184-40aa-af86-3aa889e7e9d3.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8670d72-1184-40aa-af86-3aa889e7e9d3.png)'
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You should get the following state output:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下状态输出：
- en: '![](img/f65fce94-30df-438c-b170-a280a3f699c6.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f65fce94-30df-438c-b170-a280a3f699c6.png)'
- en: 'Compile and run the project:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行项目：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should get the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/f5eef42b-b7d7-4e98-bfc7-6e6a79251300.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5eef42b-b7d7-4e98-bfc7-6e6a79251300.png)'
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We enter the dependencies we require for the project in the `Cargo.toml` file.
    This file fetches us the package and version mentioned in the [https://crates.io/](https://crates.io/)
    central repository. In the preceding recipe, we downloaded the time and regex
    crates and also mentioned the desired version that we would like to work on.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Cargo.toml`文件中输入项目所需的依赖项。此文件从[https://crates.io/](https://crates.io/)中央仓库获取提到的包和版本。在前面的食谱中，我们下载了时间和正则表达式crates，并提到了我们希望工作的所需版本。
- en: When we build a project after modifying the `Cargo.toml` file, it downloads
    all the modules inside the crate of our local development system and makes an
    entry in the `Cargo.lock` file, which would contain all the details about the
    downloaded dependencies.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在修改`Cargo.toml`文件后构建项目时，它会下载本地开发系统crates中的所有模块，并在`Cargo.lock`文件中创建条目，该文件将包含有关下载的依赖项的所有详细信息。
- en: If you are planning to create a library or improve upon an existing library
    implementation, it is advisable that you check out whether there are any similar
    ideas or projects implemented in [https://crates.io/](https://crates.io/) to evaluate
    the value of your open project. All the projects put up on the [https://crates.io/](https://crates.io/)
    repository are open source projects available on GitHub.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划创建一个库或改进现有的库实现，建议你检查[https://crates.io/](https://crates.io/)中是否有任何类似的想法或项目实现，以评估你的开源项目的价值。所有在[https://crates.io/](https://crates.io/)仓库上提交的项目都是GitHub上的开源项目。
- en: The fun part about using other dependencies is that you get to reuse the available
    working version of an application or function you would like to use in the project
    and reduce your project development time.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其他依赖项的有趣之处在于，你可以重用你希望在项目中使用的应用程序或函数的可用工作版本，从而减少项目开发时间。
- en: We used the `extern crate` command in our Rust script to call the downloaded
    crates.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Rust脚本中使用`extern crate`命令来调用下载的crate。
- en: '`extern crate regex` or crate and import all its functions inside the modules
    it has. We then call them in the code by passing our data.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`extern crate regex`或crate，并在其模块中导入所有函数。然后我们通过传递我们的数据在代码中调用它们。'
- en: In the preceding code snippet, we explicitly mentioned the need for using the
    `use` command to call the `Regex` module in the `regex` crate using `regex::Regex`
    and checking whether the dates match and print the Boolean value in the terminal.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们明确提到了需要使用`use`命令来调用`regex`crate中的`Regex`模块，使用`regex::Regex`检查日期是否匹配，并在终端中打印布尔值。
- en: We call the `unwrap` and `is_match` functions to check whether both the strings
    are the same or not. We return `true` if they are similar and `false` if they
    are not.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`unwrap`和`is_match`函数来检查两个字符串是否相同。如果它们相似，则返回`true`，如果不相似，则返回`false`。
- en: Working on existing Cargo projects
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在现有的Cargo项目中工作
- en: Cargo is a tool that allows the Rust application to declare their various dependencies
    to ensure that you will able to recreate the build by following the same dependencies
    and version.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo是一个工具，允许Rust应用程序声明它们的各种依赖项，以确保您能够通过遵循相同的依赖项和版本来重新创建构建。
- en: At a higher level, it offers configuration management to the Rust project and
    helps in reproducing the development environment. Usually, in other languages,
    it's a very tedious and time-consuming process to maintain the different dependencies
    and configure them each and every time we deploy the application in a different
    environment.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高层次上，它为Rust项目提供配置管理，并帮助重现开发环境。通常，在其他语言中，维护不同的依赖项并每次在不同环境中部署应用程序时配置它们是一个非常繁琐且耗时的过程。
- en: Cargo provides features out of the box which enables developers and project
    managers to ship/deploy Rust projects/applications very quickly and without much
    hassle; this is a very big advantage over other languages.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo提供了一些开箱即用的功能，使得开发人员和项目经理能够非常快速且没有太多麻烦地发布/部署Rust项目/应用程序；这与其他语言相比是一个非常大的优势。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We require the Rust compiler, Cargo, and any text editor for coding.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要Rust编译器、Cargo以及任何文本编辑器来进行编码。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Clone the project from the project repo in this recipe. Close the `rand` crate
    from GitHub where it is hosted. Do this by typing the following command in the
    terminal:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本食谱的项目repo中克隆项目。关闭GitHub上托管的`rand`crate。通过在终端中输入以下命令来完成此操作：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should get the following output:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '![](img/79c2d53c-b3f6-4d0f-a16d-3982f2b1324d.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79c2d53c-b3f6-4d0f-a16d-3982f2b1324d.png)'
- en: This would clone the repo from the GitHub to the local system.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把GitHub上的repo克隆到本地系统。
- en: 'Enter the newly created project `rand` and check out the complex production-level
    package details:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入新创建的项目`rand`并查看复杂的生产级包详细信息：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should get the following output:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '![](img/536d9e70-2807-4680-ba72-03e76860cd04.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/536d9e70-2807-4680-ba72-03e76860cd04.png)'
- en: 'Build the project using the Cargo build command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Cargo build命令构建项目：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should get the following output:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '![](img/a9b328bc-4e9a-4b23-9aa2-af02a4ebf30d.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9b328bc-4e9a-4b23-9aa2-af02a4ebf30d.png)'
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The preceding three steps would set up a complete Rust project in your local
    development environment. This is the power of the Cargo command-line tool, which
    makes the post- development application life cycle so easy for a developer.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的三个步骤将在您的本地开发环境中设置一个完整的Rust项目。这是Cargo命令行工具的力量，它使得开发者的后开发应用程序生命周期变得如此简单。
- en: Here, we have basically cloned an existing project and built it. Cargo looked
    into the manifest file to fetch all the metadata that was required to understand
    the various dependencies of the project and build them.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们基本上克隆了一个现有项目并构建了它。Cargo查看了清单文件，以获取理解项目各种依赖项所需的所有元数据，并构建了它们。
- en: Running tests with Cargo
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cargo运行测试
- en: Tests are important for complex production-grade applications as they validate
    the working of a functional unit of the project. Cargo provides Rust with all
    the testing functionalities that help in unit and integration tests out of the
    box.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复杂的生产级应用程序，测试非常重要，因为它们验证了项目功能单元的工作情况。Cargo为Rust提供了所有测试功能，这些功能有助于单元和集成测试。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We require the Rust compiler, Cargo, and any text editor for coding.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要Rust编译器、Cargo以及任何文本编辑器来进行编码。
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Run the `cargo test` command inside the project:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目内部运行 `cargo test` 命令：
- en: '[PRE19]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should get the following output:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/9e559e26-ec7d-4bb6-b031-11e7e88e7ae0.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e559e26-ec7d-4bb6-b031-11e7e88e7ae0.png)'
- en: 'Mention the name to run a particular test-- `cargo test test_name`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定名称来运行特定的测试-- `cargo test test_name`：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should get the following output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/b1b65b95-746d-4ddc-a7cc-b4ade4c82414.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1b65b95-746d-4ddc-a7cc-b4ade4c82414.png)'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Cargo looks for tests to run in two places: they are in the `src` directory,
    where we can have our unit tests'' code placed, and the `tests` directory, where
    we place the integration tests.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo 在两个地方寻找要运行的测试：它们位于 `src` 目录中，我们可以在此放置单元测试的代码，以及 `tests` 目录，我们在此放置集成测试。
- en: In this recipe, we did not have any tests for the project, but we have a dedicated
    chapter for tests later, where we will deep dive into the various aspects of testing.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们没有为项目编写任何测试，但稍后我们将有一个专门的章节介绍测试，我们将深入探讨测试的各个方面。
- en: Configuration management of the project
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目的配置管理
- en: We will thoroughly explore the use of `Cargo.lock` and `Cargo.toml` in this
    recipe and we'll see how they help in configuration management.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将彻底探讨 `Cargo.lock` 和 `Cargo.toml` 的使用，并了解它们如何帮助进行配置管理。
- en: Configuration management here refers to the ability to have version control,
    which includes uploading and downloading the desired version of your project dependencies.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的配置管理指的是拥有版本控制的能力，这包括上传和下载项目依赖项所需版本。
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We require the Rust compiler, Cargo, and any text editor for coding.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要 Rust 编译器、Cargo 以及任何文本编辑器进行编码。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Go to the `hello_world` project and enter the GitHub repo link of the `rand`
    library in the `Cargo.toml` file:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `hello_world` 项目，并在 `Cargo.toml` 文件中输入 `rand` 库的 GitHub 仓库链接：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the following `Cargo.toml`, enter the mentioned dependencies:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的 `Cargo.toml` 文件中，输入所提到的依赖项：
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should get the following output:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/888b1472-3683-4d04-b400-6219e1e330da.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/888b1472-3683-4d04-b400-6219e1e330da.png)'
- en: In the same `Cargo.toml` file, enter `rev` and the `SHA` value for the `rand`
    crate.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的 `Cargo.toml` 文件中，输入 `rev` 和 `rand` 包的 `SHA` 值。
- en: 'You should get the following output:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/5ce3e951-eab1-481a-af2b-78933a648990.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ce3e951-eab1-481a-af2b-78933a648990.png)'
- en: 'Type the `cargo update` command to implement the new changes:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `cargo update` 命令以实施新更改：
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should get the following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/037b0a26-c710-4b81-9665-7869631b5969.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/037b0a26-c710-4b81-9665-7869631b5969.png)'
- en: Enter `Cargo.lock` and look through the `rand` package details.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 `Cargo.lock` 并查看 `rand` 包的详细信息。
- en: 'You should get the following output:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![](img/9e0d7eab-a66c-4f71-8328-57788d72b405.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e0d7eab-a66c-4f71-8328-57788d72b405.png)'
- en: Never make any manual changes in the `Cargo.lock` file. It is not intended to
    be edited manually.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在 `Cargo.lock` 文件中手动进行任何更改。它不是用来手动编辑的。
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Cargo parses through the manifest file data, and, based on the data entered,
    it performs certain tasks.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo 解析清单文件数据，并根据输入的数据执行某些任务。
- en: First, we entered the GitHub repo link of the project in the `Cargo.toml` file
    to install the particular crate. Since we did not mention any other detail--for
    example, which version--Cargo will pull all the modules and resources of the latest
    commit to the master branch of the project.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 `Cargo.toml` 文件中输入了项目的 GitHub 仓库链接以安装特定的包。由于我们没有提及任何其他细节--例如，版本--Cargo
    将从项目的 master 分支拉取所有模块和资源。
- en: However, the problem with this approach is that, if the project changes its
    layout or code tomorrow, our current implementation may be affected when we update
    the package.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法的问题在于，如果项目在明天更改其布局或代码，当更新包时，我们的当前实现可能会受到影响。
- en: To avoid this, we assigned the `rev` value to the commit ID of the project whose
    resource we have used for our current build. This seems to solve our problem,
    but we still have to remember the commit ID, which is error-prone when we enter
    a wrong ID.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们将 `rev` 值分配给了我们当前构建所使用的资源的项目的提交 ID。这似乎解决了我们的问题，但我们仍然需要记住提交 ID，在输入错误
    ID 时容易出错。
- en: Enter `Cargo.lock` using the `nano` command. Since the `lock` file exists, we
    don't need to manually keep track of the revision of the dependencies. Cargo will
    create entries in the `Cargo.lock` file with the details of the revision for each
    package used in the application.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `nano` 命令进入 `Cargo.lock`。由于 `lock` 文件已存在，我们不需要手动跟踪依赖项的版本。Cargo 将在 `Cargo.lock`
    文件中为应用程序中使用的每个包创建条目，并包含其版本的详细信息。
- en: When you build for the first time, Cargo will take the latest commit and write
    that information to `Cargo.lock`. Imagine that we are shipping the project to
    a new host where we want to configure the Rust application. Cargo will use the
    exact `SHA` from the `Cargo.lock` file even though you should not have mentioned
    it in the `Cargo.toml` file. We can see there is a lot of information about the
    package in the `lock` file, which will help us reproduce the same dependencies
    later.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次构建时，Cargo 将获取最新的提交并将该信息写入 `Cargo.lock`。想象一下，我们将项目发送到一个新的主机，并想要配置 Rust 应用程序。即使你未在
    `Cargo.toml` 文件中提及，Cargo 也会使用 `Cargo.lock` 文件中的确切 `SHA`。我们可以看到 `lock` 文件中有关于包的大量信息，这有助于我们稍后重现相同的依赖项。
- en: Building the project on the Travis CI
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Travis CI 上构建项目
- en: Travis CI is a continuous integrated software that reads the `yml` file in your
    project repository. It provides instructions or commands to the tools on how you
    should build, test, and ship.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI 是一个持续集成软件，它读取项目仓库中的 `yml` 文件。它为工具提供指令或命令，说明你应该如何构建、测试和发布。
- en: In this recipe, you will learn how to build a Rust application using the `TravisCI`
    tool whose code is hosted on GitHub.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将学习如何使用托管在 GitHub 上的 `TravisCI` 工具构建 Rust 应用程序。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We require the Rust compiler, Cargo, and any text editor for coding. Host the
    Rust application in a GitHub repo and integrate the `TravisCI` tool to the GitHub
    repo.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要 Rust 编译器、Cargo 和任何文本编辑器进行编码。在 GitHub 仓库中托管 Rust 应用程序，并将 `TravisCI` 工具集成到
    GitHub 仓库中。
- en: How to do it...
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a `.travis.yml` file in the project using the `touch` command:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中使用 `touch` 命令创建一个 `.travis.yml` 文件：
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Enter the following configuration for testing the application in different
    Rust builds by opening the file using any text editor; we are using `nano` in
    this recipe:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用任何文本编辑器打开文件来配置测试不同 Rust 构建的应用程序，我们在这个配方中使用 `nano`：
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should get the following output:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该获得以下输出：
- en: '![](img/032afcbc-7057-416c-924b-8783879c2a02.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/032afcbc-7057-416c-924b-8783879c2a02.png)'
- en: Make a change in the project and push the project to the GitHub repo.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中做出更改并将项目推送到 GitHub 仓库。
- en: The `build` process is triggered on TravisCI platform each and every time we
    push a commit in the project repository. This process is configurable by the advance
    options available in the TravisCI platform, where you can schedule the build or
    select repo branches to build from.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们在项目仓库中推送提交时，Travis CI 平台都会触发 `build` 过程。这个过程可以通过 Travis CI 平台提供的高级选项进行配置，你可以安排构建或选择要构建的仓库分支。
- en: 'You should get the following screenshot as output in the Travis CI platform:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在 Travis CI 平台上获得以下截图作为输出：
- en: '![](img/412c70cd-313e-4df3-8fa0-30a8802780ca.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/412c70cd-313e-4df3-8fa0-30a8802780ca.png)'
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Travis CI tools read the instruction specified in the `.travis.yml` file of
    the project and prepare the environment in which you want to build, test, and
    release the project.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI 工具读取项目仓库中的 `.travis.yml` 文件中的说明，并准备你想要构建、测试和发布项目的环境。
- en: 'In the next section, we will break down and understand what each of the commands
    does in the `build` pipeline:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将分解并理解 `build` 管道中每个命令的作用：
- en: '[PRE26]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This downloads and installs the latest stable version of the Rust release when
    setting up the machine. If you only want to test the application in a stable version,
    you just need the preceding command and there is no need to specify the versions:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置机器时，这会下载并安装 Rust 发布的最新稳定版本。如果你只想在稳定版本中测试应用程序，你只需要前面的命令，无需指定版本：
- en: '[PRE27]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For specifying the versions in which you want to test the application, you
    can use the preceding command where you built the project in the `beta` and `nightly`
    channels. Even if you are only targeting stable, the Rust team encourages you
    to test it on other channels as well:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了指定你想要测试应用程序的版本，你可以使用前面构建项目的命令，在 `beta` 和 `nightly` 通道中。即使你只针对稳定版本，Rust 团队也鼓励你在其他通道上测试：
- en: '[PRE28]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will test all three channels, and any breakage in `nightly` will not fail
    your overall build.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这将测试所有三个渠道，如果`nightly`渠道出现任何问题，不会导致你的整体构建失败。
- en: In the preceding `build` logs, if you look closely, you will see the default
    test script is run by the Travis CI, and it uses the Cargo tool to run your build
    and test the application using `cargo build` and `cargo test` commands.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的`build`日志中，如果你仔细观察，你会看到默认的测试脚本是由Travis CI运行的，它使用Cargo工具通过`cargo build`和`cargo
    test`命令运行你的构建和测试应用程序。
- en: Uploading to crates.io
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传到crates.io
- en: The [https://crates.io/](https://crates.io/) is a website that acts as a central
    repository for hosting all the crates made by the amazing Rust community. It contains
    various projects of various domains.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://crates.io/](https://crates.io/) 是一个网站，充当由令人惊叹的Rust社区制作的crate的中心存储库。它包含各种领域的各种项目。'
- en: This helps in instantly publishing the crate and installing them.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于即时发布crate并安装它们。
- en: Getting ready
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We require the Rust compiler, Cargo, and any text editor to code and create
    an account on the [https://crates.io/](https://crates.io/) website using the GitHub
    ID.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要Rust编译器、Cargo和任何文本编辑器来编码，并在[https://crates.io/](https://crates.io/)网站上使用GitHub
    ID创建账户。
- en: How to do it...
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Go to the project location from where you want to upload your project to [https://crates.io/](https://crates.io/):'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你想要上传项目到[https://crates.io/](https://crates.io/)的位置进入项目：
- en: '[PRE29]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The [https://crates.io/](https://crates.io/) provides an API token on the accounts
    setting page when you create a new account or log in with your existing GitHub
    ID:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你使用现有的GitHub ID创建新账户或登录时，[https://crates.io/](https://crates.io/)在账户设置页面上提供了一个API令牌：
- en: '[PRE30]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Package the Rust application:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包Rust应用程序：
- en: '[PRE31]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Publish the Rust application to [https://crates.io/](https://crates.io/):'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Rust应用程序发布到[https://crates.io/](https://crates.io/)：
- en: '[PRE32]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Cargo login command takes the API token provided and stores it in the `~/.cargo/config`
    location.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo登录命令接受提供的API令牌并将其存储在`~/.cargo/config`位置。
- en: Note that the API token should be kept secret and should not be shared, as it
    is the way by which we can manage the crates uploaded.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，API令牌应保密，不应共享，因为它是我们管理上传的crate的方式。
- en: Keep in mind that the name that you used to create the project is going to be
    the name of the crate, and names of crates are based on a first come, first served
    basis.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你用来创建项目的名称将成为crate的名称，crate的名称基于先到先得的原则。
- en: When our project is ready to be packaged, we use the preceding step to create
    a new folder, named `/target/package`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的项目准备好打包时，我们使用先前的步骤创建一个新的文件夹，命名为`/target/package`。
- en: The content inside the package is what is going to be uploaded to the [https://crates.io/](https://crates.io/)
    website. There will be a file with the naming convention `project_name-version.crate`
    and a folder `project_name-version`. These names are based on the information
    given by the developer to `cargo.toml`. We can tweak the value in the configuration
    file and use the package command until we get the correct name and version number.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 包内的内容是即将上传到[https://crates.io/](https://crates.io/)网站的内容。将有一个名为`project_name-version.crate`的文件和一个名为`project_name-version`的文件夹。这些名称基于开发者提供给`cargo.toml`的信息。我们可以在配置文件中调整值，并使用包命令，直到我们得到正确的名称和版本号。
- en: 'In packaging, we have to make sure that we do not upload unnecessary files,
    such as test script or text files and so on, which were used for testing the library.
    For this purpose, the `*.crate` file provides a lot of tags or keys that tell
    about the various features, examples, and resources of the file:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在打包时，我们必须确保不上传不必要的文件，例如测试脚本或文本文件等，这些文件用于测试库。为此，`*.crate`文件提供了许多标签或键，它们描述了文件的各种功能、示例和资源：
- en: '[PRE33]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding section, we explicitly mentioned that all the resources in
    the `assets` and `videos` folders be excluded; on the other hand, we had a tag
    named `include` that will help to make sure all the important files are packaged.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的章节中，我们明确指出，`assets`和`videos`文件夹中的所有资源都应该排除；另一方面，我们有一个名为`include`的标签，它将帮助确保所有重要文件都被打包。
- en: The final command, `cargo publish`, looks into the `*.crate` file and publishes
    the crate in the account created.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最终命令`cargo publish`会检查`*.crate`文件，并在创建的账户中发布crate。
