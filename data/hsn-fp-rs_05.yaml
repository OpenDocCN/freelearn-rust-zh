- en: Code Organization and Application Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码组织和应用架构
- en: Previously, we outlined some basic concepts of project planning and code architecture.
    The strategy we recommended specifically called for gathering and listing requirements
    before adapting them into pseudocode, stub code, and eventually a completed project.
    This process is still very applicable to larger projects, but we have not covered
    the aspect of file and module organization. How should code be grouped into files
    and modules?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们概述了一些项目规划和代码架构的基本概念。我们推荐的策略特别强调在将需求适应为伪代码、存根代码和最终项目之前，先收集和列出需求。这个过程对大型项目仍然非常适用，但我们还没有涵盖文件和模块组织方面。代码应该如何分组到文件和模块中？
- en: To answer this question, we recommend something called **the workshop model**.
    Imagine a physical workshop with pegboards, shelves, jars, toolboxes, and larger
    equipment on the floor. When speaking about code architecture, experts often talk
    about different organizational strategies. It is possible to group code by type,
    by purpose, by project layer, or by convenience. There are infinite possible strategies,
    and these are just four common ones. None of these are wrong, though we recommend
    against choosing any one specifically. Our reason is simple—choose all of them.
    Nuts and bolts can be organized into jars (by type). Hand tools can be placed
    in a toolbox (by purpose). Large tools can be placed on the floor (by project
    layer). Common tools can be hung on a pegboard (by convenience). None of these
    strategies are invalid, and all of them can be used in the same workshop (project).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这个问题，我们推荐一种称为**工作坊模式**的方法。想象一个物理工作坊，里面有挂板、架子、罐子、工具箱和地板上的大型设备。当谈到代码架构时，专家们经常讨论不同的组织策略。代码可以按类型、目的、项目层或便利性进行分组。有无限的可能策略，这里只列举了四种常见的策略。虽然我们不建议选择任何一种特定的策略，但它们都没有错。螺母和螺栓可以按类型放入罐子中。手工具可以放在工具箱中（按目的）。大型工具可以放在地板上（按项目层）。常用工具可以挂在挂板上（按便利性）。这些策略都不是无效的，并且都可以在同一个工作坊（项目）中使用。
- en: In this chapter, we will reorganize the project as it grows. We will combine
    the principles of planning and architecture that we previously introduced with
    new concepts of code organization to develop a large software project that is
    navigable and maintainable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将随着项目的增长而重新组织项目。我们将结合之前介绍的计划和架构原则，以及新的代码组织概念，来开发一个可导航且可维护的大型软件项目。
- en: 'The learning outcomes of this chapter are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的学习成果如下：
- en: Recognizing and applying by type organization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过类型组织识别和应用
- en: Recognizing and applying by purpose organization
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过目的组织识别和应用
- en: Recognizing and applying by layer organization
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过分层组织识别和应用
- en: Recognizing and applying by convenience organization
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过便利性组织识别和应用
- en: Minimizing code waste during project reorganization
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目重组过程中最小化代码浪费
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'A recent version of Rust is necessary to run the examples provided:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 运行提供的示例需要Rust的最近版本：
- en: '[https://www.rust-lang.org/en-US/install.html](https://www.rust-lang.org/en-US/install.html)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Rust安装指南](https://www.rust-lang.org/en-US/install.html)'
- en: 'This chapter''s code is also available on GitHub:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码也可在GitHub上找到：
- en: '[https://github.com/PacktPublishing/Hands-On-Functional-Programming-in-RUST](https://github.com/PacktPublishing/Hands-On-Functional-Programming-in-RUST)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[《RUST函数式编程实战》](https://github.com/PacktPublishing/Hands-On-Functional-Programming-in-RUST)'
- en: Specific installation and build instructions are also included in each chapter's
    `README.md` file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每章的`README.md`文件中也包含了具体的安装和构建说明。
- en: Shipping a product without sacrificing quality
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不牺牲质量的情况下交付产品
- en: 'The client has finished negotiating with your sales team—you won the contract.
    Now that the contract is signed, your team is on task to bring the simulation
    up to specification to run all of the elevator systems. The client has provided
    specifications for each of the three buildings, elevators, motor control, and
    braking systems. You also learn that the elevator motors have intelligent motor
    control software that regulates internal voltage and current dynamically. To control
    the motor, you will only be expected to supply the desired force output. The full
    specifications are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 客户已经与你的销售团队完成了谈判——你赢得了合同。现在合同已经签署，你的团队的任务是将模拟提升到规格，以便运行所有电梯系统。客户为每个三个建筑、电梯、电机控制和制动系统提供了规格。你还了解到电梯电机具有智能电机控制软件，该软件可以动态调节内部电压和电流。为了控制电机，你只需提供所需的力输出。完整的规格如下：
- en: 'For building 1, there are the following:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于建筑1，有以下几点：
- en: '**Floor heights**: 8m, 4m, 4m, 4m, 4m'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**楼层高度**: 8m, 4m, 4m, 4m, 4m'
- en: '**Elevator weight**: 1,200 kg'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯重量**: 1,200 kg'
- en: '**Elevator motor**: Maximum 50,000 N'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯电机**: 最大 50,000 N'
- en: '**Elevator driver**: Software interface supplied'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯驱动器**: 提供软件接口'
- en: 'For building 2, there are the following:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于建筑2，有以下几点：
- en: '**Floor heights**: 5m, 5m, 5m, 5m, 5m, 5m, 5m, 5m'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**楼层高度**: 5m, 5m, 5m, 5m, 5m, 5m, 5m, 5m'
- en: '**Elevator weight**: 1,350 kg'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯重量**: 1,350 kg'
- en: '**Elevator motor**: maximum 1,00,000 N'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯电机**: 最大 1,00,000 N'
- en: '**Elevator driver**: Software interface supplied'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯驱动器**: 提供软件接口'
- en: 'For building 3, there are the following:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于建筑3，有以下几点：
- en: '**Floor heights**: 6m, 4m, 4m, 4m'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**楼层高度**: 6m, 4m, 4m, 4m'
- en: '**Elevator weight**: 1,400 kg'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯重量**: 1,400 kg'
- en: '**Elevator motor**: Maximum 90,000 N'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯电机**: 最大 90,000 N'
- en: '**Elevator driver**: Software interface supplied'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯驱动器**: 提供软件接口'
- en: The program now needs to work in operational mode, where new floor requests
    are accepted and added to the queue. The simulation should also continue to work,
    now with all three building specifications. The simulation should verify that
    promised performance and quality metrics are all satisfied. Other than that, your
    team is free to develop the project as you see fit.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 程序现在需要以操作模式运行，接受并添加新的楼层请求到队列中。模拟也应该继续运行，现在包含所有三个建筑规范。模拟应该验证承诺的性能和质量指标是否都满足。除此之外，你的团队可以自由地按照你的想法开发项目。
- en: You decide that now is a good time to rethink the organization of the project,
    with significant new changes required. Using good architecture and project organization
    practices, you will move code around accordingly to group components orderly and
    conveniently.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你决定现在是重新思考项目组织的好时机，需要重大的新变化。使用良好的架构和项目组织实践，你将相应地移动代码，以便有序且方便地分组组件。
- en: Reorganizing the project
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新组织项目
- en: 'Now that we have some ideas of good project architecture, let''s plan the project''s
    reorganization. Let''s list the possible workshop organization methods:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对良好的项目架构有了些想法，让我们规划项目的重组。让我们列出可能的研讨会组织方法：
- en: By type
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按类型
- en: By purpose
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按用途
- en: By layer
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按层
- en: By convenience
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按便利性
- en: 'The by type organization should be used for workshop nuts and bolts type components.
    Nuts and bolts are highly uniform components that have a different diameter, length,
    grade, and so on. We have a few good matches here, so let''s list objects and
    interfaces that could be grouped this way:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 应该使用按类型组织来处理车间螺母和螺栓类型的组件。螺母和螺栓是高度统一的组件，具有不同的直径、长度、等级等。我们这里也有一些很好的匹配，让我们列出可以按这种方式分组的对象和接口：
- en: Motors
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机
- en: Buildings
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建筑物
- en: Elevator controllers/drivers
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电梯控制器/驱动器
- en: 'The by purpose organization should be used for miscellaneous tools that have
    a common purpose. We have some good candidates for this style of organization,
    too:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 应该使用按用途组织来处理具有共同目的的杂项工具。我们也有一些适合这种组织风格的优秀候选者：
- en: Transport planning (static/dynamic)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运输计划（静态/动态）
- en: The physical interface to an elevator
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电梯的物理接口
- en: 'The by layer organization should be used for distinct architectural components
    that fit well within normal program logic. An example of this would be our physics
    layer, which is logically independent of other modules. The physics layer exists
    solely to store constants, formulas, and modeling procedures. Here, we group this
    by layer:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 应该使用按层组织来处理适合正常程序逻辑的独立建筑组件。一个例子是我们的物理层，它在逻辑上独立于其他模块。物理层仅用于存储常数、公式和建模过程。在这里，我们按层分组：
- en: Physics modeling
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理建模
- en: 'The by convenience organization should be used for common or difficult components.
    Executables are a good fit for this type of organization because they are always
    an endpoint, not a library, and don''t typically fit into any other organization
    well:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 应使用方便组织来组织常见或难以组织的组件。可执行文件非常适合这种类型的组织，因为它们始终是终点，而不是库，并且通常不适合其他任何组织：
- en: Simulation executable
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟可执行文件
- en: Analyze executable
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析可执行文件
- en: Physical elevator driver executable
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理电梯驱动程序可执行文件
- en: Planning content of files by type
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据类型规划文件内容
- en: These files will be organized using the by type method.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件将使用按类型方法进行组织。
- en: Organizing the motor_controllers.rs module
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织 motor_controllers.rs 模块
- en: 'All motors will be grouped by type in the `motor_controller.rs` module. There
    will be three motors with varying properties. This module should provide a trait
    interface to all motors as well as each implementation. The trait should define
    a method to generate a motor input from the desired force output and also a method
    to accept a motor input to generate a force. The module must also link in the
    binary drivers for each motor controller. The old motor controller logic to dynamically
    control the elevator motor will be moved into a new file called `motion_controllers.rs`.
    The following should be defined in this module:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所有电机将在 `motor_controller.rs` 模块中按类型分组。将有三种具有不同特性的电机。该模块应提供对所有电机以及每个实现的特质接口。特质应定义一个方法，从所需的力输出生成电机输入，以及一个方法来接受电机输入以生成力。该模块还必须链接到每个电机控制器的二进制驱动程序。旧的电机控制器逻辑将移动到一个名为
    `motion_controllers.rs` 的新文件中，以动态控制电梯电机。以下内容应在该模块中定义：
- en: Motor input trait
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机输入特质
- en: Motor controller trait
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机控制器特质
- en: Motor input 1 implementation
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机输入 1 实现
- en: Motor controller 1 implementation
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机控制器 1 实现
- en: Motor input 2 implementation
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机输入 2 实现
- en: Motor controller 2 implementation
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机控制器 2 实现
- en: Motor input 3 implementation
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机输入 3 实现
- en: Motor controller 3 implementation
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机控制器 3 实现
- en: Organizing the buildings.rs module
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织 buildings.rs 模块
- en: 'All building specifications will be grouped by type in the `building.rs` module.
    There will be three building specifications. The building should encapsulate all
    aspects of elevator behavior and control, as well as a specification for the building
    itself. The module should contain the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所有建筑规范将在 `building.rs` 模块中按类型分组。将有三种建筑规范。建筑物应封装电梯行为和控制的所有方面，以及建筑本身的规范。该模块应包含以下内容：
- en: Building trait
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建筑特质
- en: Building 1 implementation
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建筑物 1 实现
- en: Building 2 implementation
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建筑物 2 实现
- en: Building 3 implementation
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建筑物 3 实现
- en: Planning content of files by purpose
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据目的规划文件内容
- en: These files will be organized using the by purpose method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件将使用按目的方法进行组织。
- en: Organizing the motion_controllers.rs module
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织 motion_controllers.rs 模块
- en: 'Motion controllers will be organized by purpose. The motion controllers will
    be responsible for tracking elevator state to control the motor''s dynamics. The
    motion controllers module should contain the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 运动控制器将根据目的进行组织。运动控制器将负责跟踪电梯状态以控制电机的动态。运动控制器模块应包含以下内容：
- en: Motion Controller trait
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运动控制器特质
- en: Smooth Motion Controller implementation
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平滑运动控制器实现
- en: Organizing the trip_planning.rs module
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织 trip_planning.rs 模块
- en: 'Trip planning will be organized by purpose. The planner should work in two
    modes: static and dynamic. For static mode, the planner should accept a list of
    floor requests to process. For dynamic mode, the planner should accept floor requests
    as they come dynamically and add them to the queue. The planner module should
    contain the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 行程规划将根据目的进行组织。规划器应工作在两种模式下：静态和动态。对于静态模式，规划器应接受要处理的楼层请求列表。对于动态模式，规划器应动态接受楼层请求并将它们添加到队列中。规划器模块应包含以下内容：
- en: Planner trait
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划器特质
- en: Static planner implementation
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态规划器实现
- en: Dynamic planner implementation
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态规划器实现
- en: Organizing the elevator_drivers.rs module
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织 elevator_drivers.rs 模块
- en: 'All elevator drivers will be organized by purpose in the `elevator_driver.rs`
    module. There are three elevator drivers that provide binary interfaces to be
    linked. The `elevator driver` module should contain a trait to define an interface
    to elevator drivers as well as the three implementations. The `planner` module
    should contain the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 所有电梯驱动器将在`elevator_driver.rs`模块中按目的组织。有三个电梯驱动器提供二进制接口以进行链接。`elevator driver`模块应包含一个trait，用于定义电梯驱动器的接口以及三个实现。`planner`模块应包含以下内容：
- en: Elevator driver trait
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电梯驱动器trait
- en: Elevator driver 1 implementation
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电梯司机1实现
- en: Elevator driver 2 implementation
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电梯司机2实现
- en: Elevator driver 3 implementation
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电梯司机3实现
- en: Planning content of files by layer
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按层规划文件内容
- en: These files will be organized using the by layer method.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件将使用“分层”方法进行组织。
- en: Organizing the physics.rs module
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织physics.rs模块
- en: 'The `physics` module will group all physics-related code by layer. There will
    be miscellaneous code here, though it should all fit in the form of some sort
    of simulation or prediction. The module should contain the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`physics`模块将按层组织所有与物理相关的代码。虽然这里会有一些杂项代码，但它们都应该以某种模拟或预测的形式存在。该模块应包含以下内容：'
- en: Unit conversions
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单位转换
- en: Formula implementations
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公式实现
- en: Any other logic required for the simulation or operation of elevators
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何其他用于电梯模拟或操作所需的逻辑
- en: Physics simulation loop
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理模拟循环
- en: Organizing the data_recorder.rs module
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织data_recorder.rs模块
- en: 'The data recorder module will move the `DataRecorder` trait and implementation
    into its own module. It should contain the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 数据记录器模块将`DataRecorder` trait和实现移动到其自己的模块。它应包含以下内容：
- en: The `DataRecorder` trait
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataRecorder` trait'
- en: Simple data recorder implementation
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单数据记录器实现
- en: Planning the content of files by convenience
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按便利性规划文件内容
- en: These files will be organized using the by convenience method.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件将使用“便利性”方法进行组织。
- en: Organizing the simulate_trip.rs executable
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织simulate_trip.rs可执行文件
- en: 'The `simulate_trip.rs` executable will be organized by convenience. The scope
    of the trip simulation executable has not changed significantly. This file should
    contain the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`simulate_trip.rs`可执行文件将根据便利性进行组织。行程模拟可执行文件的范围没有发生显著变化。此文件应包含以下内容：'
- en: Argument and input parsing
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数和输入解析
- en: Data logger definition
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据记录器定义
- en: Simulation setup
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟设置
- en: Run simulation
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行模拟
- en: Organizing the analyze_trip.rs executable
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织analyze_trip.rs可执行文件
- en: 'The `analyze_trip.rs` executable will be organized by convenience. The scope
    of the analyze trip executable has not changed significantly. This file should
    contain the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`analyze_trip.rs`可执行文件将根据便利性进行组织。分析行程可执行文件的范围没有发生显著变化。此文件应包含以下内容：'
- en: Argument and input parsing
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数和输入解析
- en: Check specifications for acceptance or rejection
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查规格以确定接受或拒绝
- en: Organizing the operate_elevator.rs executable
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织operate_elevator.rs可执行文件
- en: 'The `operate_elevator.rs` executable will be organized by convenience. The
    operate elevator executable should closely resemble the simulate elevator executable
    logic. This file should contain the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`operate_elevator.rs`可执行文件将根据便利性进行组织。操作电梯可执行文件应与模拟电梯可执行文件的逻辑非常相似。此文件应包含以下内容：'
- en: Argument and input parsing
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数和输入解析
- en: Setup elevator drivers to match specified building code
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置电梯驱动器以匹配指定的建筑规范
- en: Run the elevator with dynamic planning
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态规划运行电梯
- en: Mapping code changes and additions
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射代码更改和添加
- en: Now that we have organized our concepts, data structures, and logic into files,
    we can now proceed with the normal process to transform requirements into code.
    For each module, we will look at the required elements and produce code to satisfy
    those requirements.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将概念、数据结构和逻辑组织到文件中，我们可以继续进行将需求转换为代码的正常流程。对于每个模块，我们将查看所需元素并生成代码以满足这些需求。
- en: Here, we break down all code development steps by module. Different modules
    have different organizations, so pay attention for patterns regarding organization
    and code development.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过模块分解所有代码开发步骤。不同的模块有不同的组织结构，因此请注意有关组织和代码开发的模式。
- en: Developing code by type
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按类型开发代码
- en: These files will be organized using the by type method.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件将使用“按类型”方法进行组织。
- en: Writing the motor_controllers.rs module
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写motor_controllers.rs模块
- en: 'The new `motor_controller` module serves as an adapter to all of the linked
    motor drivers and their interfaces, and provides a single uniform interface. Let''s
    see how:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `motor_controller` 模块作为所有链接的电机驱动器和它们的接口的适配器，并提供一个单一的统一接口。让我们看看它是如何实现的：
- en: 'First, let''s link all the drivers from the software provided into our program:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们将软件提供的所有驱动器链接到我们的程序中：
- en: '[PRE0]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This section tells our program to link to statically compiled libraries named
    something like `libmotor1.a`, `libmotor2.a`, and `libmotor3.a`. Our example chapter
    also contains the source and build script for these libraries, so you can inspect
    each one. In a full project, there are many ways to link to an external binary
    library, this being only one of many options.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分告诉我们的程序链接到名为 `libmotor1.a`、`libmotor2.a` 和 `libmotor3.a` 等的静态编译库。我们的示例章节还包含了这些库的源代码和构建脚本，因此您可以检查每个库。在一个完整的项目中，有许多方法可以链接到外部二进制库，这仅仅是许多选项之一。
- en: 'Next, we should make a trait for `MotorInput` and a generic `MotorDriver` interface,
    including implementations for each motor. The code is as follows:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们应该为 `MotorInput` 创建一个特质，并为每个电机创建一个泛型 `MotorDriver` 接口，包括每个电机的实现。代码如下：
- en: '[PRE1]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we should implement the motor controller trait and implementations. The
    motor controller should wrap motor information and drivers into a uniform interface.
    The `MotorDriver` and `MotorController` trait here are coerced into a simple upward/downward
    force model. Therefore, the relation between driver and controller is one-to-one
    and cannot be completely abstracted into a common trait. The code for it is as
    follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们应该实现电机控制器特质及其实现。电机控制器应该将电机信息和驱动器封装成一个统一的接口。这里的 `MotorDriver` 和 `MotorController`
    特质被强制转换为简单的上下力模型。因此，驱动器和控制器之间的关系是一对一，不能完全抽象成一个通用特质。相应的代码如下：
- en: '[PRE2]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The entire code for these is present in the GitHub repository at: [https://github.com/PacktPublishing/Hands-On-Functional-Programming-in-RUST](https://github.com/PacktPublishing/Hands-On-Functional-Programming-in-RUST).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块的完整代码可以在 GitHub 仓库中找到：[https://github.com/PacktPublishing/Hands-On-Functional-Programming-in-RUST](https://github.com/PacktPublishing/Hands-On-Functional-Programming-in-RUST).
- en: Writing the buildings.rs module
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 buildings.rs 模块
- en: 'The building module is again grouped by type. There should be a common trait
    interface that is implemented by the three buildings. The building traits and
    structures should additionally wrap and expose interfaces to appropriate elevator
    drivers and motor controllers. The code is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 构建模块再次按类型分组。应该有一个通用的特质接口，由三个建筑实现。建筑特质和结构应该额外封装并暴露给适当的电梯驱动器和电机控制器。代码如下：
- en: 'First, we define the `Building` trait:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们定义 `Building` 特质：
- en: '[PRE3]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, we define a `deserialize` helper function:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义一个 `deserialize` 辅助函数：
- en: '[PRE4]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we define some miscellaneous helper functions:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义一些杂项辅助函数：
- en: '[PRE5]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we define the buildings and their trait implementations:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们定义建筑及其特质实现：
- en: '[PRE6]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Developing code by purpose
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按目的开发代码
- en: These files will be organized using the by purpose method.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件将使用按目的方法进行组织。
- en: Writing the motion_controllers.rs module
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 motion_controllers.rs 模块
- en: 'The old logic from `motor_controllers.rs` for dynamically adjusting motor force
    will be moved to this module. The `SmoothMotionController` does not change much
    and the code becomes as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `motor_controllers.rs` 中来的旧逻辑，用于动态调整电机力，将被移动到这个模块。`SmoothMotionController`
    没有太大变化，代码如下：
- en: '[PRE7]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Writing the trip_planning.rs module
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 trip_planning.rs 模块
- en: The trip planner should work in static and dynamic modes. The basic structure
    is a FIFO queue, pushing requests into the queue, and popping the oldest element.
    We may be able to unify both static and dynamic modes into a single implementation,
    which would look like the following.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 行程规划器应在静态和动态模式下工作。基本结构是一个 FIFO 队列，将请求推入队列，并弹出最旧的元素。我们可能能够将静态和动态模式统一到一个实现中，其外观如下。
- en: 'Trip planning will be organized by purpose. The planner should work in two
    modes—static and dynamic. For static mode, the planner should accept a list of
    floor requests to process. For dynamic mode, the planner should accept floor requests
    as they come dynamically and add them to the queue. The planner module should
    contain the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 行程规划将按目的进行组织。规划器应在两种模式下工作——静态和动态。对于静态模式，规划器应接受一个楼层请求列表进行处理。对于动态模式，规划器应动态接受楼层请求并将它们添加到队列中。规划器模块应包含以下内容：
- en: '[PRE8]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Writing the elevator_drivers.rs module
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 elevator_drivers.rs 模块
- en: 'The elevator drivers module should interface with the static libraries provided
    and additionally provide a common interface to all elevator drivers. The code
    looks like the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 电梯驱动器模块应与提供的静态库接口，并额外提供一个通用接口供所有电梯驱动器使用。代码如下：
- en: '[PRE9]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Developing code by layer
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层开发代码
- en: These files will be organized using the by layer method.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件将使用“分层”方法进行组织。
- en: Writing the physics.rs module
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 `physics.rs` 模块
- en: 'The physics module has become much smaller. It now contains a few struct definitions
    and constants and the central `simulate_elevator` method. The result is as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 物理模块已经变得很小。它现在包含一些结构定义和常量以及中心的 `simulate_elevator` 方法。结果如下：
- en: '[PRE10]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Writing the data_recorders.rs module
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 `data_recorders.rs` 模块
- en: 'To separate responsibilities and not let individual modules get too big, we
    should move the data recorder implementation out of the simulation and into its
    own module. The result is as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了分离责任并防止单个模块过大，我们应该将数据记录器实现从模拟中移出，并放入其自己的模块。结果如下：
- en: 'Define the `DataRecorder` trait:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `DataRecorder` 特性：
- en: '[PRE11]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Define the `SimpleDataRecorder` struct:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `SimpleDataRecorder` 结构体：
- en: '[PRE12]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Define the `SimpleDataRecorder` constructor:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `SimpleDataRecorder` 构造函数：
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Define the `SimpleDataRecorder` implementation of the `DataRecorder` trait:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `DataRecorder` 特性的 `SimpleDataRecorder` 实现：
- en: '[PRE14]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Define the miscellaneous helper functions:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义各种辅助函数：
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Developing code by convenience
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按方便开发代码
- en: These files will be organized using the by convenience method.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件将使用“方便”方法进行组织。
- en: Writing the simulate_trip.rs executable
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 `simulate_trip.rs` 可执行文件
- en: 'The simulate trip changes quite a bit because the `DataRecorder` logic has
    been removed. The initialization of the simulation is also very different from
    before. The end result is as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟行程变化很大，因为已经移除了 `DataRecorder` 逻辑。模拟的初始化也与之前有很大不同。最终结果如下：
- en: 'Initialize `ElevatorState`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化 `ElevatorState`：
- en: '[PRE16]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Initialize the building description and floor requests:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化建筑描述和楼层请求：
- en: '[PRE17]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Parse the input and store it as building description and floor requests:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析输入并将其存储为建筑描述和楼层请求：
- en: '[PRE18]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Initialize the data recorder and motion controller:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化数据记录器和运动控制器：
- en: '[PRE19]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the elevator simulation:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行电梯模拟：
- en: '[PRE20]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Print the simulation summary:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印模拟摘要：
- en: '[PRE21]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Writing the analyze_trip.rs executable
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 `analyze_trip.rs` 可执行文件
- en: 'The analyze trip executable will only change a little bit, but only to accommodate
    symbols that have been moved and types that are now serializable with SerDe. The
    result is as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 分析行程的可执行文件将只做一点点改变，但只是为了适应已经移动的符号和现在可以使用 SerDe 序列化的类型。结果如下：
- en: 'Define the `Trip` data structure:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `Trip` 数据结构：
- en: '[PRE22]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Initialize the variables:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化变量：
- en: '[PRE23]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Iterate over log lines and initialize the elevator specification:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历日志行并初始化电梯规范：
- en: '[PRE24]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Check the elevator state records:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查电梯状态记录：
- en: '[PRE25]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Check that the elevator does not backup:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查电梯是否倒退：
- en: '[PRE26]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Check that the trips finish within 20% of their theoretical limit:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保行程在理论极限的20%内完成：
- en: '[PRE27]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Writing the operate_elevator.rs executable
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 `operate_elevator.rs` 可执行文件
- en: 'The operate elevator is very similar to the `simulate_trip.rs` and physics
    `run_simulation` code. The most significant difference is the ability to continue
    running while dynamically accepting new requests and adjusting motor control using
    the linked libraries. In the main executable, we follow the same logical process
    as before, adjusted for new names and type signatures:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 操作电梯与 `simulate_trip.rs` 和物理 `run_simulation` 代码非常相似。最显著的区别是能够在动态接受新请求的同时继续运行，并使用链接库调整电机控制。在主可执行文件中，我们遵循与之前相同的逻辑过程，但调整了新名称和类型签名：
- en: 'Initialize `ElevatorState`:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化 `ElevatorState`：
- en: '[PRE28]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Initialize `MotionController`:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化 `MotionController`：
- en: '[PRE29]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Start the operating loop to process incoming floor requests:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动操作循环以处理传入的楼层请求：
- en: '[PRE30]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the processing loop, update the physics approximations:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理循环中，更新物理近似值：
- en: '[PRE32]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If the current floor request is satisfied, remove it from the queue:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果当前楼层请求得到满足，则从队列中移除它：
- en: '[PRE33]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Adjust the motor control:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整电机控制：
- en: '[PRE34]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Reflecting on the project structure
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反思项目结构
- en: Now that we have developed code to organize and connect different elevator functions,
    as well as three executables to simulate, analyze, and operate the elevators,
    let's ask ourselves this—how does it all fit together, and have we done a good
    job architecting this project thus far?
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经开发了代码来组织和连接不同的电梯功能，以及三个可执行文件来模拟、分析和操作电梯，让我们问问自己这个问题——这一切是如何结合在一起的，我们到目前为止在架构这个项目方面做得好吗？
- en: 'Reviewing this chapter, we can quickly see that we have made use of four different
    code organization techniques. At a more casual level, the code seems to fall into
    categories, as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾本章，我们可以迅速看到我们已经使用了四种不同的代码组织技术。在更随意的层面上，代码似乎可以分为以下类别：
- en: '**Luggage**: Like drivers that need to be connected, but may be difficult to
    work with'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行李**：就像需要连接的驾驶员一样，但可能难以合作'
- en: '**Nuts**, **bolts**, and **gears**: Like structs and traits, we have a lot
    of control of how to design'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**螺母**、**螺栓**和**齿轮**：就像结构体和特质一样，我们对如何设计有相当的控制'
- en: '**Deliverables**: Like executables, these must fulfill a specific requirement'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可交付成果**：就像可执行文件一样，这些必须满足特定要求'
- en: We have organized all deliverables by convenience; all luggage by type or by
    purpose; and nuts, bolts, and gears have been organized by type, by purpose, or
    by layer. The result could be worse, and organizing by a different standard does
    not imply that the code will change significantly. Overall, the deliverables are
    supported by fairly maintainable code and the project is going in a good direction.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经根据便利性组织了所有可交付成果；所有行李根据类型或目的进行分类；螺母、螺栓和齿轮根据类型、目的或层次进行组织。结果可能更糟，但按照不同的标准组织并不意味着代码会有显著变化。总的来说，可交付成果由相当可维护的代码支持，项目正在朝着良好的方向发展。
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we examined four code organization principles that can be used
    alone or in combination to develop well-structured projects. The four principles
    of organization by type, by purpose, by layer, and by convenience are helpful
    perspectives for inspiring good architecture choices when structuring larger projects.
    The larger and more complex a project becomes, the more important these decisions
    become, though simultaneously more difficult to change.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了四种代码组织原则，这些原则可以单独使用或组合使用来开发结构良好的项目。按类型、按目的、按层次和按便利性组织的四个组织原则是帮助在构建大型项目时做出良好架构选择的有帮助的视角。项目越大、越复杂，这些决策就越重要，尽管同时改变这些决策也更困难。
- en: Applying these concepts, we restructured the entire project using each principle
    to a varying degree. We also incorporated significant changes to allow interfacing
    with external libraries and applied operations of the elevator, as opposed to
    a closed simulation. Now, the elevators of three buildings should be capable of
    running entirely on the software developed here.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 应用这些概念，我们根据每个原则的不同程度重构了整个项目。我们还进行了重大更改，以允许与外部库进行接口，并应用电梯操作，而不是封闭的模拟。现在，三座建筑的电梯应该能够完全运行我们在这里开发的软件。
- en: In the next chapter, we will learn about mutability and ownership. We have covered
    these concepts to a certain degree already, but the next chapter will demand a
    much more in-depth understanding of specific details and limitations.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于可变性和所有权的知识。我们已经对这些概念进行了一定程度的覆盖，但下一章将要求对具体细节和限制有更深入的理解。
- en: Questions
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are four ways of grouping code into modules?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有四种方法可以将代码分组到模块中吗？
- en: What does FFI stand for?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: FFI代表什么？
- en: Why are unsafe blocks necessary?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么不安全块是必要的？
- en: Is it ever safe to use unsafe blocks?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否在某个时候使用不安全块是安全的？
- en: What is the difference between a `libc::c_int` and an `int32`?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`libc::c_int`和`int32`之间有什么区别？'
- en: Can linked libraries define functions with the same name?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 链接库能否定义具有相同名称的函数？
- en: What type of files can be linked into a Rust project?
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以将哪些类型的文件链接到Rust项目中？
